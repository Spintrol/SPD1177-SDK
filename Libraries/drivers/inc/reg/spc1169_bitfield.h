/*************************************************************************
 * @file     spc1169_bitfield.h
 * @brief    SPC1169 register bit-field definition.
 * @version  V12.0.5
 * @date     5-June-2025
 *
 * @note
 * Copyright (C) 2022 Spintrol Electronic Technology (Shanghai) Co., Ltd.. All rights reserved.
 *
 * @attention
 * THIS SOFTWARE JUST PROVIDES CUSTOMERS WITH CODING INFORMATION
 * REGARDING THEIR PRODUCTS, WHICH AIMS AT SAVING TIME FOR THEM.
 * SPINTROL SHALL NOT BE LIABLE FOR THE USE OF THE SOFTWARE. SPINTROL
 * DOES NOT GUARANTEE THE CORRECTNESS OF THIS SOFTWARE AND RESERVES THE
 * RIGHT TO MODIFY THE SOFTWARE WITHOUT NOTIFICATION.
 *
 ************************************************************************/

#ifndef SPC1169_BITFIELD_H
#define SPC1169_BITFIELD_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Peripheral_Registers_Bits_Definition
  * @{
  */


/******************************************************************************/
/*                                                                            */
/*      SYSTEM:                                                               */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          CID0            VAL
  *  @access     SYSTEM->CID0
  *  @brief      32 LSBs of the 64-bit chip ID
  */
#define CID0_VAL_Pos  (0)
#define CID0_VAL_Msk  (0xFFFFFFFFU << CID0_VAL_Pos)

#define CID0_VAL_(x)  (((x) << CID0_VAL_Pos) & CID0_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          CID1            VAL
  *  @access     SYSTEM->CID1
  *  @brief      32 MSBs of the 64-bit chip ID
  */
#define CID1_VAL_Pos  (0)
#define CID1_VAL_Msk  (0xFFFFFFFFU << CID1_VAL_Pos)

#define CID1_VAL_(x)  (((x) << CID1_VAL_Pos) & CID1_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          UID0            VAL
  *  @access     SYSTEM->UID0
  *  @brief      32 LSBs of the 64-bit unique ID
  */
#define UID0_VAL_Pos  (0)
#define UID0_VAL_Msk  (0xFFFFFFFFU << UID0_VAL_Pos)

#define UID0_VAL_(x)  (((x) << UID0_VAL_Pos) & UID0_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          UID1            VAL
  *  @access     SYSTEM->UID1
  *  @brief      32 MSBs of the 64-bit unique ID
  */
#define UID1_VAL_Pos  (0)
#define UID1_VAL_Msk  (0xFFFFFFFFU << UID1_VAL_Pos)

#define UID1_VAL_(x)  (((x) << UID1_VAL_Pos) & UID1_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RND0            VAL
  *  @access     SYSTEM->RND0
  *  @brief      32 LSBs of the 64-bit random number
  */
#define RND0_VAL_Pos  (0)
#define RND0_VAL_Msk  (0xFFFFFFFFU << RND0_VAL_Pos)

#define RND0_VAL_(x)  (((x) << RND0_VAL_Pos) & RND0_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RND1            VAL
  *  @access     SYSTEM->RND1
  *  @brief      32 MSBs of the 64-bit random number
  */
#define RND1_VAL_Pos  (0)
#define RND1_VAL_Msk  (0xFFFFFFFFU << RND1_VAL_Pos)

#define RND1_VAL_(x)  (((x) << RND1_VAL_Pos) & RND1_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          REV0            VAL
  *  @access     SYSTEM->REV0
  *  @brief      32 LSBs of the 64-bit revision number
  */
#define REV0_VAL_Pos  (0)
#define REV0_VAL_Msk  (0xFFFFFFFFU << REV0_VAL_Pos)

#define REV0_VAL_(x)  (((x) << REV0_VAL_Pos) & REV0_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          REV1            VAL
  *  @access     SYSTEM->REV1
  *  @brief      32 MSBs of the 64-bit revision number
  */
#define REV1_VAL_Pos  (0)
#define REV1_VAL_Msk  (0xFFFFFFFFU << REV1_VAL_Pos)

#define REV1_VAL_(x)  (((x) << REV1_VAL_Pos) & REV1_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       MONPRD
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      System monitor interval. i.e. Wait for (MONPRD*8+1) HCLK cycles to measure the
  *              next item
  */
#define SYSMONCTL_MONPRD_Pos  (0)
#define SYSMONCTL_MONPRD_Msk  (0xFFFFU << SYSMONCTL_MONPRD_Pos)

#define SYSMONCTL_MONPRD_(x)  (((x) << SYSMONCTL_MONPRD_Pos) & SYSMONCTL_MONPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VADCREFEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      13-bit ADC reference voltage monitor enable
  */
#define SYSMONCTL_VADCREFEN_Pos  (16)
#define SYSMONCTL_VADCREFEN_Msk  (0x1U << SYSMONCTL_VADCREFEN_Pos)

#define SYSMONCTL_VADCREFEN_DISABLE  ((0x0U) << SYSMONCTL_VADCREFEN_Pos)
#define SYSMONCTL_VADCREFEN_ENABLE   ((0x1U) << SYSMONCTL_VADCREFEN_Pos)

#define SYSMONCTL_VADCREFEN_(x)  (((x) << SYSMONCTL_VADCREFEN_Pos) & SYSMONCTL_VADCREFEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VDD12EN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      VDD12 monitor enable
  */
#define SYSMONCTL_VDD12EN_Pos  (17)
#define SYSMONCTL_VDD12EN_Msk  (0x1U << SYSMONCTL_VDD12EN_Pos)

#define SYSMONCTL_VDD12EN_DISABLE  ((0x0U) << SYSMONCTL_VDD12EN_Pos)
#define SYSMONCTL_VDD12EN_ENABLE   ((0x1U) << SYSMONCTL_VDD12EN_Pos)

#define SYSMONCTL_VDD12EN_(x)  (((x) << SYSMONCTL_VDD12EN_Pos) & SYSMONCTL_VDD12EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VDD33EN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      VDD33 monitor enable
  */
#define SYSMONCTL_VDD33EN_Pos  (18)
#define SYSMONCTL_VDD33EN_Msk  (0x1U << SYSMONCTL_VDD33EN_Pos)

#define SYSMONCTL_VDD33EN_DISABLE  ((0x0U) << SYSMONCTL_VDD33EN_Pos)
#define SYSMONCTL_VDD33EN_ENABLE   ((0x1U) << SYSMONCTL_VDD33EN_Pos)

#define SYSMONCTL_VDD33EN_(x)  (((x) << SYSMONCTL_VDD33EN_Pos) & SYSMONCTL_VDD33EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       TMCUEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      Controller temperature monitor enable
  */
#define SYSMONCTL_TMCUEN_Pos  (19)
#define SYSMONCTL_TMCUEN_Msk  (0x1U << SYSMONCTL_TMCUEN_Pos)

#define SYSMONCTL_TMCUEN_DISABLE  ((0x0U) << SYSMONCTL_TMCUEN_Pos)
#define SYSMONCTL_TMCUEN_ENABLE   ((0x1U) << SYSMONCTL_TMCUEN_Pos)

#define SYSMONCTL_TMCUEN_(x)  (((x) << SYSMONCTL_TMCUEN_Pos) & SYSMONCTL_TMCUEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       TLINEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      LIN PHY temperature monitor enable
  */
#define SYSMONCTL_TLINEN_Pos  (20)
#define SYSMONCTL_TLINEN_Msk  (0x1U << SYSMONCTL_TLINEN_Pos)

#define SYSMONCTL_TLINEN_DISABLE  ((0x0U) << SYSMONCTL_TLINEN_Pos)
#define SYSMONCTL_TLINEN_ENABLE   ((0x1U) << SYSMONCTL_TLINEN_Pos)

#define SYSMONCTL_TLINEN_(x)  (((x) << SYSMONCTL_TLINEN_Pos) & SYSMONCTL_TLINEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       TPMUEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      Power temperature monitor enable
  */
#define SYSMONCTL_TPMUEN_Pos  (21)
#define SYSMONCTL_TPMUEN_Msk  (0x1U << SYSMONCTL_TPMUEN_Pos)

#define SYSMONCTL_TPMUEN_DISABLE  ((0x0U) << SYSMONCTL_TPMUEN_Pos)
#define SYSMONCTL_TPMUEN_ENABLE   ((0x1U) << SYSMONCTL_TPMUEN_Pos)

#define SYSMONCTL_TPMUEN_(x)  (((x) << SYSMONCTL_TPMUEN_Pos) & SYSMONCTL_TPMUEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VBGEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      Power bandgap monitor enable
  */
#define SYSMONCTL_VBGEN_Pos  (22)
#define SYSMONCTL_VBGEN_Msk  (0x1U << SYSMONCTL_VBGEN_Pos)

#define SYSMONCTL_VBGEN_DISABLE  ((0x0U) << SYSMONCTL_VBGEN_Pos)
#define SYSMONCTL_VBGEN_ENABLE   ((0x1U) << SYSMONCTL_VBGEN_Pos)

#define SYSMONCTL_VBGEN_(x)  (((x) << SYSMONCTL_VBGEN_Pos) & SYSMONCTL_VBGEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VDD5EN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      VDD5 monitor enable
  */
#define SYSMONCTL_VDD5EN_Pos  (23)
#define SYSMONCTL_VDD5EN_Msk  (0x1U << SYSMONCTL_VDD5EN_Pos)

#define SYSMONCTL_VDD5EN_DISABLE  ((0x0U) << SYSMONCTL_VDD5EN_Pos)
#define SYSMONCTL_VDD5EN_ENABLE   ((0x1U) << SYSMONCTL_VDD5EN_Pos)

#define SYSMONCTL_VDD5EN_(x)  (((x) << SYSMONCTL_VDD5EN_Pos) & SYSMONCTL_VDD5EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VMONEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      VMON monitor enable
  */
#define SYSMONCTL_VMONEN_Pos  (24)
#define SYSMONCTL_VMONEN_Msk  (0x1U << SYSMONCTL_VMONEN_Pos)

#define SYSMONCTL_VMONEN_DISABLE  ((0x0U) << SYSMONCTL_VMONEN_Pos)
#define SYSMONCTL_VMONEN_ENABLE   ((0x1U) << SYSMONCTL_VMONEN_Pos)

#define SYSMONCTL_VMONEN_(x)  (((x) << SYSMONCTL_VMONEN_Pos) & SYSMONCTL_VMONEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VCPEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      VCP monitor enable
  */
#define SYSMONCTL_VCPEN_Pos  (25)
#define SYSMONCTL_VCPEN_Msk  (0x1U << SYSMONCTL_VCPEN_Pos)

#define SYSMONCTL_VCPEN_DISABLE  ((0x0U) << SYSMONCTL_VCPEN_Pos)
#define SYSMONCTL_VCPEN_ENABLE   ((0x1U) << SYSMONCTL_VCPEN_Pos)

#define SYSMONCTL_VCPEN_(x)  (((x) << SYSMONCTL_VCPEN_Pos) & SYSMONCTL_VCPEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       VBATEN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      VBAT monitor enable
  */
#define SYSMONCTL_VBATEN_Pos  (26)
#define SYSMONCTL_VBATEN_Msk  (0x1U << SYSMONCTL_VBATEN_Pos)

#define SYSMONCTL_VBATEN_DISABLE  ((0x0U) << SYSMONCTL_VBATEN_Pos)
#define SYSMONCTL_VBATEN_ENABLE   ((0x1U) << SYSMONCTL_VBATEN_Pos)

#define SYSMONCTL_VBATEN_(x)  (((x) << SYSMONCTL_VBATEN_Pos) & SYSMONCTL_VBATEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSMONCTL       SCWIN
  *  @access     SYSTEM->SYSMONCTL
  *  @brief      Both sample and convert time is set to (SCWIN + 1)*4 HCLK cycles
  */
#define SYSMONCTL_SCWIN_Pos  (27)
#define SYSMONCTL_SCWIN_Msk  (0x1FU << SYSMONCTL_SCWIN_Pos)

#define SYSMONCTL_SCWIN_(x)  (((x) << SYSMONCTL_SCWIN_Pos) & SYSMONCTL_SCWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VBATTH          MIN
  *  @access     SYSTEM->VBATTH
  *  @brief      Minimum allowed VBAT monitor code
  */
#define VBATTH_MIN_Pos  (0)
#define VBATTH_MIN_Msk  (0xFFFU << VBATTH_MIN_Pos)

#define VBATTH_MIN_(x)  (((x) << VBATTH_MIN_Pos) & VBATTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VBATTH          MAX
  *  @access     SYSTEM->VBATTH
  *  @brief      Maximum allowed VBAT monitor code
  */
#define VBATTH_MAX_Pos  (16)
#define VBATTH_MAX_Msk  (0xFFFU << VBATTH_MAX_Pos)

#define VBATTH_MAX_(x)  (((x) << VBATTH_MAX_Pos) & VBATTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VCPTH           MIN
  *  @access     SYSTEM->VCPTH
  *  @brief      Minimum allowed VCP monitor code
  */
#define VCPTH_MIN_Pos  (0)
#define VCPTH_MIN_Msk  (0xFFFU << VCPTH_MIN_Pos)

#define VCPTH_MIN_(x)  (((x) << VCPTH_MIN_Pos) & VCPTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VCPTH           MAX
  *  @access     SYSTEM->VCPTH
  *  @brief      Maximum allowed VCP monitor code
  */
#define VCPTH_MAX_Pos  (16)
#define VCPTH_MAX_Msk  (0xFFFU << VCPTH_MAX_Pos)

#define VCPTH_MAX_(x)  (((x) << VCPTH_MAX_Pos) & VCPTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VMONTH          MIN
  *  @access     SYSTEM->VMONTH
  *  @brief      Minimum allowed VMON monitor code
  */
#define VMONTH_MIN_Pos  (0)
#define VMONTH_MIN_Msk  (0xFFFU << VMONTH_MIN_Pos)

#define VMONTH_MIN_(x)  (((x) << VMONTH_MIN_Pos) & VMONTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VMONTH          MAX
  *  @access     SYSTEM->VMONTH
  *  @brief      Maximum allowed VMON monitor code
  */
#define VMONTH_MAX_Pos  (16)
#define VMONTH_MAX_Msk  (0xFFFU << VMONTH_MAX_Pos)

#define VMONTH_MAX_(x)  (((x) << VMONTH_MAX_Pos) & VMONTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD5TH          MIN
  *  @access     SYSTEM->VDD5TH
  *  @brief      Minimum allowed VDD5 monitor code
  */
#define VDD5TH_MIN_Pos  (0)
#define VDD5TH_MIN_Msk  (0xFFFU << VDD5TH_MIN_Pos)

#define VDD5TH_MIN_(x)  (((x) << VDD5TH_MIN_Pos) & VDD5TH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD5TH          MAX
  *  @access     SYSTEM->VDD5TH
  *  @brief      Maximum allowed VDD5 monitor code
  */
#define VDD5TH_MAX_Pos  (16)
#define VDD5TH_MAX_Msk  (0xFFFU << VDD5TH_MAX_Pos)

#define VDD5TH_MAX_(x)  (((x) << VDD5TH_MAX_Pos) & VDD5TH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VBGTH           MIN
  *  @access     SYSTEM->VBGTH
  *  @brief      Minimum allowed power bandgap monitor code
  */
#define VBGTH_MIN_Pos  (0)
#define VBGTH_MIN_Msk  (0xFFFU << VBGTH_MIN_Pos)

#define VBGTH_MIN_(x)  (((x) << VBGTH_MIN_Pos) & VBGTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VBGTH           MAX
  *  @access     SYSTEM->VBGTH
  *  @brief      Maximum allowed power bandgap monitor code
  */
#define VBGTH_MAX_Pos  (16)
#define VBGTH_MAX_Msk  (0xFFFU << VBGTH_MAX_Pos)

#define VBGTH_MAX_(x)  (((x) << VBGTH_MAX_Pos) & VBGTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TPMUTH          MIN
  *  @access     SYSTEM->TPMUTH
  *  @brief      Minimum allowed power module temperature code
  */
#define TPMUTH_MIN_Pos  (0)
#define TPMUTH_MIN_Msk  (0xFFFU << TPMUTH_MIN_Pos)

#define TPMUTH_MIN_(x)  (((x) << TPMUTH_MIN_Pos) & TPMUTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TPMUTH          MAX
  *  @access     SYSTEM->TPMUTH
  *  @brief      Maximum allowed power module temperature code
  */
#define TPMUTH_MAX_Pos  (16)
#define TPMUTH_MAX_Msk  (0xFFFU << TPMUTH_MAX_Pos)

#define TPMUTH_MAX_(x)  (((x) << TPMUTH_MAX_Pos) & TPMUTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TLINTH          MIN
  *  @access     SYSTEM->TLINTH
  *  @brief      Minimum allowed LIN PHY temperature code
  */
#define TLINTH_MIN_Pos  (0)
#define TLINTH_MIN_Msk  (0xFFFU << TLINTH_MIN_Pos)

#define TLINTH_MIN_(x)  (((x) << TLINTH_MIN_Pos) & TLINTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TLINTH          MAX
  *  @access     SYSTEM->TLINTH
  *  @brief      Maximum allowed LIN PHY temperature code
  */
#define TLINTH_MAX_Pos  (16)
#define TLINTH_MAX_Msk  (0xFFFU << TLINTH_MAX_Pos)

#define TLINTH_MAX_(x)  (((x) << TLINTH_MAX_Pos) & TLINTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TMCUTH          MIN
  *  @access     SYSTEM->TMCUTH
  *  @brief      Minimum allowed controller temperature code
  */
#define TMCUTH_MIN_Pos  (0)
#define TMCUTH_MIN_Msk  (0xFFFU << TMCUTH_MIN_Pos)

#define TMCUTH_MIN_(x)  (((x) << TMCUTH_MIN_Pos) & TMCUTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TMCUTH          MAX
  *  @access     SYSTEM->TMCUTH
  *  @brief      Maximum allowed controller temperature code
  */
#define TMCUTH_MAX_Pos  (16)
#define TMCUTH_MAX_Msk  (0xFFFU << TMCUTH_MAX_Pos)

#define TMCUTH_MAX_(x)  (((x) << TMCUTH_MAX_Pos) & TMCUTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD33TH         MIN
  *  @access     SYSTEM->VDD33TH
  *  @brief      Minimum allowed VDD33 monitor code
  */
#define VDD33TH_MIN_Pos  (0)
#define VDD33TH_MIN_Msk  (0xFFFU << VDD33TH_MIN_Pos)

#define VDD33TH_MIN_(x)  (((x) << VDD33TH_MIN_Pos) & VDD33TH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD33TH         MAX
  *  @access     SYSTEM->VDD33TH
  *  @brief      Maximum allowed VDD33 monitor code
  */
#define VDD33TH_MAX_Pos  (16)
#define VDD33TH_MAX_Msk  (0xFFFU << VDD33TH_MAX_Pos)

#define VDD33TH_MAX_(x)  (((x) << VDD33TH_MAX_Pos) & VDD33TH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD12TH         MIN
  *  @access     SYSTEM->VDD12TH
  *  @brief      Minimum allowed VDD12 monitor code
  */
#define VDD12TH_MIN_Pos  (0)
#define VDD12TH_MIN_Msk  (0xFFFU << VDD12TH_MIN_Pos)

#define VDD12TH_MIN_(x)  (((x) << VDD12TH_MIN_Pos) & VDD12TH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD12TH         MAX
  *  @access     SYSTEM->VDD12TH
  *  @brief      Maximum allowed VDD12 monitor code
  */
#define VDD12TH_MAX_Pos  (16)
#define VDD12TH_MAX_Msk  (0xFFFU << VDD12TH_MAX_Pos)

#define VDD12TH_MAX_(x)  (((x) << VDD12TH_MAX_Pos) & VDD12TH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VADCREFTH       MIN
  *  @access     SYSTEM->VADCREFTH
  *  @brief      Minimum allowed 13-bit ADC reference monitor code
  */
#define VADCREFTH_MIN_Pos  (0)
#define VADCREFTH_MIN_Msk  (0xFFFU << VADCREFTH_MIN_Pos)

#define VADCREFTH_MIN_(x)  (((x) << VADCREFTH_MIN_Pos) & VADCREFTH_MIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VADCREFTH       MAX
  *  @access     SYSTEM->VADCREFTH
  *  @brief      Maximum allowed 13-bit ADC reference monitor code
  */
#define VADCREFTH_MAX_Pos  (16)
#define VADCREFTH_MAX_Msk  (0xFFFU << VADCREFTH_MAX_Pos)

#define VADCREFTH_MAX_(x)  (((x) << VADCREFTH_MAX_Pos) & VADCREFTH_MAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VBATCODE        CODE
  *  @access     SYSTEM->VBATCODE
  *  @brief      Measured VBAT code
  */
#define VBATCODE_CODE_Pos  (0)
#define VBATCODE_CODE_Msk  (0xFFFFFFFFU << VBATCODE_CODE_Pos)

#define VBATCODE_CODE_(x)  (((x) << VBATCODE_CODE_Pos) & VBATCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VCPCODE         CODE
  *  @access     SYSTEM->VCPCODE
  *  @brief      Measured VCP code
  */
#define VCPCODE_CODE_Pos  (0)
#define VCPCODE_CODE_Msk  (0xFFFFFFFFU << VCPCODE_CODE_Pos)

#define VCPCODE_CODE_(x)  (((x) << VCPCODE_CODE_Pos) & VCPCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VMONCODE        CODE
  *  @access     SYSTEM->VMONCODE
  *  @brief      Measured VMON code
  */
#define VMONCODE_CODE_Pos  (0)
#define VMONCODE_CODE_Msk  (0xFFFFFFFFU << VMONCODE_CODE_Pos)

#define VMONCODE_CODE_(x)  (((x) << VMONCODE_CODE_Pos) & VMONCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD5CODE        CODE
  *  @access     SYSTEM->VDD5CODE
  *  @brief      Measured VDD5 code
  */
#define VDD5CODE_CODE_Pos  (0)
#define VDD5CODE_CODE_Msk  (0xFFFFFFFFU << VDD5CODE_CODE_Pos)

#define VDD5CODE_CODE_(x)  (((x) << VDD5CODE_CODE_Pos) & VDD5CODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VBGCODE         CODE
  *  @access     SYSTEM->VBGCODE
  *  @brief      Measured power bandgap code
  */
#define VBGCODE_CODE_Pos  (0)
#define VBGCODE_CODE_Msk  (0xFFFFFFFFU << VBGCODE_CODE_Pos)

#define VBGCODE_CODE_(x)  (((x) << VBGCODE_CODE_Pos) & VBGCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TPMUCODE        CODE
  *  @access     SYSTEM->TPMUCODE
  *  @brief      Measured power module temperature code
  */
#define TPMUCODE_CODE_Pos  (0)
#define TPMUCODE_CODE_Msk  (0xFFFFFFFFU << TPMUCODE_CODE_Pos)

#define TPMUCODE_CODE_(x)  (((x) << TPMUCODE_CODE_Pos) & TPMUCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TLINCODE        CODE
  *  @access     SYSTEM->TLINCODE
  *  @brief      Measured LIN PHY temperature code
  */
#define TLINCODE_CODE_Pos  (0)
#define TLINCODE_CODE_Msk  (0xFFFFFFFFU << TLINCODE_CODE_Pos)

#define TLINCODE_CODE_(x)  (((x) << TLINCODE_CODE_Pos) & TLINCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          TMCUCODE        CODE
  *  @access     SYSTEM->TMCUCODE
  *  @brief      Measured controller temperature code
  */
#define TMCUCODE_CODE_Pos  (0)
#define TMCUCODE_CODE_Msk  (0xFFFFFFFFU << TMCUCODE_CODE_Pos)

#define TMCUCODE_CODE_(x)  (((x) << TMCUCODE_CODE_Pos) & TMCUCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD33CODE       CODE
  *  @access     SYSTEM->VDD33CODE
  *  @brief      Measured VDD33 code
  */
#define VDD33CODE_CODE_Pos  (0)
#define VDD33CODE_CODE_Msk  (0xFFFFFFFFU << VDD33CODE_CODE_Pos)

#define VDD33CODE_CODE_(x)  (((x) << VDD33CODE_CODE_Pos) & VDD33CODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VDD12CODE       CODE
  *  @access     SYSTEM->VDD12CODE
  *  @brief      Measured VDD12 code
  */
#define VDD12CODE_CODE_Pos  (0)
#define VDD12CODE_CODE_Msk  (0xFFFFFFFFU << VDD12CODE_CODE_Pos)

#define VDD12CODE_CODE_(x)  (((x) << VDD12CODE_CODE_Pos) & VDD12CODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          VADCREFCODE     CODE
  *  @access     SYSTEM->VADCREFCODE
  *  @brief      Measured 13-bit ADC reference code
  */
#define VADCREFCODE_CODE_Pos  (0)
#define VADCREFCODE_CODE_Msk  (0xFFFFFFFFU << VADCREFCODE_CODE_Pos)

#define VADCREFCODE_CODE_(x)  (((x) << VADCREFCODE_CODE_Pos) & VADCREFCODE_CODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIOWKUPCTL     STOPWKUPPOL
  *  @access     SYSTEM->GPIOWKUPCTL
  *  @brief      GPIO level to wake up from stop state
  */
#define GPIOWKUPCTL_STOPWKUPPOL_Pos  (0)
#define GPIOWKUPCTL_STOPWKUPPOL_Msk  (0x1U << GPIOWKUPCTL_STOPWKUPPOL_Pos)

#define GPIOWKUPCTL_STOPWKUPPOL_ACTIVE_LOW   ((0x0U) << GPIOWKUPCTL_STOPWKUPPOL_Pos)
#define GPIOWKUPCTL_STOPWKUPPOL_ACTIVE_HIGH  ((0x1U) << GPIOWKUPCTL_STOPWKUPPOL_Pos)

#define GPIOWKUPCTL_STOPWKUPPOL_(x)  (((x) << GPIOWKUPCTL_STOPWKUPPOL_Pos) & GPIOWKUPCTL_STOPWKUPPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIOWKUPCTL     STOPWKUPIO
  *  @access     SYSTEM->GPIOWKUPCTL
  *  @brief      GPIO number to wake up from stop state
  */
#define GPIOWKUPCTL_STOPWKUPIO_Pos  (1)
#define GPIOWKUPCTL_STOPWKUPIO_Msk  (0x3FU << GPIOWKUPCTL_STOPWKUPIO_Pos)

#define GPIOWKUPCTL_STOPWKUPIO_(x)  (((x) << GPIOWKUPCTL_STOPWKUPIO_Pos) & GPIOWKUPCTL_STOPWKUPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIOWKUPCTL     STOPWKUPWE
  *  @access     SYSTEM->GPIOWKUPCTL
  *  @brief      GPIO wake up from stop state write enable
  *              This bit should be write 1 at the same time when write STOPWKUPIO and
  *              STOPWKUPPOL bits
  */
#define GPIOWKUPCTL_STOPWKUPWE_Pos  (7)
#define GPIOWKUPCTL_STOPWKUPWE_Msk  (0x1U << GPIOWKUPCTL_STOPWKUPWE_Pos)

#define GPIOWKUPCTL_STOPWKUPWE_DISABLE  ((0x0U) << GPIOWKUPCTL_STOPWKUPWE_Pos)
#define GPIOWKUPCTL_STOPWKUPWE_ENABLE   ((0x1U) << GPIOWKUPCTL_STOPWKUPWE_Pos)

#define GPIOWKUPCTL_STOPWKUPWE_(x)  (((x) << GPIOWKUPCTL_STOPWKUPWE_Pos) & GPIOWKUPCTL_STOPWKUPWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIOWKUPCTL     SLEEPWKUPPOL
  *  @access     SYSTEM->GPIOWKUPCTL
  *  @brief      GPIO level to wake up from sleep state
  */
#define GPIOWKUPCTL_SLEEPWKUPPOL_Pos  (16)
#define GPIOWKUPCTL_SLEEPWKUPPOL_Msk  (0x1U << GPIOWKUPCTL_SLEEPWKUPPOL_Pos)

#define GPIOWKUPCTL_SLEEPWKUPPOL_ACTIVE_LOW   ((0x0U) << GPIOWKUPCTL_SLEEPWKUPPOL_Pos)
#define GPIOWKUPCTL_SLEEPWKUPPOL_ACTIVE_HIGH  ((0x1U) << GPIOWKUPCTL_SLEEPWKUPPOL_Pos)

#define GPIOWKUPCTL_SLEEPWKUPPOL_(x)  (((x) << GPIOWKUPCTL_SLEEPWKUPPOL_Pos) & GPIOWKUPCTL_SLEEPWKUPPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIOWKUPCTL     SLEEPWKUPIO
  *  @access     SYSTEM->GPIOWKUPCTL
  *  @brief      GPIO number to wake up from sleep state
  */
#define GPIOWKUPCTL_SLEEPWKUPIO_Pos  (17)
#define GPIOWKUPCTL_SLEEPWKUPIO_Msk  (0x1U << GPIOWKUPCTL_SLEEPWKUPIO_Pos)

#define GPIOWKUPCTL_SLEEPWKUPIO_GPIO28  ((0x0U) << GPIOWKUPCTL_SLEEPWKUPIO_Pos)
#define GPIOWKUPCTL_SLEEPWKUPIO_GPIO4   ((0x1U) << GPIOWKUPCTL_SLEEPWKUPIO_Pos)

#define GPIOWKUPCTL_SLEEPWKUPIO_(x)  (((x) << GPIOWKUPCTL_SLEEPWKUPIO_Pos) & GPIOWKUPCTL_SLEEPWKUPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIOWKUPCTL     SLEEPWKUPWE
  *  @access     SYSTEM->GPIOWKUPCTL
  *  @brief      GPIO wake up from sleep state write enable
  *              This bit should be write 1 at the same time when write SLEEPWKUPIO and
  *              SLEEPWKUPPOL bits
  */
#define GPIOWKUPCTL_SLEEPWKUPWE_Pos  (18)
#define GPIOWKUPCTL_SLEEPWKUPWE_Msk  (0x1U << GPIOWKUPCTL_SLEEPWKUPWE_Pos)

#define GPIOWKUPCTL_SLEEPWKUPWE_DISABLE  ((0x0U) << GPIOWKUPCTL_SLEEPWKUPWE_Pos)
#define GPIOWKUPCTL_SLEEPWKUPWE_ENABLE   ((0x1U) << GPIOWKUPCTL_SLEEPWKUPWE_Pos)

#define GPIOWKUPCTL_SLEEPWKUPWE_(x)  (((x) << GPIOWKUPCTL_SLEEPWKUPWE_Pos) & GPIOWKUPCTL_SLEEPWKUPWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIONMICTL      POL
  *  @access     SYSTEM->GPIONMICTL
  *  @brief      GPIO edge to trigger the NMI
  */
#define GPIONMICTL_POL_Pos  (0)
#define GPIONMICTL_POL_Msk  (0x1U << GPIONMICTL_POL_Pos)

#define GPIONMICTL_POL_FALLING_EDGE  ((0x0U) << GPIONMICTL_POL_Pos)
#define GPIONMICTL_POL_RISING_EDGE   ((0x1U) << GPIONMICTL_POL_Pos)

#define GPIONMICTL_POL_(x)  (((x) << GPIONMICTL_POL_Pos) & GPIONMICTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          GPIONMICTL      IOSEL
  *  @access     SYSTEM->GPIONMICTL
  *  @brief      GPIO number to trigger the NMI
  */
#define GPIONMICTL_IOSEL_Pos  (1)
#define GPIONMICTL_IOSEL_Msk  (0x3FU << GPIONMICTL_IOSEL_Pos)

#define GPIONMICTL_IOSEL_(x)  (((x) << GPIONMICTL_IOSEL_Pos) & GPIONMICTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VDD12UV
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VDD12 under-volage event flag
  */
#define NMRAWIF_VDD12UV_Pos  (0)
#define NMRAWIF_VDD12UV_Msk  (0x1U << NMRAWIF_VDD12UV_Pos)

#define NMRAWIF_VDD12UV_NOT_OCCUR  ((0x0U) << NMRAWIF_VDD12UV_Pos)
#define NMRAWIF_VDD12UV_OCCUR      ((0x1U) << NMRAWIF_VDD12UV_Pos)

#define NMRAWIF_VDD12UV_(x)  (((x) << NMRAWIF_VDD12UV_Pos) & NMRAWIF_VDD12UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VDD12OV
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VDD12 over-volage event flag
  */
#define NMRAWIF_VDD12OV_Pos  (1)
#define NMRAWIF_VDD12OV_Msk  (0x1U << NMRAWIF_VDD12OV_Pos)

#define NMRAWIF_VDD12OV_NOT_OCCUR  ((0x0U) << NMRAWIF_VDD12OV_Pos)
#define NMRAWIF_VDD12OV_OCCUR      ((0x1U) << NMRAWIF_VDD12OV_Pos)

#define NMRAWIF_VDD12OV_(x)  (((x) << NMRAWIF_VDD12OV_Pos) & NMRAWIF_VDD12OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VDD33UV
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VDD33 under-voltage event flag
  */
#define NMRAWIF_VDD33UV_Pos  (2)
#define NMRAWIF_VDD33UV_Msk  (0x1U << NMRAWIF_VDD33UV_Pos)

#define NMRAWIF_VDD33UV_NOT_OCCUR  ((0x0U) << NMRAWIF_VDD33UV_Pos)
#define NMRAWIF_VDD33UV_OCCUR      ((0x1U) << NMRAWIF_VDD33UV_Pos)

#define NMRAWIF_VDD33UV_(x)  (((x) << NMRAWIF_VDD33UV_Pos) & NMRAWIF_VDD33UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VDD33OV
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VDD33 over-voltage event flag
  */
#define NMRAWIF_VDD33OV_Pos  (3)
#define NMRAWIF_VDD33OV_Msk  (0x1U << NMRAWIF_VDD33OV_Pos)

#define NMRAWIF_VDD33OV_NOT_OCCUR  ((0x0U) << NMRAWIF_VDD33OV_Pos)
#define NMRAWIF_VDD33OV_OCCUR      ((0x1U) << NMRAWIF_VDD33OV_Pos)

#define NMRAWIF_VDD33OV_(x)  (((x) << NMRAWIF_VDD33OV_Pos) & NMRAWIF_VDD33OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         PLLUNLOCK
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched PLL unlock event flag
  *              Detailed reason can be referred to CLKSTS[PLLFAST] and CLKSTS[PLLSLOW]
  */
#define NMRAWIF_PLLUNLOCK_Pos  (4)
#define NMRAWIF_PLLUNLOCK_Msk  (0x1U << NMRAWIF_PLLUNLOCK_Pos)

#define NMRAWIF_PLLUNLOCK_NOT_OCCUR  ((0x0U) << NMRAWIF_PLLUNLOCK_Pos)
#define NMRAWIF_PLLUNLOCK_OCCUR      ((0x1U) << NMRAWIF_PLLUNLOCK_Pos)

#define NMRAWIF_PLLUNLOCK_(x)  (((x) << NMRAWIF_PLLUNLOCK_Pos) & NMRAWIF_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         CLKDETERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched CLKDET error event flag
  *              It means CLKDETCNT is out of the range defined by CLKDETCTH
  */
#define NMRAWIF_CLKDETERR_Pos  (5)
#define NMRAWIF_CLKDETERR_Msk  (0x1U << NMRAWIF_CLKDETERR_Pos)

#define NMRAWIF_CLKDETERR_NOT_OCCUR  ((0x0U) << NMRAWIF_CLKDETERR_Pos)
#define NMRAWIF_CLKDETERR_OCCUR      ((0x1U) << NMRAWIF_CLKDETERR_Pos)

#define NMRAWIF_CLKDETERR_(x)  (((x) << NMRAWIF_CLKDETERR_Pos) & NMRAWIF_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         ROMMBE
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched ROM ECC multi-bit error flag
  */
#define NMRAWIF_ROMMBE_Pos  (6)
#define NMRAWIF_ROMMBE_Msk  (0x1U << NMRAWIF_ROMMBE_Pos)

#define NMRAWIF_ROMMBE_NOT_OCCUR  ((0x0U) << NMRAWIF_ROMMBE_Pos)
#define NMRAWIF_ROMMBE_OCCUR      ((0x1U) << NMRAWIF_ROMMBE_Pos)

#define NMRAWIF_ROMMBE_(x)  (((x) << NMRAWIF_ROMMBE_Pos) & NMRAWIF_ROMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         FLASHMBE
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched FLASH ECC multi-bit error flag
  */
#define NMRAWIF_FLASHMBE_Pos  (7)
#define NMRAWIF_FLASHMBE_Msk  (0x1U << NMRAWIF_FLASHMBE_Pos)

#define NMRAWIF_FLASHMBE_NOT_OCCUR  ((0x0U) << NMRAWIF_FLASHMBE_Pos)
#define NMRAWIF_FLASHMBE_OCCUR      ((0x1U) << NMRAWIF_FLASHMBE_Pos)

#define NMRAWIF_FLASHMBE_(x)  (((x) << NMRAWIF_FLASHMBE_Pos) & NMRAWIF_FLASHMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         RAM0MBE
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched RAM0 ECC multi-bit error flag
  */
#define NMRAWIF_RAM0MBE_Pos  (8)
#define NMRAWIF_RAM0MBE_Msk  (0x1U << NMRAWIF_RAM0MBE_Pos)

#define NMRAWIF_RAM0MBE_NOT_OCCUR  ((0x0U) << NMRAWIF_RAM0MBE_Pos)
#define NMRAWIF_RAM0MBE_OCCUR      ((0x1U) << NMRAWIF_RAM0MBE_Pos)

#define NMRAWIF_RAM0MBE_(x)  (((x) << NMRAWIF_RAM0MBE_Pos) & NMRAWIF_RAM0MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         RAM1MBE
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched RAM1 ECC multi-bit error flag
  */
#define NMRAWIF_RAM1MBE_Pos  (9)
#define NMRAWIF_RAM1MBE_Msk  (0x1U << NMRAWIF_RAM1MBE_Pos)

#define NMRAWIF_RAM1MBE_NOT_OCCUR  ((0x0U) << NMRAWIF_RAM1MBE_Pos)
#define NMRAWIF_RAM1MBE_OCCUR      ((0x1U) << NMRAWIF_RAM1MBE_Pos)

#define NMRAWIF_RAM1MBE_(x)  (((x) << NMRAWIF_RAM1MBE_Pos) & NMRAWIF_RAM1MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         WDT0
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched WDT0 timeout flag
  */
#define NMRAWIF_WDT0_Pos  (10)
#define NMRAWIF_WDT0_Msk  (0x1U << NMRAWIF_WDT0_Pos)

#define NMRAWIF_WDT0_NOT_OCCUR  ((0x0U) << NMRAWIF_WDT0_Pos)
#define NMRAWIF_WDT0_OCCUR      ((0x1U) << NMRAWIF_WDT0_Pos)

#define NMRAWIF_WDT0_(x)  (((x) << NMRAWIF_WDT0_Pos) & NMRAWIF_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         GPIONMI
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched GPIO non-maskable interrupt event flag
  */
#define NMRAWIF_GPIONMI_Pos  (11)
#define NMRAWIF_GPIONMI_Msk  (0x1U << NMRAWIF_GPIONMI_Pos)

#define NMRAWIF_GPIONMI_NOT_OCCUR  ((0x0U) << NMRAWIF_GPIONMI_Pos)
#define NMRAWIF_GPIONMI_OCCUR      ((0x1U) << NMRAWIF_GPIONMI_Pos)

#define NMRAWIF_GPIONMI_(x)  (((x) << NMRAWIF_GPIONMI_Pos) & NMRAWIF_GPIONMI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VADCREFERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched 13-bit ADC reference monitor error flag
  */
#define NMRAWIF_VADCREFERR_Pos  (12)
#define NMRAWIF_VADCREFERR_Msk  (0x1U << NMRAWIF_VADCREFERR_Pos)

#define NMRAWIF_VADCREFERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VADCREFERR_Pos)
#define NMRAWIF_VADCREFERR_OCCUR      ((0x1U) << NMRAWIF_VADCREFERR_Pos)

#define NMRAWIF_VADCREFERR_(x)  (((x) << NMRAWIF_VADCREFERR_Pos) & NMRAWIF_VADCREFERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VDD12ERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VDD12 monitor error flag
  */
#define NMRAWIF_VDD12ERR_Pos  (13)
#define NMRAWIF_VDD12ERR_Msk  (0x1U << NMRAWIF_VDD12ERR_Pos)

#define NMRAWIF_VDD12ERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VDD12ERR_Pos)
#define NMRAWIF_VDD12ERR_OCCUR      ((0x1U) << NMRAWIF_VDD12ERR_Pos)

#define NMRAWIF_VDD12ERR_(x)  (((x) << NMRAWIF_VDD12ERR_Pos) & NMRAWIF_VDD12ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VDD33ERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VDD33 monitor error flag
  */
#define NMRAWIF_VDD33ERR_Pos  (14)
#define NMRAWIF_VDD33ERR_Msk  (0x1U << NMRAWIF_VDD33ERR_Pos)

#define NMRAWIF_VDD33ERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VDD33ERR_Pos)
#define NMRAWIF_VDD33ERR_OCCUR      ((0x1U) << NMRAWIF_VDD33ERR_Pos)

#define NMRAWIF_VDD33ERR_(x)  (((x) << NMRAWIF_VDD33ERR_Pos) & NMRAWIF_VDD33ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         TMCUERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched controller temperature monitor error flag
  */
#define NMRAWIF_TMCUERR_Pos  (15)
#define NMRAWIF_TMCUERR_Msk  (0x1U << NMRAWIF_TMCUERR_Pos)

#define NMRAWIF_TMCUERR_NOT_OCCUR  ((0x0U) << NMRAWIF_TMCUERR_Pos)
#define NMRAWIF_TMCUERR_OCCUR      ((0x1U) << NMRAWIF_TMCUERR_Pos)

#define NMRAWIF_TMCUERR_(x)  (((x) << NMRAWIF_TMCUERR_Pos) & NMRAWIF_TMCUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         TLINERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched LIN PHY temperature monitor error flag
  */
#define NMRAWIF_TLINERR_Pos  (16)
#define NMRAWIF_TLINERR_Msk  (0x1U << NMRAWIF_TLINERR_Pos)

#define NMRAWIF_TLINERR_NOT_OCCUR  ((0x0U) << NMRAWIF_TLINERR_Pos)
#define NMRAWIF_TLINERR_OCCUR      ((0x1U) << NMRAWIF_TLINERR_Pos)

#define NMRAWIF_TLINERR_(x)  (((x) << NMRAWIF_TLINERR_Pos) & NMRAWIF_TLINERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         TPMUERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched power module temperature monitor error flag
  */
#define NMRAWIF_TPMUERR_Pos  (17)
#define NMRAWIF_TPMUERR_Msk  (0x1U << NMRAWIF_TPMUERR_Pos)

#define NMRAWIF_TPMUERR_NOT_OCCUR  ((0x0U) << NMRAWIF_TPMUERR_Pos)
#define NMRAWIF_TPMUERR_OCCUR      ((0x1U) << NMRAWIF_TPMUERR_Pos)

#define NMRAWIF_TPMUERR_(x)  (((x) << NMRAWIF_TPMUERR_Pos) & NMRAWIF_TPMUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VBGERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched power bandgap monitor error flag
  */
#define NMRAWIF_VBGERR_Pos  (18)
#define NMRAWIF_VBGERR_Msk  (0x1U << NMRAWIF_VBGERR_Pos)

#define NMRAWIF_VBGERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VBGERR_Pos)
#define NMRAWIF_VBGERR_OCCUR      ((0x1U) << NMRAWIF_VBGERR_Pos)

#define NMRAWIF_VBGERR_(x)  (((x) << NMRAWIF_VBGERR_Pos) & NMRAWIF_VBGERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VDD5ERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VDD5 monitor error flag
  */
#define NMRAWIF_VDD5ERR_Pos  (19)
#define NMRAWIF_VDD5ERR_Msk  (0x1U << NMRAWIF_VDD5ERR_Pos)

#define NMRAWIF_VDD5ERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VDD5ERR_Pos)
#define NMRAWIF_VDD5ERR_OCCUR      ((0x1U) << NMRAWIF_VDD5ERR_Pos)

#define NMRAWIF_VDD5ERR_(x)  (((x) << NMRAWIF_VDD5ERR_Pos) & NMRAWIF_VDD5ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VMONERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VMON monitor error flag
  */
#define NMRAWIF_VMONERR_Pos  (20)
#define NMRAWIF_VMONERR_Msk  (0x1U << NMRAWIF_VMONERR_Pos)

#define NMRAWIF_VMONERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VMONERR_Pos)
#define NMRAWIF_VMONERR_OCCUR      ((0x1U) << NMRAWIF_VMONERR_Pos)

#define NMRAWIF_VMONERR_(x)  (((x) << NMRAWIF_VMONERR_Pos) & NMRAWIF_VMONERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VCPERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VCP monitor error flag
  */
#define NMRAWIF_VCPERR_Pos  (21)
#define NMRAWIF_VCPERR_Msk  (0x1U << NMRAWIF_VCPERR_Pos)

#define NMRAWIF_VCPERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VCPERR_Pos)
#define NMRAWIF_VCPERR_OCCUR      ((0x1U) << NMRAWIF_VCPERR_Pos)

#define NMRAWIF_VCPERR_(x)  (((x) << NMRAWIF_VCPERR_Pos) & NMRAWIF_VCPERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         VBATERR
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched VBAT monitor error flag
  */
#define NMRAWIF_VBATERR_Pos  (22)
#define NMRAWIF_VBATERR_Msk  (0x1U << NMRAWIF_VBATERR_Pos)

#define NMRAWIF_VBATERR_NOT_OCCUR  ((0x0U) << NMRAWIF_VBATERR_Pos)
#define NMRAWIF_VBATERR_OCCUR      ((0x1U) << NMRAWIF_VBATERR_Pos)

#define NMRAWIF_VBATERR_(x)  (((x) << NMRAWIF_VBATERR_Pos) & NMRAWIF_VBATERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         AHBMBE
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched AHB address or data ECC multi-bit error flag
  */
#define NMRAWIF_AHBMBE_Pos  (23)
#define NMRAWIF_AHBMBE_Msk  (0x1U << NMRAWIF_AHBMBE_Pos)

#define NMRAWIF_AHBMBE_NOT_OCCUR  ((0x0U) << NMRAWIF_AHBMBE_Pos)
#define NMRAWIF_AHBMBE_OCCUR      ((0x1U) << NMRAWIF_AHBMBE_Pos)

#define NMRAWIF_AHBMBE_(x)  (((x) << NMRAWIF_AHBMBE_Pos) & NMRAWIF_AHBMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         DEBUG
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched debug mode entry flag
  */
#define NMRAWIF_DEBUG_Pos  (24)
#define NMRAWIF_DEBUG_Msk  (0x1U << NMRAWIF_DEBUG_Pos)

#define NMRAWIF_DEBUG_NOT_OCCUR  ((0x0U) << NMRAWIF_DEBUG_Pos)
#define NMRAWIF_DEBUG_OCCUR      ((0x1U) << NMRAWIF_DEBUG_Pos)

#define NMRAWIF_DEBUG_(x)  (((x) << NMRAWIF_DEBUG_Pos) & NMRAWIF_DEBUG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMRAWIF         PTM
  *  @access     SYSTEM->NMRAWIF
  *  @brief      Latched production test mode entry flag
  */
#define NMRAWIF_PTM_Pos  (25)
#define NMRAWIF_PTM_Msk  (0x1U << NMRAWIF_PTM_Pos)

#define NMRAWIF_PTM_NOT_OCCUR  ((0x0U) << NMRAWIF_PTM_Pos)
#define NMRAWIF_PTM_OCCUR      ((0x1U) << NMRAWIF_PTM_Pos)

#define NMRAWIF_PTM_(x)  (((x) << NMRAWIF_PTM_Pos) & NMRAWIF_PTM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VDD12UV
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VDD12 under-volage interrupt flag
  */
#define NMIF_VDD12UV_Pos  (0)
#define NMIF_VDD12UV_Msk  (0x1U << NMIF_VDD12UV_Pos)

#define NMIF_VDD12UV_NOT_OCCUR  ((0x0U) << NMIF_VDD12UV_Pos)
#define NMIF_VDD12UV_OCCUR      ((0x1U) << NMIF_VDD12UV_Pos)

#define NMIF_VDD12UV_(x)  (((x) << NMIF_VDD12UV_Pos) & NMIF_VDD12UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VDD12OV
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VDD12 over-volage interrupt flag
  */
#define NMIF_VDD12OV_Pos  (1)
#define NMIF_VDD12OV_Msk  (0x1U << NMIF_VDD12OV_Pos)

#define NMIF_VDD12OV_NOT_OCCUR  ((0x0U) << NMIF_VDD12OV_Pos)
#define NMIF_VDD12OV_OCCUR      ((0x1U) << NMIF_VDD12OV_Pos)

#define NMIF_VDD12OV_(x)  (((x) << NMIF_VDD12OV_Pos) & NMIF_VDD12OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VDD33UV
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VDD33 under-voltage interrupt flag
  */
#define NMIF_VDD33UV_Pos  (2)
#define NMIF_VDD33UV_Msk  (0x1U << NMIF_VDD33UV_Pos)

#define NMIF_VDD33UV_NOT_OCCUR  ((0x0U) << NMIF_VDD33UV_Pos)
#define NMIF_VDD33UV_OCCUR      ((0x1U) << NMIF_VDD33UV_Pos)

#define NMIF_VDD33UV_(x)  (((x) << NMIF_VDD33UV_Pos) & NMIF_VDD33UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VDD33OV
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VDD33 over-voltage interrupt flag
  */
#define NMIF_VDD33OV_Pos  (3)
#define NMIF_VDD33OV_Msk  (0x1U << NMIF_VDD33OV_Pos)

#define NMIF_VDD33OV_NOT_OCCUR  ((0x0U) << NMIF_VDD33OV_Pos)
#define NMIF_VDD33OV_OCCUR      ((0x1U) << NMIF_VDD33OV_Pos)

#define NMIF_VDD33OV_(x)  (((x) << NMIF_VDD33OV_Pos) & NMIF_VDD33OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            PLLUNLOCK
  *  @access     SYSTEM->NMIF
  *  @brief      Latched PLL unlock interrupt flag
  */
#define NMIF_PLLUNLOCK_Pos  (4)
#define NMIF_PLLUNLOCK_Msk  (0x1U << NMIF_PLLUNLOCK_Pos)

#define NMIF_PLLUNLOCK_NOT_OCCUR  ((0x0U) << NMIF_PLLUNLOCK_Pos)
#define NMIF_PLLUNLOCK_OCCUR      ((0x1U) << NMIF_PLLUNLOCK_Pos)

#define NMIF_PLLUNLOCK_(x)  (((x) << NMIF_PLLUNLOCK_Pos) & NMIF_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            CLKDETERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched CLKDET error interrupt flag
  */
#define NMIF_CLKDETERR_Pos  (5)
#define NMIF_CLKDETERR_Msk  (0x1U << NMIF_CLKDETERR_Pos)

#define NMIF_CLKDETERR_NOT_OCCUR  ((0x0U) << NMIF_CLKDETERR_Pos)
#define NMIF_CLKDETERR_OCCUR      ((0x1U) << NMIF_CLKDETERR_Pos)

#define NMIF_CLKDETERR_(x)  (((x) << NMIF_CLKDETERR_Pos) & NMIF_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            ROMMBE
  *  @access     SYSTEM->NMIF
  *  @brief      Latched ROM ECC multi-bit error interrupt flag
  */
#define NMIF_ROMMBE_Pos  (6)
#define NMIF_ROMMBE_Msk  (0x1U << NMIF_ROMMBE_Pos)

#define NMIF_ROMMBE_NOT_OCCUR  ((0x0U) << NMIF_ROMMBE_Pos)
#define NMIF_ROMMBE_OCCUR      ((0x1U) << NMIF_ROMMBE_Pos)

#define NMIF_ROMMBE_(x)  (((x) << NMIF_ROMMBE_Pos) & NMIF_ROMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            FLASHMBE
  *  @access     SYSTEM->NMIF
  *  @brief      Latched FLASH ECC multi-bit error interrupt flag
  */
#define NMIF_FLASHMBE_Pos  (7)
#define NMIF_FLASHMBE_Msk  (0x1U << NMIF_FLASHMBE_Pos)

#define NMIF_FLASHMBE_NOT_OCCUR  ((0x0U) << NMIF_FLASHMBE_Pos)
#define NMIF_FLASHMBE_OCCUR      ((0x1U) << NMIF_FLASHMBE_Pos)

#define NMIF_FLASHMBE_(x)  (((x) << NMIF_FLASHMBE_Pos) & NMIF_FLASHMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            RAM0MBE
  *  @access     SYSTEM->NMIF
  *  @brief      Latched RAM0 ECC multi-bit error interrupt flag
  */
#define NMIF_RAM0MBE_Pos  (8)
#define NMIF_RAM0MBE_Msk  (0x1U << NMIF_RAM0MBE_Pos)

#define NMIF_RAM0MBE_NOT_OCCUR  ((0x0U) << NMIF_RAM0MBE_Pos)
#define NMIF_RAM0MBE_OCCUR      ((0x1U) << NMIF_RAM0MBE_Pos)

#define NMIF_RAM0MBE_(x)  (((x) << NMIF_RAM0MBE_Pos) & NMIF_RAM0MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            RAM1MBE
  *  @access     SYSTEM->NMIF
  *  @brief      Latched RAM1 ECC multi-bit error interrupt flag
  */
#define NMIF_RAM1MBE_Pos  (9)
#define NMIF_RAM1MBE_Msk  (0x1U << NMIF_RAM1MBE_Pos)

#define NMIF_RAM1MBE_NOT_OCCUR  ((0x0U) << NMIF_RAM1MBE_Pos)
#define NMIF_RAM1MBE_OCCUR      ((0x1U) << NMIF_RAM1MBE_Pos)

#define NMIF_RAM1MBE_(x)  (((x) << NMIF_RAM1MBE_Pos) & NMIF_RAM1MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            WDT0
  *  @access     SYSTEM->NMIF
  *  @brief      Latched WDT0 interrupt flag
  */
#define NMIF_WDT0_Pos  (10)
#define NMIF_WDT0_Msk  (0x1U << NMIF_WDT0_Pos)

#define NMIF_WDT0_NOT_OCCUR  ((0x0U) << NMIF_WDT0_Pos)
#define NMIF_WDT0_OCCUR      ((0x1U) << NMIF_WDT0_Pos)

#define NMIF_WDT0_(x)  (((x) << NMIF_WDT0_Pos) & NMIF_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            GPIONMI
  *  @access     SYSTEM->NMIF
  *  @brief      Latched GPIO non-maskable interrupt flag
  */
#define NMIF_GPIONMI_Pos  (11)
#define NMIF_GPIONMI_Msk  (0x1U << NMIF_GPIONMI_Pos)

#define NMIF_GPIONMI_NOT_OCCUR  ((0x0U) << NMIF_GPIONMI_Pos)
#define NMIF_GPIONMI_OCCUR      ((0x1U) << NMIF_GPIONMI_Pos)

#define NMIF_GPIONMI_(x)  (((x) << NMIF_GPIONMI_Pos) & NMIF_GPIONMI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VADCREFERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched 13-bit ADC reference monitor error interrupt flag
  */
#define NMIF_VADCREFERR_Pos  (12)
#define NMIF_VADCREFERR_Msk  (0x1U << NMIF_VADCREFERR_Pos)

#define NMIF_VADCREFERR_NOT_OCCUR  ((0x0U) << NMIF_VADCREFERR_Pos)
#define NMIF_VADCREFERR_OCCUR      ((0x1U) << NMIF_VADCREFERR_Pos)

#define NMIF_VADCREFERR_(x)  (((x) << NMIF_VADCREFERR_Pos) & NMIF_VADCREFERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VDD12ERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VDD12 monitor error interrupt flag
  */
#define NMIF_VDD12ERR_Pos  (13)
#define NMIF_VDD12ERR_Msk  (0x1U << NMIF_VDD12ERR_Pos)

#define NMIF_VDD12ERR_NOT_OCCUR  ((0x0U) << NMIF_VDD12ERR_Pos)
#define NMIF_VDD12ERR_OCCUR      ((0x1U) << NMIF_VDD12ERR_Pos)

#define NMIF_VDD12ERR_(x)  (((x) << NMIF_VDD12ERR_Pos) & NMIF_VDD12ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VDD33ERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VDD33 monitor error interrupt flag
  */
#define NMIF_VDD33ERR_Pos  (14)
#define NMIF_VDD33ERR_Msk  (0x1U << NMIF_VDD33ERR_Pos)

#define NMIF_VDD33ERR_NOT_OCCUR  ((0x0U) << NMIF_VDD33ERR_Pos)
#define NMIF_VDD33ERR_OCCUR      ((0x1U) << NMIF_VDD33ERR_Pos)

#define NMIF_VDD33ERR_(x)  (((x) << NMIF_VDD33ERR_Pos) & NMIF_VDD33ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            TMCUERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched controller temperature monitor error interrupt flag
  */
#define NMIF_TMCUERR_Pos  (15)
#define NMIF_TMCUERR_Msk  (0x1U << NMIF_TMCUERR_Pos)

#define NMIF_TMCUERR_NOT_OCCUR  ((0x0U) << NMIF_TMCUERR_Pos)
#define NMIF_TMCUERR_OCCUR      ((0x1U) << NMIF_TMCUERR_Pos)

#define NMIF_TMCUERR_(x)  (((x) << NMIF_TMCUERR_Pos) & NMIF_TMCUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            TLINERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched LIN PHY temperature monitor error interrupt flag
  */
#define NMIF_TLINERR_Pos  (16)
#define NMIF_TLINERR_Msk  (0x1U << NMIF_TLINERR_Pos)

#define NMIF_TLINERR_NOT_OCCUR  ((0x0U) << NMIF_TLINERR_Pos)
#define NMIF_TLINERR_OCCUR      ((0x1U) << NMIF_TLINERR_Pos)

#define NMIF_TLINERR_(x)  (((x) << NMIF_TLINERR_Pos) & NMIF_TLINERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            TPMUERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched power module temperature monitor error interrupt flag
  */
#define NMIF_TPMUERR_Pos  (17)
#define NMIF_TPMUERR_Msk  (0x1U << NMIF_TPMUERR_Pos)

#define NMIF_TPMUERR_NOT_OCCUR  ((0x0U) << NMIF_TPMUERR_Pos)
#define NMIF_TPMUERR_OCCUR      ((0x1U) << NMIF_TPMUERR_Pos)

#define NMIF_TPMUERR_(x)  (((x) << NMIF_TPMUERR_Pos) & NMIF_TPMUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VBGERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched power bandgap monitor error interrupt flag
  */
#define NMIF_VBGERR_Pos  (18)
#define NMIF_VBGERR_Msk  (0x1U << NMIF_VBGERR_Pos)

#define NMIF_VBGERR_NOT_OCCUR  ((0x0U) << NMIF_VBGERR_Pos)
#define NMIF_VBGERR_OCCUR      ((0x1U) << NMIF_VBGERR_Pos)

#define NMIF_VBGERR_(x)  (((x) << NMIF_VBGERR_Pos) & NMIF_VBGERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VDD5ERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VDD5 monitor error interrupt flag
  */
#define NMIF_VDD5ERR_Pos  (19)
#define NMIF_VDD5ERR_Msk  (0x1U << NMIF_VDD5ERR_Pos)

#define NMIF_VDD5ERR_NOT_OCCUR  ((0x0U) << NMIF_VDD5ERR_Pos)
#define NMIF_VDD5ERR_OCCUR      ((0x1U) << NMIF_VDD5ERR_Pos)

#define NMIF_VDD5ERR_(x)  (((x) << NMIF_VDD5ERR_Pos) & NMIF_VDD5ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VMONERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VMON monitor error interrupt flag
  */
#define NMIF_VMONERR_Pos  (20)
#define NMIF_VMONERR_Msk  (0x1U << NMIF_VMONERR_Pos)

#define NMIF_VMONERR_NOT_OCCUR  ((0x0U) << NMIF_VMONERR_Pos)
#define NMIF_VMONERR_OCCUR      ((0x1U) << NMIF_VMONERR_Pos)

#define NMIF_VMONERR_(x)  (((x) << NMIF_VMONERR_Pos) & NMIF_VMONERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VCPERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VCP monitor error interrupt flag
  */
#define NMIF_VCPERR_Pos  (21)
#define NMIF_VCPERR_Msk  (0x1U << NMIF_VCPERR_Pos)

#define NMIF_VCPERR_NOT_OCCUR  ((0x0U) << NMIF_VCPERR_Pos)
#define NMIF_VCPERR_OCCUR      ((0x1U) << NMIF_VCPERR_Pos)

#define NMIF_VCPERR_(x)  (((x) << NMIF_VCPERR_Pos) & NMIF_VCPERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            VBATERR
  *  @access     SYSTEM->NMIF
  *  @brief      Latched VBAT monitor error interrupt flag
  */
#define NMIF_VBATERR_Pos  (22)
#define NMIF_VBATERR_Msk  (0x1U << NMIF_VBATERR_Pos)

#define NMIF_VBATERR_NOT_OCCUR  ((0x0U) << NMIF_VBATERR_Pos)
#define NMIF_VBATERR_OCCUR      ((0x1U) << NMIF_VBATERR_Pos)

#define NMIF_VBATERR_(x)  (((x) << NMIF_VBATERR_Pos) & NMIF_VBATERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            AHBMBE
  *  @access     SYSTEM->NMIF
  *  @brief      Latched AHB address or data ECC multi-bit error interrupt flag
  */
#define NMIF_AHBMBE_Pos  (23)
#define NMIF_AHBMBE_Msk  (0x1U << NMIF_AHBMBE_Pos)

#define NMIF_AHBMBE_NOT_OCCUR  ((0x0U) << NMIF_AHBMBE_Pos)
#define NMIF_AHBMBE_OCCUR      ((0x1U) << NMIF_AHBMBE_Pos)

#define NMIF_AHBMBE_(x)  (((x) << NMIF_AHBMBE_Pos) & NMIF_AHBMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            DEBUG
  *  @access     SYSTEM->NMIF
  *  @brief      Latched debug mode entry interrupt flag
  */
#define NMIF_DEBUG_Pos  (24)
#define NMIF_DEBUG_Msk  (0x1U << NMIF_DEBUG_Pos)

#define NMIF_DEBUG_NOT_OCCUR  ((0x0U) << NMIF_DEBUG_Pos)
#define NMIF_DEBUG_OCCUR      ((0x1U) << NMIF_DEBUG_Pos)

#define NMIF_DEBUG_(x)  (((x) << NMIF_DEBUG_Pos) & NMIF_DEBUG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            PTM
  *  @access     SYSTEM->NMIF
  *  @brief      Latched production test mode entry interrupt flag
  */
#define NMIF_PTM_Pos  (25)
#define NMIF_PTM_Msk  (0x1U << NMIF_PTM_Pos)

#define NMIF_PTM_NOT_OCCUR  ((0x0U) << NMIF_PTM_Pos)
#define NMIF_PTM_OCCUR      ((0x1U) << NMIF_PTM_Pos)

#define NMIF_PTM_(x)  (((x) << NMIF_PTM_Pos) & NMIF_PTM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIF            INT
  *  @access     SYSTEM->NMIF
  *  @brief      Global non-maskable interrupt flag
  */
#define NMIF_INT_Pos  (26)
#define NMIF_INT_Msk  (0x1U << NMIF_INT_Pos)

#define NMIF_INT_NOT_OCCUR  ((0x0U) << NMIF_INT_Pos)
#define NMIF_INT_OCCUR      ((0x1U) << NMIF_INT_Pos)

#define NMIF_INT_(x)  (((x) << NMIF_INT_Pos) & NMIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VDD12UV
  *  @access     SYSTEM->NMIC
  *  @brief      VDD12 under-volage interrupt clear
  */
#define NMIC_VDD12UV_Pos  (0)
#define NMIC_VDD12UV_Msk  (0x1U << NMIC_VDD12UV_Pos)

#define NMIC_VDD12UV_NO_EFFECT  ((0x0U) << NMIC_VDD12UV_Pos)
#define NMIC_VDD12UV_CLEAR      ((0x1U) << NMIC_VDD12UV_Pos)

#define NMIC_VDD12UV_(x)  (((x) << NMIC_VDD12UV_Pos) & NMIC_VDD12UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VDD12OV
  *  @access     SYSTEM->NMIC
  *  @brief      VDD12 over-volage interrupt clear
  */
#define NMIC_VDD12OV_Pos  (1)
#define NMIC_VDD12OV_Msk  (0x1U << NMIC_VDD12OV_Pos)

#define NMIC_VDD12OV_NO_EFFECT  ((0x0U) << NMIC_VDD12OV_Pos)
#define NMIC_VDD12OV_CLEAR      ((0x1U) << NMIC_VDD12OV_Pos)

#define NMIC_VDD12OV_(x)  (((x) << NMIC_VDD12OV_Pos) & NMIC_VDD12OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VDD33UV
  *  @access     SYSTEM->NMIC
  *  @brief      VDD33 under-voltage interrupt clear
  */
#define NMIC_VDD33UV_Pos  (2)
#define NMIC_VDD33UV_Msk  (0x1U << NMIC_VDD33UV_Pos)

#define NMIC_VDD33UV_NO_EFFECT  ((0x0U) << NMIC_VDD33UV_Pos)
#define NMIC_VDD33UV_CLEAR      ((0x1U) << NMIC_VDD33UV_Pos)

#define NMIC_VDD33UV_(x)  (((x) << NMIC_VDD33UV_Pos) & NMIC_VDD33UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VDD33OV
  *  @access     SYSTEM->NMIC
  *  @brief      VDD33 over-voltage interrupt clear
  */
#define NMIC_VDD33OV_Pos  (3)
#define NMIC_VDD33OV_Msk  (0x1U << NMIC_VDD33OV_Pos)

#define NMIC_VDD33OV_NO_EFFECT  ((0x0U) << NMIC_VDD33OV_Pos)
#define NMIC_VDD33OV_CLEAR      ((0x1U) << NMIC_VDD33OV_Pos)

#define NMIC_VDD33OV_(x)  (((x) << NMIC_VDD33OV_Pos) & NMIC_VDD33OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            PLLUNLOCK
  *  @access     SYSTEM->NMIC
  *  @brief      PLL unlock interrupt clear
  */
#define NMIC_PLLUNLOCK_Pos  (4)
#define NMIC_PLLUNLOCK_Msk  (0x1U << NMIC_PLLUNLOCK_Pos)

#define NMIC_PLLUNLOCK_NO_EFFECT  ((0x0U) << NMIC_PLLUNLOCK_Pos)
#define NMIC_PLLUNLOCK_CLEAR      ((0x1U) << NMIC_PLLUNLOCK_Pos)

#define NMIC_PLLUNLOCK_(x)  (((x) << NMIC_PLLUNLOCK_Pos) & NMIC_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            CLKDETERR
  *  @access     SYSTEM->NMIC
  *  @brief      CLKDET error interrupt clear
  */
#define NMIC_CLKDETERR_Pos  (5)
#define NMIC_CLKDETERR_Msk  (0x1U << NMIC_CLKDETERR_Pos)

#define NMIC_CLKDETERR_NO_EFFECT  ((0x0U) << NMIC_CLKDETERR_Pos)
#define NMIC_CLKDETERR_CLEAR      ((0x1U) << NMIC_CLKDETERR_Pos)

#define NMIC_CLKDETERR_(x)  (((x) << NMIC_CLKDETERR_Pos) & NMIC_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            ROMMBE
  *  @access     SYSTEM->NMIC
  *  @brief      ROM ECC multi-bit error interrupt clear
  */
#define NMIC_ROMMBE_Pos  (6)
#define NMIC_ROMMBE_Msk  (0x1U << NMIC_ROMMBE_Pos)

#define NMIC_ROMMBE_NO_EFFECT  ((0x0U) << NMIC_ROMMBE_Pos)
#define NMIC_ROMMBE_CLEAR      ((0x1U) << NMIC_ROMMBE_Pos)

#define NMIC_ROMMBE_(x)  (((x) << NMIC_ROMMBE_Pos) & NMIC_ROMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            FLASHMBE
  *  @access     SYSTEM->NMIC
  *  @brief      FLASH ECC multi-bit error interrupt clear
  */
#define NMIC_FLASHMBE_Pos  (7)
#define NMIC_FLASHMBE_Msk  (0x1U << NMIC_FLASHMBE_Pos)

#define NMIC_FLASHMBE_NO_EFFECT  ((0x0U) << NMIC_FLASHMBE_Pos)
#define NMIC_FLASHMBE_CLEAR      ((0x1U) << NMIC_FLASHMBE_Pos)

#define NMIC_FLASHMBE_(x)  (((x) << NMIC_FLASHMBE_Pos) & NMIC_FLASHMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            RAM0MBE
  *  @access     SYSTEM->NMIC
  *  @brief      RAM0 ECC multi-bit error interrupt clear
  */
#define NMIC_RAM0MBE_Pos  (8)
#define NMIC_RAM0MBE_Msk  (0x1U << NMIC_RAM0MBE_Pos)

#define NMIC_RAM0MBE_NO_EFFECT  ((0x0U) << NMIC_RAM0MBE_Pos)
#define NMIC_RAM0MBE_CLEAR      ((0x1U) << NMIC_RAM0MBE_Pos)

#define NMIC_RAM0MBE_(x)  (((x) << NMIC_RAM0MBE_Pos) & NMIC_RAM0MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            RAM1MBE
  *  @access     SYSTEM->NMIC
  *  @brief      RAM1 ECC multi-bit error interrupt clear
  */
#define NMIC_RAM1MBE_Pos  (9)
#define NMIC_RAM1MBE_Msk  (0x1U << NMIC_RAM1MBE_Pos)

#define NMIC_RAM1MBE_NO_EFFECT  ((0x0U) << NMIC_RAM1MBE_Pos)
#define NMIC_RAM1MBE_CLEAR      ((0x1U) << NMIC_RAM1MBE_Pos)

#define NMIC_RAM1MBE_(x)  (((x) << NMIC_RAM1MBE_Pos) & NMIC_RAM1MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            WDT0
  *  @access     SYSTEM->NMIC
  *  @brief      WDT0 interrupt clear
  *              This bit is equivalent to WDTIC register bit of WDT0
  */
#define NMIC_WDT0_Pos  (10)
#define NMIC_WDT0_Msk  (0x1U << NMIC_WDT0_Pos)

#define NMIC_WDT0_NO_EFFECT  ((0x0U) << NMIC_WDT0_Pos)
#define NMIC_WDT0_CLEAR      ((0x1U) << NMIC_WDT0_Pos)

#define NMIC_WDT0_(x)  (((x) << NMIC_WDT0_Pos) & NMIC_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            GPIONMI
  *  @access     SYSTEM->NMIC
  *  @brief      GPIO non-maskable interrupt clear
  */
#define NMIC_GPIONMI_Pos  (11)
#define NMIC_GPIONMI_Msk  (0x1U << NMIC_GPIONMI_Pos)

#define NMIC_GPIONMI_NO_EFFECT  ((0x0U) << NMIC_GPIONMI_Pos)
#define NMIC_GPIONMI_CLEAR      ((0x1U) << NMIC_GPIONMI_Pos)

#define NMIC_GPIONMI_(x)  (((x) << NMIC_GPIONMI_Pos) & NMIC_GPIONMI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VADCREFERR
  *  @access     SYSTEM->NMIC
  *  @brief      13-bit ADC reference monitor error interrupt clear
  */
#define NMIC_VADCREFERR_Pos  (12)
#define NMIC_VADCREFERR_Msk  (0x1U << NMIC_VADCREFERR_Pos)

#define NMIC_VADCREFERR_NO_EFFECT  ((0x0U) << NMIC_VADCREFERR_Pos)
#define NMIC_VADCREFERR_CLEAR      ((0x1U) << NMIC_VADCREFERR_Pos)

#define NMIC_VADCREFERR_(x)  (((x) << NMIC_VADCREFERR_Pos) & NMIC_VADCREFERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VDD12ERR
  *  @access     SYSTEM->NMIC
  *  @brief      VDD12 monitor error interrupt clear
  */
#define NMIC_VDD12ERR_Pos  (13)
#define NMIC_VDD12ERR_Msk  (0x1U << NMIC_VDD12ERR_Pos)

#define NMIC_VDD12ERR_NO_EFFECT  ((0x0U) << NMIC_VDD12ERR_Pos)
#define NMIC_VDD12ERR_CLEAR      ((0x1U) << NMIC_VDD12ERR_Pos)

#define NMIC_VDD12ERR_(x)  (((x) << NMIC_VDD12ERR_Pos) & NMIC_VDD12ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VDD33ERR
  *  @access     SYSTEM->NMIC
  *  @brief      VDD33 monitor error interrupt clear
  */
#define NMIC_VDD33ERR_Pos  (14)
#define NMIC_VDD33ERR_Msk  (0x1U << NMIC_VDD33ERR_Pos)

#define NMIC_VDD33ERR_NO_EFFECT  ((0x0U) << NMIC_VDD33ERR_Pos)
#define NMIC_VDD33ERR_CLEAR      ((0x1U) << NMIC_VDD33ERR_Pos)

#define NMIC_VDD33ERR_(x)  (((x) << NMIC_VDD33ERR_Pos) & NMIC_VDD33ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            TMCUERR
  *  @access     SYSTEM->NMIC
  *  @brief      Controller temperature monitor error interrupt clear
  */
#define NMIC_TMCUERR_Pos  (15)
#define NMIC_TMCUERR_Msk  (0x1U << NMIC_TMCUERR_Pos)

#define NMIC_TMCUERR_NO_EFFECT  ((0x0U) << NMIC_TMCUERR_Pos)
#define NMIC_TMCUERR_CLEAR      ((0x1U) << NMIC_TMCUERR_Pos)

#define NMIC_TMCUERR_(x)  (((x) << NMIC_TMCUERR_Pos) & NMIC_TMCUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            TLINERR
  *  @access     SYSTEM->NMIC
  *  @brief      LIN PHY temperature monitor error interrupt clear
  */
#define NMIC_TLINERR_Pos  (16)
#define NMIC_TLINERR_Msk  (0x1U << NMIC_TLINERR_Pos)

#define NMIC_TLINERR_NO_EFFECT  ((0x0U) << NMIC_TLINERR_Pos)
#define NMIC_TLINERR_CLEAR      ((0x1U) << NMIC_TLINERR_Pos)

#define NMIC_TLINERR_(x)  (((x) << NMIC_TLINERR_Pos) & NMIC_TLINERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            TPMUERR
  *  @access     SYSTEM->NMIC
  *  @brief      Power module temperature monitor error interrupt clear
  */
#define NMIC_TPMUERR_Pos  (17)
#define NMIC_TPMUERR_Msk  (0x1U << NMIC_TPMUERR_Pos)

#define NMIC_TPMUERR_NO_EFFECT  ((0x0U) << NMIC_TPMUERR_Pos)
#define NMIC_TPMUERR_CLEAR      ((0x1U) << NMIC_TPMUERR_Pos)

#define NMIC_TPMUERR_(x)  (((x) << NMIC_TPMUERR_Pos) & NMIC_TPMUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VBGERR
  *  @access     SYSTEM->NMIC
  *  @brief      Power bandgap monitor error interrupt clear
  */
#define NMIC_VBGERR_Pos  (18)
#define NMIC_VBGERR_Msk  (0x1U << NMIC_VBGERR_Pos)

#define NMIC_VBGERR_NO_EFFECT  ((0x0U) << NMIC_VBGERR_Pos)
#define NMIC_VBGERR_CLEAR      ((0x1U) << NMIC_VBGERR_Pos)

#define NMIC_VBGERR_(x)  (((x) << NMIC_VBGERR_Pos) & NMIC_VBGERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VDD5ERR
  *  @access     SYSTEM->NMIC
  *  @brief      VDD5 monitor error interrupt clear
  */
#define NMIC_VDD5ERR_Pos  (19)
#define NMIC_VDD5ERR_Msk  (0x1U << NMIC_VDD5ERR_Pos)

#define NMIC_VDD5ERR_NO_EFFECT  ((0x0U) << NMIC_VDD5ERR_Pos)
#define NMIC_VDD5ERR_CLEAR      ((0x1U) << NMIC_VDD5ERR_Pos)

#define NMIC_VDD5ERR_(x)  (((x) << NMIC_VDD5ERR_Pos) & NMIC_VDD5ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VMONERR
  *  @access     SYSTEM->NMIC
  *  @brief      VMON monitor error interrupt clear
  */
#define NMIC_VMONERR_Pos  (20)
#define NMIC_VMONERR_Msk  (0x1U << NMIC_VMONERR_Pos)

#define NMIC_VMONERR_NO_EFFECT  ((0x0U) << NMIC_VMONERR_Pos)
#define NMIC_VMONERR_CLEAR      ((0x1U) << NMIC_VMONERR_Pos)

#define NMIC_VMONERR_(x)  (((x) << NMIC_VMONERR_Pos) & NMIC_VMONERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VCPERR
  *  @access     SYSTEM->NMIC
  *  @brief      VCP monitor error interrupt clear
  */
#define NMIC_VCPERR_Pos  (21)
#define NMIC_VCPERR_Msk  (0x1U << NMIC_VCPERR_Pos)

#define NMIC_VCPERR_NO_EFFECT  ((0x0U) << NMIC_VCPERR_Pos)
#define NMIC_VCPERR_CLEAR      ((0x1U) << NMIC_VCPERR_Pos)

#define NMIC_VCPERR_(x)  (((x) << NMIC_VCPERR_Pos) & NMIC_VCPERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            VBATERR
  *  @access     SYSTEM->NMIC
  *  @brief      VBAT monitor error interrupt clear
  */
#define NMIC_VBATERR_Pos  (22)
#define NMIC_VBATERR_Msk  (0x1U << NMIC_VBATERR_Pos)

#define NMIC_VBATERR_NO_EFFECT  ((0x0U) << NMIC_VBATERR_Pos)
#define NMIC_VBATERR_CLEAR      ((0x1U) << NMIC_VBATERR_Pos)

#define NMIC_VBATERR_(x)  (((x) << NMIC_VBATERR_Pos) & NMIC_VBATERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            AHBMBE
  *  @access     SYSTEM->NMIC
  *  @brief      AHB address or data ECC multi-bit error interrupt clear
  */
#define NMIC_AHBMBE_Pos  (23)
#define NMIC_AHBMBE_Msk  (0x1U << NMIC_AHBMBE_Pos)

#define NMIC_AHBMBE_NO_EFFECT  ((0x0U) << NMIC_AHBMBE_Pos)
#define NMIC_AHBMBE_CLEAR      ((0x1U) << NMIC_AHBMBE_Pos)

#define NMIC_AHBMBE_(x)  (((x) << NMIC_AHBMBE_Pos) & NMIC_AHBMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            DEBUG
  *  @access     SYSTEM->NMIC
  *  @brief      Latched debug mode entry interrupt clear
  */
#define NMIC_DEBUG_Pos  (24)
#define NMIC_DEBUG_Msk  (0x1U << NMIC_DEBUG_Pos)

#define NMIC_DEBUG_NO_EFFECT  ((0x0U) << NMIC_DEBUG_Pos)
#define NMIC_DEBUG_CLEAR      ((0x1U) << NMIC_DEBUG_Pos)

#define NMIC_DEBUG_(x)  (((x) << NMIC_DEBUG_Pos) & NMIC_DEBUG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            PTM
  *  @access     SYSTEM->NMIC
  *  @brief      Latched production test mode entry interrupt clear
  */
#define NMIC_PTM_Pos  (25)
#define NMIC_PTM_Msk  (0x1U << NMIC_PTM_Pos)

#define NMIC_PTM_NO_EFFECT  ((0x0U) << NMIC_PTM_Pos)
#define NMIC_PTM_CLEAR      ((0x1U) << NMIC_PTM_Pos)

#define NMIC_PTM_(x)  (((x) << NMIC_PTM_Pos) & NMIC_PTM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIC            INT
  *  @access     SYSTEM->NMIC
  *  @brief      Global non-maskable interrupt clear
  */
#define NMIC_INT_Pos  (26)
#define NMIC_INT_Msk  (0x1U << NMIC_INT_Pos)

#define NMIC_INT_NO_EFFECT  ((0x0U) << NMIC_INT_Pos)
#define NMIC_INT_CLEAR      ((0x1U) << NMIC_INT_Pos)

#define NMIC_INT_(x)  (((x) << NMIC_INT_Pos) & NMIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VDD12UV
  *  @access     SYSTEM->NMIE
  *  @brief      VDD12 under-volage interrupt enable
  */
#define NMIE_VDD12UV_Pos  (0)
#define NMIE_VDD12UV_Msk  (0x1U << NMIE_VDD12UV_Pos)

#define NMIE_VDD12UV_DISABLE  ((0x0U) << NMIE_VDD12UV_Pos)
#define NMIE_VDD12UV_ENABLE   ((0x1U) << NMIE_VDD12UV_Pos)

#define NMIE_VDD12UV_(x)  (((x) << NMIE_VDD12UV_Pos) & NMIE_VDD12UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VDD12OV
  *  @access     SYSTEM->NMIE
  *  @brief      VDD12 over-volage interrupt enable
  */
#define NMIE_VDD12OV_Pos  (1)
#define NMIE_VDD12OV_Msk  (0x1U << NMIE_VDD12OV_Pos)

#define NMIE_VDD12OV_DISABLE  ((0x0U) << NMIE_VDD12OV_Pos)
#define NMIE_VDD12OV_ENABLE   ((0x1U) << NMIE_VDD12OV_Pos)

#define NMIE_VDD12OV_(x)  (((x) << NMIE_VDD12OV_Pos) & NMIE_VDD12OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VDD33UV
  *  @access     SYSTEM->NMIE
  *  @brief      VDD33 under-voltage interrupt enable
  */
#define NMIE_VDD33UV_Pos  (2)
#define NMIE_VDD33UV_Msk  (0x1U << NMIE_VDD33UV_Pos)

#define NMIE_VDD33UV_DISABLE  ((0x0U) << NMIE_VDD33UV_Pos)
#define NMIE_VDD33UV_ENABLE   ((0x1U) << NMIE_VDD33UV_Pos)

#define NMIE_VDD33UV_(x)  (((x) << NMIE_VDD33UV_Pos) & NMIE_VDD33UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VDD33OV
  *  @access     SYSTEM->NMIE
  *  @brief      VDD33 over-voltage interrupt enable
  */
#define NMIE_VDD33OV_Pos  (3)
#define NMIE_VDD33OV_Msk  (0x1U << NMIE_VDD33OV_Pos)

#define NMIE_VDD33OV_DISABLE  ((0x0U) << NMIE_VDD33OV_Pos)
#define NMIE_VDD33OV_ENABLE   ((0x1U) << NMIE_VDD33OV_Pos)

#define NMIE_VDD33OV_(x)  (((x) << NMIE_VDD33OV_Pos) & NMIE_VDD33OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            PLLUNLOCK
  *  @access     SYSTEM->NMIE
  *  @brief      PLL unlock interrupt enable
  */
#define NMIE_PLLUNLOCK_Pos  (4)
#define NMIE_PLLUNLOCK_Msk  (0x1U << NMIE_PLLUNLOCK_Pos)

#define NMIE_PLLUNLOCK_DISABLE  ((0x0U) << NMIE_PLLUNLOCK_Pos)
#define NMIE_PLLUNLOCK_ENABLE   ((0x1U) << NMIE_PLLUNLOCK_Pos)

#define NMIE_PLLUNLOCK_(x)  (((x) << NMIE_PLLUNLOCK_Pos) & NMIE_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            CLKDETERR
  *  @access     SYSTEM->NMIE
  *  @brief      CLKDET error interrupt enable
  */
#define NMIE_CLKDETERR_Pos  (5)
#define NMIE_CLKDETERR_Msk  (0x1U << NMIE_CLKDETERR_Pos)

#define NMIE_CLKDETERR_DISABLE  ((0x0U) << NMIE_CLKDETERR_Pos)
#define NMIE_CLKDETERR_ENABLE   ((0x1U) << NMIE_CLKDETERR_Pos)

#define NMIE_CLKDETERR_(x)  (((x) << NMIE_CLKDETERR_Pos) & NMIE_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            ROMMBE
  *  @access     SYSTEM->NMIE
  *  @brief      ROM ECC multi-bit error interrupt enable
  */
#define NMIE_ROMMBE_Pos  (6)
#define NMIE_ROMMBE_Msk  (0x1U << NMIE_ROMMBE_Pos)

#define NMIE_ROMMBE_DISABLE  ((0x0U) << NMIE_ROMMBE_Pos)
#define NMIE_ROMMBE_ENABLE   ((0x1U) << NMIE_ROMMBE_Pos)

#define NMIE_ROMMBE_(x)  (((x) << NMIE_ROMMBE_Pos) & NMIE_ROMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            FLASHMBE
  *  @access     SYSTEM->NMIE
  *  @brief      FLASH ECC multi-bit error interrupt enable
  */
#define NMIE_FLASHMBE_Pos  (7)
#define NMIE_FLASHMBE_Msk  (0x1U << NMIE_FLASHMBE_Pos)

#define NMIE_FLASHMBE_DISABLE  ((0x0U) << NMIE_FLASHMBE_Pos)
#define NMIE_FLASHMBE_ENABLE   ((0x1U) << NMIE_FLASHMBE_Pos)

#define NMIE_FLASHMBE_(x)  (((x) << NMIE_FLASHMBE_Pos) & NMIE_FLASHMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            RAM0MBE
  *  @access     SYSTEM->NMIE
  *  @brief      RAM0 ECC multi-bit error interrupt enable
  */
#define NMIE_RAM0MBE_Pos  (8)
#define NMIE_RAM0MBE_Msk  (0x1U << NMIE_RAM0MBE_Pos)

#define NMIE_RAM0MBE_DISABLE  ((0x0U) << NMIE_RAM0MBE_Pos)
#define NMIE_RAM0MBE_ENABLE   ((0x1U) << NMIE_RAM0MBE_Pos)

#define NMIE_RAM0MBE_(x)  (((x) << NMIE_RAM0MBE_Pos) & NMIE_RAM0MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            RAM1MBE
  *  @access     SYSTEM->NMIE
  *  @brief      RAM1 ECC multi-bit error interrupt enable
  */
#define NMIE_RAM1MBE_Pos  (9)
#define NMIE_RAM1MBE_Msk  (0x1U << NMIE_RAM1MBE_Pos)

#define NMIE_RAM1MBE_DISABLE  ((0x0U) << NMIE_RAM1MBE_Pos)
#define NMIE_RAM1MBE_ENABLE   ((0x1U) << NMIE_RAM1MBE_Pos)

#define NMIE_RAM1MBE_(x)  (((x) << NMIE_RAM1MBE_Pos) & NMIE_RAM1MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            WDT0
  *  @access     SYSTEM->NMIE
  *  @brief      WDT0 interrupt enable
  *              This bit is equivalent to WDTIE register bit of WDT0
  */
#define NMIE_WDT0_Pos  (10)
#define NMIE_WDT0_Msk  (0x1U << NMIE_WDT0_Pos)

#define NMIE_WDT0_DISABLE  ((0x0U) << NMIE_WDT0_Pos)
#define NMIE_WDT0_ENABLE   ((0x1U) << NMIE_WDT0_Pos)

#define NMIE_WDT0_(x)  (((x) << NMIE_WDT0_Pos) & NMIE_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            GPIONMI
  *  @access     SYSTEM->NMIE
  *  @brief      GPIO non-maskable interrupt enable
  */
#define NMIE_GPIONMI_Pos  (11)
#define NMIE_GPIONMI_Msk  (0x1U << NMIE_GPIONMI_Pos)

#define NMIE_GPIONMI_DISABLE  ((0x0U) << NMIE_GPIONMI_Pos)
#define NMIE_GPIONMI_ENABLE   ((0x1U) << NMIE_GPIONMI_Pos)

#define NMIE_GPIONMI_(x)  (((x) << NMIE_GPIONMI_Pos) & NMIE_GPIONMI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VADCREFERR
  *  @access     SYSTEM->NMIE
  *  @brief      13-bit ADC reference monitor error interrupt enable
  */
#define NMIE_VADCREFERR_Pos  (12)
#define NMIE_VADCREFERR_Msk  (0x1U << NMIE_VADCREFERR_Pos)

#define NMIE_VADCREFERR_DISABLE  ((0x0U) << NMIE_VADCREFERR_Pos)
#define NMIE_VADCREFERR_ENABLE   ((0x1U) << NMIE_VADCREFERR_Pos)

#define NMIE_VADCREFERR_(x)  (((x) << NMIE_VADCREFERR_Pos) & NMIE_VADCREFERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VDD12ERR
  *  @access     SYSTEM->NMIE
  *  @brief      VDD12 monitor error interrupt enable
  */
#define NMIE_VDD12ERR_Pos  (13)
#define NMIE_VDD12ERR_Msk  (0x1U << NMIE_VDD12ERR_Pos)

#define NMIE_VDD12ERR_DISABLE  ((0x0U) << NMIE_VDD12ERR_Pos)
#define NMIE_VDD12ERR_ENABLE   ((0x1U) << NMIE_VDD12ERR_Pos)

#define NMIE_VDD12ERR_(x)  (((x) << NMIE_VDD12ERR_Pos) & NMIE_VDD12ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VDD33ERR
  *  @access     SYSTEM->NMIE
  *  @brief      VDD33 monitor error interrupt enable
  */
#define NMIE_VDD33ERR_Pos  (14)
#define NMIE_VDD33ERR_Msk  (0x1U << NMIE_VDD33ERR_Pos)

#define NMIE_VDD33ERR_DISABLE  ((0x0U) << NMIE_VDD33ERR_Pos)
#define NMIE_VDD33ERR_ENABLE   ((0x1U) << NMIE_VDD33ERR_Pos)

#define NMIE_VDD33ERR_(x)  (((x) << NMIE_VDD33ERR_Pos) & NMIE_VDD33ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            TMCUERR
  *  @access     SYSTEM->NMIE
  *  @brief      Controller temperature monitor error interrupt enable
  */
#define NMIE_TMCUERR_Pos  (15)
#define NMIE_TMCUERR_Msk  (0x1U << NMIE_TMCUERR_Pos)

#define NMIE_TMCUERR_DISABLE  ((0x0U) << NMIE_TMCUERR_Pos)
#define NMIE_TMCUERR_ENABLE   ((0x1U) << NMIE_TMCUERR_Pos)

#define NMIE_TMCUERR_(x)  (((x) << NMIE_TMCUERR_Pos) & NMIE_TMCUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            TLINERR
  *  @access     SYSTEM->NMIE
  *  @brief      LIN PHY temperature monitor error interrupt enable
  */
#define NMIE_TLINERR_Pos  (16)
#define NMIE_TLINERR_Msk  (0x1U << NMIE_TLINERR_Pos)

#define NMIE_TLINERR_DISABLE  ((0x0U) << NMIE_TLINERR_Pos)
#define NMIE_TLINERR_ENABLE   ((0x1U) << NMIE_TLINERR_Pos)

#define NMIE_TLINERR_(x)  (((x) << NMIE_TLINERR_Pos) & NMIE_TLINERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            TPMUERR
  *  @access     SYSTEM->NMIE
  *  @brief      Power module temperature monitor error interrupt enable
  */
#define NMIE_TPMUERR_Pos  (17)
#define NMIE_TPMUERR_Msk  (0x1U << NMIE_TPMUERR_Pos)

#define NMIE_TPMUERR_DISABLE  ((0x0U) << NMIE_TPMUERR_Pos)
#define NMIE_TPMUERR_ENABLE   ((0x1U) << NMIE_TPMUERR_Pos)

#define NMIE_TPMUERR_(x)  (((x) << NMIE_TPMUERR_Pos) & NMIE_TPMUERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VBGERR
  *  @access     SYSTEM->NMIE
  *  @brief      Power bandgap monitor error interrupt enable
  */
#define NMIE_VBGERR_Pos  (18)
#define NMIE_VBGERR_Msk  (0x1U << NMIE_VBGERR_Pos)

#define NMIE_VBGERR_DISABLE  ((0x0U) << NMIE_VBGERR_Pos)
#define NMIE_VBGERR_ENABLE   ((0x1U) << NMIE_VBGERR_Pos)

#define NMIE_VBGERR_(x)  (((x) << NMIE_VBGERR_Pos) & NMIE_VBGERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VDD5ERR
  *  @access     SYSTEM->NMIE
  *  @brief      VDD5 monitor error interrupt enable
  */
#define NMIE_VDD5ERR_Pos  (19)
#define NMIE_VDD5ERR_Msk  (0x1U << NMIE_VDD5ERR_Pos)

#define NMIE_VDD5ERR_DISABLE  ((0x0U) << NMIE_VDD5ERR_Pos)
#define NMIE_VDD5ERR_ENABLE   ((0x1U) << NMIE_VDD5ERR_Pos)

#define NMIE_VDD5ERR_(x)  (((x) << NMIE_VDD5ERR_Pos) & NMIE_VDD5ERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VMONERR
  *  @access     SYSTEM->NMIE
  *  @brief      VMON monitor error interrupt enable
  */
#define NMIE_VMONERR_Pos  (20)
#define NMIE_VMONERR_Msk  (0x1U << NMIE_VMONERR_Pos)

#define NMIE_VMONERR_DISABLE  ((0x0U) << NMIE_VMONERR_Pos)
#define NMIE_VMONERR_ENABLE   ((0x1U) << NMIE_VMONERR_Pos)

#define NMIE_VMONERR_(x)  (((x) << NMIE_VMONERR_Pos) & NMIE_VMONERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VCPERR
  *  @access     SYSTEM->NMIE
  *  @brief      VCP monitor error interrupt enable
  */
#define NMIE_VCPERR_Pos  (21)
#define NMIE_VCPERR_Msk  (0x1U << NMIE_VCPERR_Pos)

#define NMIE_VCPERR_DISABLE  ((0x0U) << NMIE_VCPERR_Pos)
#define NMIE_VCPERR_ENABLE   ((0x1U) << NMIE_VCPERR_Pos)

#define NMIE_VCPERR_(x)  (((x) << NMIE_VCPERR_Pos) & NMIE_VCPERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            VBATERR
  *  @access     SYSTEM->NMIE
  *  @brief      VBAT monitor error interrupt enable
  */
#define NMIE_VBATERR_Pos  (22)
#define NMIE_VBATERR_Msk  (0x1U << NMIE_VBATERR_Pos)

#define NMIE_VBATERR_DISABLE  ((0x0U) << NMIE_VBATERR_Pos)
#define NMIE_VBATERR_ENABLE   ((0x1U) << NMIE_VBATERR_Pos)

#define NMIE_VBATERR_(x)  (((x) << NMIE_VBATERR_Pos) & NMIE_VBATERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            AHBMBE
  *  @access     SYSTEM->NMIE
  *  @brief      AHB address or data ECC multi-bit error interrupt enable
  */
#define NMIE_AHBMBE_Pos  (23)
#define NMIE_AHBMBE_Msk  (0x1U << NMIE_AHBMBE_Pos)

#define NMIE_AHBMBE_DISABLE  ((0x0U) << NMIE_AHBMBE_Pos)
#define NMIE_AHBMBE_ENABLE   ((0x1U) << NMIE_AHBMBE_Pos)

#define NMIE_AHBMBE_(x)  (((x) << NMIE_AHBMBE_Pos) & NMIE_AHBMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            DEBUG
  *  @access     SYSTEM->NMIE
  *  @brief      Debug mode entry interrupt enable
  */
#define NMIE_DEBUG_Pos  (24)
#define NMIE_DEBUG_Msk  (0x1U << NMIE_DEBUG_Pos)

#define NMIE_DEBUG_DISABLE  ((0x0U) << NMIE_DEBUG_Pos)
#define NMIE_DEBUG_ENABLE   ((0x1U) << NMIE_DEBUG_Pos)

#define NMIE_DEBUG_(x)  (((x) << NMIE_DEBUG_Pos) & NMIE_DEBUG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NMIE            PTM
  *  @access     SYSTEM->NMIE
  *  @brief      Production test mode entry interrupt enable
  */
#define NMIE_PTM_Pos  (25)
#define NMIE_PTM_Msk  (0x1U << NMIE_PTM_Pos)

#define NMIE_PTM_DISABLE  ((0x0U) << NMIE_PTM_Pos)
#define NMIE_PTM_ENABLE   ((0x1U) << NMIE_PTM_Pos)

#define NMIE_PTM_(x)  (((x) << NMIE_PTM_Pos) & NMIE_PTM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMRAWIF        ROMSBE
  *  @access     SYSTEM->MEMRAWIF
  *  @brief      Latched ROM single-bit error event flag
  */
#define MEMRAWIF_ROMSBE_Pos  (0)
#define MEMRAWIF_ROMSBE_Msk  (0x1U << MEMRAWIF_ROMSBE_Pos)

#define MEMRAWIF_ROMSBE_NOT_OCCUR  ((0x0U) << MEMRAWIF_ROMSBE_Pos)
#define MEMRAWIF_ROMSBE_OCCUR      ((0x1U) << MEMRAWIF_ROMSBE_Pos)

#define MEMRAWIF_ROMSBE_(x)  (((x) << MEMRAWIF_ROMSBE_Pos) & MEMRAWIF_ROMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMRAWIF        FLASHSBE
  *  @access     SYSTEM->MEMRAWIF
  *  @brief      Latched FLASH single-bit error event flag
  */
#define MEMRAWIF_FLASHSBE_Pos  (1)
#define MEMRAWIF_FLASHSBE_Msk  (0x1U << MEMRAWIF_FLASHSBE_Pos)

#define MEMRAWIF_FLASHSBE_NOT_OCCUR  ((0x0U) << MEMRAWIF_FLASHSBE_Pos)
#define MEMRAWIF_FLASHSBE_OCCUR      ((0x1U) << MEMRAWIF_FLASHSBE_Pos)

#define MEMRAWIF_FLASHSBE_(x)  (((x) << MEMRAWIF_FLASHSBE_Pos) & MEMRAWIF_FLASHSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMRAWIF        RAM0SBE
  *  @access     SYSTEM->MEMRAWIF
  *  @brief      Latched RAM0 single-bit error event flag
  */
#define MEMRAWIF_RAM0SBE_Pos  (2)
#define MEMRAWIF_RAM0SBE_Msk  (0x1U << MEMRAWIF_RAM0SBE_Pos)

#define MEMRAWIF_RAM0SBE_NOT_OCCUR  ((0x0U) << MEMRAWIF_RAM0SBE_Pos)
#define MEMRAWIF_RAM0SBE_OCCUR      ((0x1U) << MEMRAWIF_RAM0SBE_Pos)

#define MEMRAWIF_RAM0SBE_(x)  (((x) << MEMRAWIF_RAM0SBE_Pos) & MEMRAWIF_RAM0SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMRAWIF        RAM1SBE
  *  @access     SYSTEM->MEMRAWIF
  *  @brief      Latched RAM1 single-bit error event flag
  */
#define MEMRAWIF_RAM1SBE_Pos  (3)
#define MEMRAWIF_RAM1SBE_Msk  (0x1U << MEMRAWIF_RAM1SBE_Pos)

#define MEMRAWIF_RAM1SBE_NOT_OCCUR  ((0x0U) << MEMRAWIF_RAM1SBE_Pos)
#define MEMRAWIF_RAM1SBE_OCCUR      ((0x1U) << MEMRAWIF_RAM1SBE_Pos)

#define MEMRAWIF_RAM1SBE_(x)  (((x) << MEMRAWIF_RAM1SBE_Pos) & MEMRAWIF_RAM1SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIF           ROMSBE
  *  @access     SYSTEM->MEMIF
  *  @brief      Latched ECC ROM single-bit error interrupt flag
  */
#define MEMIF_ROMSBE_Pos  (0)
#define MEMIF_ROMSBE_Msk  (0x1U << MEMIF_ROMSBE_Pos)

#define MEMIF_ROMSBE_NOT_OCCUR  ((0x0U) << MEMIF_ROMSBE_Pos)
#define MEMIF_ROMSBE_OCCUR      ((0x1U) << MEMIF_ROMSBE_Pos)

#define MEMIF_ROMSBE_(x)  (((x) << MEMIF_ROMSBE_Pos) & MEMIF_ROMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIF           FLASHSBE
  *  @access     SYSTEM->MEMIF
  *  @brief      Latched ECC FLASH single-bit error interrupt flag
  */
#define MEMIF_FLASHSBE_Pos  (1)
#define MEMIF_FLASHSBE_Msk  (0x1U << MEMIF_FLASHSBE_Pos)

#define MEMIF_FLASHSBE_NOT_OCCUR  ((0x0U) << MEMIF_FLASHSBE_Pos)
#define MEMIF_FLASHSBE_OCCUR      ((0x1U) << MEMIF_FLASHSBE_Pos)

#define MEMIF_FLASHSBE_(x)  (((x) << MEMIF_FLASHSBE_Pos) & MEMIF_FLASHSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIF           RAM0SBE
  *  @access     SYSTEM->MEMIF
  *  @brief      Latched ECC RAM0 single-bit error interrupt flag
  */
#define MEMIF_RAM0SBE_Pos  (2)
#define MEMIF_RAM0SBE_Msk  (0x1U << MEMIF_RAM0SBE_Pos)

#define MEMIF_RAM0SBE_NOT_OCCUR  ((0x0U) << MEMIF_RAM0SBE_Pos)
#define MEMIF_RAM0SBE_OCCUR      ((0x1U) << MEMIF_RAM0SBE_Pos)

#define MEMIF_RAM0SBE_(x)  (((x) << MEMIF_RAM0SBE_Pos) & MEMIF_RAM0SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIF           RAM1SBE
  *  @access     SYSTEM->MEMIF
  *  @brief      Latched ECC RAM1 single-bit error interrupt flag
  */
#define MEMIF_RAM1SBE_Pos  (3)
#define MEMIF_RAM1SBE_Msk  (0x1U << MEMIF_RAM1SBE_Pos)

#define MEMIF_RAM1SBE_NOT_OCCUR  ((0x0U) << MEMIF_RAM1SBE_Pos)
#define MEMIF_RAM1SBE_OCCUR      ((0x1U) << MEMIF_RAM1SBE_Pos)

#define MEMIF_RAM1SBE_(x)  (((x) << MEMIF_RAM1SBE_Pos) & MEMIF_RAM1SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIF           INT
  *  @access     SYSTEM->MEMIF
  *  @brief      Global memory error interrupt flag
  */
#define MEMIF_INT_Pos  (4)
#define MEMIF_INT_Msk  (0x1U << MEMIF_INT_Pos)

#define MEMIF_INT_NOT_OCCUR  ((0x0U) << MEMIF_INT_Pos)
#define MEMIF_INT_OCCUR      ((0x1U) << MEMIF_INT_Pos)

#define MEMIF_INT_(x)  (((x) << MEMIF_INT_Pos) & MEMIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIC           ROMSBE
  *  @access     SYSTEM->MEMIC
  *  @brief      ROM ECC single-bit error interrupt clear
  */
#define MEMIC_ROMSBE_Pos  (0)
#define MEMIC_ROMSBE_Msk  (0x1U << MEMIC_ROMSBE_Pos)

#define MEMIC_ROMSBE_NO_EFFECT  ((0x0U) << MEMIC_ROMSBE_Pos)
#define MEMIC_ROMSBE_CLEAR      ((0x1U) << MEMIC_ROMSBE_Pos)

#define MEMIC_ROMSBE_(x)  (((x) << MEMIC_ROMSBE_Pos) & MEMIC_ROMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIC           FLASHSBE
  *  @access     SYSTEM->MEMIC
  *  @brief      FLASH ECC single-bit error interrupt clear
  */
#define MEMIC_FLASHSBE_Pos  (1)
#define MEMIC_FLASHSBE_Msk  (0x1U << MEMIC_FLASHSBE_Pos)

#define MEMIC_FLASHSBE_NO_EFFECT  ((0x0U) << MEMIC_FLASHSBE_Pos)
#define MEMIC_FLASHSBE_CLEAR      ((0x1U) << MEMIC_FLASHSBE_Pos)

#define MEMIC_FLASHSBE_(x)  (((x) << MEMIC_FLASHSBE_Pos) & MEMIC_FLASHSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIC           RAM0SBE
  *  @access     SYSTEM->MEMIC
  *  @brief      RAM0 ECC single-bit error interrupt clear
  */
#define MEMIC_RAM0SBE_Pos  (2)
#define MEMIC_RAM0SBE_Msk  (0x1U << MEMIC_RAM0SBE_Pos)

#define MEMIC_RAM0SBE_NO_EFFECT  ((0x0U) << MEMIC_RAM0SBE_Pos)
#define MEMIC_RAM0SBE_CLEAR      ((0x1U) << MEMIC_RAM0SBE_Pos)

#define MEMIC_RAM0SBE_(x)  (((x) << MEMIC_RAM0SBE_Pos) & MEMIC_RAM0SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIC           RAM1SBE
  *  @access     SYSTEM->MEMIC
  *  @brief      RAM1 ECC single-bit error interrupt clear
  */
#define MEMIC_RAM1SBE_Pos  (3)
#define MEMIC_RAM1SBE_Msk  (0x1U << MEMIC_RAM1SBE_Pos)

#define MEMIC_RAM1SBE_NO_EFFECT  ((0x0U) << MEMIC_RAM1SBE_Pos)
#define MEMIC_RAM1SBE_CLEAR      ((0x1U) << MEMIC_RAM1SBE_Pos)

#define MEMIC_RAM1SBE_(x)  (((x) << MEMIC_RAM1SBE_Pos) & MEMIC_RAM1SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIC           INT
  *  @access     SYSTEM->MEMIC
  *  @brief      Global memory error interrupt clear
  */
#define MEMIC_INT_Pos  (4)
#define MEMIC_INT_Msk  (0x1U << MEMIC_INT_Pos)

#define MEMIC_INT_NO_EFFECT  ((0x0U) << MEMIC_INT_Pos)
#define MEMIC_INT_CLEAR      ((0x1U) << MEMIC_INT_Pos)

#define MEMIC_INT_(x)  (((x) << MEMIC_INT_Pos) & MEMIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIE           ROMSBE
  *  @access     SYSTEM->MEMIE
  *  @brief      ROM ECC single-bit error interrupt enable
  */
#define MEMIE_ROMSBE_Pos  (0)
#define MEMIE_ROMSBE_Msk  (0x1U << MEMIE_ROMSBE_Pos)

#define MEMIE_ROMSBE_DISABLE  ((0x0U) << MEMIE_ROMSBE_Pos)
#define MEMIE_ROMSBE_ENABLE   ((0x1U) << MEMIE_ROMSBE_Pos)

#define MEMIE_ROMSBE_(x)  (((x) << MEMIE_ROMSBE_Pos) & MEMIE_ROMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIE           FLASHSBE
  *  @access     SYSTEM->MEMIE
  *  @brief      FLASH ECC single-bit error interrupt enable
  */
#define MEMIE_FLASHSBE_Pos  (1)
#define MEMIE_FLASHSBE_Msk  (0x1U << MEMIE_FLASHSBE_Pos)

#define MEMIE_FLASHSBE_DISABLE  ((0x0U) << MEMIE_FLASHSBE_Pos)
#define MEMIE_FLASHSBE_ENABLE   ((0x1U) << MEMIE_FLASHSBE_Pos)

#define MEMIE_FLASHSBE_(x)  (((x) << MEMIE_FLASHSBE_Pos) & MEMIE_FLASHSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIE           RAM0SBE
  *  @access     SYSTEM->MEMIE
  *  @brief      RAM0 ECC single-bit error interrupt enable
  */
#define MEMIE_RAM0SBE_Pos  (2)
#define MEMIE_RAM0SBE_Msk  (0x1U << MEMIE_RAM0SBE_Pos)

#define MEMIE_RAM0SBE_DISABLE  ((0x0U) << MEMIE_RAM0SBE_Pos)
#define MEMIE_RAM0SBE_ENABLE   ((0x1U) << MEMIE_RAM0SBE_Pos)

#define MEMIE_RAM0SBE_(x)  (((x) << MEMIE_RAM0SBE_Pos) & MEMIE_RAM0SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          MEMIE           RAM1SBE
  *  @access     SYSTEM->MEMIE
  *  @brief      RAM1 ECC single-bit error interrupt enable
  */
#define MEMIE_RAM1SBE_Pos  (3)
#define MEMIE_RAM1SBE_Msk  (0x1U << MEMIE_RAM1SBE_Pos)

#define MEMIE_RAM1SBE_DISABLE  ((0x0U) << MEMIE_RAM1SBE_Pos)
#define MEMIE_RAM1SBE_ENABLE   ((0x1U) << MEMIE_RAM1SBE_Pos)

#define MEMIE_RAM1SBE_(x)  (((x) << MEMIE_RAM1SBE_Pos) & MEMIE_RAM1SBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       VDD12UV
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon VDD12UV event
  */
#define RSTEVTFLG_VDD12UV_Pos  (0)
#define RSTEVTFLG_VDD12UV_Msk  (0x1U << RSTEVTFLG_VDD12UV_Pos)

#define RSTEVTFLG_VDD12UV_NOT_OCCUR  ((0x0U) << RSTEVTFLG_VDD12UV_Pos)
#define RSTEVTFLG_VDD12UV_OCCUR      ((0x1U) << RSTEVTFLG_VDD12UV_Pos)

#define RSTEVTFLG_VDD12UV_(x)  (((x) << RSTEVTFLG_VDD12UV_Pos) & RSTEVTFLG_VDD12UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       VDD12OV
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon VDD12OV event
  */
#define RSTEVTFLG_VDD12OV_Pos  (1)
#define RSTEVTFLG_VDD12OV_Msk  (0x1U << RSTEVTFLG_VDD12OV_Pos)

#define RSTEVTFLG_VDD12OV_NOT_OCCUR  ((0x0U) << RSTEVTFLG_VDD12OV_Pos)
#define RSTEVTFLG_VDD12OV_OCCUR      ((0x1U) << RSTEVTFLG_VDD12OV_Pos)

#define RSTEVTFLG_VDD12OV_(x)  (((x) << RSTEVTFLG_VDD12OV_Pos) & RSTEVTFLG_VDD12OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       VDD33UV
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon VDD33UV event
  */
#define RSTEVTFLG_VDD33UV_Pos  (2)
#define RSTEVTFLG_VDD33UV_Msk  (0x1U << RSTEVTFLG_VDD33UV_Pos)

#define RSTEVTFLG_VDD33UV_NOT_OCCUR  ((0x0U) << RSTEVTFLG_VDD33UV_Pos)
#define RSTEVTFLG_VDD33UV_OCCUR      ((0x1U) << RSTEVTFLG_VDD33UV_Pos)

#define RSTEVTFLG_VDD33UV_(x)  (((x) << RSTEVTFLG_VDD33UV_Pos) & RSTEVTFLG_VDD33UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       VDD33OV
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon VDD33OV event
  */
#define RSTEVTFLG_VDD33OV_Pos  (3)
#define RSTEVTFLG_VDD33OV_Msk  (0x1U << RSTEVTFLG_VDD33OV_Pos)

#define RSTEVTFLG_VDD33OV_NOT_OCCUR  ((0x0U) << RSTEVTFLG_VDD33OV_Pos)
#define RSTEVTFLG_VDD33OV_OCCUR      ((0x1U) << RSTEVTFLG_VDD33OV_Pos)

#define RSTEVTFLG_VDD33OV_(x)  (((x) << RSTEVTFLG_VDD33OV_Pos) & RSTEVTFLG_VDD33OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       PLLUNLOCK
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon PLL unlock event
  */
#define RSTEVTFLG_PLLUNLOCK_Pos  (4)
#define RSTEVTFLG_PLLUNLOCK_Msk  (0x1U << RSTEVTFLG_PLLUNLOCK_Pos)

#define RSTEVTFLG_PLLUNLOCK_NOT_OCCUR  ((0x0U) << RSTEVTFLG_PLLUNLOCK_Pos)
#define RSTEVTFLG_PLLUNLOCK_OCCUR      ((0x1U) << RSTEVTFLG_PLLUNLOCK_Pos)

#define RSTEVTFLG_PLLUNLOCK_(x)  (((x) << RSTEVTFLG_PLLUNLOCK_Pos) & RSTEVTFLG_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       CLKDETERR
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon CLKDETERR event
  */
#define RSTEVTFLG_CLKDETERR_Pos  (5)
#define RSTEVTFLG_CLKDETERR_Msk  (0x1U << RSTEVTFLG_CLKDETERR_Pos)

#define RSTEVTFLG_CLKDETERR_NOT_OCCUR  ((0x0U) << RSTEVTFLG_CLKDETERR_Pos)
#define RSTEVTFLG_CLKDETERR_OCCUR      ((0x1U) << RSTEVTFLG_CLKDETERR_Pos)

#define RSTEVTFLG_CLKDETERR_(x)  (((x) << RSTEVTFLG_CLKDETERR_Pos) & RSTEVTFLG_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       ROMMBE
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon ROM multi-bit error event
  */
#define RSTEVTFLG_ROMMBE_Pos  (6)
#define RSTEVTFLG_ROMMBE_Msk  (0x1U << RSTEVTFLG_ROMMBE_Pos)

#define RSTEVTFLG_ROMMBE_NOT_OCCUR  ((0x0U) << RSTEVTFLG_ROMMBE_Pos)
#define RSTEVTFLG_ROMMBE_OCCUR      ((0x1U) << RSTEVTFLG_ROMMBE_Pos)

#define RSTEVTFLG_ROMMBE_(x)  (((x) << RSTEVTFLG_ROMMBE_Pos) & RSTEVTFLG_ROMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       FLASHMBE
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon FLASH multi-bit error event
  */
#define RSTEVTFLG_FLASHMBE_Pos  (7)
#define RSTEVTFLG_FLASHMBE_Msk  (0x1U << RSTEVTFLG_FLASHMBE_Pos)

#define RSTEVTFLG_FLASHMBE_NOT_OCCUR  ((0x0U) << RSTEVTFLG_FLASHMBE_Pos)
#define RSTEVTFLG_FLASHMBE_OCCUR      ((0x1U) << RSTEVTFLG_FLASHMBE_Pos)

#define RSTEVTFLG_FLASHMBE_(x)  (((x) << RSTEVTFLG_FLASHMBE_Pos) & RSTEVTFLG_FLASHMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       RAM0MBE
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon RAM0 multi-bit error event
  */
#define RSTEVTFLG_RAM0MBE_Pos  (8)
#define RSTEVTFLG_RAM0MBE_Msk  (0x1U << RSTEVTFLG_RAM0MBE_Pos)

#define RSTEVTFLG_RAM0MBE_NOT_OCCUR  ((0x0U) << RSTEVTFLG_RAM0MBE_Pos)
#define RSTEVTFLG_RAM0MBE_OCCUR      ((0x1U) << RSTEVTFLG_RAM0MBE_Pos)

#define RSTEVTFLG_RAM0MBE_(x)  (((x) << RSTEVTFLG_RAM0MBE_Pos) & RSTEVTFLG_RAM0MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       RAM1MBE
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon RAM1 multi-bit error event
  */
#define RSTEVTFLG_RAM1MBE_Pos  (9)
#define RSTEVTFLG_RAM1MBE_Msk  (0x1U << RSTEVTFLG_RAM1MBE_Pos)

#define RSTEVTFLG_RAM1MBE_NOT_OCCUR  ((0x0U) << RSTEVTFLG_RAM1MBE_Pos)
#define RSTEVTFLG_RAM1MBE_OCCUR      ((0x1U) << RSTEVTFLG_RAM1MBE_Pos)

#define RSTEVTFLG_RAM1MBE_(x)  (((x) << RSTEVTFLG_RAM1MBE_Pos) & RSTEVTFLG_RAM1MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       WDT0RST
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon WDT0 reset event
  */
#define RSTEVTFLG_WDT0RST_Pos  (10)
#define RSTEVTFLG_WDT0RST_Msk  (0x1U << RSTEVTFLG_WDT0RST_Pos)

#define RSTEVTFLG_WDT0RST_NOT_OCCUR  ((0x0U) << RSTEVTFLG_WDT0RST_Pos)
#define RSTEVTFLG_WDT0RST_OCCUR      ((0x1U) << RSTEVTFLG_WDT0RST_Pos)

#define RSTEVTFLG_WDT0RST_(x)  (((x) << RSTEVTFLG_WDT0RST_Pos) & RSTEVTFLG_WDT0RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       WDT1RST
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon WDT1 reset event
  */
#define RSTEVTFLG_WDT1RST_Pos  (11)
#define RSTEVTFLG_WDT1RST_Msk  (0x1U << RSTEVTFLG_WDT1RST_Pos)

#define RSTEVTFLG_WDT1RST_NOT_OCCUR  ((0x0U) << RSTEVTFLG_WDT1RST_Pos)
#define RSTEVTFLG_WDT1RST_OCCUR      ((0x1U) << RSTEVTFLG_WDT1RST_Pos)

#define RSTEVTFLG_WDT1RST_(x)  (((x) << RSTEVTFLG_WDT1RST_Pos) & RSTEVTFLG_WDT1RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       SYSRST
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon system reset event
  */
#define RSTEVTFLG_SYSRST_Pos  (12)
#define RSTEVTFLG_SYSRST_Msk  (0x1U << RSTEVTFLG_SYSRST_Pos)

#define RSTEVTFLG_SYSRST_NOT_OCCUR  ((0x0U) << RSTEVTFLG_SYSRST_Pos)
#define RSTEVTFLG_SYSRST_OCCUR      ((0x1U) << RSTEVTFLG_SYSRST_Pos)

#define RSTEVTFLG_SYSRST_(x)  (((x) << RSTEVTFLG_SYSRST_Pos) & RSTEVTFLG_SYSRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTFLG       PINRST
  *  @access     SYSTEM->RSTEVTFLG
  *  @brief      Latched reset flag upon XRSTn pin reset event
  */
#define RSTEVTFLG_PINRST_Pos  (13)
#define RSTEVTFLG_PINRST_Msk  (0x1U << RSTEVTFLG_PINRST_Pos)

#define RSTEVTFLG_PINRST_NOT_OCCUR  ((0x0U) << RSTEVTFLG_PINRST_Pos)
#define RSTEVTFLG_PINRST_OCCUR      ((0x1U) << RSTEVTFLG_PINRST_Pos)

#define RSTEVTFLG_PINRST_(x)  (((x) << RSTEVTFLG_PINRST_Pos) & RSTEVTFLG_PINRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       VDD12UV
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon VDD12UV event
  */
#define RSTEVTCLR_VDD12UV_Pos  (0)
#define RSTEVTCLR_VDD12UV_Msk  (0x1U << RSTEVTCLR_VDD12UV_Pos)

#define RSTEVTCLR_VDD12UV_NO_EFFECT  ((0x0U) << RSTEVTCLR_VDD12UV_Pos)
#define RSTEVTCLR_VDD12UV_CLEAR      ((0x1U) << RSTEVTCLR_VDD12UV_Pos)

#define RSTEVTCLR_VDD12UV_(x)  (((x) << RSTEVTCLR_VDD12UV_Pos) & RSTEVTCLR_VDD12UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       VDD12OV
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon VDD12OV event
  */
#define RSTEVTCLR_VDD12OV_Pos  (1)
#define RSTEVTCLR_VDD12OV_Msk  (0x1U << RSTEVTCLR_VDD12OV_Pos)

#define RSTEVTCLR_VDD12OV_NO_EFFECT  ((0x0U) << RSTEVTCLR_VDD12OV_Pos)
#define RSTEVTCLR_VDD12OV_CLEAR      ((0x1U) << RSTEVTCLR_VDD12OV_Pos)

#define RSTEVTCLR_VDD12OV_(x)  (((x) << RSTEVTCLR_VDD12OV_Pos) & RSTEVTCLR_VDD12OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       VDD33UV
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon VDD33UV event
  */
#define RSTEVTCLR_VDD33UV_Pos  (2)
#define RSTEVTCLR_VDD33UV_Msk  (0x1U << RSTEVTCLR_VDD33UV_Pos)

#define RSTEVTCLR_VDD33UV_NO_EFFECT  ((0x0U) << RSTEVTCLR_VDD33UV_Pos)
#define RSTEVTCLR_VDD33UV_CLEAR      ((0x1U) << RSTEVTCLR_VDD33UV_Pos)

#define RSTEVTCLR_VDD33UV_(x)  (((x) << RSTEVTCLR_VDD33UV_Pos) & RSTEVTCLR_VDD33UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       VDD33OV
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon VDD33OV event
  */
#define RSTEVTCLR_VDD33OV_Pos  (3)
#define RSTEVTCLR_VDD33OV_Msk  (0x1U << RSTEVTCLR_VDD33OV_Pos)

#define RSTEVTCLR_VDD33OV_NO_EFFECT  ((0x0U) << RSTEVTCLR_VDD33OV_Pos)
#define RSTEVTCLR_VDD33OV_CLEAR      ((0x1U) << RSTEVTCLR_VDD33OV_Pos)

#define RSTEVTCLR_VDD33OV_(x)  (((x) << RSTEVTCLR_VDD33OV_Pos) & RSTEVTCLR_VDD33OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       PLLUNLOCK
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon PLL unlock event
  */
#define RSTEVTCLR_PLLUNLOCK_Pos  (4)
#define RSTEVTCLR_PLLUNLOCK_Msk  (0x1U << RSTEVTCLR_PLLUNLOCK_Pos)

#define RSTEVTCLR_PLLUNLOCK_NO_EFFECT  ((0x0U) << RSTEVTCLR_PLLUNLOCK_Pos)
#define RSTEVTCLR_PLLUNLOCK_CLEAR      ((0x1U) << RSTEVTCLR_PLLUNLOCK_Pos)

#define RSTEVTCLR_PLLUNLOCK_(x)  (((x) << RSTEVTCLR_PLLUNLOCK_Pos) & RSTEVTCLR_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       CLKDETERR
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon CLKDETERR event
  */
#define RSTEVTCLR_CLKDETERR_Pos  (5)
#define RSTEVTCLR_CLKDETERR_Msk  (0x1U << RSTEVTCLR_CLKDETERR_Pos)

#define RSTEVTCLR_CLKDETERR_NO_EFFECT  ((0x0U) << RSTEVTCLR_CLKDETERR_Pos)
#define RSTEVTCLR_CLKDETERR_CLEAR      ((0x1U) << RSTEVTCLR_CLKDETERR_Pos)

#define RSTEVTCLR_CLKDETERR_(x)  (((x) << RSTEVTCLR_CLKDETERR_Pos) & RSTEVTCLR_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       ROMMBE
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon ROM multi-bit error event
  */
#define RSTEVTCLR_ROMMBE_Pos  (6)
#define RSTEVTCLR_ROMMBE_Msk  (0x1U << RSTEVTCLR_ROMMBE_Pos)

#define RSTEVTCLR_ROMMBE_NO_EFFECT  ((0x0U) << RSTEVTCLR_ROMMBE_Pos)
#define RSTEVTCLR_ROMMBE_CLEAR      ((0x1U) << RSTEVTCLR_ROMMBE_Pos)

#define RSTEVTCLR_ROMMBE_(x)  (((x) << RSTEVTCLR_ROMMBE_Pos) & RSTEVTCLR_ROMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       FLASHMBE
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon FLASH multi-bit error event
  */
#define RSTEVTCLR_FLASHMBE_Pos  (7)
#define RSTEVTCLR_FLASHMBE_Msk  (0x1U << RSTEVTCLR_FLASHMBE_Pos)

#define RSTEVTCLR_FLASHMBE_NO_EFFECT  ((0x0U) << RSTEVTCLR_FLASHMBE_Pos)
#define RSTEVTCLR_FLASHMBE_CLEAR      ((0x1U) << RSTEVTCLR_FLASHMBE_Pos)

#define RSTEVTCLR_FLASHMBE_(x)  (((x) << RSTEVTCLR_FLASHMBE_Pos) & RSTEVTCLR_FLASHMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       RAM0MBE
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon RAM0 multi-bit error event
  */
#define RSTEVTCLR_RAM0MBE_Pos  (8)
#define RSTEVTCLR_RAM0MBE_Msk  (0x1U << RSTEVTCLR_RAM0MBE_Pos)

#define RSTEVTCLR_RAM0MBE_NO_EFFECT  ((0x0U) << RSTEVTCLR_RAM0MBE_Pos)
#define RSTEVTCLR_RAM0MBE_CLEAR      ((0x1U) << RSTEVTCLR_RAM0MBE_Pos)

#define RSTEVTCLR_RAM0MBE_(x)  (((x) << RSTEVTCLR_RAM0MBE_Pos) & RSTEVTCLR_RAM0MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       RAM1MBE
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon RAM1 multi-bit error event
  */
#define RSTEVTCLR_RAM1MBE_Pos  (9)
#define RSTEVTCLR_RAM1MBE_Msk  (0x1U << RSTEVTCLR_RAM1MBE_Pos)

#define RSTEVTCLR_RAM1MBE_NO_EFFECT  ((0x0U) << RSTEVTCLR_RAM1MBE_Pos)
#define RSTEVTCLR_RAM1MBE_CLEAR      ((0x1U) << RSTEVTCLR_RAM1MBE_Pos)

#define RSTEVTCLR_RAM1MBE_(x)  (((x) << RSTEVTCLR_RAM1MBE_Pos) & RSTEVTCLR_RAM1MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       WDT0RST
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon WDT0 reset event
  */
#define RSTEVTCLR_WDT0RST_Pos  (10)
#define RSTEVTCLR_WDT0RST_Msk  (0x1U << RSTEVTCLR_WDT0RST_Pos)

#define RSTEVTCLR_WDT0RST_NO_EFFECT  ((0x0U) << RSTEVTCLR_WDT0RST_Pos)
#define RSTEVTCLR_WDT0RST_CLEAR      ((0x1U) << RSTEVTCLR_WDT0RST_Pos)

#define RSTEVTCLR_WDT0RST_(x)  (((x) << RSTEVTCLR_WDT0RST_Pos) & RSTEVTCLR_WDT0RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       WDT1RST
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon WDT1 reset event
  */
#define RSTEVTCLR_WDT1RST_Pos  (11)
#define RSTEVTCLR_WDT1RST_Msk  (0x1U << RSTEVTCLR_WDT1RST_Pos)

#define RSTEVTCLR_WDT1RST_NO_EFFECT  ((0x0U) << RSTEVTCLR_WDT1RST_Pos)
#define RSTEVTCLR_WDT1RST_CLEAR      ((0x1U) << RSTEVTCLR_WDT1RST_Pos)

#define RSTEVTCLR_WDT1RST_(x)  (((x) << RSTEVTCLR_WDT1RST_Pos) & RSTEVTCLR_WDT1RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       SYSRST
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon system reset event
  */
#define RSTEVTCLR_SYSRST_Pos  (12)
#define RSTEVTCLR_SYSRST_Msk  (0x1U << RSTEVTCLR_SYSRST_Pos)

#define RSTEVTCLR_SYSRST_NO_EFFECT  ((0x0U) << RSTEVTCLR_SYSRST_Pos)
#define RSTEVTCLR_SYSRST_CLEAR      ((0x1U) << RSTEVTCLR_SYSRST_Pos)

#define RSTEVTCLR_SYSRST_(x)  (((x) << RSTEVTCLR_SYSRST_Pos) & RSTEVTCLR_SYSRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTCLR       PINRST
  *  @access     SYSTEM->RSTEVTCLR
  *  @brief      Clear reset flag upon XRSTn pin reset event
  */
#define RSTEVTCLR_PINRST_Pos  (13)
#define RSTEVTCLR_PINRST_Msk  (0x1U << RSTEVTCLR_PINRST_Pos)

#define RSTEVTCLR_PINRST_NO_EFFECT  ((0x0U) << RSTEVTCLR_PINRST_Pos)
#define RSTEVTCLR_PINRST_CLEAR      ((0x1U) << RSTEVTCLR_PINRST_Pos)

#define RSTEVTCLR_PINRST_(x)  (((x) << RSTEVTCLR_PINRST_Pos) & RSTEVTCLR_PINRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        VDD12UV
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon VDD12UV event
  */
#define RSTEVTEN_VDD12UV_Pos  (0)
#define RSTEVTEN_VDD12UV_Msk  (0x1U << RSTEVTEN_VDD12UV_Pos)

#define RSTEVTEN_VDD12UV_DISABLE  ((0x0U) << RSTEVTEN_VDD12UV_Pos)
#define RSTEVTEN_VDD12UV_ENABLE   ((0x1U) << RSTEVTEN_VDD12UV_Pos)

#define RSTEVTEN_VDD12UV_(x)  (((x) << RSTEVTEN_VDD12UV_Pos) & RSTEVTEN_VDD12UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        VDD12OV
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon VDD12OV event
  */
#define RSTEVTEN_VDD12OV_Pos  (1)
#define RSTEVTEN_VDD12OV_Msk  (0x1U << RSTEVTEN_VDD12OV_Pos)

#define RSTEVTEN_VDD12OV_DISABLE  ((0x0U) << RSTEVTEN_VDD12OV_Pos)
#define RSTEVTEN_VDD12OV_ENABLE   ((0x1U) << RSTEVTEN_VDD12OV_Pos)

#define RSTEVTEN_VDD12OV_(x)  (((x) << RSTEVTEN_VDD12OV_Pos) & RSTEVTEN_VDD12OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        VDD33UV
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon VDD33UV event
  */
#define RSTEVTEN_VDD33UV_Pos  (2)
#define RSTEVTEN_VDD33UV_Msk  (0x1U << RSTEVTEN_VDD33UV_Pos)

#define RSTEVTEN_VDD33UV_DISABLE  ((0x0U) << RSTEVTEN_VDD33UV_Pos)
#define RSTEVTEN_VDD33UV_ENABLE   ((0x1U) << RSTEVTEN_VDD33UV_Pos)

#define RSTEVTEN_VDD33UV_(x)  (((x) << RSTEVTEN_VDD33UV_Pos) & RSTEVTEN_VDD33UV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        VDD33OV
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon VDD33OV event
  */
#define RSTEVTEN_VDD33OV_Pos  (3)
#define RSTEVTEN_VDD33OV_Msk  (0x1U << RSTEVTEN_VDD33OV_Pos)

#define RSTEVTEN_VDD33OV_DISABLE  ((0x0U) << RSTEVTEN_VDD33OV_Pos)
#define RSTEVTEN_VDD33OV_ENABLE   ((0x1U) << RSTEVTEN_VDD33OV_Pos)

#define RSTEVTEN_VDD33OV_(x)  (((x) << RSTEVTEN_VDD33OV_Pos) & RSTEVTEN_VDD33OV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        PLLUNLOCK
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon PLL unlock event
  */
#define RSTEVTEN_PLLUNLOCK_Pos  (4)
#define RSTEVTEN_PLLUNLOCK_Msk  (0x1U << RSTEVTEN_PLLUNLOCK_Pos)

#define RSTEVTEN_PLLUNLOCK_DISABLE  ((0x0U) << RSTEVTEN_PLLUNLOCK_Pos)
#define RSTEVTEN_PLLUNLOCK_ENABLE   ((0x1U) << RSTEVTEN_PLLUNLOCK_Pos)

#define RSTEVTEN_PLLUNLOCK_(x)  (((x) << RSTEVTEN_PLLUNLOCK_Pos) & RSTEVTEN_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        CLKDETERR
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon CLKDETERR event
  */
#define RSTEVTEN_CLKDETERR_Pos  (5)
#define RSTEVTEN_CLKDETERR_Msk  (0x1U << RSTEVTEN_CLKDETERR_Pos)

#define RSTEVTEN_CLKDETERR_DISABLE  ((0x0U) << RSTEVTEN_CLKDETERR_Pos)
#define RSTEVTEN_CLKDETERR_ENABLE   ((0x1U) << RSTEVTEN_CLKDETERR_Pos)

#define RSTEVTEN_CLKDETERR_(x)  (((x) << RSTEVTEN_CLKDETERR_Pos) & RSTEVTEN_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        ROMMBE
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon ROM multi-bit error event
  */
#define RSTEVTEN_ROMMBE_Pos  (6)
#define RSTEVTEN_ROMMBE_Msk  (0x1U << RSTEVTEN_ROMMBE_Pos)

#define RSTEVTEN_ROMMBE_DISABLE  ((0x0U) << RSTEVTEN_ROMMBE_Pos)
#define RSTEVTEN_ROMMBE_ENABLE   ((0x1U) << RSTEVTEN_ROMMBE_Pos)

#define RSTEVTEN_ROMMBE_(x)  (((x) << RSTEVTEN_ROMMBE_Pos) & RSTEVTEN_ROMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        FLASHMBE
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon FLASH multi-bit error event
  */
#define RSTEVTEN_FLASHMBE_Pos  (7)
#define RSTEVTEN_FLASHMBE_Msk  (0x1U << RSTEVTEN_FLASHMBE_Pos)

#define RSTEVTEN_FLASHMBE_DISABLE  ((0x0U) << RSTEVTEN_FLASHMBE_Pos)
#define RSTEVTEN_FLASHMBE_ENABLE   ((0x1U) << RSTEVTEN_FLASHMBE_Pos)

#define RSTEVTEN_FLASHMBE_(x)  (((x) << RSTEVTEN_FLASHMBE_Pos) & RSTEVTEN_FLASHMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        RAM0MBE
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon RAM0 multi-bit error event
  */
#define RSTEVTEN_RAM0MBE_Pos  (8)
#define RSTEVTEN_RAM0MBE_Msk  (0x1U << RSTEVTEN_RAM0MBE_Pos)

#define RSTEVTEN_RAM0MBE_DISABLE  ((0x0U) << RSTEVTEN_RAM0MBE_Pos)
#define RSTEVTEN_RAM0MBE_ENABLE   ((0x1U) << RSTEVTEN_RAM0MBE_Pos)

#define RSTEVTEN_RAM0MBE_(x)  (((x) << RSTEVTEN_RAM0MBE_Pos) & RSTEVTEN_RAM0MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        RAM1MBE
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon RAM1 multi-bit error event
  */
#define RSTEVTEN_RAM1MBE_Pos  (9)
#define RSTEVTEN_RAM1MBE_Msk  (0x1U << RSTEVTEN_RAM1MBE_Pos)

#define RSTEVTEN_RAM1MBE_DISABLE  ((0x0U) << RSTEVTEN_RAM1MBE_Pos)
#define RSTEVTEN_RAM1MBE_ENABLE   ((0x1U) << RSTEVTEN_RAM1MBE_Pos)

#define RSTEVTEN_RAM1MBE_(x)  (((x) << RSTEVTEN_RAM1MBE_Pos) & RSTEVTEN_RAM1MBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        WDT0RST
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon WDT0 reset request
  */
#define RSTEVTEN_WDT0RST_Pos  (10)
#define RSTEVTEN_WDT0RST_Msk  (0x1U << RSTEVTEN_WDT0RST_Pos)

#define RSTEVTEN_WDT0RST_DISABLE  ((0x0U) << RSTEVTEN_WDT0RST_Pos)
#define RSTEVTEN_WDT0RST_ENABLE   ((0x1U) << RSTEVTEN_WDT0RST_Pos)

#define RSTEVTEN_WDT0RST_(x)  (((x) << RSTEVTEN_WDT0RST_Pos) & RSTEVTEN_WDT0RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RSTEVTEN        WDT1RST
  *  @access     SYSTEM->RSTEVTEN
  *  @brief      Enable reset upon WDT1 reset request
  */
#define RSTEVTEN_WDT1RST_Pos  (11)
#define RSTEVTEN_WDT1RST_Msk  (0x1U << RSTEVTEN_WDT1RST_Pos)

#define RSTEVTEN_WDT1RST_DISABLE  ((0x0U) << RSTEVTEN_WDT1RST_Pos)
#define RSTEVTEN_WDT1RST_ENABLE   ((0x1U) << RSTEVTEN_WDT1RST_Pos)

#define RSTEVTEN_WDT1RST_(x)  (((x) << RSTEVTEN_WDT1RST_Pos) & RSTEVTEN_WDT1RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSINFO         ROMSIZE
  *  @access     SYSTEM->SYSINFO
  *  @brief      ROM size
  */
#define SYSINFO_ROMSIZE_Pos  (0)
#define SYSINFO_ROMSIZE_Msk  (0x1U << SYSINFO_ROMSIZE_Pos)

#define SYSINFO_ROMSIZE_BASIC  ((0x0U) << SYSINFO_ROMSIZE_Pos)
#define SYSINFO_ROMSIZE_FULL   ((0x1U) << SYSINFO_ROMSIZE_Pos)

#define SYSINFO_ROMSIZE_(x)  (((x) << SYSINFO_ROMSIZE_Pos) & SYSINFO_ROMSIZE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSINFO         RAMSIZE
  *  @access     SYSTEM->SYSINFO
  *  @brief      RAM size
  */
#define SYSINFO_RAMSIZE_Pos  (3)
#define SYSINFO_RAMSIZE_Msk  (0x3U << SYSINFO_RAMSIZE_Pos)

#define SYSINFO_RAMSIZE_8_KB   ((0x00U) << SYSINFO_RAMSIZE_Pos)
#define SYSINFO_RAMSIZE_10_KB  ((0x01U) << SYSINFO_RAMSIZE_Pos)
#define SYSINFO_RAMSIZE_12_KB  ((0x02U) << SYSINFO_RAMSIZE_Pos)
#define SYSINFO_RAMSIZE_16_KB  ((0x03U) << SYSINFO_RAMSIZE_Pos)

#define SYSINFO_RAMSIZE_(x)  (((x) << SYSINFO_RAMSIZE_Pos) & SYSINFO_RAMSIZE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSINFO         CLKOPT
  *  @access     SYSTEM->SYSINFO
  *  @brief      Clock option
  */
#define SYSINFO_CLKOPT_Pos  (5)
#define SYSINFO_CLKOPT_Msk  (0x3U << SYSINFO_CLKOPT_Pos)

#define SYSINFO_CLKOPT_50_MHz_NO_XO   ((0x00U) << SYSINFO_CLKOPT_Pos)
#define SYSINFO_CLKOPT_100_MHz_NO_XO  ((0x01U) << SYSINFO_CLKOPT_Pos)
#define SYSINFO_CLKOPT_50_MHZ         ((0x02U) << SYSINFO_CLKOPT_Pos)
#define SYSINFO_CLKOPT_100_MHZ        ((0x03U) << SYSINFO_CLKOPT_Pos)

#define SYSINFO_CLKOPT_(x)  (((x) << SYSINFO_CLKOPT_Pos) & SYSINFO_CLKOPT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSINFO         ADCBIT
  *  @access     SYSTEM->SYSINFO
  *  @brief      ADC bit resolution
  */
#define SYSINFO_ADCBIT_Pos  (7)
#define SYSINFO_ADCBIT_Msk  (0x3U << SYSINFO_ADCBIT_Pos)

#define SYSINFO_ADCBIT_10_BIT  ((0x00U) << SYSINFO_ADCBIT_Pos)
#define SYSINFO_ADCBIT_11_BIT  ((0x01U) << SYSINFO_ADCBIT_Pos)
#define SYSINFO_ADCBIT_12_BIT  ((0x02U) << SYSINFO_ADCBIT_Pos)
#define SYSINFO_ADCBIT_13_BIT  ((0x03U) << SYSINFO_ADCBIT_Pos)

#define SYSINFO_ADCBIT_(x)  (((x) << SYSINFO_ADCBIT_Pos) & SYSINFO_ADCBIT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          ROMERRADDR      VAL
  *  @access     SYSTEM->ROMERRADDR
  *  @brief      Address where ECC error happened for ROM access
  */
#define ROMERRADDR_VAL_Pos  (0)
#define ROMERRADDR_VAL_Msk  (0xFFFFFFFFU << ROMERRADDR_VAL_Pos)

#define ROMERRADDR_VAL_(x)  (((x) << ROMERRADDR_VAL_Pos) & ROMERRADDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          FLASHERRADDR    VAL
  *  @access     SYSTEM->FLASHERRADDR
  *  @brief      Address where ECC error happened for FLASH access
  */
#define FLASHERRADDR_VAL_Pos  (0)
#define FLASHERRADDR_VAL_Msk  (0xFFFFFFFFU << FLASHERRADDR_VAL_Pos)

#define FLASHERRADDR_VAL_(x)  (((x) << FLASHERRADDR_VAL_Pos) & FLASHERRADDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RAM0ERRADDR     VAL
  *  @access     SYSTEM->RAM0ERRADDR
  *  @brief      Address where ECC error happened for RAM0 access
  */
#define RAM0ERRADDR_VAL_Pos  (0)
#define RAM0ERRADDR_VAL_Msk  (0xFFFFFFFFU << RAM0ERRADDR_VAL_Pos)

#define RAM0ERRADDR_VAL_(x)  (((x) << RAM0ERRADDR_VAL_Pos) & RAM0ERRADDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          RAM1ERRADDR     VAL
  *  @access     SYSTEM->RAM1ERRADDR
  *  @brief      Address where ECC error happened for RAM1 access
  */
#define RAM1ERRADDR_VAL_Pos  (0)
#define RAM1ERRADDR_VAL_Msk  (0xFFFFFFFFU << RAM1ERRADDR_VAL_Pos)

#define RAM1ERRADDR_VAL_(x)  (((x) << RAM1ERRADDR_VAL_Pos) & RAM1ERRADDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          DBGIFCTL        JTAGMODE
  *  @access     SYSTEM->DBGIFCTL
  *  @brief      JTAG or SWD debug interface select
  */
#define DBGIFCTL_JTAGMODE_Pos  (0)
#define DBGIFCTL_JTAGMODE_Msk  (0x1U << DBGIFCTL_JTAGMODE_Pos)

#define DBGIFCTL_JTAGMODE_SWD_MODE   ((0x0U) << DBGIFCTL_JTAGMODE_Pos)
#define DBGIFCTL_JTAGMODE_JTAG_MODE  ((0x1U) << DBGIFCTL_JTAGMODE_Pos)

#define DBGIFCTL_JTAGMODE_(x)  (((x) << DBGIFCTL_JTAGMODE_Pos) & DBGIFCTL_JTAGMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          BOOTINFO        BOOTCNT
  *  @access     SYSTEM->BOOTINFO
  *  @brief      Boot counter, increaed by 1 when each time boot code is executed
  */
#define BOOTINFO_BOOTCNT_Pos  (0)
#define BOOTINFO_BOOTCNT_Msk  (0xFFFFU << BOOTINFO_BOOTCNT_Pos)

#define BOOTINFO_BOOTCNT_(x)  (((x) << BOOTINFO_BOOTCNT_Pos) & BOOTINFO_BOOTCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          BOOTINFO        RAMBISTERR
  *  @access     SYSTEM->BOOTINFO
  *  @brief      RAM built-in self test error
  */
#define BOOTINFO_RAMBISTERR_Pos  (16)
#define BOOTINFO_RAMBISTERR_Msk  (0x1U << BOOTINFO_RAMBISTERR_Pos)

#define BOOTINFO_RAMBISTERR_PASS  ((0x0U) << BOOTINFO_RAMBISTERR_Pos)
#define BOOTINFO_RAMBISTERR_FAIL  ((0x1U) << BOOTINFO_RAMBISTERR_Pos)

#define BOOTINFO_RAMBISTERR_(x)  (((x) << BOOTINFO_RAMBISTERR_Pos) & BOOTINFO_RAMBISTERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          BOOTINFO        FLASHINITERR
  *  @access     SYSTEM->BOOTINFO
  *  @brief      FLASH initialization error
  */
#define BOOTINFO_FLASHINITERR_Pos  (17)
#define BOOTINFO_FLASHINITERR_Msk  (0x1U << BOOTINFO_FLASHINITERR_Pos)

#define BOOTINFO_FLASHINITERR_PASS  ((0x0U) << BOOTINFO_FLASHINITERR_Pos)
#define BOOTINFO_FLASHINITERR_FAIL  ((0x1U) << BOOTINFO_FLASHINITERR_Pos)

#define BOOTINFO_FLASHINITERR_(x)  (((x) << BOOTINFO_FLASHINITERR_Pos) & BOOTINFO_FLASHINITERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          BOOTINFO        EEPROMINITERR
  *  @access     SYSTEM->BOOTINFO
  *  @brief      EEPROM initialization error
  */
#define BOOTINFO_EEPROMINITERR_Pos  (18)
#define BOOTINFO_EEPROMINITERR_Msk  (0x1U << BOOTINFO_EEPROMINITERR_Pos)

#define BOOTINFO_EEPROMINITERR_PASS  ((0x0U) << BOOTINFO_EEPROMINITERR_Pos)
#define BOOTINFO_EEPROMINITERR_FAIL  ((0x1U) << BOOTINFO_EEPROMINITERR_Pos)

#define BOOTINFO_EEPROMINITERR_(x)  (((x) << BOOTINFO_EEPROMINITERR_Pos) & BOOTINFO_EEPROMINITERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          BOOTINFO        REGCHKERR
  *  @access     SYSTEM->BOOTINFO
  *  @brief      Critical register reset default value error
  */
#define BOOTINFO_REGCHKERR_Pos  (19)
#define BOOTINFO_REGCHKERR_Msk  (0x1U << BOOTINFO_REGCHKERR_Pos)

#define BOOTINFO_REGCHKERR_PASS  ((0x0U) << BOOTINFO_REGCHKERR_Pos)
#define BOOTINFO_REGCHKERR_FAIL  ((0x1U) << BOOTINFO_REGCHKERR_Pos)

#define BOOTINFO_REGCHKERR_(x)  (((x) << BOOTINFO_REGCHKERR_Pos) & BOOTINFO_REGCHKERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       DBUS
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      D-bus multi-bit ECC error event flag
  */
#define AHBMBEFLG_DBUS_Pos  (0)
#define AHBMBEFLG_DBUS_Msk  (0x1U << AHBMBEFLG_DBUS_Pos)

#define AHBMBEFLG_DBUS_NOT_OCCUR  ((0x0U) << AHBMBEFLG_DBUS_Pos)
#define AHBMBEFLG_DBUS_OCCUR      ((0x1U) << AHBMBEFLG_DBUS_Pos)

#define AHBMBEFLG_DBUS_(x)  (((x) << AHBMBEFLG_DBUS_Pos) & AHBMBEFLG_DBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       IBUS
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      I-bus multi-bit ECC error event flag
  */
#define AHBMBEFLG_IBUS_Pos  (1)
#define AHBMBEFLG_IBUS_Msk  (0x1U << AHBMBEFLG_IBUS_Pos)

#define AHBMBEFLG_IBUS_NOT_OCCUR  ((0x0U) << AHBMBEFLG_IBUS_Pos)
#define AHBMBEFLG_IBUS_OCCUR      ((0x1U) << AHBMBEFLG_IBUS_Pos)

#define AHBMBEFLG_IBUS_(x)  (((x) << AHBMBEFLG_IBUS_Pos) & AHBMBEFLG_IBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       SBUS
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      S-bus multi-bit ECC error event flag
  */
#define AHBMBEFLG_SBUS_Pos  (2)
#define AHBMBEFLG_SBUS_Msk  (0x1U << AHBMBEFLG_SBUS_Pos)

#define AHBMBEFLG_SBUS_NOT_OCCUR  ((0x0U) << AHBMBEFLG_SBUS_Pos)
#define AHBMBEFLG_SBUS_OCCUR      ((0x1U) << AHBMBEFLG_SBUS_Pos)

#define AHBMBEFLG_SBUS_(x)  (((x) << AHBMBEFLG_SBUS_Pos) & AHBMBEFLG_SBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       DMA
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      DMA AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_DMA_Pos  (3)
#define AHBMBEFLG_DMA_Msk  (0x1U << AHBMBEFLG_DMA_Pos)

#define AHBMBEFLG_DMA_NOT_OCCUR  ((0x0U) << AHBMBEFLG_DMA_Pos)
#define AHBMBEFLG_DMA_OCCUR      ((0x1U) << AHBMBEFLG_DMA_Pos)

#define AHBMBEFLG_DMA_(x)  (((x) << AHBMBEFLG_DMA_Pos) & AHBMBEFLG_DMA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       ROM
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      ROM AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_ROM_Pos  (4)
#define AHBMBEFLG_ROM_Msk  (0x1U << AHBMBEFLG_ROM_Pos)

#define AHBMBEFLG_ROM_NOT_OCCUR  ((0x0U) << AHBMBEFLG_ROM_Pos)
#define AHBMBEFLG_ROM_OCCUR      ((0x1U) << AHBMBEFLG_ROM_Pos)

#define AHBMBEFLG_ROM_(x)  (((x) << AHBMBEFLG_ROM_Pos) & AHBMBEFLG_ROM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       XIP
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      XIP AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_XIP_Pos  (5)
#define AHBMBEFLG_XIP_Msk  (0x1U << AHBMBEFLG_XIP_Pos)

#define AHBMBEFLG_XIP_NOT_OCCUR  ((0x0U) << AHBMBEFLG_XIP_Pos)
#define AHBMBEFLG_XIP_OCCUR      ((0x1U) << AHBMBEFLG_XIP_Pos)

#define AHBMBEFLG_XIP_(x)  (((x) << AHBMBEFLG_XIP_Pos) & AHBMBEFLG_XIP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       RAM0
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      RAM0 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_RAM0_Pos  (6)
#define AHBMBEFLG_RAM0_Msk  (0x1U << AHBMBEFLG_RAM0_Pos)

#define AHBMBEFLG_RAM0_NOT_OCCUR  ((0x0U) << AHBMBEFLG_RAM0_Pos)
#define AHBMBEFLG_RAM0_OCCUR      ((0x1U) << AHBMBEFLG_RAM0_Pos)

#define AHBMBEFLG_RAM0_(x)  (((x) << AHBMBEFLG_RAM0_Pos) & AHBMBEFLG_RAM0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       RAM1
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      RAM1 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_RAM1_Pos  (7)
#define AHBMBEFLG_RAM1_Msk  (0x1U << AHBMBEFLG_RAM1_Pos)

#define AHBMBEFLG_RAM1_NOT_OCCUR  ((0x0U) << AHBMBEFLG_RAM1_Pos)
#define AHBMBEFLG_RAM1_OCCUR      ((0x1U) << AHBMBEFLG_RAM1_Pos)

#define AHBMBEFLG_RAM1_(x)  (((x) << AHBMBEFLG_RAM1_Pos) & AHBMBEFLG_RAM1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       GLBREG
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      Global control AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_GLBREG_Pos  (8)
#define AHBMBEFLG_GLBREG_Msk  (0x1U << AHBMBEFLG_GLBREG_Pos)

#define AHBMBEFLG_GLBREG_NOT_OCCUR  ((0x0U) << AHBMBEFLG_GLBREG_Pos)
#define AHBMBEFLG_GLBREG_OCCUR      ((0x1U) << AHBMBEFLG_GLBREG_Pos)

#define AHBMBEFLG_GLBREG_(x)  (((x) << AHBMBEFLG_GLBREG_Pos) & AHBMBEFLG_GLBREG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       WDT0
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      WDT0 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_WDT0_Pos  (9)
#define AHBMBEFLG_WDT0_Msk  (0x1U << AHBMBEFLG_WDT0_Pos)

#define AHBMBEFLG_WDT0_NOT_OCCUR  ((0x0U) << AHBMBEFLG_WDT0_Pos)
#define AHBMBEFLG_WDT0_OCCUR      ((0x1U) << AHBMBEFLG_WDT0_Pos)

#define AHBMBEFLG_WDT0_(x)  (((x) << AHBMBEFLG_WDT0_Pos) & AHBMBEFLG_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       WDT1
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      WDT1 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_WDT1_Pos  (10)
#define AHBMBEFLG_WDT1_Msk  (0x1U << AHBMBEFLG_WDT1_Pos)

#define AHBMBEFLG_WDT1_NOT_OCCUR  ((0x0U) << AHBMBEFLG_WDT1_Pos)
#define AHBMBEFLG_WDT1_OCCUR      ((0x1U) << AHBMBEFLG_WDT1_Pos)

#define AHBMBEFLG_WDT1_(x)  (((x) << AHBMBEFLG_WDT1_Pos) & AHBMBEFLG_WDT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       GPIO
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      GPIO AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_GPIO_Pos  (11)
#define AHBMBEFLG_GPIO_Msk  (0x1U << AHBMBEFLG_GPIO_Pos)

#define AHBMBEFLG_GPIO_NOT_OCCUR  ((0x0U) << AHBMBEFLG_GPIO_Pos)
#define AHBMBEFLG_GPIO_OCCUR      ((0x1U) << AHBMBEFLG_GPIO_Pos)

#define AHBMBEFLG_GPIO_(x)  (((x) << AHBMBEFLG_GPIO_Pos) & AHBMBEFLG_GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       UART0
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      UART0 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_UART0_Pos  (12)
#define AHBMBEFLG_UART0_Msk  (0x1U << AHBMBEFLG_UART0_Pos)

#define AHBMBEFLG_UART0_NOT_OCCUR  ((0x0U) << AHBMBEFLG_UART0_Pos)
#define AHBMBEFLG_UART0_OCCUR      ((0x1U) << AHBMBEFLG_UART0_Pos)

#define AHBMBEFLG_UART0_(x)  (((x) << AHBMBEFLG_UART0_Pos) & AHBMBEFLG_UART0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       UART1
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      UART1 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_UART1_Pos  (13)
#define AHBMBEFLG_UART1_Msk  (0x1U << AHBMBEFLG_UART1_Pos)

#define AHBMBEFLG_UART1_NOT_OCCUR  ((0x0U) << AHBMBEFLG_UART1_Pos)
#define AHBMBEFLG_UART1_OCCUR      ((0x1U) << AHBMBEFLG_UART1_Pos)

#define AHBMBEFLG_UART1_(x)  (((x) << AHBMBEFLG_UART1_Pos) & AHBMBEFLG_UART1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       SPI0
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      SPI0 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_SPI0_Pos  (14)
#define AHBMBEFLG_SPI0_Msk  (0x1U << AHBMBEFLG_SPI0_Pos)

#define AHBMBEFLG_SPI0_NOT_OCCUR  ((0x0U) << AHBMBEFLG_SPI0_Pos)
#define AHBMBEFLG_SPI0_OCCUR      ((0x1U) << AHBMBEFLG_SPI0_Pos)

#define AHBMBEFLG_SPI0_(x)  (((x) << AHBMBEFLG_SPI0_Pos) & AHBMBEFLG_SPI0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       SPI1
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      SPI1 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_SPI1_Pos  (15)
#define AHBMBEFLG_SPI1_Msk  (0x1U << AHBMBEFLG_SPI1_Pos)

#define AHBMBEFLG_SPI1_NOT_OCCUR  ((0x0U) << AHBMBEFLG_SPI1_Pos)
#define AHBMBEFLG_SPI1_OCCUR      ((0x1U) << AHBMBEFLG_SPI1_Pos)

#define AHBMBEFLG_SPI1_(x)  (((x) << AHBMBEFLG_SPI1_Pos) & AHBMBEFLG_SPI1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       I2C
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      I2C AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_I2C_Pos  (16)
#define AHBMBEFLG_I2C_Msk  (0x1U << AHBMBEFLG_I2C_Pos)

#define AHBMBEFLG_I2C_NOT_OCCUR  ((0x0U) << AHBMBEFLG_I2C_Pos)
#define AHBMBEFLG_I2C_OCCUR      ((0x1U) << AHBMBEFLG_I2C_Pos)

#define AHBMBEFLG_I2C_(x)  (((x) << AHBMBEFLG_I2C_Pos) & AHBMBEFLG_I2C_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       CAN
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      CAN AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_CAN_Pos  (17)
#define AHBMBEFLG_CAN_Msk  (0x1U << AHBMBEFLG_CAN_Pos)

#define AHBMBEFLG_CAN_NOT_OCCUR  ((0x0U) << AHBMBEFLG_CAN_Pos)
#define AHBMBEFLG_CAN_OCCUR      ((0x1U) << AHBMBEFLG_CAN_Pos)

#define AHBMBEFLG_CAN_(x)  (((x) << AHBMBEFLG_CAN_Pos) & AHBMBEFLG_CAN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       TIMER0
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      TIMER0 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_TIMER0_Pos  (18)
#define AHBMBEFLG_TIMER0_Msk  (0x1U << AHBMBEFLG_TIMER0_Pos)

#define AHBMBEFLG_TIMER0_NOT_OCCUR  ((0x0U) << AHBMBEFLG_TIMER0_Pos)
#define AHBMBEFLG_TIMER0_OCCUR      ((0x1U) << AHBMBEFLG_TIMER0_Pos)

#define AHBMBEFLG_TIMER0_(x)  (((x) << AHBMBEFLG_TIMER0_Pos) & AHBMBEFLG_TIMER0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       TIMER1
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      TIMER1 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_TIMER1_Pos  (19)
#define AHBMBEFLG_TIMER1_Msk  (0x1U << AHBMBEFLG_TIMER1_Pos)

#define AHBMBEFLG_TIMER1_NOT_OCCUR  ((0x0U) << AHBMBEFLG_TIMER1_Pos)
#define AHBMBEFLG_TIMER1_OCCUR      ((0x1U) << AHBMBEFLG_TIMER1_Pos)

#define AHBMBEFLG_TIMER1_(x)  (((x) << AHBMBEFLG_TIMER1_Pos) & AHBMBEFLG_TIMER1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       TIMER2
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      TIMER2 AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_TIMER2_Pos  (20)
#define AHBMBEFLG_TIMER2_Msk  (0x1U << AHBMBEFLG_TIMER2_Pos)

#define AHBMBEFLG_TIMER2_NOT_OCCUR  ((0x0U) << AHBMBEFLG_TIMER2_Pos)
#define AHBMBEFLG_TIMER2_OCCUR      ((0x1U) << AHBMBEFLG_TIMER2_Pos)

#define AHBMBEFLG_TIMER2_(x)  (((x) << AHBMBEFLG_TIMER2_Pos) & AHBMBEFLG_TIMER2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       FLASHC
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      FLASHC AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_FLASHC_Pos  (21)
#define AHBMBEFLG_FLASHC_Msk  (0x1U << AHBMBEFLG_FLASHC_Pos)

#define AHBMBEFLG_FLASHC_NOT_OCCUR  ((0x0U) << AHBMBEFLG_FLASHC_Pos)
#define AHBMBEFLG_FLASHC_OCCUR      ((0x1U) << AHBMBEFLG_FLASHC_Pos)

#define AHBMBEFLG_FLASHC_(x)  (((x) << AHBMBEFLG_FLASHC_Pos) & AHBMBEFLG_FLASHC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       DMAC
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      DMAC AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_DMAC_Pos  (22)
#define AHBMBEFLG_DMAC_Msk  (0x1U << AHBMBEFLG_DMAC_Pos)

#define AHBMBEFLG_DMAC_NOT_OCCUR  ((0x0U) << AHBMBEFLG_DMAC_Pos)
#define AHBMBEFLG_DMAC_OCCUR      ((0x1U) << AHBMBEFLG_DMAC_Pos)

#define AHBMBEFLG_DMAC_(x)  (((x) << AHBMBEFLG_DMAC_Pos) & AHBMBEFLG_DMAC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       PWM
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      PWM AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_PWM_Pos  (23)
#define AHBMBEFLG_PWM_Msk  (0x1U << AHBMBEFLG_PWM_Pos)

#define AHBMBEFLG_PWM_NOT_OCCUR  ((0x0U) << AHBMBEFLG_PWM_Pos)
#define AHBMBEFLG_PWM_OCCUR      ((0x1U) << AHBMBEFLG_PWM_Pos)

#define AHBMBEFLG_PWM_(x)  (((x) << AHBMBEFLG_PWM_Pos) & AHBMBEFLG_PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       AFE
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      AFE AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_AFE_Pos  (24)
#define AHBMBEFLG_AFE_Msk  (0x1U << AHBMBEFLG_AFE_Pos)

#define AHBMBEFLG_AFE_NOT_OCCUR  ((0x0U) << AHBMBEFLG_AFE_Pos)
#define AHBMBEFLG_AFE_OCCUR      ((0x1U) << AHBMBEFLG_AFE_Pos)

#define AHBMBEFLG_AFE_(x)  (((x) << AHBMBEFLG_AFE_Pos) & AHBMBEFLG_AFE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       ECAP
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      ECAP AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_ECAP_Pos  (25)
#define AHBMBEFLG_ECAP_Msk  (0x1U << AHBMBEFLG_ECAP_Pos)

#define AHBMBEFLG_ECAP_NOT_OCCUR  ((0x0U) << AHBMBEFLG_ECAP_Pos)
#define AHBMBEFLG_ECAP_OCCUR      ((0x1U) << AHBMBEFLG_ECAP_Pos)

#define AHBMBEFLG_ECAP_(x)  (((x) << AHBMBEFLG_ECAP_Pos) & AHBMBEFLG_ECAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBEFLG       CRC
  *  @access     SYSTEM->AHBMBEFLG
  *  @brief      CRC AHB port multi-bit ECC error event flag
  */
#define AHBMBEFLG_CRC_Pos  (26)
#define AHBMBEFLG_CRC_Msk  (0x1U << AHBMBEFLG_CRC_Pos)

#define AHBMBEFLG_CRC_NOT_OCCUR  ((0x0U) << AHBMBEFLG_CRC_Pos)
#define AHBMBEFLG_CRC_OCCUR      ((0x1U) << AHBMBEFLG_CRC_Pos)

#define AHBMBEFLG_CRC_(x)  (((x) << AHBMBEFLG_CRC_Pos) & AHBMBEFLG_CRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       DBUS
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      D-bus uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_DBUS_Pos  (0)
#define AHBMBECLR_DBUS_Msk  (0x1U << AHBMBECLR_DBUS_Pos)

#define AHBMBECLR_DBUS_NO_EFFECT  ((0x0U) << AHBMBECLR_DBUS_Pos)
#define AHBMBECLR_DBUS_CLEAR      ((0x1U) << AHBMBECLR_DBUS_Pos)

#define AHBMBECLR_DBUS_(x)  (((x) << AHBMBECLR_DBUS_Pos) & AHBMBECLR_DBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       IBUS
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      I-bus uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_IBUS_Pos  (1)
#define AHBMBECLR_IBUS_Msk  (0x1U << AHBMBECLR_IBUS_Pos)

#define AHBMBECLR_IBUS_NO_EFFECT  ((0x0U) << AHBMBECLR_IBUS_Pos)
#define AHBMBECLR_IBUS_CLEAR      ((0x1U) << AHBMBECLR_IBUS_Pos)

#define AHBMBECLR_IBUS_(x)  (((x) << AHBMBECLR_IBUS_Pos) & AHBMBECLR_IBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       SBUS
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      S-bus uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_SBUS_Pos  (2)
#define AHBMBECLR_SBUS_Msk  (0x1U << AHBMBECLR_SBUS_Pos)

#define AHBMBECLR_SBUS_NO_EFFECT  ((0x0U) << AHBMBECLR_SBUS_Pos)
#define AHBMBECLR_SBUS_CLEAR      ((0x1U) << AHBMBECLR_SBUS_Pos)

#define AHBMBECLR_SBUS_(x)  (((x) << AHBMBECLR_SBUS_Pos) & AHBMBECLR_SBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       DMA
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      DMA AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_DMA_Pos  (3)
#define AHBMBECLR_DMA_Msk  (0x1U << AHBMBECLR_DMA_Pos)

#define AHBMBECLR_DMA_NO_EFFECT  ((0x0U) << AHBMBECLR_DMA_Pos)
#define AHBMBECLR_DMA_CLEAR      ((0x1U) << AHBMBECLR_DMA_Pos)

#define AHBMBECLR_DMA_(x)  (((x) << AHBMBECLR_DMA_Pos) & AHBMBECLR_DMA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       ROM
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      ROM AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_ROM_Pos  (4)
#define AHBMBECLR_ROM_Msk  (0x1U << AHBMBECLR_ROM_Pos)

#define AHBMBECLR_ROM_NO_EFFECT  ((0x0U) << AHBMBECLR_ROM_Pos)
#define AHBMBECLR_ROM_CLEAR      ((0x1U) << AHBMBECLR_ROM_Pos)

#define AHBMBECLR_ROM_(x)  (((x) << AHBMBECLR_ROM_Pos) & AHBMBECLR_ROM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       XIP
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      XIP AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_XIP_Pos  (5)
#define AHBMBECLR_XIP_Msk  (0x1U << AHBMBECLR_XIP_Pos)

#define AHBMBECLR_XIP_NO_EFFECT  ((0x0U) << AHBMBECLR_XIP_Pos)
#define AHBMBECLR_XIP_CLEAR      ((0x1U) << AHBMBECLR_XIP_Pos)

#define AHBMBECLR_XIP_(x)  (((x) << AHBMBECLR_XIP_Pos) & AHBMBECLR_XIP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       RAM0
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      RAM0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_RAM0_Pos  (6)
#define AHBMBECLR_RAM0_Msk  (0x1U << AHBMBECLR_RAM0_Pos)

#define AHBMBECLR_RAM0_NO_EFFECT  ((0x0U) << AHBMBECLR_RAM0_Pos)
#define AHBMBECLR_RAM0_CLEAR      ((0x1U) << AHBMBECLR_RAM0_Pos)

#define AHBMBECLR_RAM0_(x)  (((x) << AHBMBECLR_RAM0_Pos) & AHBMBECLR_RAM0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       RAM1
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      RAM1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_RAM1_Pos  (7)
#define AHBMBECLR_RAM1_Msk  (0x1U << AHBMBECLR_RAM1_Pos)

#define AHBMBECLR_RAM1_NO_EFFECT  ((0x0U) << AHBMBECLR_RAM1_Pos)
#define AHBMBECLR_RAM1_CLEAR      ((0x1U) << AHBMBECLR_RAM1_Pos)

#define AHBMBECLR_RAM1_(x)  (((x) << AHBMBECLR_RAM1_Pos) & AHBMBECLR_RAM1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       GLBREG
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      Global control AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_GLBREG_Pos  (8)
#define AHBMBECLR_GLBREG_Msk  (0x1U << AHBMBECLR_GLBREG_Pos)

#define AHBMBECLR_GLBREG_NO_EFFECT  ((0x0U) << AHBMBECLR_GLBREG_Pos)
#define AHBMBECLR_GLBREG_CLEAR      ((0x1U) << AHBMBECLR_GLBREG_Pos)

#define AHBMBECLR_GLBREG_(x)  (((x) << AHBMBECLR_GLBREG_Pos) & AHBMBECLR_GLBREG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       WDT0
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      WDT0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_WDT0_Pos  (9)
#define AHBMBECLR_WDT0_Msk  (0x1U << AHBMBECLR_WDT0_Pos)

#define AHBMBECLR_WDT0_NO_EFFECT  ((0x0U) << AHBMBECLR_WDT0_Pos)
#define AHBMBECLR_WDT0_CLEAR      ((0x1U) << AHBMBECLR_WDT0_Pos)

#define AHBMBECLR_WDT0_(x)  (((x) << AHBMBECLR_WDT0_Pos) & AHBMBECLR_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       WDT1
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      WDT1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_WDT1_Pos  (10)
#define AHBMBECLR_WDT1_Msk  (0x1U << AHBMBECLR_WDT1_Pos)

#define AHBMBECLR_WDT1_NO_EFFECT  ((0x0U) << AHBMBECLR_WDT1_Pos)
#define AHBMBECLR_WDT1_CLEAR      ((0x1U) << AHBMBECLR_WDT1_Pos)

#define AHBMBECLR_WDT1_(x)  (((x) << AHBMBECLR_WDT1_Pos) & AHBMBECLR_WDT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       GPIO
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      GPIO AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_GPIO_Pos  (11)
#define AHBMBECLR_GPIO_Msk  (0x1U << AHBMBECLR_GPIO_Pos)

#define AHBMBECLR_GPIO_NO_EFFECT  ((0x0U) << AHBMBECLR_GPIO_Pos)
#define AHBMBECLR_GPIO_CLEAR      ((0x1U) << AHBMBECLR_GPIO_Pos)

#define AHBMBECLR_GPIO_(x)  (((x) << AHBMBECLR_GPIO_Pos) & AHBMBECLR_GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       UART0
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      UART0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_UART0_Pos  (12)
#define AHBMBECLR_UART0_Msk  (0x1U << AHBMBECLR_UART0_Pos)

#define AHBMBECLR_UART0_NO_EFFECT  ((0x0U) << AHBMBECLR_UART0_Pos)
#define AHBMBECLR_UART0_CLEAR      ((0x1U) << AHBMBECLR_UART0_Pos)

#define AHBMBECLR_UART0_(x)  (((x) << AHBMBECLR_UART0_Pos) & AHBMBECLR_UART0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       UART1
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      UART1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_UART1_Pos  (13)
#define AHBMBECLR_UART1_Msk  (0x1U << AHBMBECLR_UART1_Pos)

#define AHBMBECLR_UART1_NO_EFFECT  ((0x0U) << AHBMBECLR_UART1_Pos)
#define AHBMBECLR_UART1_CLEAR      ((0x1U) << AHBMBECLR_UART1_Pos)

#define AHBMBECLR_UART1_(x)  (((x) << AHBMBECLR_UART1_Pos) & AHBMBECLR_UART1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       SPI0
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      SPI0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_SPI0_Pos  (14)
#define AHBMBECLR_SPI0_Msk  (0x1U << AHBMBECLR_SPI0_Pos)

#define AHBMBECLR_SPI0_NO_EFFECT  ((0x0U) << AHBMBECLR_SPI0_Pos)
#define AHBMBECLR_SPI0_CLEAR      ((0x1U) << AHBMBECLR_SPI0_Pos)

#define AHBMBECLR_SPI0_(x)  (((x) << AHBMBECLR_SPI0_Pos) & AHBMBECLR_SPI0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       SPI1
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      SPI1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_SPI1_Pos  (15)
#define AHBMBECLR_SPI1_Msk  (0x1U << AHBMBECLR_SPI1_Pos)

#define AHBMBECLR_SPI1_NO_EFFECT  ((0x0U) << AHBMBECLR_SPI1_Pos)
#define AHBMBECLR_SPI1_CLEAR      ((0x1U) << AHBMBECLR_SPI1_Pos)

#define AHBMBECLR_SPI1_(x)  (((x) << AHBMBECLR_SPI1_Pos) & AHBMBECLR_SPI1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       I2C
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      I2C AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_I2C_Pos  (16)
#define AHBMBECLR_I2C_Msk  (0x1U << AHBMBECLR_I2C_Pos)

#define AHBMBECLR_I2C_NO_EFFECT  ((0x0U) << AHBMBECLR_I2C_Pos)
#define AHBMBECLR_I2C_CLEAR      ((0x1U) << AHBMBECLR_I2C_Pos)

#define AHBMBECLR_I2C_(x)  (((x) << AHBMBECLR_I2C_Pos) & AHBMBECLR_I2C_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       CAN
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      CAN AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_CAN_Pos  (17)
#define AHBMBECLR_CAN_Msk  (0x1U << AHBMBECLR_CAN_Pos)

#define AHBMBECLR_CAN_NO_EFFECT  ((0x0U) << AHBMBECLR_CAN_Pos)
#define AHBMBECLR_CAN_CLEAR      ((0x1U) << AHBMBECLR_CAN_Pos)

#define AHBMBECLR_CAN_(x)  (((x) << AHBMBECLR_CAN_Pos) & AHBMBECLR_CAN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       TIMER0
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      TIMER0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_TIMER0_Pos  (18)
#define AHBMBECLR_TIMER0_Msk  (0x1U << AHBMBECLR_TIMER0_Pos)

#define AHBMBECLR_TIMER0_NO_EFFECT  ((0x0U) << AHBMBECLR_TIMER0_Pos)
#define AHBMBECLR_TIMER0_CLEAR      ((0x1U) << AHBMBECLR_TIMER0_Pos)

#define AHBMBECLR_TIMER0_(x)  (((x) << AHBMBECLR_TIMER0_Pos) & AHBMBECLR_TIMER0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       TIMER1
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      TIMER1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_TIMER1_Pos  (19)
#define AHBMBECLR_TIMER1_Msk  (0x1U << AHBMBECLR_TIMER1_Pos)

#define AHBMBECLR_TIMER1_NO_EFFECT  ((0x0U) << AHBMBECLR_TIMER1_Pos)
#define AHBMBECLR_TIMER1_CLEAR      ((0x1U) << AHBMBECLR_TIMER1_Pos)

#define AHBMBECLR_TIMER1_(x)  (((x) << AHBMBECLR_TIMER1_Pos) & AHBMBECLR_TIMER1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       TIMER2
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      TIMER2 AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_TIMER2_Pos  (20)
#define AHBMBECLR_TIMER2_Msk  (0x1U << AHBMBECLR_TIMER2_Pos)

#define AHBMBECLR_TIMER2_NO_EFFECT  ((0x0U) << AHBMBECLR_TIMER2_Pos)
#define AHBMBECLR_TIMER2_CLEAR      ((0x1U) << AHBMBECLR_TIMER2_Pos)

#define AHBMBECLR_TIMER2_(x)  (((x) << AHBMBECLR_TIMER2_Pos) & AHBMBECLR_TIMER2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       FLASHC
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      FLASHC AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_FLASHC_Pos  (21)
#define AHBMBECLR_FLASHC_Msk  (0x1U << AHBMBECLR_FLASHC_Pos)

#define AHBMBECLR_FLASHC_NO_EFFECT  ((0x0U) << AHBMBECLR_FLASHC_Pos)
#define AHBMBECLR_FLASHC_CLEAR      ((0x1U) << AHBMBECLR_FLASHC_Pos)

#define AHBMBECLR_FLASHC_(x)  (((x) << AHBMBECLR_FLASHC_Pos) & AHBMBECLR_FLASHC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       DMAC
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      DMAC AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_DMAC_Pos  (22)
#define AHBMBECLR_DMAC_Msk  (0x1U << AHBMBECLR_DMAC_Pos)

#define AHBMBECLR_DMAC_NO_EFFECT  ((0x0U) << AHBMBECLR_DMAC_Pos)
#define AHBMBECLR_DMAC_CLEAR      ((0x1U) << AHBMBECLR_DMAC_Pos)

#define AHBMBECLR_DMAC_(x)  (((x) << AHBMBECLR_DMAC_Pos) & AHBMBECLR_DMAC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       PWM
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      PWM AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_PWM_Pos  (23)
#define AHBMBECLR_PWM_Msk  (0x1U << AHBMBECLR_PWM_Pos)

#define AHBMBECLR_PWM_NO_EFFECT  ((0x0U) << AHBMBECLR_PWM_Pos)
#define AHBMBECLR_PWM_CLEAR      ((0x1U) << AHBMBECLR_PWM_Pos)

#define AHBMBECLR_PWM_(x)  (((x) << AHBMBECLR_PWM_Pos) & AHBMBECLR_PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       AFE
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      AFE AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_AFE_Pos  (24)
#define AHBMBECLR_AFE_Msk  (0x1U << AHBMBECLR_AFE_Pos)

#define AHBMBECLR_AFE_NO_EFFECT  ((0x0U) << AHBMBECLR_AFE_Pos)
#define AHBMBECLR_AFE_CLEAR      ((0x1U) << AHBMBECLR_AFE_Pos)

#define AHBMBECLR_AFE_(x)  (((x) << AHBMBECLR_AFE_Pos) & AHBMBECLR_AFE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       ECAP
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      ECAP AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_ECAP_Pos  (25)
#define AHBMBECLR_ECAP_Msk  (0x1U << AHBMBECLR_ECAP_Pos)

#define AHBMBECLR_ECAP_NO_EFFECT  ((0x0U) << AHBMBECLR_ECAP_Pos)
#define AHBMBECLR_ECAP_CLEAR      ((0x1U) << AHBMBECLR_ECAP_Pos)

#define AHBMBECLR_ECAP_(x)  (((x) << AHBMBECLR_ECAP_Pos) & AHBMBECLR_ECAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBMBECLR       CRC
  *  @access     SYSTEM->AHBMBECLR
  *  @brief      CRC AHB port uncorrectable ECC error event flag clear
  */
#define AHBMBECLR_CRC_Pos  (26)
#define AHBMBECLR_CRC_Msk  (0x1U << AHBMBECLR_CRC_Pos)

#define AHBMBECLR_CRC_NO_EFFECT  ((0x0U) << AHBMBECLR_CRC_Pos)
#define AHBMBECLR_CRC_CLEAR      ((0x1U) << AHBMBECLR_CRC_Pos)

#define AHBMBECLR_CRC_(x)  (((x) << AHBMBECLR_CRC_Pos) & AHBMBECLR_CRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       DBUS
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      D-bus Single-bit ECC error event flag
  */
#define AHBSBEFLG_DBUS_Pos  (0)
#define AHBSBEFLG_DBUS_Msk  (0x1U << AHBSBEFLG_DBUS_Pos)

#define AHBSBEFLG_DBUS_NOT_OCCUR  ((0x0U) << AHBSBEFLG_DBUS_Pos)
#define AHBSBEFLG_DBUS_OCCUR      ((0x1U) << AHBSBEFLG_DBUS_Pos)

#define AHBSBEFLG_DBUS_(x)  (((x) << AHBSBEFLG_DBUS_Pos) & AHBSBEFLG_DBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       IBUS
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      I-bus Single-bit ECC error event flag
  */
#define AHBSBEFLG_IBUS_Pos  (1)
#define AHBSBEFLG_IBUS_Msk  (0x1U << AHBSBEFLG_IBUS_Pos)

#define AHBSBEFLG_IBUS_NOT_OCCUR  ((0x0U) << AHBSBEFLG_IBUS_Pos)
#define AHBSBEFLG_IBUS_OCCUR      ((0x1U) << AHBSBEFLG_IBUS_Pos)

#define AHBSBEFLG_IBUS_(x)  (((x) << AHBSBEFLG_IBUS_Pos) & AHBSBEFLG_IBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       SBUS
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      S-bus Single-bit ECC error event flag
  */
#define AHBSBEFLG_SBUS_Pos  (2)
#define AHBSBEFLG_SBUS_Msk  (0x1U << AHBSBEFLG_SBUS_Pos)

#define AHBSBEFLG_SBUS_NOT_OCCUR  ((0x0U) << AHBSBEFLG_SBUS_Pos)
#define AHBSBEFLG_SBUS_OCCUR      ((0x1U) << AHBSBEFLG_SBUS_Pos)

#define AHBSBEFLG_SBUS_(x)  (((x) << AHBSBEFLG_SBUS_Pos) & AHBSBEFLG_SBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       DMA
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      DMA AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_DMA_Pos  (3)
#define AHBSBEFLG_DMA_Msk  (0x1U << AHBSBEFLG_DMA_Pos)

#define AHBSBEFLG_DMA_NOT_OCCUR  ((0x0U) << AHBSBEFLG_DMA_Pos)
#define AHBSBEFLG_DMA_OCCUR      ((0x1U) << AHBSBEFLG_DMA_Pos)

#define AHBSBEFLG_DMA_(x)  (((x) << AHBSBEFLG_DMA_Pos) & AHBSBEFLG_DMA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       ROM
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      ROM AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_ROM_Pos  (4)
#define AHBSBEFLG_ROM_Msk  (0x1U << AHBSBEFLG_ROM_Pos)

#define AHBSBEFLG_ROM_NOT_OCCUR  ((0x0U) << AHBSBEFLG_ROM_Pos)
#define AHBSBEFLG_ROM_OCCUR      ((0x1U) << AHBSBEFLG_ROM_Pos)

#define AHBSBEFLG_ROM_(x)  (((x) << AHBSBEFLG_ROM_Pos) & AHBSBEFLG_ROM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       XIP
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      XIP AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_XIP_Pos  (5)
#define AHBSBEFLG_XIP_Msk  (0x1U << AHBSBEFLG_XIP_Pos)

#define AHBSBEFLG_XIP_NOT_OCCUR  ((0x0U) << AHBSBEFLG_XIP_Pos)
#define AHBSBEFLG_XIP_OCCUR      ((0x1U) << AHBSBEFLG_XIP_Pos)

#define AHBSBEFLG_XIP_(x)  (((x) << AHBSBEFLG_XIP_Pos) & AHBSBEFLG_XIP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       RAM0
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      RAM0 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_RAM0_Pos  (6)
#define AHBSBEFLG_RAM0_Msk  (0x1U << AHBSBEFLG_RAM0_Pos)

#define AHBSBEFLG_RAM0_NOT_OCCUR  ((0x0U) << AHBSBEFLG_RAM0_Pos)
#define AHBSBEFLG_RAM0_OCCUR      ((0x1U) << AHBSBEFLG_RAM0_Pos)

#define AHBSBEFLG_RAM0_(x)  (((x) << AHBSBEFLG_RAM0_Pos) & AHBSBEFLG_RAM0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       RAM1
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      RAM1 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_RAM1_Pos  (7)
#define AHBSBEFLG_RAM1_Msk  (0x1U << AHBSBEFLG_RAM1_Pos)

#define AHBSBEFLG_RAM1_NOT_OCCUR  ((0x0U) << AHBSBEFLG_RAM1_Pos)
#define AHBSBEFLG_RAM1_OCCUR      ((0x1U) << AHBSBEFLG_RAM1_Pos)

#define AHBSBEFLG_RAM1_(x)  (((x) << AHBSBEFLG_RAM1_Pos) & AHBSBEFLG_RAM1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       GLBREG
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      Global control AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_GLBREG_Pos  (8)
#define AHBSBEFLG_GLBREG_Msk  (0x1U << AHBSBEFLG_GLBREG_Pos)

#define AHBSBEFLG_GLBREG_NOT_OCCUR  ((0x0U) << AHBSBEFLG_GLBREG_Pos)
#define AHBSBEFLG_GLBREG_OCCUR      ((0x1U) << AHBSBEFLG_GLBREG_Pos)

#define AHBSBEFLG_GLBREG_(x)  (((x) << AHBSBEFLG_GLBREG_Pos) & AHBSBEFLG_GLBREG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       WDT0
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      WDT0 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_WDT0_Pos  (9)
#define AHBSBEFLG_WDT0_Msk  (0x1U << AHBSBEFLG_WDT0_Pos)

#define AHBSBEFLG_WDT0_NOT_OCCUR  ((0x0U) << AHBSBEFLG_WDT0_Pos)
#define AHBSBEFLG_WDT0_OCCUR      ((0x1U) << AHBSBEFLG_WDT0_Pos)

#define AHBSBEFLG_WDT0_(x)  (((x) << AHBSBEFLG_WDT0_Pos) & AHBSBEFLG_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       WDT1
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      WDT1 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_WDT1_Pos  (10)
#define AHBSBEFLG_WDT1_Msk  (0x1U << AHBSBEFLG_WDT1_Pos)

#define AHBSBEFLG_WDT1_NOT_OCCUR  ((0x0U) << AHBSBEFLG_WDT1_Pos)
#define AHBSBEFLG_WDT1_OCCUR      ((0x1U) << AHBSBEFLG_WDT1_Pos)

#define AHBSBEFLG_WDT1_(x)  (((x) << AHBSBEFLG_WDT1_Pos) & AHBSBEFLG_WDT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       GPIO
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      GPIO AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_GPIO_Pos  (11)
#define AHBSBEFLG_GPIO_Msk  (0x1U << AHBSBEFLG_GPIO_Pos)

#define AHBSBEFLG_GPIO_NOT_OCCUR  ((0x0U) << AHBSBEFLG_GPIO_Pos)
#define AHBSBEFLG_GPIO_OCCUR      ((0x1U) << AHBSBEFLG_GPIO_Pos)

#define AHBSBEFLG_GPIO_(x)  (((x) << AHBSBEFLG_GPIO_Pos) & AHBSBEFLG_GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       UART0
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      UART0 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_UART0_Pos  (12)
#define AHBSBEFLG_UART0_Msk  (0x1U << AHBSBEFLG_UART0_Pos)

#define AHBSBEFLG_UART0_NOT_OCCUR  ((0x0U) << AHBSBEFLG_UART0_Pos)
#define AHBSBEFLG_UART0_OCCUR      ((0x1U) << AHBSBEFLG_UART0_Pos)

#define AHBSBEFLG_UART0_(x)  (((x) << AHBSBEFLG_UART0_Pos) & AHBSBEFLG_UART0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       UART1
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      UART1 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_UART1_Pos  (13)
#define AHBSBEFLG_UART1_Msk  (0x1U << AHBSBEFLG_UART1_Pos)

#define AHBSBEFLG_UART1_NOT_OCCUR  ((0x0U) << AHBSBEFLG_UART1_Pos)
#define AHBSBEFLG_UART1_OCCUR      ((0x1U) << AHBSBEFLG_UART1_Pos)

#define AHBSBEFLG_UART1_(x)  (((x) << AHBSBEFLG_UART1_Pos) & AHBSBEFLG_UART1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       SPI0
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      SPI0 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_SPI0_Pos  (14)
#define AHBSBEFLG_SPI0_Msk  (0x1U << AHBSBEFLG_SPI0_Pos)

#define AHBSBEFLG_SPI0_NOT_OCCUR  ((0x0U) << AHBSBEFLG_SPI0_Pos)
#define AHBSBEFLG_SPI0_OCCUR      ((0x1U) << AHBSBEFLG_SPI0_Pos)

#define AHBSBEFLG_SPI0_(x)  (((x) << AHBSBEFLG_SPI0_Pos) & AHBSBEFLG_SPI0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       SPI1
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      SPI1 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_SPI1_Pos  (15)
#define AHBSBEFLG_SPI1_Msk  (0x1U << AHBSBEFLG_SPI1_Pos)

#define AHBSBEFLG_SPI1_NOT_OCCUR  ((0x0U) << AHBSBEFLG_SPI1_Pos)
#define AHBSBEFLG_SPI1_OCCUR      ((0x1U) << AHBSBEFLG_SPI1_Pos)

#define AHBSBEFLG_SPI1_(x)  (((x) << AHBSBEFLG_SPI1_Pos) & AHBSBEFLG_SPI1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       I2C
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      I2C AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_I2C_Pos  (16)
#define AHBSBEFLG_I2C_Msk  (0x1U << AHBSBEFLG_I2C_Pos)

#define AHBSBEFLG_I2C_NOT_OCCUR  ((0x0U) << AHBSBEFLG_I2C_Pos)
#define AHBSBEFLG_I2C_OCCUR      ((0x1U) << AHBSBEFLG_I2C_Pos)

#define AHBSBEFLG_I2C_(x)  (((x) << AHBSBEFLG_I2C_Pos) & AHBSBEFLG_I2C_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       CAN
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      CAN AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_CAN_Pos  (17)
#define AHBSBEFLG_CAN_Msk  (0x1U << AHBSBEFLG_CAN_Pos)

#define AHBSBEFLG_CAN_NOT_OCCUR  ((0x0U) << AHBSBEFLG_CAN_Pos)
#define AHBSBEFLG_CAN_OCCUR      ((0x1U) << AHBSBEFLG_CAN_Pos)

#define AHBSBEFLG_CAN_(x)  (((x) << AHBSBEFLG_CAN_Pos) & AHBSBEFLG_CAN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       TIMER0
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      TIMER0 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_TIMER0_Pos  (18)
#define AHBSBEFLG_TIMER0_Msk  (0x1U << AHBSBEFLG_TIMER0_Pos)

#define AHBSBEFLG_TIMER0_NOT_OCCUR  ((0x0U) << AHBSBEFLG_TIMER0_Pos)
#define AHBSBEFLG_TIMER0_OCCUR      ((0x1U) << AHBSBEFLG_TIMER0_Pos)

#define AHBSBEFLG_TIMER0_(x)  (((x) << AHBSBEFLG_TIMER0_Pos) & AHBSBEFLG_TIMER0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       TIMER1
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      TIMER1 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_TIMER1_Pos  (19)
#define AHBSBEFLG_TIMER1_Msk  (0x1U << AHBSBEFLG_TIMER1_Pos)

#define AHBSBEFLG_TIMER1_NOT_OCCUR  ((0x0U) << AHBSBEFLG_TIMER1_Pos)
#define AHBSBEFLG_TIMER1_OCCUR      ((0x1U) << AHBSBEFLG_TIMER1_Pos)

#define AHBSBEFLG_TIMER1_(x)  (((x) << AHBSBEFLG_TIMER1_Pos) & AHBSBEFLG_TIMER1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       TIMER2
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      TIMER2 AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_TIMER2_Pos  (20)
#define AHBSBEFLG_TIMER2_Msk  (0x1U << AHBSBEFLG_TIMER2_Pos)

#define AHBSBEFLG_TIMER2_NOT_OCCUR  ((0x0U) << AHBSBEFLG_TIMER2_Pos)
#define AHBSBEFLG_TIMER2_OCCUR      ((0x1U) << AHBSBEFLG_TIMER2_Pos)

#define AHBSBEFLG_TIMER2_(x)  (((x) << AHBSBEFLG_TIMER2_Pos) & AHBSBEFLG_TIMER2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       FLASHC
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      FLASHC AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_FLASHC_Pos  (21)
#define AHBSBEFLG_FLASHC_Msk  (0x1U << AHBSBEFLG_FLASHC_Pos)

#define AHBSBEFLG_FLASHC_NOT_OCCUR  ((0x0U) << AHBSBEFLG_FLASHC_Pos)
#define AHBSBEFLG_FLASHC_OCCUR      ((0x1U) << AHBSBEFLG_FLASHC_Pos)

#define AHBSBEFLG_FLASHC_(x)  (((x) << AHBSBEFLG_FLASHC_Pos) & AHBSBEFLG_FLASHC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       DMAC
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      DMAC AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_DMAC_Pos  (22)
#define AHBSBEFLG_DMAC_Msk  (0x1U << AHBSBEFLG_DMAC_Pos)

#define AHBSBEFLG_DMAC_NOT_OCCUR  ((0x0U) << AHBSBEFLG_DMAC_Pos)
#define AHBSBEFLG_DMAC_OCCUR      ((0x1U) << AHBSBEFLG_DMAC_Pos)

#define AHBSBEFLG_DMAC_(x)  (((x) << AHBSBEFLG_DMAC_Pos) & AHBSBEFLG_DMAC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       PWM
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      PWM AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_PWM_Pos  (23)
#define AHBSBEFLG_PWM_Msk  (0x1U << AHBSBEFLG_PWM_Pos)

#define AHBSBEFLG_PWM_NOT_OCCUR  ((0x0U) << AHBSBEFLG_PWM_Pos)
#define AHBSBEFLG_PWM_OCCUR      ((0x1U) << AHBSBEFLG_PWM_Pos)

#define AHBSBEFLG_PWM_(x)  (((x) << AHBSBEFLG_PWM_Pos) & AHBSBEFLG_PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       AFE
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      AFE AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_AFE_Pos  (24)
#define AHBSBEFLG_AFE_Msk  (0x1U << AHBSBEFLG_AFE_Pos)

#define AHBSBEFLG_AFE_NOT_OCCUR  ((0x0U) << AHBSBEFLG_AFE_Pos)
#define AHBSBEFLG_AFE_OCCUR      ((0x1U) << AHBSBEFLG_AFE_Pos)

#define AHBSBEFLG_AFE_(x)  (((x) << AHBSBEFLG_AFE_Pos) & AHBSBEFLG_AFE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       ECAP
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      ECAP AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_ECAP_Pos  (25)
#define AHBSBEFLG_ECAP_Msk  (0x1U << AHBSBEFLG_ECAP_Pos)

#define AHBSBEFLG_ECAP_NOT_OCCUR  ((0x0U) << AHBSBEFLG_ECAP_Pos)
#define AHBSBEFLG_ECAP_OCCUR      ((0x1U) << AHBSBEFLG_ECAP_Pos)

#define AHBSBEFLG_ECAP_(x)  (((x) << AHBSBEFLG_ECAP_Pos) & AHBSBEFLG_ECAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBEFLG       CRC
  *  @access     SYSTEM->AHBSBEFLG
  *  @brief      CRC AHB port Single-bit ECC error event flag
  */
#define AHBSBEFLG_CRC_Pos  (26)
#define AHBSBEFLG_CRC_Msk  (0x1U << AHBSBEFLG_CRC_Pos)

#define AHBSBEFLG_CRC_NOT_OCCUR  ((0x0U) << AHBSBEFLG_CRC_Pos)
#define AHBSBEFLG_CRC_OCCUR      ((0x1U) << AHBSBEFLG_CRC_Pos)

#define AHBSBEFLG_CRC_(x)  (((x) << AHBSBEFLG_CRC_Pos) & AHBSBEFLG_CRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       DBUS
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      D-bus uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_DBUS_Pos  (0)
#define AHBSBECLR_DBUS_Msk  (0x1U << AHBSBECLR_DBUS_Pos)

#define AHBSBECLR_DBUS_NO_EFFECT  ((0x0U) << AHBSBECLR_DBUS_Pos)
#define AHBSBECLR_DBUS_CLEAR      ((0x1U) << AHBSBECLR_DBUS_Pos)

#define AHBSBECLR_DBUS_(x)  (((x) << AHBSBECLR_DBUS_Pos) & AHBSBECLR_DBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       IBUS
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      I-bus uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_IBUS_Pos  (1)
#define AHBSBECLR_IBUS_Msk  (0x1U << AHBSBECLR_IBUS_Pos)

#define AHBSBECLR_IBUS_NO_EFFECT  ((0x0U) << AHBSBECLR_IBUS_Pos)
#define AHBSBECLR_IBUS_CLEAR      ((0x1U) << AHBSBECLR_IBUS_Pos)

#define AHBSBECLR_IBUS_(x)  (((x) << AHBSBECLR_IBUS_Pos) & AHBSBECLR_IBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       SBUS
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      S-bus uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_SBUS_Pos  (2)
#define AHBSBECLR_SBUS_Msk  (0x1U << AHBSBECLR_SBUS_Pos)

#define AHBSBECLR_SBUS_NO_EFFECT  ((0x0U) << AHBSBECLR_SBUS_Pos)
#define AHBSBECLR_SBUS_CLEAR      ((0x1U) << AHBSBECLR_SBUS_Pos)

#define AHBSBECLR_SBUS_(x)  (((x) << AHBSBECLR_SBUS_Pos) & AHBSBECLR_SBUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       DMA
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      DMA AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_DMA_Pos  (3)
#define AHBSBECLR_DMA_Msk  (0x1U << AHBSBECLR_DMA_Pos)

#define AHBSBECLR_DMA_NO_EFFECT  ((0x0U) << AHBSBECLR_DMA_Pos)
#define AHBSBECLR_DMA_CLEAR      ((0x1U) << AHBSBECLR_DMA_Pos)

#define AHBSBECLR_DMA_(x)  (((x) << AHBSBECLR_DMA_Pos) & AHBSBECLR_DMA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       ROM
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      ROM AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_ROM_Pos  (4)
#define AHBSBECLR_ROM_Msk  (0x1U << AHBSBECLR_ROM_Pos)

#define AHBSBECLR_ROM_NO_EFFECT  ((0x0U) << AHBSBECLR_ROM_Pos)
#define AHBSBECLR_ROM_CLEAR      ((0x1U) << AHBSBECLR_ROM_Pos)

#define AHBSBECLR_ROM_(x)  (((x) << AHBSBECLR_ROM_Pos) & AHBSBECLR_ROM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       XIP
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      XIP AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_XIP_Pos  (5)
#define AHBSBECLR_XIP_Msk  (0x1U << AHBSBECLR_XIP_Pos)

#define AHBSBECLR_XIP_NO_EFFECT  ((0x0U) << AHBSBECLR_XIP_Pos)
#define AHBSBECLR_XIP_CLEAR      ((0x1U) << AHBSBECLR_XIP_Pos)

#define AHBSBECLR_XIP_(x)  (((x) << AHBSBECLR_XIP_Pos) & AHBSBECLR_XIP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       RAM0
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      RAM0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_RAM0_Pos  (6)
#define AHBSBECLR_RAM0_Msk  (0x1U << AHBSBECLR_RAM0_Pos)

#define AHBSBECLR_RAM0_NO_EFFECT  ((0x0U) << AHBSBECLR_RAM0_Pos)
#define AHBSBECLR_RAM0_CLEAR      ((0x1U) << AHBSBECLR_RAM0_Pos)

#define AHBSBECLR_RAM0_(x)  (((x) << AHBSBECLR_RAM0_Pos) & AHBSBECLR_RAM0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       RAM1
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      RAM1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_RAM1_Pos  (7)
#define AHBSBECLR_RAM1_Msk  (0x1U << AHBSBECLR_RAM1_Pos)

#define AHBSBECLR_RAM1_NO_EFFECT  ((0x0U) << AHBSBECLR_RAM1_Pos)
#define AHBSBECLR_RAM1_CLEAR      ((0x1U) << AHBSBECLR_RAM1_Pos)

#define AHBSBECLR_RAM1_(x)  (((x) << AHBSBECLR_RAM1_Pos) & AHBSBECLR_RAM1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       GLBREG
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      Global control AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_GLBREG_Pos  (8)
#define AHBSBECLR_GLBREG_Msk  (0x1U << AHBSBECLR_GLBREG_Pos)

#define AHBSBECLR_GLBREG_NO_EFFECT  ((0x0U) << AHBSBECLR_GLBREG_Pos)
#define AHBSBECLR_GLBREG_CLEAR      ((0x1U) << AHBSBECLR_GLBREG_Pos)

#define AHBSBECLR_GLBREG_(x)  (((x) << AHBSBECLR_GLBREG_Pos) & AHBSBECLR_GLBREG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       WDT0
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      WDT0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_WDT0_Pos  (9)
#define AHBSBECLR_WDT0_Msk  (0x1U << AHBSBECLR_WDT0_Pos)

#define AHBSBECLR_WDT0_NO_EFFECT  ((0x0U) << AHBSBECLR_WDT0_Pos)
#define AHBSBECLR_WDT0_CLEAR      ((0x1U) << AHBSBECLR_WDT0_Pos)

#define AHBSBECLR_WDT0_(x)  (((x) << AHBSBECLR_WDT0_Pos) & AHBSBECLR_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       WDT1
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      WDT1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_WDT1_Pos  (10)
#define AHBSBECLR_WDT1_Msk  (0x1U << AHBSBECLR_WDT1_Pos)

#define AHBSBECLR_WDT1_NO_EFFECT  ((0x0U) << AHBSBECLR_WDT1_Pos)
#define AHBSBECLR_WDT1_CLEAR      ((0x1U) << AHBSBECLR_WDT1_Pos)

#define AHBSBECLR_WDT1_(x)  (((x) << AHBSBECLR_WDT1_Pos) & AHBSBECLR_WDT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       GPIO
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      GPIO AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_GPIO_Pos  (11)
#define AHBSBECLR_GPIO_Msk  (0x1U << AHBSBECLR_GPIO_Pos)

#define AHBSBECLR_GPIO_NO_EFFECT  ((0x0U) << AHBSBECLR_GPIO_Pos)
#define AHBSBECLR_GPIO_CLEAR      ((0x1U) << AHBSBECLR_GPIO_Pos)

#define AHBSBECLR_GPIO_(x)  (((x) << AHBSBECLR_GPIO_Pos) & AHBSBECLR_GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       UART0
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      UART0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_UART0_Pos  (12)
#define AHBSBECLR_UART0_Msk  (0x1U << AHBSBECLR_UART0_Pos)

#define AHBSBECLR_UART0_NO_EFFECT  ((0x0U) << AHBSBECLR_UART0_Pos)
#define AHBSBECLR_UART0_CLEAR      ((0x1U) << AHBSBECLR_UART0_Pos)

#define AHBSBECLR_UART0_(x)  (((x) << AHBSBECLR_UART0_Pos) & AHBSBECLR_UART0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       UART1
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      UART1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_UART1_Pos  (13)
#define AHBSBECLR_UART1_Msk  (0x1U << AHBSBECLR_UART1_Pos)

#define AHBSBECLR_UART1_NO_EFFECT  ((0x0U) << AHBSBECLR_UART1_Pos)
#define AHBSBECLR_UART1_CLEAR      ((0x1U) << AHBSBECLR_UART1_Pos)

#define AHBSBECLR_UART1_(x)  (((x) << AHBSBECLR_UART1_Pos) & AHBSBECLR_UART1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       SPI0
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      SPI0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_SPI0_Pos  (14)
#define AHBSBECLR_SPI0_Msk  (0x1U << AHBSBECLR_SPI0_Pos)

#define AHBSBECLR_SPI0_NO_EFFECT  ((0x0U) << AHBSBECLR_SPI0_Pos)
#define AHBSBECLR_SPI0_CLEAR      ((0x1U) << AHBSBECLR_SPI0_Pos)

#define AHBSBECLR_SPI0_(x)  (((x) << AHBSBECLR_SPI0_Pos) & AHBSBECLR_SPI0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       SPI1
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      SPI1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_SPI1_Pos  (15)
#define AHBSBECLR_SPI1_Msk  (0x1U << AHBSBECLR_SPI1_Pos)

#define AHBSBECLR_SPI1_NO_EFFECT  ((0x0U) << AHBSBECLR_SPI1_Pos)
#define AHBSBECLR_SPI1_CLEAR      ((0x1U) << AHBSBECLR_SPI1_Pos)

#define AHBSBECLR_SPI1_(x)  (((x) << AHBSBECLR_SPI1_Pos) & AHBSBECLR_SPI1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       I2C
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      I2C AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_I2C_Pos  (16)
#define AHBSBECLR_I2C_Msk  (0x1U << AHBSBECLR_I2C_Pos)

#define AHBSBECLR_I2C_NO_EFFECT  ((0x0U) << AHBSBECLR_I2C_Pos)
#define AHBSBECLR_I2C_CLEAR      ((0x1U) << AHBSBECLR_I2C_Pos)

#define AHBSBECLR_I2C_(x)  (((x) << AHBSBECLR_I2C_Pos) & AHBSBECLR_I2C_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       CAN
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      CAN AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_CAN_Pos  (17)
#define AHBSBECLR_CAN_Msk  (0x1U << AHBSBECLR_CAN_Pos)

#define AHBSBECLR_CAN_NO_EFFECT  ((0x0U) << AHBSBECLR_CAN_Pos)
#define AHBSBECLR_CAN_CLEAR      ((0x1U) << AHBSBECLR_CAN_Pos)

#define AHBSBECLR_CAN_(x)  (((x) << AHBSBECLR_CAN_Pos) & AHBSBECLR_CAN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       TIMER0
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      TIMER0 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_TIMER0_Pos  (18)
#define AHBSBECLR_TIMER0_Msk  (0x1U << AHBSBECLR_TIMER0_Pos)

#define AHBSBECLR_TIMER0_NO_EFFECT  ((0x0U) << AHBSBECLR_TIMER0_Pos)
#define AHBSBECLR_TIMER0_CLEAR      ((0x1U) << AHBSBECLR_TIMER0_Pos)

#define AHBSBECLR_TIMER0_(x)  (((x) << AHBSBECLR_TIMER0_Pos) & AHBSBECLR_TIMER0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       TIMER1
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      TIMER1 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_TIMER1_Pos  (19)
#define AHBSBECLR_TIMER1_Msk  (0x1U << AHBSBECLR_TIMER1_Pos)

#define AHBSBECLR_TIMER1_NO_EFFECT  ((0x0U) << AHBSBECLR_TIMER1_Pos)
#define AHBSBECLR_TIMER1_CLEAR      ((0x1U) << AHBSBECLR_TIMER1_Pos)

#define AHBSBECLR_TIMER1_(x)  (((x) << AHBSBECLR_TIMER1_Pos) & AHBSBECLR_TIMER1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       TIMER2
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      TIMER2 AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_TIMER2_Pos  (20)
#define AHBSBECLR_TIMER2_Msk  (0x1U << AHBSBECLR_TIMER2_Pos)

#define AHBSBECLR_TIMER2_NO_EFFECT  ((0x0U) << AHBSBECLR_TIMER2_Pos)
#define AHBSBECLR_TIMER2_CLEAR      ((0x1U) << AHBSBECLR_TIMER2_Pos)

#define AHBSBECLR_TIMER2_(x)  (((x) << AHBSBECLR_TIMER2_Pos) & AHBSBECLR_TIMER2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       FLASHC
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      FLASHC AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_FLASHC_Pos  (21)
#define AHBSBECLR_FLASHC_Msk  (0x1U << AHBSBECLR_FLASHC_Pos)

#define AHBSBECLR_FLASHC_NO_EFFECT  ((0x0U) << AHBSBECLR_FLASHC_Pos)
#define AHBSBECLR_FLASHC_CLEAR      ((0x1U) << AHBSBECLR_FLASHC_Pos)

#define AHBSBECLR_FLASHC_(x)  (((x) << AHBSBECLR_FLASHC_Pos) & AHBSBECLR_FLASHC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       DMAC
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      DMAC AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_DMAC_Pos  (22)
#define AHBSBECLR_DMAC_Msk  (0x1U << AHBSBECLR_DMAC_Pos)

#define AHBSBECLR_DMAC_NO_EFFECT  ((0x0U) << AHBSBECLR_DMAC_Pos)
#define AHBSBECLR_DMAC_CLEAR      ((0x1U) << AHBSBECLR_DMAC_Pos)

#define AHBSBECLR_DMAC_(x)  (((x) << AHBSBECLR_DMAC_Pos) & AHBSBECLR_DMAC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       PWM
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      PWM AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_PWM_Pos  (23)
#define AHBSBECLR_PWM_Msk  (0x1U << AHBSBECLR_PWM_Pos)

#define AHBSBECLR_PWM_NO_EFFECT  ((0x0U) << AHBSBECLR_PWM_Pos)
#define AHBSBECLR_PWM_CLEAR      ((0x1U) << AHBSBECLR_PWM_Pos)

#define AHBSBECLR_PWM_(x)  (((x) << AHBSBECLR_PWM_Pos) & AHBSBECLR_PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       AFE
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      AFE AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_AFE_Pos  (24)
#define AHBSBECLR_AFE_Msk  (0x1U << AHBSBECLR_AFE_Pos)

#define AHBSBECLR_AFE_NO_EFFECT  ((0x0U) << AHBSBECLR_AFE_Pos)
#define AHBSBECLR_AFE_CLEAR      ((0x1U) << AHBSBECLR_AFE_Pos)

#define AHBSBECLR_AFE_(x)  (((x) << AHBSBECLR_AFE_Pos) & AHBSBECLR_AFE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       ECAP
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      ECAP AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_ECAP_Pos  (25)
#define AHBSBECLR_ECAP_Msk  (0x1U << AHBSBECLR_ECAP_Pos)

#define AHBSBECLR_ECAP_NO_EFFECT  ((0x0U) << AHBSBECLR_ECAP_Pos)
#define AHBSBECLR_ECAP_CLEAR      ((0x1U) << AHBSBECLR_ECAP_Pos)

#define AHBSBECLR_ECAP_(x)  (((x) << AHBSBECLR_ECAP_Pos) & AHBSBECLR_ECAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          AHBSBECLR       CRC
  *  @access     SYSTEM->AHBSBECLR
  *  @brief      CRC AHB port uncorrectable ECC error event flag clear
  */
#define AHBSBECLR_CRC_Pos  (26)
#define AHBSBECLR_CRC_Msk  (0x1U << AHBSBECLR_CRC_Pos)

#define AHBSBECLR_CRC_NO_EFFECT  ((0x0U) << AHBSBECLR_CRC_Pos)
#define AHBSBECLR_CRC_CLEAR      ((0x1U) << AHBSBECLR_CRC_Pos)

#define AHBSBECLR_CRC_(x)  (((x) << AHBSBECLR_CRC_Pos) & AHBSBECLR_CRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      ADC
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      ADC module latched reset event flag
  */
#define PERIRSTFLG_ADC_Pos  (0)
#define PERIRSTFLG_ADC_Msk  (0x1U << PERIRSTFLG_ADC_Pos)

#define PERIRSTFLG_ADC_OCCUR      ((0x0U) << PERIRSTFLG_ADC_Pos)
#define PERIRSTFLG_ADC_NOT_OCCUR  ((0x1U) << PERIRSTFLG_ADC_Pos)

#define PERIRSTFLG_ADC_(x)  (((x) << PERIRSTFLG_ADC_Pos) & PERIRSTFLG_ADC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      PWM
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      PWM module latched reset event flag
  */
#define PERIRSTFLG_PWM_Pos  (1)
#define PERIRSTFLG_PWM_Msk  (0x1U << PERIRSTFLG_PWM_Pos)

#define PERIRSTFLG_PWM_OCCUR      ((0x0U) << PERIRSTFLG_PWM_Pos)
#define PERIRSTFLG_PWM_NOT_OCCUR  ((0x1U) << PERIRSTFLG_PWM_Pos)

#define PERIRSTFLG_PWM_(x)  (((x) << PERIRSTFLG_PWM_Pos) & PERIRSTFLG_PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      ECAP
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      ECAP module latched reset event flag
  */
#define PERIRSTFLG_ECAP_Pos  (2)
#define PERIRSTFLG_ECAP_Msk  (0x1U << PERIRSTFLG_ECAP_Pos)

#define PERIRSTFLG_ECAP_OCCUR      ((0x0U) << PERIRSTFLG_ECAP_Pos)
#define PERIRSTFLG_ECAP_NOT_OCCUR  ((0x1U) << PERIRSTFLG_ECAP_Pos)

#define PERIRSTFLG_ECAP_(x)  (((x) << PERIRSTFLG_ECAP_Pos) & PERIRSTFLG_ECAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      TIMER0
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      TIMER0 module latched reset event flag
  */
#define PERIRSTFLG_TIMER0_Pos  (3)
#define PERIRSTFLG_TIMER0_Msk  (0x1U << PERIRSTFLG_TIMER0_Pos)

#define PERIRSTFLG_TIMER0_OCCUR      ((0x0U) << PERIRSTFLG_TIMER0_Pos)
#define PERIRSTFLG_TIMER0_NOT_OCCUR  ((0x1U) << PERIRSTFLG_TIMER0_Pos)

#define PERIRSTFLG_TIMER0_(x)  (((x) << PERIRSTFLG_TIMER0_Pos) & PERIRSTFLG_TIMER0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      TIMER1
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      TIMER1 module latched reset event flag
  */
#define PERIRSTFLG_TIMER1_Pos  (4)
#define PERIRSTFLG_TIMER1_Msk  (0x1U << PERIRSTFLG_TIMER1_Pos)

#define PERIRSTFLG_TIMER1_OCCUR      ((0x0U) << PERIRSTFLG_TIMER1_Pos)
#define PERIRSTFLG_TIMER1_NOT_OCCUR  ((0x1U) << PERIRSTFLG_TIMER1_Pos)

#define PERIRSTFLG_TIMER1_(x)  (((x) << PERIRSTFLG_TIMER1_Pos) & PERIRSTFLG_TIMER1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      TIMER2
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      TIMER2 module latched reset event flag
  */
#define PERIRSTFLG_TIMER2_Pos  (5)
#define PERIRSTFLG_TIMER2_Msk  (0x1U << PERIRSTFLG_TIMER2_Pos)

#define PERIRSTFLG_TIMER2_OCCUR      ((0x0U) << PERIRSTFLG_TIMER2_Pos)
#define PERIRSTFLG_TIMER2_NOT_OCCUR  ((0x1U) << PERIRSTFLG_TIMER2_Pos)

#define PERIRSTFLG_TIMER2_(x)  (((x) << PERIRSTFLG_TIMER2_Pos) & PERIRSTFLG_TIMER2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      UART0
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      UART0 module latched reset event flag
  */
#define PERIRSTFLG_UART0_Pos  (6)
#define PERIRSTFLG_UART0_Msk  (0x1U << PERIRSTFLG_UART0_Pos)

#define PERIRSTFLG_UART0_OCCUR      ((0x0U) << PERIRSTFLG_UART0_Pos)
#define PERIRSTFLG_UART0_NOT_OCCUR  ((0x1U) << PERIRSTFLG_UART0_Pos)

#define PERIRSTFLG_UART0_(x)  (((x) << PERIRSTFLG_UART0_Pos) & PERIRSTFLG_UART0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      UART1
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      UART1 module latched reset event flag
  */
#define PERIRSTFLG_UART1_Pos  (7)
#define PERIRSTFLG_UART1_Msk  (0x1U << PERIRSTFLG_UART1_Pos)

#define PERIRSTFLG_UART1_OCCUR      ((0x0U) << PERIRSTFLG_UART1_Pos)
#define PERIRSTFLG_UART1_NOT_OCCUR  ((0x1U) << PERIRSTFLG_UART1_Pos)

#define PERIRSTFLG_UART1_(x)  (((x) << PERIRSTFLG_UART1_Pos) & PERIRSTFLG_UART1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      SPI0
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      SPI0 module latched reset event flag
  */
#define PERIRSTFLG_SPI0_Pos  (8)
#define PERIRSTFLG_SPI0_Msk  (0x1U << PERIRSTFLG_SPI0_Pos)

#define PERIRSTFLG_SPI0_OCCUR      ((0x0U) << PERIRSTFLG_SPI0_Pos)
#define PERIRSTFLG_SPI0_NOT_OCCUR  ((0x1U) << PERIRSTFLG_SPI0_Pos)

#define PERIRSTFLG_SPI0_(x)  (((x) << PERIRSTFLG_SPI0_Pos) & PERIRSTFLG_SPI0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      SPI1
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      SPI1 module latched reset event flag
  */
#define PERIRSTFLG_SPI1_Pos  (9)
#define PERIRSTFLG_SPI1_Msk  (0x1U << PERIRSTFLG_SPI1_Pos)

#define PERIRSTFLG_SPI1_OCCUR      ((0x0U) << PERIRSTFLG_SPI1_Pos)
#define PERIRSTFLG_SPI1_NOT_OCCUR  ((0x1U) << PERIRSTFLG_SPI1_Pos)

#define PERIRSTFLG_SPI1_(x)  (((x) << PERIRSTFLG_SPI1_Pos) & PERIRSTFLG_SPI1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      I2C
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      I2C module latched reset event flag
  */
#define PERIRSTFLG_I2C_Pos  (10)
#define PERIRSTFLG_I2C_Msk  (0x1U << PERIRSTFLG_I2C_Pos)

#define PERIRSTFLG_I2C_OCCUR      ((0x0U) << PERIRSTFLG_I2C_Pos)
#define PERIRSTFLG_I2C_NOT_OCCUR  ((0x1U) << PERIRSTFLG_I2C_Pos)

#define PERIRSTFLG_I2C_(x)  (((x) << PERIRSTFLG_I2C_Pos) & PERIRSTFLG_I2C_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      CAN
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      CAN module latched reset event flag
  */
#define PERIRSTFLG_CAN_Pos  (11)
#define PERIRSTFLG_CAN_Msk  (0x1U << PERIRSTFLG_CAN_Pos)

#define PERIRSTFLG_CAN_OCCUR      ((0x0U) << PERIRSTFLG_CAN_Pos)
#define PERIRSTFLG_CAN_NOT_OCCUR  ((0x1U) << PERIRSTFLG_CAN_Pos)

#define PERIRSTFLG_CAN_(x)  (((x) << PERIRSTFLG_CAN_Pos) & PERIRSTFLG_CAN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      AHB
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      Bus and CPU latched reset event flag
  */
#define PERIRSTFLG_AHB_Pos  (12)
#define PERIRSTFLG_AHB_Msk  (0x1U << PERIRSTFLG_AHB_Pos)

#define PERIRSTFLG_AHB_OCCUR      ((0x0U) << PERIRSTFLG_AHB_Pos)
#define PERIRSTFLG_AHB_NOT_OCCUR  ((0x1U) << PERIRSTFLG_AHB_Pos)

#define PERIRSTFLG_AHB_(x)  (((x) << PERIRSTFLG_AHB_Pos) & PERIRSTFLG_AHB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      DG
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      Deglitch module latched reset event flag
  */
#define PERIRSTFLG_DG_Pos  (13)
#define PERIRSTFLG_DG_Msk  (0x1U << PERIRSTFLG_DG_Pos)

#define PERIRSTFLG_DG_OCCUR      ((0x0U) << PERIRSTFLG_DG_Pos)
#define PERIRSTFLG_DG_NOT_OCCUR  ((0x1U) << PERIRSTFLG_DG_Pos)

#define PERIRSTFLG_DG_(x)  (((x) << PERIRSTFLG_DG_Pos) & PERIRSTFLG_DG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      WDT0
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      Watchdog 0 latched reset event flag
  */
#define PERIRSTFLG_WDT0_Pos  (14)
#define PERIRSTFLG_WDT0_Msk  (0x1U << PERIRSTFLG_WDT0_Pos)

#define PERIRSTFLG_WDT0_OCCUR      ((0x0U) << PERIRSTFLG_WDT0_Pos)
#define PERIRSTFLG_WDT0_NOT_OCCUR  ((0x1U) << PERIRSTFLG_WDT0_Pos)

#define PERIRSTFLG_WDT0_(x)  (((x) << PERIRSTFLG_WDT0_Pos) & PERIRSTFLG_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTFLG      WDT1
  *  @access     SYSTEM->PERIRSTFLG
  *  @brief      Watchdog 1 latched reset event flag
  */
#define PERIRSTFLG_WDT1_Pos  (15)
#define PERIRSTFLG_WDT1_Msk  (0x1U << PERIRSTFLG_WDT1_Pos)

#define PERIRSTFLG_WDT1_OCCUR      ((0x0U) << PERIRSTFLG_WDT1_Pos)
#define PERIRSTFLG_WDT1_NOT_OCCUR  ((0x1U) << PERIRSTFLG_WDT1_Pos)

#define PERIRSTFLG_WDT1_(x)  (((x) << PERIRSTFLG_WDT1_Pos) & PERIRSTFLG_WDT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      ADC
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      ADC module reset event clear
  */
#define PERIRSTCLR_ADC_Pos  (0)
#define PERIRSTCLR_ADC_Msk  (0x1U << PERIRSTCLR_ADC_Pos)

#define PERIRSTCLR_ADC_NO_EFFECT  ((0x0U) << PERIRSTCLR_ADC_Pos)
#define PERIRSTCLR_ADC_CLEAR      ((0x1U) << PERIRSTCLR_ADC_Pos)

#define PERIRSTCLR_ADC_(x)  (((x) << PERIRSTCLR_ADC_Pos) & PERIRSTCLR_ADC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      PWM
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      PWM module reset event clear
  */
#define PERIRSTCLR_PWM_Pos  (1)
#define PERIRSTCLR_PWM_Msk  (0x1U << PERIRSTCLR_PWM_Pos)

#define PERIRSTCLR_PWM_NO_EFFECT  ((0x0U) << PERIRSTCLR_PWM_Pos)
#define PERIRSTCLR_PWM_CLEAR      ((0x1U) << PERIRSTCLR_PWM_Pos)

#define PERIRSTCLR_PWM_(x)  (((x) << PERIRSTCLR_PWM_Pos) & PERIRSTCLR_PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      ECAP
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      ECAP module reset event clear
  */
#define PERIRSTCLR_ECAP_Pos  (2)
#define PERIRSTCLR_ECAP_Msk  (0x1U << PERIRSTCLR_ECAP_Pos)

#define PERIRSTCLR_ECAP_NO_EFFECT  ((0x0U) << PERIRSTCLR_ECAP_Pos)
#define PERIRSTCLR_ECAP_CLEAR      ((0x1U) << PERIRSTCLR_ECAP_Pos)

#define PERIRSTCLR_ECAP_(x)  (((x) << PERIRSTCLR_ECAP_Pos) & PERIRSTCLR_ECAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      TIMER0
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      TIMER0 module reset event clear
  */
#define PERIRSTCLR_TIMER0_Pos  (3)
#define PERIRSTCLR_TIMER0_Msk  (0x1U << PERIRSTCLR_TIMER0_Pos)

#define PERIRSTCLR_TIMER0_NO_EFFECT  ((0x0U) << PERIRSTCLR_TIMER0_Pos)
#define PERIRSTCLR_TIMER0_CLEAR      ((0x1U) << PERIRSTCLR_TIMER0_Pos)

#define PERIRSTCLR_TIMER0_(x)  (((x) << PERIRSTCLR_TIMER0_Pos) & PERIRSTCLR_TIMER0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      TIMER1
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      TIMER1 module reset event clear
  */
#define PERIRSTCLR_TIMER1_Pos  (4)
#define PERIRSTCLR_TIMER1_Msk  (0x1U << PERIRSTCLR_TIMER1_Pos)

#define PERIRSTCLR_TIMER1_NO_EFFECT  ((0x0U) << PERIRSTCLR_TIMER1_Pos)
#define PERIRSTCLR_TIMER1_CLEAR      ((0x1U) << PERIRSTCLR_TIMER1_Pos)

#define PERIRSTCLR_TIMER1_(x)  (((x) << PERIRSTCLR_TIMER1_Pos) & PERIRSTCLR_TIMER1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      TIMER2
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      TIMER2 module reset event clear
  */
#define PERIRSTCLR_TIMER2_Pos  (5)
#define PERIRSTCLR_TIMER2_Msk  (0x1U << PERIRSTCLR_TIMER2_Pos)

#define PERIRSTCLR_TIMER2_NO_EFFECT  ((0x0U) << PERIRSTCLR_TIMER2_Pos)
#define PERIRSTCLR_TIMER2_CLEAR      ((0x1U) << PERIRSTCLR_TIMER2_Pos)

#define PERIRSTCLR_TIMER2_(x)  (((x) << PERIRSTCLR_TIMER2_Pos) & PERIRSTCLR_TIMER2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      UART0
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      UART0 module reset event clear
  */
#define PERIRSTCLR_UART0_Pos  (6)
#define PERIRSTCLR_UART0_Msk  (0x1U << PERIRSTCLR_UART0_Pos)

#define PERIRSTCLR_UART0_NO_EFFECT  ((0x0U) << PERIRSTCLR_UART0_Pos)
#define PERIRSTCLR_UART0_CLEAR      ((0x1U) << PERIRSTCLR_UART0_Pos)

#define PERIRSTCLR_UART0_(x)  (((x) << PERIRSTCLR_UART0_Pos) & PERIRSTCLR_UART0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      UART1
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      UART1 module reset event clear
  */
#define PERIRSTCLR_UART1_Pos  (7)
#define PERIRSTCLR_UART1_Msk  (0x1U << PERIRSTCLR_UART1_Pos)

#define PERIRSTCLR_UART1_NO_EFFECT  ((0x0U) << PERIRSTCLR_UART1_Pos)
#define PERIRSTCLR_UART1_CLEAR      ((0x1U) << PERIRSTCLR_UART1_Pos)

#define PERIRSTCLR_UART1_(x)  (((x) << PERIRSTCLR_UART1_Pos) & PERIRSTCLR_UART1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      SPI0
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      SPI0 module reset event clear
  */
#define PERIRSTCLR_SPI0_Pos  (8)
#define PERIRSTCLR_SPI0_Msk  (0x1U << PERIRSTCLR_SPI0_Pos)

#define PERIRSTCLR_SPI0_NO_EFFECT  ((0x0U) << PERIRSTCLR_SPI0_Pos)
#define PERIRSTCLR_SPI0_CLEAR      ((0x1U) << PERIRSTCLR_SPI0_Pos)

#define PERIRSTCLR_SPI0_(x)  (((x) << PERIRSTCLR_SPI0_Pos) & PERIRSTCLR_SPI0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      SPI1
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      SPI1 module reset event clear
  */
#define PERIRSTCLR_SPI1_Pos  (9)
#define PERIRSTCLR_SPI1_Msk  (0x1U << PERIRSTCLR_SPI1_Pos)

#define PERIRSTCLR_SPI1_NO_EFFECT  ((0x0U) << PERIRSTCLR_SPI1_Pos)
#define PERIRSTCLR_SPI1_CLEAR      ((0x1U) << PERIRSTCLR_SPI1_Pos)

#define PERIRSTCLR_SPI1_(x)  (((x) << PERIRSTCLR_SPI1_Pos) & PERIRSTCLR_SPI1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      I2C
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      I2C module reset event clear
  */
#define PERIRSTCLR_I2C_Pos  (10)
#define PERIRSTCLR_I2C_Msk  (0x1U << PERIRSTCLR_I2C_Pos)

#define PERIRSTCLR_I2C_NO_EFFECT  ((0x0U) << PERIRSTCLR_I2C_Pos)
#define PERIRSTCLR_I2C_CLEAR      ((0x1U) << PERIRSTCLR_I2C_Pos)

#define PERIRSTCLR_I2C_(x)  (((x) << PERIRSTCLR_I2C_Pos) & PERIRSTCLR_I2C_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      CAN
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      CAN module reset event clear
  */
#define PERIRSTCLR_CAN_Pos  (11)
#define PERIRSTCLR_CAN_Msk  (0x1U << PERIRSTCLR_CAN_Pos)

#define PERIRSTCLR_CAN_NO_EFFECT  ((0x0U) << PERIRSTCLR_CAN_Pos)
#define PERIRSTCLR_CAN_CLEAR      ((0x1U) << PERIRSTCLR_CAN_Pos)

#define PERIRSTCLR_CAN_(x)  (((x) << PERIRSTCLR_CAN_Pos) & PERIRSTCLR_CAN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      AHB
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      Bus and CPU reset event clear
  */
#define PERIRSTCLR_AHB_Pos  (12)
#define PERIRSTCLR_AHB_Msk  (0x1U << PERIRSTCLR_AHB_Pos)

#define PERIRSTCLR_AHB_NO_EFFECT  ((0x0U) << PERIRSTCLR_AHB_Pos)
#define PERIRSTCLR_AHB_CLEAR      ((0x1U) << PERIRSTCLR_AHB_Pos)

#define PERIRSTCLR_AHB_(x)  (((x) << PERIRSTCLR_AHB_Pos) & PERIRSTCLR_AHB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      DG
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      Deglitch module reset event clear
  */
#define PERIRSTCLR_DG_Pos  (13)
#define PERIRSTCLR_DG_Msk  (0x1U << PERIRSTCLR_DG_Pos)

#define PERIRSTCLR_DG_NO_EFFECT  ((0x0U) << PERIRSTCLR_DG_Pos)
#define PERIRSTCLR_DG_CLEAR      ((0x1U) << PERIRSTCLR_DG_Pos)

#define PERIRSTCLR_DG_(x)  (((x) << PERIRSTCLR_DG_Pos) & PERIRSTCLR_DG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      WDT0
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      Watchdog 0 reset event clear
  */
#define PERIRSTCLR_WDT0_Pos  (14)
#define PERIRSTCLR_WDT0_Msk  (0x1U << PERIRSTCLR_WDT0_Pos)

#define PERIRSTCLR_WDT0_NO_EFFECT  ((0x0U) << PERIRSTCLR_WDT0_Pos)
#define PERIRSTCLR_WDT0_CLEAR      ((0x1U) << PERIRSTCLR_WDT0_Pos)

#define PERIRSTCLR_WDT0_(x)  (((x) << PERIRSTCLR_WDT0_Pos) & PERIRSTCLR_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          PERIRSTCLR      WDT1
  *  @access     SYSTEM->PERIRSTCLR
  *  @brief      Watchdog 1 reset event clear
  */
#define PERIRSTCLR_WDT1_Pos  (15)
#define PERIRSTCLR_WDT1_Msk  (0x1U << PERIRSTCLR_WDT1_Pos)

#define PERIRSTCLR_WDT1_NO_EFFECT  ((0x0U) << PERIRSTCLR_WDT1_Pos)
#define PERIRSTCLR_WDT1_CLEAR      ((0x1U) << PERIRSTCLR_WDT1_Pos)

#define PERIRSTCLR_WDT1_(x)  (((x) << PERIRSTCLR_WDT1_Pos) & PERIRSTCLR_WDT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NVREG0          VAL
  *  @access     SYSTEM->NVREG0
  *  @brief      Value in this register can only be reset via power-cycling
  */
#define NVREG0_VAL_Pos  (0)
#define NVREG0_VAL_Msk  (0xFFFFFFFFU << NVREG0_VAL_Pos)

#define NVREG0_VAL_(x)  (((x) << NVREG0_VAL_Pos) & NVREG0_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NVREG1          VAL
  *  @access     SYSTEM->NVREG1
  *  @brief      Value in this register can only be reset via power-cycling
  */
#define NVREG1_VAL_Pos  (0)
#define NVREG1_VAL_Msk  (0xFFFFFFFFU << NVREG1_VAL_Pos)

#define NVREG1_VAL_(x)  (((x) << NVREG1_VAL_Pos) & NVREG1_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          NVREG2          VAL
  *  @access     SYSTEM->NVREG2
  *  @brief      Value in this register can only be reset via power-cycling
  */
#define NVREG2_VAL_Pos  (0)
#define NVREG2_VAL_Msk  (0xFFFFFFFFU << NVREG2_VAL_Pos)

#define NVREG2_VAL_(x)  (((x) << NVREG2_VAL_Pos) & NVREG2_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SYSTEM          SYSREGKEY       KEY
  *  @access     SYSTEM->SYSREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected system registers
  */
#define SYSREGKEY_KEY_Pos  (0)
#define SYSREGKEY_KEY_Msk  (0xFFFFFFFFU << SYSREGKEY_KEY_Pos)

#define SYSREGKEY_KEY_(x)  (((x) << SYSREGKEY_KEY_Pos) & SYSREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      POWER:                                                                */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           LDOCTL          VOUT
  *  @access     POWER->LDOCTL
  *  @brief      1.2V LDO output voltage
  *              The output will be saturated at the minimum voltage when the code goes lower
  *              below certain code (usually <4).
  *              The output will be saturated at the maximum voltage when the code goes above
  *              certain code (usually>11).
  *              The exact threshold various from chip to chip.
  */
#define LDOCTL_VOUT_Pos  (0)
#define LDOCTL_VOUT_Msk  (0xFU << LDOCTL_VOUT_Pos)

#define LDOCTL_VOUT_1P06_V  ((0x0000U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P08_V  ((0x0001U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P10_V  ((0x0002U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P12_V  ((0x0003U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P14_V  ((0x0004U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P16_V  ((0x0005U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P18_V  ((0x0006U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P20_V  ((0x0007U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P22_V  ((0x0008U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P24_V  ((0x0009U) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P26_V  ((0x000AU) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P28_V  ((0x000BU) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P30_V  ((0x000CU) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P32_V  ((0x000DU) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P34_V  ((0x000EU) << LDOCTL_VOUT_Pos)
#define LDOCTL_VOUT_1P36_V  ((0x000FU) << LDOCTL_VOUT_Pos)

#define LDOCTL_VOUT_(x)  (((x) << LDOCTL_VOUT_Pos) & LDOCTL_VOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD33CTL        UVASVTH
  *  @access     POWER->BOD33CTL
  *  @brief      Select the threshold voltage to assert VDD33UV when 3.3V supply is going low
  */
#define BOD33CTL_UVASVTH_Pos  (0)
#define BOD33CTL_UVASVTH_Msk  (0x7U << BOD33CTL_UVASVTH_Pos)

#define BOD33CTL_UVASVTH_2P58_V  ((0x000U) << BOD33CTL_UVASVTH_Pos)
#define BOD33CTL_UVASVTH_2P65_V  ((0x001U) << BOD33CTL_UVASVTH_Pos)
#define BOD33CTL_UVASVTH_2P72_V  ((0x002U) << BOD33CTL_UVASVTH_Pos)
#define BOD33CTL_UVASVTH_2P79_V  ((0x003U) << BOD33CTL_UVASVTH_Pos)
#define BOD33CTL_UVASVTH_2P86_V  ((0x004U) << BOD33CTL_UVASVTH_Pos)
#define BOD33CTL_UVASVTH_2P94_V  ((0x005U) << BOD33CTL_UVASVTH_Pos)
#define BOD33CTL_UVASVTH_3P03_V  ((0x006U) << BOD33CTL_UVASVTH_Pos)
#define BOD33CTL_UVASVTH_3P12_V  ((0x007U) << BOD33CTL_UVASVTH_Pos)

#define BOD33CTL_UVASVTH_(x)  (((x) << BOD33CTL_UVASVTH_Pos) & BOD33CTL_UVASVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD33CTL        UVDEVTH
  *  @access     POWER->BOD33CTL
  *  @brief      Select the threshold voltage to deassert VDD33UV when 3.3V supply is going high
  */
#define BOD33CTL_UVDEVTH_Pos  (8)
#define BOD33CTL_UVDEVTH_Msk  (0x7U << BOD33CTL_UVDEVTH_Pos)

#define BOD33CTL_UVDEVTH_2P58_V  ((0x000U) << BOD33CTL_UVDEVTH_Pos)
#define BOD33CTL_UVDEVTH_2P65_V  ((0x001U) << BOD33CTL_UVDEVTH_Pos)
#define BOD33CTL_UVDEVTH_2P72_V  ((0x002U) << BOD33CTL_UVDEVTH_Pos)
#define BOD33CTL_UVDEVTH_2P79_V  ((0x003U) << BOD33CTL_UVDEVTH_Pos)
#define BOD33CTL_UVDEVTH_2P86V   ((0x004U) << BOD33CTL_UVDEVTH_Pos)
#define BOD33CTL_UVDEVTH_2P94_V  ((0x005U) << BOD33CTL_UVDEVTH_Pos)
#define BOD33CTL_UVDEVTH_3P03_V  ((0x006U) << BOD33CTL_UVDEVTH_Pos)
#define BOD33CTL_UVDEVTH_3P12_V  ((0x007U) << BOD33CTL_UVDEVTH_Pos)

#define BOD33CTL_UVDEVTH_(x)  (((x) << BOD33CTL_UVDEVTH_Pos) & BOD33CTL_UVDEVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD33CTL        OVASVTH
  *  @access     POWER->BOD33CTL
  *  @brief      Select the threshold voltage to assert VDD33OV when 3.3V supply is going high
  */
#define BOD33CTL_OVASVTH_Pos  (16)
#define BOD33CTL_OVASVTH_Msk  (0x7U << BOD33CTL_OVASVTH_Pos)

#define BOD33CTL_OVASVTH_3P31_V  ((0x000U) << BOD33CTL_OVASVTH_Pos)
#define BOD33CTL_OVASVTH_3P42_V  ((0x001U) << BOD33CTL_OVASVTH_Pos)
#define BOD33CTL_OVASVTH_3P53_V  ((0x002U) << BOD33CTL_OVASVTH_Pos)
#define BOD33CTL_OVASVTH_3P66_V  ((0x003U) << BOD33CTL_OVASVTH_Pos)
#define BOD33CTL_OVASVTH_3P79_V  ((0x004U) << BOD33CTL_OVASVTH_Pos)
#define BOD33CTL_OVASVTH_3P93_V  ((0x005U) << BOD33CTL_OVASVTH_Pos)
#define BOD33CTL_OVASVTH_4P08_V  ((0x006U) << BOD33CTL_OVASVTH_Pos)
#define BOD33CTL_OVASVTH_4P24_V  ((0x007U) << BOD33CTL_OVASVTH_Pos)

#define BOD33CTL_OVASVTH_(x)  (((x) << BOD33CTL_OVASVTH_Pos) & BOD33CTL_OVASVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD33CTL        OVDEVTH
  *  @access     POWER->BOD33CTL
  *  @brief      Select the threshold voltage to deassert VDD33OV when 3.3V supply is going low
  */
#define BOD33CTL_OVDEVTH_Pos  (24)
#define BOD33CTL_OVDEVTH_Msk  (0x7U << BOD33CTL_OVDEVTH_Pos)

#define BOD33CTL_OVDEVTH_3P31_V  ((0x000U) << BOD33CTL_OVDEVTH_Pos)
#define BOD33CTL_OVDEVTH_3P42_V  ((0x001U) << BOD33CTL_OVDEVTH_Pos)
#define BOD33CTL_OVDEVTH_3P53_V  ((0x002U) << BOD33CTL_OVDEVTH_Pos)
#define BOD33CTL_OVDEVTH_3P66_V  ((0x003U) << BOD33CTL_OVDEVTH_Pos)
#define BOD33CTL_OVDEVTH_3P79_V  ((0x004U) << BOD33CTL_OVDEVTH_Pos)
#define BOD33CTL_OVDEVTH_3P93_V  ((0x005U) << BOD33CTL_OVDEVTH_Pos)
#define BOD33CTL_OVDEVTH_4P08_V  ((0x006U) << BOD33CTL_OVDEVTH_Pos)
#define BOD33CTL_OVDEVTH_4P24_V  ((0x007U) << BOD33CTL_OVDEVTH_Pos)

#define BOD33CTL_OVDEVTH_(x)  (((x) << BOD33CTL_OVDEVTH_Pos) & BOD33CTL_OVDEVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD12CTL        UVASVTH
  *  @access     POWER->BOD12CTL
  *  @brief      Select the threshold voltage to assert VDD12UV when 1.2V supply is going low
  */
#define BOD12CTL_UVASVTH_Pos  (0)
#define BOD12CTL_UVASVTH_Msk  (0x7U << BOD12CTL_UVASVTH_Pos)

#define BOD12CTL_UVASVTH_0P94_V  ((0x000U) << BOD12CTL_UVASVTH_Pos)
#define BOD12CTL_UVASVTH_0P97_V  ((0x001U) << BOD12CTL_UVASVTH_Pos)
#define BOD12CTL_UVASVTH_0P99_V  ((0x002U) << BOD12CTL_UVASVTH_Pos)
#define BOD12CTL_UVASVTH_1P02_V  ((0x003U) << BOD12CTL_UVASVTH_Pos)
#define BOD12CTL_UVASVTH_1P04_V  ((0x004U) << BOD12CTL_UVASVTH_Pos)
#define BOD12CTL_UVASVTH_1P07_V  ((0x005U) << BOD12CTL_UVASVTH_Pos)
#define BOD12CTL_UVASVTH_1P10_V  ((0x006U) << BOD12CTL_UVASVTH_Pos)
#define BOD12CTL_UVASVTH_1P14_V  ((0x007U) << BOD12CTL_UVASVTH_Pos)

#define BOD12CTL_UVASVTH_(x)  (((x) << BOD12CTL_UVASVTH_Pos) & BOD12CTL_UVASVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD12CTL        UVDEVTH
  *  @access     POWER->BOD12CTL
  *  @brief      Select the threshold voltage to deassert VDD12UV when 1.2V supply is going high
  */
#define BOD12CTL_UVDEVTH_Pos  (8)
#define BOD12CTL_UVDEVTH_Msk  (0x7U << BOD12CTL_UVDEVTH_Pos)

#define BOD12CTL_UVDEVTH_0P94_V  ((0x000U) << BOD12CTL_UVDEVTH_Pos)
#define BOD12CTL_UVDEVTH_0P97_V  ((0x001U) << BOD12CTL_UVDEVTH_Pos)
#define BOD12CTL_UVDEVTH_0P99_V  ((0x002U) << BOD12CTL_UVDEVTH_Pos)
#define BOD12CTL_UVDEVTH_1P02_V  ((0x003U) << BOD12CTL_UVDEVTH_Pos)
#define BOD12CTL_UVDEVTH_1P04_V  ((0x004U) << BOD12CTL_UVDEVTH_Pos)
#define BOD12CTL_UVDEVTH_1P07_V  ((0x005U) << BOD12CTL_UVDEVTH_Pos)
#define BOD12CTL_UVDEVTH_1P10_V  ((0x006U) << BOD12CTL_UVDEVTH_Pos)
#define BOD12CTL_UVDEVTH_1P14_V  ((0x007U) << BOD12CTL_UVDEVTH_Pos)

#define BOD12CTL_UVDEVTH_(x)  (((x) << BOD12CTL_UVDEVTH_Pos) & BOD12CTL_UVDEVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD12CTL        OVASVTH
  *  @access     POWER->BOD12CTL
  *  @brief      Select the threshold voltage to assert VDD12OV when 1.2V supply is going high
  */
#define BOD12CTL_OVASVTH_Pos  (16)
#define BOD12CTL_OVASVTH_Msk  (0x7U << BOD12CTL_OVASVTH_Pos)

#define BOD12CTL_OVASVTH_1P31_V  ((0x000U) << BOD12CTL_OVASVTH_Pos)
#define BOD12CTL_OVASVTH_1P33_V  ((0x001U) << BOD12CTL_OVASVTH_Pos)
#define BOD12CTL_OVASVTH_1P36_V  ((0x002U) << BOD12CTL_OVASVTH_Pos)
#define BOD12CTL_OVASVTH_1P38_V  ((0x003U) << BOD12CTL_OVASVTH_Pos)
#define BOD12CTL_OVASVTH_1P41_V  ((0x004U) << BOD12CTL_OVASVTH_Pos)
#define BOD12CTL_OVASVTH_1P43_V  ((0x005U) << BOD12CTL_OVASVTH_Pos)
#define BOD12CTL_OVASVTH_1P46_V  ((0x006U) << BOD12CTL_OVASVTH_Pos)
#define BOD12CTL_OVASVTH_1P49_V  ((0x007U) << BOD12CTL_OVASVTH_Pos)

#define BOD12CTL_OVASVTH_(x)  (((x) << BOD12CTL_OVASVTH_Pos) & BOD12CTL_OVASVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           BOD12CTL        OVDEVTH
  *  @access     POWER->BOD12CTL
  *  @brief      Select the threshold voltage to deassert VDD12OV when 1.2V supply is going low
  */
#define BOD12CTL_OVDEVTH_Pos  (24)
#define BOD12CTL_OVDEVTH_Msk  (0x7U << BOD12CTL_OVDEVTH_Pos)

#define BOD12CTL_OVDEVTH_1P31_V  ((0x000U) << BOD12CTL_OVDEVTH_Pos)
#define BOD12CTL_OVDEVTH_1P33_V  ((0x001U) << BOD12CTL_OVDEVTH_Pos)
#define BOD12CTL_OVDEVTH_1P36_V  ((0x002U) << BOD12CTL_OVDEVTH_Pos)
#define BOD12CTL_OVDEVTH_1P38_V  ((0x003U) << BOD12CTL_OVDEVTH_Pos)
#define BOD12CTL_OVDEVTH_1P41_V  ((0x004U) << BOD12CTL_OVDEVTH_Pos)
#define BOD12CTL_OVDEVTH_1P43_V  ((0x005U) << BOD12CTL_OVDEVTH_Pos)
#define BOD12CTL_OVDEVTH_1P46_V  ((0x006U) << BOD12CTL_OVDEVTH_Pos)
#define BOD12CTL_OVDEVTH_1P49_V  ((0x007U) << BOD12CTL_OVDEVTH_Pos)

#define BOD12CTL_OVDEVTH_(x)  (((x) << BOD12CTL_OVDEVTH_Pos) & BOD12CTL_OVDEVTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           PWRMODECMD      KEY
  *  @access     POWER->PWRMODECMD
  *  @brief      Write 0xA5A51EE9 to make the MCU go to deep-sleep
  *              Write 0x5A5A5709 to make the MCU go to stop
  */
#define PWRMODECMD_KEY_Pos  (0)
#define PWRMODECMD_KEY_Msk  (0xFFFFFFFFU << PWRMODECMD_KEY_Pos)

#define PWRMODECMD_KEY_(x)  (((x) << PWRMODECMD_KEY_Pos) & PWRMODECMD_KEY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              POWER           PWRREGKEY       KEY
  *  @access     POWER->PWRREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected power registers
  *              Write 0xACCE55CD to unlock PWRMODECMD register
  */
#define PWRREGKEY_KEY_Pos  (0)
#define PWRREGKEY_KEY_Msk  (0xFFFFFFFFU << PWRREGKEY_KEY_Pos)

#define PWRREGKEY_KEY_(x)  (((x) << PWRREGKEY_KEY_Pos) & PWRREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      CLOCK:                                                                */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          RCORDY
  *  @access     CLOCK->CLKSTS
  *  @brief      RCO clock ready indicator
  */
#define CLKSTS_RCORDY_Pos  (0)
#define CLKSTS_RCORDY_Msk  (0x1U << CLKSTS_RCORDY_Pos)

#define CLKSTS_RCORDY_NOT_READY  ((0x0U) << CLKSTS_RCORDY_Pos)
#define CLKSTS_RCORDY_READY      ((0x1U) << CLKSTS_RCORDY_Pos)

#define CLKSTS_RCORDY_(x)  (((x) << CLKSTS_RCORDY_Pos) & CLKSTS_RCORDY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          ROSCRDY
  *  @access     CLOCK->CLKSTS
  *  @brief      ROSC clock ready indicator
  */
#define CLKSTS_ROSCRDY_Pos  (1)
#define CLKSTS_ROSCRDY_Msk  (0x1U << CLKSTS_ROSCRDY_Pos)

#define CLKSTS_ROSCRDY_NOT_READY  ((0x0U) << CLKSTS_ROSCRDY_Pos)
#define CLKSTS_ROSCRDY_READY      ((0x1U) << CLKSTS_ROSCRDY_Pos)

#define CLKSTS_ROSCRDY_(x)  (((x) << CLKSTS_ROSCRDY_Pos) & CLKSTS_ROSCRDY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          XORDY
  *  @access     CLOCK->CLKSTS
  *  @brief      XO clock ready indicator
  */
#define CLKSTS_XORDY_Pos  (2)
#define CLKSTS_XORDY_Msk  (0x1U << CLKSTS_XORDY_Pos)

#define CLKSTS_XORDY_NOT_READY  ((0x0U) << CLKSTS_XORDY_Pos)
#define CLKSTS_XORDY_READY      ((0x1U) << CLKSTS_XORDY_Pos)

#define CLKSTS_XORDY_(x)  (((x) << CLKSTS_XORDY_Pos) & CLKSTS_XORDY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          PLLRDY
  *  @access     CLOCK->CLKSTS
  *  @brief      PLL clock ready indicator
  */
#define CLKSTS_PLLRDY_Pos  (3)
#define CLKSTS_PLLRDY_Msk  (0x1U << CLKSTS_PLLRDY_Pos)

#define CLKSTS_PLLRDY_NOT_READY  ((0x0U) << CLKSTS_PLLRDY_Pos)
#define CLKSTS_PLLRDY_READY      ((0x1U) << CLKSTS_PLLRDY_Pos)

#define CLKSTS_PLLRDY_(x)  (((x) << CLKSTS_PLLRDY_Pos) & CLKSTS_PLLRDY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          VCOFREQ
  *  @access     CLOCK->CLKSTS
  *  @brief      VCO frequency flag for trimming
  */
#define CLKSTS_VCOFREQ_Pos  (4)
#define CLKSTS_VCOFREQ_Msk  (0x1U << CLKSTS_VCOFREQ_Pos)

#define CLKSTS_VCOFREQ_TOO_SLOW  ((0x0U) << CLKSTS_VCOFREQ_Pos)
#define CLKSTS_VCOFREQ_TOO_FAST  ((0x1U) << CLKSTS_VCOFREQ_Pos)

#define CLKSTS_VCOFREQ_(x)  (((x) << CLKSTS_VCOFREQ_Pos) & CLKSTS_VCOFREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          VCOFREQVLD
  *  @access     CLOCK->CLKSTS
  *  @brief      VCOFREQ flag valid indicator
  */
#define CLKSTS_VCOFREQVLD_Pos  (5)
#define CLKSTS_VCOFREQVLD_Msk  (0x1U << CLKSTS_VCOFREQVLD_Pos)

#define CLKSTS_VCOFREQVLD_INVALID  ((0x0U) << CLKSTS_VCOFREQVLD_Pos)
#define CLKSTS_VCOFREQVLD_VALID    ((0x1U) << CLKSTS_VCOFREQVLD_Pos)

#define CLKSTS_VCOFREQVLD_(x)  (((x) << CLKSTS_VCOFREQVLD_Pos) & CLKSTS_VCOFREQVLD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          PLLFAST
  *  @access     CLOCK->CLKSTS
  *  @brief      Indicate PLL is unlocked and faster than expected.
  *              Possible reason can be:
  *              1. Fin/NIN*NFB/65536 is lower than 400MHz (lower boundary of VCO free-running
  *              frequency)
  *              2. The reference clock input is somehow missing
  *              3. Malfunction of feedback divider so that the equivalent dividing ratio is
  *              lower than expected.
  */
#define CLKSTS_PLLFAST_Pos  (6)
#define CLKSTS_PLLFAST_Msk  (0x1U << CLKSTS_PLLFAST_Pos)

#define CLKSTS_PLLFAST_NOT_OCCUR  ((0x0U) << CLKSTS_PLLFAST_Pos)
#define CLKSTS_PLLFAST_OCCUR      ((0x1U) << CLKSTS_PLLFAST_Pos)

#define CLKSTS_PLLFAST_(x)  (((x) << CLKSTS_PLLFAST_Pos) & CLKSTS_PLLFAST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          PLLSLOW
  *  @access     CLOCK->CLKSTS
  *  @brief      Indicate PLL is unlocked and slower than expected.
  *              Possible reason can be:
  *              1. Fin/NIN*NFB/65536 is higher than 600MHz (upper boundary of VCO free-running
  *              frequency)
  *              2. VCO fails to oscillate
  *              3. Malfunction of feedback divider so that there is no output or the equivalent
  *              dividing ratio is higher than expected
  */
#define CLKSTS_PLLSLOW_Pos  (7)
#define CLKSTS_PLLSLOW_Msk  (0x1U << CLKSTS_PLLSLOW_Pos)

#define CLKSTS_PLLSLOW_NOT_OCCUR  ((0x0U) << CLKSTS_PLLSLOW_Pos)
#define CLKSTS_PLLSLOW_OCCUR      ((0x1U) << CLKSTS_PLLSLOW_Pos)

#define CLKSTS_PLLSLOW_(x)  (((x) << CLKSTS_PLLSLOW_Pos) & CLKSTS_PLLSLOW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKSTS          CLKDETERR
  *  @access     CLOCK->CLKSTS
  *  @brief      Indicate error detected by CLKDET
  */
#define CLKSTS_CLKDETERR_Pos  (8)
#define CLKSTS_CLKDETERR_Msk  (0x1U << CLKSTS_CLKDETERR_Pos)

#define CLKSTS_CLKDETERR_NOT_OCCUR  ((0x0U) << CLKSTS_CLKDETERR_Pos)
#define CLKSTS_CLKDETERR_OCCUR      ((0x1U) << CLKSTS_CLKDETERR_Pos)

#define CLKSTS_CLKDETERR_(x)  (((x) << CLKSTS_CLKDETERR_Pos) & CLKSTS_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           RCOCTL          EN
  *  @access     CLOCK->RCOCTL
  *  @brief      RCO enable
  */
#define RCOCTL_EN_Pos  (0)
#define RCOCTL_EN_Msk  (0x1U << RCOCTL_EN_Pos)

#define RCOCTL_EN_DISABLE  ((0x0U) << RCOCTL_EN_Pos)
#define RCOCTL_EN_ENABLE   ((0x1U) << RCOCTL_EN_Pos)

#define RCOCTL_EN_(x)  (((x) << RCOCTL_EN_Pos) & RCOCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           RCOCTL          LFMODE
  *  @access     CLOCK->RCOCTL
  *  @brief      RCO low frequency mode
  */
#define RCOCTL_LFMODE_Pos  (1)
#define RCOCTL_LFMODE_Msk  (0x1U << RCOCTL_LFMODE_Pos)

#define RCOCTL_LFMODE_DISABLE  ((0x0U) << RCOCTL_LFMODE_Pos)
#define RCOCTL_LFMODE_ENABLE   ((0x1U) << RCOCTL_LFMODE_Pos)

#define RCOCTL_LFMODE_(x)  (((x) << RCOCTL_LFMODE_Pos) & RCOCTL_LFMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           EN
  *  @access     CLOCK->XOCTL
  *  @brief      Crystal oscillator clock enable
  */
#define XOCTL_EN_Pos  (0)
#define XOCTL_EN_Msk  (0x1U << XOCTL_EN_Pos)

#define XOCTL_EN_DISABLE  ((0x0U) << XOCTL_EN_Pos)
#define XOCTL_EN_ENABLE   ((0x1U) << XOCTL_EN_Pos)

#define XOCTL_EN_(x)  (((x) << XOCTL_EN_Pos) & XOCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           AMP
  *  @access     CLOCK->XOCTL
  *  @brief      Oscillation amplitude when locked
  */
#define XOCTL_AMP_Pos  (1)
#define XOCTL_AMP_Msk  (0x7U << XOCTL_AMP_Pos)

#define XOCTL_AMP_0P32_V  ((0x000U) << XOCTL_AMP_Pos)
#define XOCTL_AMP_0P48_V  ((0x001U) << XOCTL_AMP_Pos)
#define XOCTL_AMP_0P64_V  ((0x002U) << XOCTL_AMP_Pos)
#define XOCTL_AMP_0P77_V  ((0x003U) << XOCTL_AMP_Pos)
#define XOCTL_AMP_0P92_V  ((0x004U) << XOCTL_AMP_Pos)
#define XOCTL_AMP_1P06_V  ((0x005U) << XOCTL_AMP_Pos)
#define XOCTL_AMP_1P19_V  ((0x006U) << XOCTL_AMP_Pos)
#define XOCTL_AMP_1P33_V  ((0x007U) << XOCTL_AMP_Pos)

#define XOCTL_AMP_(x)  (((x) << XOCTL_AMP_Pos) & XOCTL_AMP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           ACTLRELAX
  *  @access     CLOCK->XOCTL
  *  @brief      Relax the threshold of amplitude control
  */
#define XOCTL_ACTLRELAX_Pos  (4)
#define XOCTL_ACTLRELAX_Msk  (0x1U << XOCTL_ACTLRELAX_Pos)

#define XOCTL_ACTLRELAX_NORMAL  ((0x0U) << XOCTL_ACTLRELAX_Pos)
#define XOCTL_ACTLRELAX_RELAX   ((0x1U) << XOCTL_ACTLRELAX_Pos)

#define XOCTL_ACTLRELAX_(x)  (((x) << XOCTL_ACTLRELAX_Pos) & XOCTL_ACTLRELAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           ACTLPRD
  *  @access     CLOCK->XOCTL
  *  @brief      Amplitdue control code update period
  */
#define XOCTL_ACTLPRD_Pos  (5)
#define XOCTL_ACTLPRD_Msk  (0x7U << XOCTL_ACTLPRD_Pos)

#define XOCTL_ACTLPRD_2048_CYCLE    ((0x000U) << XOCTL_ACTLPRD_Pos)
#define XOCTL_ACTLPRD_4096_CYCLE    ((0x001U) << XOCTL_ACTLPRD_Pos)
#define XOCTL_ACTLPRD_8192_CYCLE    ((0x002U) << XOCTL_ACTLPRD_Pos)
#define XOCTL_ACTLPRD_16384_CYCLE   ((0x003U) << XOCTL_ACTLPRD_Pos)
#define XOCTL_ACTLPRD_32768_CYCLE   ((0x004U) << XOCTL_ACTLPRD_Pos)
#define XOCTL_ACTLPRD_65536_CYCLE   ((0x005U) << XOCTL_ACTLPRD_Pos)
#define XOCTL_ACTLPRD_131072_CYCLE  ((0x006U) << XOCTL_ACTLPRD_Pos)
#define XOCTL_ACTLPRD_262144_CYCLE  ((0x007U) << XOCTL_ACTLPRD_Pos)

#define XOCTL_ACTLPRD_(x)  (((x) << XOCTL_ACTLPRD_Pos) & XOCTL_ACTLPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           INITCODE
  *  @access     CLOCK->XOCTL
  *  @brief      Amplitude code (4MSBs) during initial startup
  */
#define XOCTL_INITCODE_Pos  (8)
#define XOCTL_INITCODE_Msk  (0xFU << XOCTL_INITCODE_Pos)

#define XOCTL_INITCODE_(x)  (((x) << XOCTL_INITCODE_Pos) & XOCTL_INITCODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           OPCODE
  *  @access     CLOCK->XOCTL
  *  @brief      Estimated amplitude code (4MSBs) in operation
  */
#define XOCTL_OPCODE_Pos  (12)
#define XOCTL_OPCODE_Msk  (0xFU << XOCTL_OPCODE_Pos)

#define XOCTL_OPCODE_(x)  (((x) << XOCTL_OPCODE_Pos) & XOCTL_OPCODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           FRCCODE
  *  @access     CLOCK->XOCTL
  *  @brief      Forced amplitude code
  */
#define XOCTL_FRCCODE_Pos  (16)
#define XOCTL_FRCCODE_Msk  (0x3FFU << XOCTL_FRCCODE_Pos)

#define XOCTL_FRCCODE_(x)  (((x) << XOCTL_FRCCODE_Pos) & XOCTL_FRCCODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           FRCCODEEN
  *  @access     CLOCK->XOCTL
  *  @brief      Forced amplitude code enable
  */
#define XOCTL_FRCCODEEN_Pos  (26)
#define XOCTL_FRCCODEEN_Msk  (0x1U << XOCTL_FRCCODEEN_Pos)

#define XOCTL_FRCCODEEN_DISABLE  ((0x0U) << XOCTL_FRCCODEEN_Pos)
#define XOCTL_FRCCODEEN_ENABLE   ((0x1U) << XOCTL_FRCCODEEN_Pos)

#define XOCTL_FRCCODEEN_(x)  (((x) << XOCTL_FRCCODEEN_Pos) & XOCTL_FRCCODEEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           BYPASS
  *  @access     CLOCK->XOCTL
  *  @brief      Directly feed in the external clock and bypass internal circuit
  */
#define XOCTL_BYPASS_Pos  (29)
#define XOCTL_BYPASS_Msk  (0x1U << XOCTL_BYPASS_Pos)

#define XOCTL_BYPASS_NORMAL  ((0x0U) << XOCTL_BYPASS_Pos)
#define XOCTL_BYPASS_BYPASS  ((0x1U) << XOCTL_BYPASS_Pos)

#define XOCTL_BYPASS_(x)  (((x) << XOCTL_BYPASS_Pos) & XOCTL_BYPASS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           FEEDPIN
  *  @access     CLOCK->XOCTL
  *  @brief      Pin select in bypass mode
  */
#define XOCTL_FEEDPIN_Pos  (30)
#define XOCTL_FEEDPIN_Msk  (0x1U << XOCTL_FEEDPIN_Pos)

#define XOCTL_FEEDPIN_XIN   ((0x0U) << XOCTL_FEEDPIN_Pos)
#define XOCTL_FEEDPIN_XOUT  ((0x1U) << XOCTL_FEEDPIN_Pos)

#define XOCTL_FEEDPIN_(x)  (((x) << XOCTL_FEEDPIN_Pos) & XOCTL_FEEDPIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           XOCTL           CURRENT
  *  @access     CLOCK->XOCTL
  *  @brief      Current bias option
  */
#define XOCTL_CURRENT_Pos  (31)
#define XOCTL_CURRENT_Msk  (0x1U << XOCTL_CURRENT_Pos)

#define XOCTL_CURRENT_1X  ((0x0U) << XOCTL_CURRENT_Pos)
#define XOCTL_CURRENT_2X  ((0x1U) << XOCTL_CURRENT_Pos)

#define XOCTL_CURRENT_(x)  (((x) << XOCTL_CURRENT_Pos) & XOCTL_CURRENT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL0         EN
  *  @access     CLOCK->PLLCTL0
  *  @brief      PLL enable
  */
#define PLLCTL0_EN_Pos  (0)
#define PLLCTL0_EN_Msk  (0x1U << PLLCTL0_EN_Pos)

#define PLLCTL0_EN_DISABLE  ((0x0U) << PLLCTL0_EN_Pos)
#define PLLCTL0_EN_ENABLE   ((0x1U) << PLLCTL0_EN_Pos)

#define PLLCTL0_EN_(x)  (((x) << PLLCTL0_EN_Pos) & PLLCTL0_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL0         FCALEN
  *  @access     CLOCK->PLLCTL0
  *  @brief      PLL frequency calibration enable
  */
#define PLLCTL0_FCALEN_Pos  (1)
#define PLLCTL0_FCALEN_Msk  (0x1U << PLLCTL0_FCALEN_Pos)

#define PLLCTL0_FCALEN_DISABLE  ((0x0U) << PLLCTL0_FCALEN_Pos)
#define PLLCTL0_FCALEN_ENABLE   ((0x1U) << PLLCTL0_FCALEN_Pos)

#define PLLCTL0_FCALEN_(x)  (((x) << PLLCTL0_FCALEN_Pos) & PLLCTL0_FCALEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL0         FCALWIN
  *  @access     CLOCK->PLLCTL0
  *  @brief      PLL frequency calibration time window
  *              For each calibration cycle, keep it as 1 until VCOFREQVLD=1 and release it as 0
  */
#define PLLCTL0_FCALWIN_Pos  (2)
#define PLLCTL0_FCALWIN_Msk  (0x1U << PLLCTL0_FCALWIN_Pos)

#define PLLCTL0_FCALWIN_DISABLE  ((0x0U) << PLLCTL0_FCALWIN_Pos)
#define PLLCTL0_FCALWIN_ENABLE   ((0x1U) << PLLCTL0_FCALWIN_Pos)

#define PLLCTL0_FCALWIN_(x)  (((x) << PLLCTL0_FCALWIN_Pos) & PLLCTL0_FCALWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL0         RCLKSELXO
  *  @access     CLOCK->PLLCTL0
  *  @brief      PLL reference clock select
  */
#define PLLCTL0_RCLKSELXO_Pos  (3)
#define PLLCTL0_RCLKSELXO_Msk  (0x1U << PLLCTL0_RCLKSELXO_Pos)

#define PLLCTL0_RCLKSELXO_RCO  ((0x0U) << PLLCTL0_RCLKSELXO_Pos)
#define PLLCTL0_RCLKSELXO_XO   ((0x1U) << PLLCTL0_RCLKSELXO_Pos)

#define PLLCTL0_RCLKSELXO_(x)  (((x) << PLLCTL0_RCLKSELXO_Pos) & PLLCTL0_RCLKSELXO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL0         ICP
  *  @access     CLOCK->PLLCTL0
  *  @brief      PLL charge pump current setting
  *              Must be set to 0.96*NFB/(11-VCOBAND), where NFB is the PLL feedback factor in
  *              real number
  */
#define PLLCTL0_ICP_Pos  (4)
#define PLLCTL0_ICP_Msk  (0x1FU << PLLCTL0_ICP_Pos)

#define PLLCTL0_ICP_(x)  (((x) << PLLCTL0_ICP_Pos) & PLLCTL0_ICP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL0         VCOBAND
  *  @access     CLOCK->PLLCTL0
  *  @brief      PLL VCO band control
  */
#define PLLCTL0_VCOBAND_Pos  (9)
#define PLLCTL0_VCOBAND_Msk  (0x3U << PLLCTL0_VCOBAND_Pos)

#define PLLCTL0_VCOBAND_400MHZ  ((0x00U) << PLLCTL0_VCOBAND_Pos)
#define PLLCTL0_VCOBAND_500MHZ  ((0x01U) << PLLCTL0_VCOBAND_Pos)
#define PLLCTL0_VCOBAND_600MHZ  ((0x02U) << PLLCTL0_VCOBAND_Pos)
#define PLLCTL0_VCOBAND_650MHZ  ((0x03U) << PLLCTL0_VCOBAND_Pos)

#define PLLCTL0_VCOBAND_(x)  (((x) << PLLCTL0_VCOBAND_Pos) & PLLCTL0_VCOBAND_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL1         NFB
  *  @access     CLOCK->PLLCTL1
  *  @brief      Feedback dividing ratio (Fvco/Fpfd)
  */
#define PLLCTL1_NFB_Pos  (0)
#define PLLCTL1_NFB_Msk  (0xFFFFFFU << PLLCTL1_NFB_Pos)

#define PLLCTL1_NFB_(x)  (((x) << PLLCTL1_NFB_Pos) & PLLCTL1_NFB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL1         NIN
  *  @access     CLOCK->PLLCTL1
  *  @brief      PLL input clock dividing ratio (Fin/Fpfd)
  */
#define PLLCTL1_NIN_Pos  (24)
#define PLLCTL1_NIN_Msk  (0x7U << PLLCTL1_NIN_Pos)

#define PLLCTL1_NIN_1  ((0x001U) << PLLCTL1_NIN_Pos)
#define PLLCTL1_NIN_2  ((0x002U) << PLLCTL1_NIN_Pos)
#define PLLCTL1_NIN_3  ((0x003U) << PLLCTL1_NIN_Pos)
#define PLLCTL1_NIN_4  ((0x004U) << PLLCTL1_NIN_Pos)
#define PLLCTL1_NIN_5  ((0x005U) << PLLCTL1_NIN_Pos)
#define PLLCTL1_NIN_6  ((0x006U) << PLLCTL1_NIN_Pos)
#define PLLCTL1_NIN_7  ((0x007U) << PLLCTL1_NIN_Pos)

#define PLLCTL1_NIN_(x)  (((x) << PLLCTL1_NIN_Pos) & PLLCTL1_NIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PLLCTL1         NOUT
  *  @access     CLOCK->PLLCTL1
  *  @brief      VCO to digital clock dividing ratio (Fvco/Fout)
  */
#define PLLCTL1_NOUT_Pos  (27)
#define PLLCTL1_NOUT_Msk  (0xFU << PLLCTL1_NOUT_Pos)

#define PLLCTL1_NOUT_(x)  (((x) << PLLCTL1_NOUT_Pos) & PLLCTL1_NOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCTL       RCLKSEL
  *  @access     CLOCK->CLKDETCTL
  *  @brief      Reference clock select
  */
#define CLKDETCTL_RCLKSEL_Pos  (0)
#define CLKDETCTL_RCLKSEL_Msk  (0x7U << CLKDETCTL_RCLKSEL_Pos)

#define CLKDETCTL_RCLKSEL_RCO      ((0x000U) << CLKDETCTL_RCLKSEL_Pos)
#define CLKDETCTL_RCLKSEL_ROSC     ((0x001U) << CLKDETCTL_RCLKSEL_Pos)
#define CLKDETCTL_RCLKSEL_XO       ((0x002U) << CLKDETCTL_RCLKSEL_Pos)
#define CLKDETCTL_RCLKSEL_PLL      ((0x003U) << CLKDETCTL_RCLKSEL_Pos)
#define CLKDETCTL_RCLKSEL_LPOSC    ((0x004U) << CLKDETCTL_RCLKSEL_Pos)
#define CLKDETCTL_RCLKSEL_EPWRTZ0  ((0x005U) << CLKDETCTL_RCLKSEL_Pos)
#define CLKDETCTL_RCLKSEL_EPWRTZ1  ((0x006U) << CLKDETCTL_RCLKSEL_Pos)

#define CLKDETCTL_RCLKSEL_(x)  (((x) << CLKDETCTL_RCLKSEL_Pos) & CLKDETCTL_RCLKSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCTL       RCLKDIV
  *  @access     CLOCK->CLKDETCTL
  *  @brief      Reference clock dividing ratio
  */
#define CLKDETCTL_RCLKDIV_Pos  (8)
#define CLKDETCTL_RCLKDIV_Msk  (0x7U << CLKDETCTL_RCLKDIV_Pos)

#define CLKDETCTL_RCLKDIV_1    ((0x000U) << CLKDETCTL_RCLKDIV_Pos)
#define CLKDETCTL_RCLKDIV_2    ((0x001U) << CLKDETCTL_RCLKDIV_Pos)
#define CLKDETCTL_RCLKDIV_4    ((0x002U) << CLKDETCTL_RCLKDIV_Pos)
#define CLKDETCTL_RCLKDIV_8    ((0x003U) << CLKDETCTL_RCLKDIV_Pos)
#define CLKDETCTL_RCLKDIV_16   ((0x004U) << CLKDETCTL_RCLKDIV_Pos)
#define CLKDETCTL_RCLKDIV_32   ((0x005U) << CLKDETCTL_RCLKDIV_Pos)
#define CLKDETCTL_RCLKDIV_64   ((0x006U) << CLKDETCTL_RCLKDIV_Pos)
#define CLKDETCTL_RCLKDIV_128  ((0x007U) << CLKDETCTL_RCLKDIV_Pos)

#define CLKDETCTL_RCLKDIV_(x)  (((x) << CLKDETCTL_RCLKDIV_Pos) & CLKDETCTL_RCLKDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCTL       DCLKSEL
  *  @access     CLOCK->CLKDETCTL
  *  @brief      Detected clock select
  */
#define CLKDETCTL_DCLKSEL_Pos  (16)
#define CLKDETCTL_DCLKSEL_Msk  (0x7U << CLKDETCTL_DCLKSEL_Pos)

#define CLKDETCTL_DCLKSEL_RCO      ((0x000U) << CLKDETCTL_DCLKSEL_Pos)
#define CLKDETCTL_DCLKSEL_ROSC     ((0x001U) << CLKDETCTL_DCLKSEL_Pos)
#define CLKDETCTL_DCLKSEL_XO       ((0x002U) << CLKDETCTL_DCLKSEL_Pos)
#define CLKDETCTL_DCLKSEL_PLL      ((0x003U) << CLKDETCTL_DCLKSEL_Pos)
#define CLKDETCTL_DCLKSEL_LPOSC    ((0x004U) << CLKDETCTL_DCLKSEL_Pos)
#define CLKDETCTL_DCLKSEL_EPWRTZ0  ((0x005U) << CLKDETCTL_DCLKSEL_Pos)
#define CLKDETCTL_DCLKSEL_EPWRTZ1  ((0x006U) << CLKDETCTL_DCLKSEL_Pos)

#define CLKDETCTL_DCLKSEL_(x)  (((x) << CLKDETCTL_DCLKSEL_Pos) & CLKDETCTL_DCLKSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCTL       DCLKDIV
  *  @access     CLOCK->CLKDETCTL
  *  @brief      Detected clock dividing ratio
  */
#define CLKDETCTL_DCLKDIV_Pos  (24)
#define CLKDETCTL_DCLKDIV_Msk  (0x7U << CLKDETCTL_DCLKDIV_Pos)

#define CLKDETCTL_DCLKDIV_1    ((0x000U) << CLKDETCTL_DCLKDIV_Pos)
#define CLKDETCTL_DCLKDIV_2    ((0x001U) << CLKDETCTL_DCLKDIV_Pos)
#define CLKDETCTL_DCLKDIV_4    ((0x002U) << CLKDETCTL_DCLKDIV_Pos)
#define CLKDETCTL_DCLKDIV_8    ((0x003U) << CLKDETCTL_DCLKDIV_Pos)
#define CLKDETCTL_DCLKDIV_16   ((0x004U) << CLKDETCTL_DCLKDIV_Pos)
#define CLKDETCTL_DCLKDIV_32   ((0x005U) << CLKDETCTL_DCLKDIV_Pos)
#define CLKDETCTL_DCLKDIV_64   ((0x006U) << CLKDETCTL_DCLKDIV_Pos)
#define CLKDETCTL_DCLKDIV_128  ((0x007U) << CLKDETCTL_DCLKDIV_Pos)

#define CLKDETCTL_DCLKDIV_(x)  (((x) << CLKDETCTL_DCLKDIV_Pos) & CLKDETCTL_DCLKDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCTL       EN
  *  @access     CLOCK->CLKDETCTL
  *  @brief      Clock detection enable
  *              When disabled, the interrupts and the clock error events will be cleared
  */
#define CLKDETCTL_EN_Pos  (31)
#define CLKDETCTL_EN_Msk  (0x1U << CLKDETCTL_EN_Pos)

#define CLKDETCTL_EN_DISABLE  ((0x0U) << CLKDETCTL_EN_Pos)
#define CLKDETCTL_EN_ENABLE   ((0x1U) << CLKDETCTL_EN_Pos)

#define CLKDETCTL_EN_(x)  (((x) << CLKDETCTL_EN_Pos) & CLKDETCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCTH       LO
  *  @access     CLOCK->CLKDETCTH
  *  @brief      Lower counter threshold for clock detect
  *              If the final counter value < LO, a trip-zone event will be generated for PWM
  */
#define CLKDETCTH_LO_Pos  (0)
#define CLKDETCTH_LO_Msk  (0xFFFFU << CLKDETCTH_LO_Pos)

#define CLKDETCTH_LO_(x)  (((x) << CLKDETCTH_LO_Pos) & CLKDETCTH_LO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCTH       HI
  *  @access     CLOCK->CLKDETCTH
  *  @brief      Upper counter threshold for clock detect
  *              If the final counter value > HI, a trip-zone event will be generated for PWM
  */
#define CLKDETCTH_HI_Pos  (16)
#define CLKDETCTH_HI_Msk  (0xFFFFU << CLKDETCTH_HI_Pos)

#define CLKDETCTH_HI_(x)  (((x) << CLKDETCTH_HI_Pos) & CLKDETCTH_HI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKDETCNT       VAL
  *  @access     CLOCK->CLKDETCNT
  *  @brief      Final counter value of the clock detect
  */
#define CLKDETCNT_VAL_Pos  (0)
#define CLKDETCNT_VAL_Msk  (0xFFFFU << CLKDETCNT_VAL_Pos)

#define CLKDETCNT_VAL_(x)  (((x) << CLKDETCNT_VAL_Pos) & CLKDETCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKTZE          PLLUNLOCK
  *  @access     CLOCK->CLKTZE
  *  @brief      PLL unlock trip-zone event enable
  */
#define CLKTZE_PLLUNLOCK_Pos  (0)
#define CLKTZE_PLLUNLOCK_Msk  (0x1U << CLKTZE_PLLUNLOCK_Pos)

#define CLKTZE_PLLUNLOCK_DISABLE  ((0x0U) << CLKTZE_PLLUNLOCK_Pos)
#define CLKTZE_PLLUNLOCK_ENABLE   ((0x1U) << CLKTZE_PLLUNLOCK_Pos)

#define CLKTZE_PLLUNLOCK_(x)  (((x) << CLKTZE_PLLUNLOCK_Pos) & CLKTZE_PLLUNLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKTZE          CLKDETERR
  *  @access     CLOCK->CLKTZE
  *  @brief      CLKDET error trip-zone event enable
  */
#define CLKTZE_CLKDETERR_Pos  (1)
#define CLKTZE_CLKDETERR_Msk  (0x1U << CLKTZE_CLKDETERR_Pos)

#define CLKTZE_CLKDETERR_DISABLE  ((0x0U) << CLKTZE_CLKDETERR_Pos)
#define CLKTZE_CLKDETERR_ENABLE   ((0x1U) << CLKTZE_CLKDETERR_Pos)

#define CLKTZE_CLKDETERR_(x)  (((x) << CLKTZE_CLKDETERR_Pos) & CLKTZE_CLKDETERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           SYSCLKCTL       DIV
  *  @access     CLOCK->SYSCLKCTL
  *  @brief      Clock dividing ratio from the source clock
  */
#define SYSCLKCTL_DIV_Pos  (0)
#define SYSCLKCTL_DIV_Msk  (0xFFU << SYSCLKCTL_DIV_Pos)


#define SYSCLKCTL_DIV_(x)  (((x) << SYSCLKCTL_DIV_Pos) & SYSCLKCTL_DIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           SYSCLKCTL       SRC
  *  @access     CLOCK->SYSCLKCTL
  *  @brief      Clock source select
  */
#define SYSCLKCTL_SRC_Pos  (24)
#define SYSCLKCTL_SRC_Msk  (0x3U << SYSCLKCTL_SRC_Pos)

#define SYSCLKCTL_SRC_RCO   ((0x00U) << SYSCLKCTL_SRC_Pos)
#define SYSCLKCTL_SRC_ROSC  ((0x01U) << SYSCLKCTL_SRC_Pos)
#define SYSCLKCTL_SRC_XO    ((0x02U) << SYSCLKCTL_SRC_Pos)
#define SYSCLKCTL_SRC_PLL   ((0x03U) << SYSCLKCTL_SRC_Pos)

#define SYSCLKCTL_SRC_(x)  (((x) << SYSCLKCTL_SRC_Pos) & SYSCLKCTL_SRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           DGCLKCTL        DIV
  *  @access     CLOCK->DGCLKCTL
  *  @brief      Clock dividing ratio
  */
#define DGCLKCTL_DIV_Pos  (0)
#define DGCLKCTL_DIV_Msk  (0xFFU << DGCLKCTL_DIV_Pos)

#define DGCLKCTL_DIV_(x)  (((x) << DGCLKCTL_DIV_Pos) & DGCLKCTL_DIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           DGCLKCTL        PDIV
  *  @access     CLOCK->DGCLKCTL
  *  @brief      Clock binary pre-dividing ratio from system clock
  */
#define DGCLKCTL_PDIV_Pos  (8)
#define DGCLKCTL_PDIV_Msk  (0x7U << DGCLKCTL_PDIV_Pos)

#define DGCLKCTL_PDIV_1    ((0x000U) << DGCLKCTL_PDIV_Pos)
#define DGCLKCTL_PDIV_2    ((0x001U) << DGCLKCTL_PDIV_Pos)
#define DGCLKCTL_PDIV_4    ((0x002U) << DGCLKCTL_PDIV_Pos)
#define DGCLKCTL_PDIV_8    ((0x003U) << DGCLKCTL_PDIV_Pos)
#define DGCLKCTL_PDIV_16   ((0x004U) << DGCLKCTL_PDIV_Pos)
#define DGCLKCTL_PDIV_32   ((0x005U) << DGCLKCTL_PDIV_Pos)
#define DGCLKCTL_PDIV_64   ((0x006U) << DGCLKCTL_PDIV_Pos)
#define DGCLKCTL_PDIV_128  ((0x007U) << DGCLKCTL_PDIV_Pos)

#define DGCLKCTL_PDIV_(x)  (((x) << DGCLKCTL_PDIV_Pos) & DGCLKCTL_PDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           WDT0CLKCTL      DIV
  *  @access     CLOCK->WDT0CLKCTL
  *  @brief      Clock dividing ratio
  */
#define WDT0CLKCTL_DIV_Pos  (0)
#define WDT0CLKCTL_DIV_Msk  (0xFFU << WDT0CLKCTL_DIV_Pos)

#define WDT0CLKCTL_DIV_(x)  (((x) << WDT0CLKCTL_DIV_Pos) & WDT0CLKCTL_DIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           WDT0CLKCTL      SRC
  *  @access     CLOCK->WDT0CLKCTL
  *  @brief      Clock source select
  */
#define WDT0CLKCTL_SRC_Pos  (24)
#define WDT0CLKCTL_SRC_Msk  (0x3U << WDT0CLKCTL_SRC_Pos)

#define WDT0CLKCTL_SRC_RCO   ((0x00U) << WDT0CLKCTL_SRC_Pos)
#define WDT0CLKCTL_SRC_ROSC  ((0x01U) << WDT0CLKCTL_SRC_Pos)
#define WDT0CLKCTL_SRC_XO    ((0x02U) << WDT0CLKCTL_SRC_Pos)
#define WDT0CLKCTL_SRC_PLL   ((0x03U) << WDT0CLKCTL_SRC_Pos)

#define WDT0CLKCTL_SRC_(x)  (((x) << WDT0CLKCTL_SRC_Pos) & WDT0CLKCTL_SRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           WDT1CLKCTL      DIV
  *  @access     CLOCK->WDT1CLKCTL
  *  @brief      Clock dividing ratio
  */
#define WDT1CLKCTL_DIV_Pos  (0)
#define WDT1CLKCTL_DIV_Msk  (0xFFU << WDT1CLKCTL_DIV_Pos)

#define WDT1CLKCTL_DIV_(x)  (((x) << WDT1CLKCTL_DIV_Pos) & WDT1CLKCTL_DIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           WDT1CLKCTL      SRC
  *  @access     CLOCK->WDT1CLKCTL
  *  @brief      Clock source select
  */
#define WDT1CLKCTL_SRC_Pos  (24)
#define WDT1CLKCTL_SRC_Msk  (0x3U << WDT1CLKCTL_SRC_Pos)

#define WDT1CLKCTL_SRC_RCO   ((0x00U) << WDT1CLKCTL_SRC_Pos)
#define WDT1CLKCTL_SRC_ROSC  ((0x01U) << WDT1CLKCTL_SRC_Pos)
#define WDT1CLKCTL_SRC_XO    ((0x02U) << WDT1CLKCTL_SRC_Pos)
#define WDT1CLKCTL_SRC_PLL   ((0x03U) << WDT1CLKCTL_SRC_Pos)

#define WDT1CLKCTL_SRC_(x)  (((x) << WDT1CLKCTL_SRC_Pos) & WDT1CLKCTL_SRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       ADCCLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      ADC module clock enable
  */
#define PERICLKEN_ADCCLK_Pos  (0)
#define PERICLKEN_ADCCLK_Msk  (0x1U << PERICLKEN_ADCCLK_Pos)

#define PERICLKEN_ADCCLK_DISABLE  ((0x0U) << PERICLKEN_ADCCLK_Pos)
#define PERICLKEN_ADCCLK_ENABLE   ((0x1U) << PERICLKEN_ADCCLK_Pos)

#define PERICLKEN_ADCCLK_(x)  (((x) << PERICLKEN_ADCCLK_Pos) & PERICLKEN_ADCCLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       PWMCLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      PWM module clock enable
  */
#define PERICLKEN_PWMCLK_Pos  (1)
#define PERICLKEN_PWMCLK_Msk  (0x1U << PERICLKEN_PWMCLK_Pos)

#define PERICLKEN_PWMCLK_DISABLE  ((0x0U) << PERICLKEN_PWMCLK_Pos)
#define PERICLKEN_PWMCLK_ENABLE   ((0x1U) << PERICLKEN_PWMCLK_Pos)

#define PERICLKEN_PWMCLK_(x)  (((x) << PERICLKEN_PWMCLK_Pos) & PERICLKEN_PWMCLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       ECAPCLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      ECAP module clock enable
  */
#define PERICLKEN_ECAPCLK_Pos  (2)
#define PERICLKEN_ECAPCLK_Msk  (0x1U << PERICLKEN_ECAPCLK_Pos)

#define PERICLKEN_ECAPCLK_DISABLE  ((0x0U) << PERICLKEN_ECAPCLK_Pos)
#define PERICLKEN_ECAPCLK_ENABLE   ((0x1U) << PERICLKEN_ECAPCLK_Pos)

#define PERICLKEN_ECAPCLK_(x)  (((x) << PERICLKEN_ECAPCLK_Pos) & PERICLKEN_ECAPCLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       TIMER0CLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      TIMER0 module clock enable
  */
#define PERICLKEN_TIMER0CLK_Pos  (3)
#define PERICLKEN_TIMER0CLK_Msk  (0x1U << PERICLKEN_TIMER0CLK_Pos)

#define PERICLKEN_TIMER0CLK_DISABLE  ((0x0U) << PERICLKEN_TIMER0CLK_Pos)
#define PERICLKEN_TIMER0CLK_ENABLE   ((0x1U) << PERICLKEN_TIMER0CLK_Pos)

#define PERICLKEN_TIMER0CLK_(x)  (((x) << PERICLKEN_TIMER0CLK_Pos) & PERICLKEN_TIMER0CLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       TIMER1CLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      TIMER1 module clock enable
  */
#define PERICLKEN_TIMER1CLK_Pos  (4)
#define PERICLKEN_TIMER1CLK_Msk  (0x1U << PERICLKEN_TIMER1CLK_Pos)

#define PERICLKEN_TIMER1CLK_DISABLE  ((0x0U) << PERICLKEN_TIMER1CLK_Pos)
#define PERICLKEN_TIMER1CLK_ENABLE   ((0x1U) << PERICLKEN_TIMER1CLK_Pos)

#define PERICLKEN_TIMER1CLK_(x)  (((x) << PERICLKEN_TIMER1CLK_Pos) & PERICLKEN_TIMER1CLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       TIMER2CLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      TIMER2 module clock enable
  */
#define PERICLKEN_TIMER2CLK_Pos  (5)
#define PERICLKEN_TIMER2CLK_Msk  (0x1U << PERICLKEN_TIMER2CLK_Pos)

#define PERICLKEN_TIMER2CLK_DISABLE  ((0x0U) << PERICLKEN_TIMER2CLK_Pos)
#define PERICLKEN_TIMER2CLK_ENABLE   ((0x1U) << PERICLKEN_TIMER2CLK_Pos)

#define PERICLKEN_TIMER2CLK_(x)  (((x) << PERICLKEN_TIMER2CLK_Pos) & PERICLKEN_TIMER2CLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       UART0CLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      UART0 module clock enable
  */
#define PERICLKEN_UART0CLK_Pos  (6)
#define PERICLKEN_UART0CLK_Msk  (0x1U << PERICLKEN_UART0CLK_Pos)

#define PERICLKEN_UART0CLK_DISABLE  ((0x0U) << PERICLKEN_UART0CLK_Pos)
#define PERICLKEN_UART0CLK_ENABLE   ((0x1U) << PERICLKEN_UART0CLK_Pos)

#define PERICLKEN_UART0CLK_(x)  (((x) << PERICLKEN_UART0CLK_Pos) & PERICLKEN_UART0CLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       UART1CLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      UART1 module clock enable
  */
#define PERICLKEN_UART1CLK_Pos  (7)
#define PERICLKEN_UART1CLK_Msk  (0x1U << PERICLKEN_UART1CLK_Pos)

#define PERICLKEN_UART1CLK_DISABLE  ((0x0U) << PERICLKEN_UART1CLK_Pos)
#define PERICLKEN_UART1CLK_ENABLE   ((0x1U) << PERICLKEN_UART1CLK_Pos)

#define PERICLKEN_UART1CLK_(x)  (((x) << PERICLKEN_UART1CLK_Pos) & PERICLKEN_UART1CLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       SPI0CLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      SPI0 module clock enable
  */
#define PERICLKEN_SPI0CLK_Pos  (8)
#define PERICLKEN_SPI0CLK_Msk  (0x1U << PERICLKEN_SPI0CLK_Pos)

#define PERICLKEN_SPI0CLK_DISABLE  ((0x0U) << PERICLKEN_SPI0CLK_Pos)
#define PERICLKEN_SPI0CLK_ENABLE   ((0x1U) << PERICLKEN_SPI0CLK_Pos)

#define PERICLKEN_SPI0CLK_(x)  (((x) << PERICLKEN_SPI0CLK_Pos) & PERICLKEN_SPI0CLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       SPI1CLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      SPI1 module clock enable
  */
#define PERICLKEN_SPI1CLK_Pos  (9)
#define PERICLKEN_SPI1CLK_Msk  (0x1U << PERICLKEN_SPI1CLK_Pos)

#define PERICLKEN_SPI1CLK_DISABLE  ((0x0U) << PERICLKEN_SPI1CLK_Pos)
#define PERICLKEN_SPI1CLK_ENABLE   ((0x1U) << PERICLKEN_SPI1CLK_Pos)

#define PERICLKEN_SPI1CLK_(x)  (((x) << PERICLKEN_SPI1CLK_Pos) & PERICLKEN_SPI1CLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       I2CCLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      I2C module clock enable
  */
#define PERICLKEN_I2CCLK_Pos  (10)
#define PERICLKEN_I2CCLK_Msk  (0x1U << PERICLKEN_I2CCLK_Pos)

#define PERICLKEN_I2CCLK_DISABLE  ((0x0U) << PERICLKEN_I2CCLK_Pos)
#define PERICLKEN_I2CCLK_ENABLE   ((0x1U) << PERICLKEN_I2CCLK_Pos)

#define PERICLKEN_I2CCLK_(x)  (((x) << PERICLKEN_I2CCLK_Pos) & PERICLKEN_I2CCLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKEN       CANCLK
  *  @access     CLOCK->PERICLKEN
  *  @brief      CAN module clock enable
  */
#define PERICLKEN_CANCLK_Pos  (11)
#define PERICLKEN_CANCLK_Msk  (0x1U << PERICLKEN_CANCLK_Pos)

#define PERICLKEN_CANCLK_DISABLE  ((0x0U) << PERICLKEN_CANCLK_Pos)
#define PERICLKEN_CANCLK_ENABLE   ((0x1U) << PERICLKEN_CANCLK_Pos)

#define PERICLKEN_CANCLK_(x)  (((x) << PERICLKEN_CANCLK_Pos) & PERICLKEN_CANCLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      ADC
  *  @access     CLOCK->PERICLKSTS
  *  @brief      ADC module clock status
  */
#define PERICLKSTS_ADC_Pos  (0)
#define PERICLKSTS_ADC_Msk  (0x1U << PERICLKSTS_ADC_Pos)

#define PERICLKSTS_ADC_READY      ((0x0U) << PERICLKSTS_ADC_Pos)
#define PERICLKSTS_ADC_NOT_READY  ((0x1U) << PERICLKSTS_ADC_Pos)

#define PERICLKSTS_ADC_(x)  (((x) << PERICLKSTS_ADC_Pos) & PERICLKSTS_ADC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      PWM
  *  @access     CLOCK->PERICLKSTS
  *  @brief      PWM module clock status
  */
#define PERICLKSTS_PWM_Pos  (1)
#define PERICLKSTS_PWM_Msk  (0x1U << PERICLKSTS_PWM_Pos)

#define PERICLKSTS_PWM_READY      ((0x0U) << PERICLKSTS_PWM_Pos)
#define PERICLKSTS_PWM_NOT_READY  ((0x1U) << PERICLKSTS_PWM_Pos)

#define PERICLKSTS_PWM_(x)  (((x) << PERICLKSTS_PWM_Pos) & PERICLKSTS_PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      ECAP
  *  @access     CLOCK->PERICLKSTS
  *  @brief      ECAP module clock status
  */
#define PERICLKSTS_ECAP_Pos  (2)
#define PERICLKSTS_ECAP_Msk  (0x1U << PERICLKSTS_ECAP_Pos)

#define PERICLKSTS_ECAP_READY      ((0x0U) << PERICLKSTS_ECAP_Pos)
#define PERICLKSTS_ECAP_NOT_READY  ((0x1U) << PERICLKSTS_ECAP_Pos)

#define PERICLKSTS_ECAP_(x)  (((x) << PERICLKSTS_ECAP_Pos) & PERICLKSTS_ECAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      TIMER0
  *  @access     CLOCK->PERICLKSTS
  *  @brief      TIMER0 module clock status
  */
#define PERICLKSTS_TIMER0_Pos  (3)
#define PERICLKSTS_TIMER0_Msk  (0x1U << PERICLKSTS_TIMER0_Pos)

#define PERICLKSTS_TIMER0_READY      ((0x0U) << PERICLKSTS_TIMER0_Pos)
#define PERICLKSTS_TIMER0_NOT_READY  ((0x1U) << PERICLKSTS_TIMER0_Pos)

#define PERICLKSTS_TIMER0_(x)  (((x) << PERICLKSTS_TIMER0_Pos) & PERICLKSTS_TIMER0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      TIMER1
  *  @access     CLOCK->PERICLKSTS
  *  @brief      TIMER1 module clock status
  */
#define PERICLKSTS_TIMER1_Pos  (4)
#define PERICLKSTS_TIMER1_Msk  (0x1U << PERICLKSTS_TIMER1_Pos)

#define PERICLKSTS_TIMER1_READY      ((0x0U) << PERICLKSTS_TIMER1_Pos)
#define PERICLKSTS_TIMER1_NOT_READY  ((0x1U) << PERICLKSTS_TIMER1_Pos)

#define PERICLKSTS_TIMER1_(x)  (((x) << PERICLKSTS_TIMER1_Pos) & PERICLKSTS_TIMER1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      TIMER2
  *  @access     CLOCK->PERICLKSTS
  *  @brief      TIMER2 module clock status
  */
#define PERICLKSTS_TIMER2_Pos  (5)
#define PERICLKSTS_TIMER2_Msk  (0x1U << PERICLKSTS_TIMER2_Pos)

#define PERICLKSTS_TIMER2_READY      ((0x0U) << PERICLKSTS_TIMER2_Pos)
#define PERICLKSTS_TIMER2_NOT_READY  ((0x1U) << PERICLKSTS_TIMER2_Pos)

#define PERICLKSTS_TIMER2_(x)  (((x) << PERICLKSTS_TIMER2_Pos) & PERICLKSTS_TIMER2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      UART0
  *  @access     CLOCK->PERICLKSTS
  *  @brief      UART0 module clock status
  */
#define PERICLKSTS_UART0_Pos  (6)
#define PERICLKSTS_UART0_Msk  (0x1U << PERICLKSTS_UART0_Pos)

#define PERICLKSTS_UART0_READY      ((0x0U) << PERICLKSTS_UART0_Pos)
#define PERICLKSTS_UART0_NOT_READY  ((0x1U) << PERICLKSTS_UART0_Pos)

#define PERICLKSTS_UART0_(x)  (((x) << PERICLKSTS_UART0_Pos) & PERICLKSTS_UART0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      UART1
  *  @access     CLOCK->PERICLKSTS
  *  @brief      UART1 module clock status
  */
#define PERICLKSTS_UART1_Pos  (7)
#define PERICLKSTS_UART1_Msk  (0x1U << PERICLKSTS_UART1_Pos)

#define PERICLKSTS_UART1_READY      ((0x0U) << PERICLKSTS_UART1_Pos)
#define PERICLKSTS_UART1_NOT_READY  ((0x1U) << PERICLKSTS_UART1_Pos)

#define PERICLKSTS_UART1_(x)  (((x) << PERICLKSTS_UART1_Pos) & PERICLKSTS_UART1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      SPI0
  *  @access     CLOCK->PERICLKSTS
  *  @brief      SPI0 module clock status
  */
#define PERICLKSTS_SPI0_Pos  (8)
#define PERICLKSTS_SPI0_Msk  (0x1U << PERICLKSTS_SPI0_Pos)

#define PERICLKSTS_SPI0_READY      ((0x0U) << PERICLKSTS_SPI0_Pos)
#define PERICLKSTS_SPI0_NOT_READY  ((0x1U) << PERICLKSTS_SPI0_Pos)

#define PERICLKSTS_SPI0_(x)  (((x) << PERICLKSTS_SPI0_Pos) & PERICLKSTS_SPI0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      SPI1
  *  @access     CLOCK->PERICLKSTS
  *  @brief      SPI1 module clock status
  */
#define PERICLKSTS_SPI1_Pos  (9)
#define PERICLKSTS_SPI1_Msk  (0x1U << PERICLKSTS_SPI1_Pos)

#define PERICLKSTS_SPI1_READY      ((0x0U) << PERICLKSTS_SPI1_Pos)
#define PERICLKSTS_SPI1_NOT_READY  ((0x1U) << PERICLKSTS_SPI1_Pos)

#define PERICLKSTS_SPI1_(x)  (((x) << PERICLKSTS_SPI1_Pos) & PERICLKSTS_SPI1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      I2C
  *  @access     CLOCK->PERICLKSTS
  *  @brief      I2C module clock status
  */
#define PERICLKSTS_I2C_Pos  (10)
#define PERICLKSTS_I2C_Msk  (0x1U << PERICLKSTS_I2C_Pos)

#define PERICLKSTS_I2C_READY      ((0x0U) << PERICLKSTS_I2C_Pos)
#define PERICLKSTS_I2C_NOT_READY  ((0x1U) << PERICLKSTS_I2C_Pos)

#define PERICLKSTS_I2C_(x)  (((x) << PERICLKSTS_I2C_Pos) & PERICLKSTS_I2C_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      CAN
  *  @access     CLOCK->PERICLKSTS
  *  @brief      CAN module clock status
  */
#define PERICLKSTS_CAN_Pos  (11)
#define PERICLKSTS_CAN_Msk  (0x1U << PERICLKSTS_CAN_Pos)

#define PERICLKSTS_CAN_READY      ((0x0U) << PERICLKSTS_CAN_Pos)
#define PERICLKSTS_CAN_NOT_READY  ((0x1U) << PERICLKSTS_CAN_Pos)

#define PERICLKSTS_CAN_(x)  (((x) << PERICLKSTS_CAN_Pos) & PERICLKSTS_CAN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      AHB
  *  @access     CLOCK->PERICLKSTS
  *  @brief      Bus and CPU clock status
  */
#define PERICLKSTS_AHB_Pos  (12)
#define PERICLKSTS_AHB_Msk  (0x1U << PERICLKSTS_AHB_Pos)

#define PERICLKSTS_AHB_READY      ((0x0U) << PERICLKSTS_AHB_Pos)
#define PERICLKSTS_AHB_NOT_READY  ((0x1U) << PERICLKSTS_AHB_Pos)

#define PERICLKSTS_AHB_(x)  (((x) << PERICLKSTS_AHB_Pos) & PERICLKSTS_AHB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      DG
  *  @access     CLOCK->PERICLKSTS
  *  @brief      Deglitch module clock status
  */
#define PERICLKSTS_DG_Pos  (13)
#define PERICLKSTS_DG_Msk  (0x1U << PERICLKSTS_DG_Pos)

#define PERICLKSTS_DG_READY      ((0x0U) << PERICLKSTS_DG_Pos)
#define PERICLKSTS_DG_NOT_READY  ((0x1U) << PERICLKSTS_DG_Pos)

#define PERICLKSTS_DG_(x)  (((x) << PERICLKSTS_DG_Pos) & PERICLKSTS_DG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      WDT0
  *  @access     CLOCK->PERICLKSTS
  *  @brief      Watchdog 0 clock status
  */
#define PERICLKSTS_WDT0_Pos  (14)
#define PERICLKSTS_WDT0_Msk  (0x1U << PERICLKSTS_WDT0_Pos)

#define PERICLKSTS_WDT0_READY      ((0x0U) << PERICLKSTS_WDT0_Pos)
#define PERICLKSTS_WDT0_NOT_READY  ((0x1U) << PERICLKSTS_WDT0_Pos)

#define PERICLKSTS_WDT0_(x)  (((x) << PERICLKSTS_WDT0_Pos) & PERICLKSTS_WDT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           PERICLKSTS      WDT1
  *  @access     CLOCK->PERICLKSTS
  *  @brief      Watchdog 1 clock status
  */
#define PERICLKSTS_WDT1_Pos  (15)
#define PERICLKSTS_WDT1_Msk  (0x1U << PERICLKSTS_WDT1_Pos)

#define PERICLKSTS_WDT1_READY      ((0x0U) << PERICLKSTS_WDT1_Pos)
#define PERICLKSTS_WDT1_NOT_READY  ((0x1U) << PERICLKSTS_WDT1_Pos)

#define PERICLKSTS_WDT1_(x)  (((x) << PERICLKSTS_WDT1_Pos) & PERICLKSTS_WDT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CLOCK           CLKREGKEY       KEY
  *  @access     CLOCK->CLKREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected clock registers
  */
#define CLKREGKEY_KEY_Pos  (0)
#define CLKREGKEY_KEY_Msk  (0xFFFFFFFFU << CLKREGKEY_KEY_Pos)

#define CLKREGKEY_KEY_(x)  (((x) << CLKREGKEY_KEY_Pos) & CLKREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      PINMUX:                                                               */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO0           OCHSEL
  *  @access     PINMUX->GPIO0
  *  @brief      Output channel select
  */
#define GPIO0_OCHSEL_Pos  (0)
#define GPIO0_OCHSEL_Msk  (0x3U << GPIO0_OCHSEL_Pos)

#define GPIO0_OCHSEL_GPIO0      ((0x00U) << GPIO0_OCHSEL_Pos)
#define GPIO0_OCHSEL_ANA_IN0    ((0x01U) << GPIO0_OCHSEL_Pos)
#define GPIO0_OCHSEL_PWM_SOCAO  ((0x02U) << GPIO0_OCHSEL_Pos)
#define GPIO0_OCHSEL_PWM_SOCCO  ((0x03U) << GPIO0_OCHSEL_Pos)

#define GPIO0_OCHSEL_(x)  (((x) << GPIO0_OCHSEL_Pos) & GPIO0_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO0           DEGLITCH
  *  @access     PINMUX->GPIO0
  *  @brief      Input deglitch
  */
#define GPIO0_DEGLITCH_Pos  (5)
#define GPIO0_DEGLITCH_Msk  (0x1U << GPIO0_DEGLITCH_Pos)

#define GPIO0_DEGLITCH_DISABLE  ((0x0U) << GPIO0_DEGLITCH_Pos)
#define GPIO0_DEGLITCH_ENABLE   ((0x1U) << GPIO0_DEGLITCH_Pos)

#define GPIO0_DEGLITCH_(x)  (((x) << GPIO0_DEGLITCH_Pos) & GPIO0_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO0           STRENGTH
  *  @access     PINMUX->GPIO0
  *  @brief      Output driving strength
  */
#define GPIO0_STRENGTH_Pos  (6)
#define GPIO0_STRENGTH_Msk  (0x3U << GPIO0_STRENGTH_Pos)

#define GPIO0_STRENGTH_5_MA   ((0x00U) << GPIO0_STRENGTH_Pos)
#define GPIO0_STRENGTH_10_MA  ((0x01U) << GPIO0_STRENGTH_Pos)
#define GPIO0_STRENGTH_15_MA  ((0x02U) << GPIO0_STRENGTH_Pos)
#define GPIO0_STRENGTH_20_MA  ((0x03U) << GPIO0_STRENGTH_Pos)

#define GPIO0_STRENGTH_(x)  (((x) << GPIO0_STRENGTH_Pos) & GPIO0_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO0           ICHEN
  *  @access     PINMUX->GPIO0
  *  @brief      Input channel enable
  */
#define GPIO0_ICHEN_Pos  (8)
#define GPIO0_ICHEN_Msk  (0x1U << GPIO0_ICHEN_Pos)

#define GPIO0_ICHEN_(x)  (((x) << GPIO0_ICHEN_Pos) & GPIO0_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO0           PD
  *  @access     PINMUX->GPIO0
  *  @brief      Pull down enable
  */
#define GPIO0_PD_Pos  (16)
#define GPIO0_PD_Msk  (0x3U << GPIO0_PD_Pos)

#define GPIO0_PD_(x)  (((x) << GPIO0_PD_Pos) & GPIO0_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO0           PU
  *  @access     PINMUX->GPIO0
  *  @brief      Pull up enable
  */
#define GPIO0_PU_Pos  (24)
#define GPIO0_PU_Msk  (0x3U << GPIO0_PU_Pos)

#define GPIO0_PU_(x)  (((x) << GPIO0_PU_Pos) & GPIO0_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO1           OCHSEL
  *  @access     PINMUX->GPIO1
  *  @brief      Output channel select
  */
#define GPIO1_OCHSEL_Pos  (0)
#define GPIO1_OCHSEL_Msk  (0x3U << GPIO1_OCHSEL_Pos)

#define GPIO1_OCHSEL_GPIO1       ((0x00U) << GPIO1_OCHSEL_Pos)
#define GPIO1_OCHSEL_ANA_IN1     ((0x01U) << GPIO1_OCHSEL_Pos)
#define GPIO1_OCHSEL_PWM_SOCBO   ((0x02U) << GPIO1_OCHSEL_Pos)
#define GPIO1_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO1_OCHSEL_Pos)

#define GPIO1_OCHSEL_(x)  (((x) << GPIO1_OCHSEL_Pos) & GPIO1_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO1           DEGLITCH
  *  @access     PINMUX->GPIO1
  *  @brief      Input deglitch
  */
#define GPIO1_DEGLITCH_Pos  (5)
#define GPIO1_DEGLITCH_Msk  (0x1U << GPIO1_DEGLITCH_Pos)

#define GPIO1_DEGLITCH_DISABLE  ((0x0U) << GPIO1_DEGLITCH_Pos)
#define GPIO1_DEGLITCH_ENABLE   ((0x1U) << GPIO1_DEGLITCH_Pos)

#define GPIO1_DEGLITCH_(x)  (((x) << GPIO1_DEGLITCH_Pos) & GPIO1_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO1           STRENGTH
  *  @access     PINMUX->GPIO1
  *  @brief      Output driving strength
  */
#define GPIO1_STRENGTH_Pos  (6)
#define GPIO1_STRENGTH_Msk  (0x3U << GPIO1_STRENGTH_Pos)

#define GPIO1_STRENGTH_5_MA   ((0x00U) << GPIO1_STRENGTH_Pos)
#define GPIO1_STRENGTH_10_MA  ((0x01U) << GPIO1_STRENGTH_Pos)
#define GPIO1_STRENGTH_15_MA  ((0x02U) << GPIO1_STRENGTH_Pos)
#define GPIO1_STRENGTH_20_MA  ((0x03U) << GPIO1_STRENGTH_Pos)

#define GPIO1_STRENGTH_(x)  (((x) << GPIO1_STRENGTH_Pos) & GPIO1_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO1           ICHEN
  *  @access     PINMUX->GPIO1
  *  @brief      Input channel enable
  */
#define GPIO1_ICHEN_Pos  (8)
#define GPIO1_ICHEN_Msk  (0x1U << GPIO1_ICHEN_Pos)

#define GPIO1_ICHEN_(x)  (((x) << GPIO1_ICHEN_Pos) & GPIO1_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO1           PD
  *  @access     PINMUX->GPIO1
  *  @brief      Pull down enable
  */
#define GPIO1_PD_Pos  (16)
#define GPIO1_PD_Msk  (0x3U << GPIO1_PD_Pos)

#define GPIO1_PD_(x)  (((x) << GPIO1_PD_Pos) & GPIO1_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO1           PU
  *  @access     PINMUX->GPIO1
  *  @brief      Pull up enable
  */
#define GPIO1_PU_Pos  (24)
#define GPIO1_PU_Msk  (0x3U << GPIO1_PU_Pos)

#define GPIO1_PU_(x)  (((x) << GPIO1_PU_Pos) & GPIO1_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO2           OCHSEL
  *  @access     PINMUX->GPIO2
  *  @brief      Output channel select
  */
#define GPIO2_OCHSEL_Pos  (0)
#define GPIO2_OCHSEL_Msk  (0x3U << GPIO2_OCHSEL_Pos)

#define GPIO2_OCHSEL_GPIO2     ((0x00U) << GPIO2_OCHSEL_Pos)
#define GPIO2_OCHSEL_ANA_IN2   ((0x01U) << GPIO2_OCHSEL_Pos)
#define GPIO2_OCHSEL_CLK_DCLK  ((0x02U) << GPIO2_OCHSEL_Pos)
#define GPIO2_OCHSEL_EPWR_TZO  ((0x03U) << GPIO2_OCHSEL_Pos)

#define GPIO2_OCHSEL_(x)  (((x) << GPIO2_OCHSEL_Pos) & GPIO2_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO2           DEGLITCH
  *  @access     PINMUX->GPIO2
  *  @brief      Input deglitch
  */
#define GPIO2_DEGLITCH_Pos  (5)
#define GPIO2_DEGLITCH_Msk  (0x1U << GPIO2_DEGLITCH_Pos)

#define GPIO2_DEGLITCH_DISABLE  ((0x0U) << GPIO2_DEGLITCH_Pos)
#define GPIO2_DEGLITCH_ENABLE   ((0x1U) << GPIO2_DEGLITCH_Pos)

#define GPIO2_DEGLITCH_(x)  (((x) << GPIO2_DEGLITCH_Pos) & GPIO2_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO2           STRENGTH
  *  @access     PINMUX->GPIO2
  *  @brief      Output driving strength
  */
#define GPIO2_STRENGTH_Pos  (6)
#define GPIO2_STRENGTH_Msk  (0x3U << GPIO2_STRENGTH_Pos)

#define GPIO2_STRENGTH_5_MA   ((0x00U) << GPIO2_STRENGTH_Pos)
#define GPIO2_STRENGTH_10_MA  ((0x01U) << GPIO2_STRENGTH_Pos)
#define GPIO2_STRENGTH_15_MA  ((0x02U) << GPIO2_STRENGTH_Pos)
#define GPIO2_STRENGTH_20_MA  ((0x03U) << GPIO2_STRENGTH_Pos)

#define GPIO2_STRENGTH_(x)  (((x) << GPIO2_STRENGTH_Pos) & GPIO2_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO2           ICHEN
  *  @access     PINMUX->GPIO2
  *  @brief      Input channel enable
  */
#define GPIO2_ICHEN_Pos  (8)
#define GPIO2_ICHEN_Msk  (0x1U << GPIO2_ICHEN_Pos)

#define GPIO2_ICHEN_(x)  (((x) << GPIO2_ICHEN_Pos) & GPIO2_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO2           PD
  *  @access     PINMUX->GPIO2
  *  @brief      Pull down enable
  */
#define GPIO2_PD_Pos  (16)
#define GPIO2_PD_Msk  (0x3U << GPIO2_PD_Pos)

#define GPIO2_PD_(x)  (((x) << GPIO2_PD_Pos) & GPIO2_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO2           PU
  *  @access     PINMUX->GPIO2
  *  @brief      Pull up enable
  */
#define GPIO2_PU_Pos  (24)
#define GPIO2_PU_Msk  (0x3U << GPIO2_PU_Pos)

#define GPIO2_PU_(x)  (((x) << GPIO2_PU_Pos) & GPIO2_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO3           OCHSEL
  *  @access     PINMUX->GPIO3
  *  @brief      Output channel select
  */
#define GPIO3_OCHSEL_Pos  (0)
#define GPIO3_OCHSEL_Msk  (0x3U << GPIO3_OCHSEL_Pos)

#define GPIO3_OCHSEL_GPIO3      ((0x00U) << GPIO3_OCHSEL_Pos)
#define GPIO3_OCHSEL_ANA_IN3    ((0x01U) << GPIO3_OCHSEL_Pos)
#define GPIO3_OCHSEL_XIN        ((0x02U) << GPIO3_OCHSEL_Pos)
#define GPIO3_OCHSEL_COMP_MON0  ((0x03U) << GPIO3_OCHSEL_Pos)

#define GPIO3_OCHSEL_(x)  (((x) << GPIO3_OCHSEL_Pos) & GPIO3_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO3           DEGLITCH
  *  @access     PINMUX->GPIO3
  *  @brief      Input deglitch
  */
#define GPIO3_DEGLITCH_Pos  (5)
#define GPIO3_DEGLITCH_Msk  (0x1U << GPIO3_DEGLITCH_Pos)

#define GPIO3_DEGLITCH_DISABLE  ((0x0U) << GPIO3_DEGLITCH_Pos)
#define GPIO3_DEGLITCH_ENABLE   ((0x1U) << GPIO3_DEGLITCH_Pos)

#define GPIO3_DEGLITCH_(x)  (((x) << GPIO3_DEGLITCH_Pos) & GPIO3_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO3           STRENGTH
  *  @access     PINMUX->GPIO3
  *  @brief      Output driving strength
  */
#define GPIO3_STRENGTH_Pos  (6)
#define GPIO3_STRENGTH_Msk  (0x3U << GPIO3_STRENGTH_Pos)

#define GPIO3_STRENGTH_5_MA   ((0x00U) << GPIO3_STRENGTH_Pos)
#define GPIO3_STRENGTH_10_MA  ((0x01U) << GPIO3_STRENGTH_Pos)
#define GPIO3_STRENGTH_15_MA  ((0x02U) << GPIO3_STRENGTH_Pos)
#define GPIO3_STRENGTH_20_MA  ((0x03U) << GPIO3_STRENGTH_Pos)

#define GPIO3_STRENGTH_(x)  (((x) << GPIO3_STRENGTH_Pos) & GPIO3_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO3           ICHEN
  *  @access     PINMUX->GPIO3
  *  @brief      Input channel enable
  */
#define GPIO3_ICHEN_Pos  (8)
#define GPIO3_ICHEN_Msk  (0x1U << GPIO3_ICHEN_Pos)

#define GPIO3_ICHEN_(x)  (((x) << GPIO3_ICHEN_Pos) & GPIO3_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO3           PD
  *  @access     PINMUX->GPIO3
  *  @brief      Pull down enable
  */
#define GPIO3_PD_Pos  (16)
#define GPIO3_PD_Msk  (0x3U << GPIO3_PD_Pos)

#define GPIO3_PD_(x)  (((x) << GPIO3_PD_Pos) & GPIO3_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO3           PU
  *  @access     PINMUX->GPIO3
  *  @brief      Pull up enable
  */
#define GPIO3_PU_Pos  (24)
#define GPIO3_PU_Msk  (0x3U << GPIO3_PU_Pos)

#define GPIO3_PU_(x)  (((x) << GPIO3_PU_Pos) & GPIO3_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO4           OCHSEL
  *  @access     PINMUX->GPIO4
  *  @brief      Output channel select
  */
#define GPIO4_OCHSEL_Pos  (0)
#define GPIO4_OCHSEL_Msk  (0x3U << GPIO4_OCHSEL_Pos)

#define GPIO4_OCHSEL_GPIO4      ((0x00U) << GPIO4_OCHSEL_Pos)
#define GPIO4_OCHSEL_ANA_IN4    ((0x01U) << GPIO4_OCHSEL_Pos)
#define GPIO4_OCHSEL_XOUT       ((0x02U) << GPIO4_OCHSEL_Pos)
#define GPIO4_OCHSEL_COMP_MON1  ((0x03U) << GPIO4_OCHSEL_Pos)

#define GPIO4_OCHSEL_(x)  (((x) << GPIO4_OCHSEL_Pos) & GPIO4_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO4           DEGLITCH
  *  @access     PINMUX->GPIO4
  *  @brief      Input deglitch
  */
#define GPIO4_DEGLITCH_Pos  (5)
#define GPIO4_DEGLITCH_Msk  (0x1U << GPIO4_DEGLITCH_Pos)

#define GPIO4_DEGLITCH_DISABLE  ((0x0U) << GPIO4_DEGLITCH_Pos)
#define GPIO4_DEGLITCH_ENABLE   ((0x1U) << GPIO4_DEGLITCH_Pos)

#define GPIO4_DEGLITCH_(x)  (((x) << GPIO4_DEGLITCH_Pos) & GPIO4_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO4           STRENGTH
  *  @access     PINMUX->GPIO4
  *  @brief      Output driving strength
  */
#define GPIO4_STRENGTH_Pos  (6)
#define GPIO4_STRENGTH_Msk  (0x3U << GPIO4_STRENGTH_Pos)

#define GPIO4_STRENGTH_5_MA   ((0x00U) << GPIO4_STRENGTH_Pos)
#define GPIO4_STRENGTH_10_MA  ((0x01U) << GPIO4_STRENGTH_Pos)
#define GPIO4_STRENGTH_15_MA  ((0x02U) << GPIO4_STRENGTH_Pos)
#define GPIO4_STRENGTH_20_MA  ((0x03U) << GPIO4_STRENGTH_Pos)

#define GPIO4_STRENGTH_(x)  (((x) << GPIO4_STRENGTH_Pos) & GPIO4_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO4           ICHEN
  *  @access     PINMUX->GPIO4
  *  @brief      Input channel enable
  */
#define GPIO4_ICHEN_Pos  (8)
#define GPIO4_ICHEN_Msk  (0x1U << GPIO4_ICHEN_Pos)

#define GPIO4_ICHEN_(x)  (((x) << GPIO4_ICHEN_Pos) & GPIO4_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO4           PD
  *  @access     PINMUX->GPIO4
  *  @brief      Pull down enable
  */
#define GPIO4_PD_Pos  (16)
#define GPIO4_PD_Msk  (0x3U << GPIO4_PD_Pos)

#define GPIO4_PD_(x)  (((x) << GPIO4_PD_Pos) & GPIO4_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO4           PU
  *  @access     PINMUX->GPIO4
  *  @brief      Pull up enable
  */
#define GPIO4_PU_Pos  (24)
#define GPIO4_PU_Msk  (0x3U << GPIO4_PU_Pos)

#define GPIO4_PU_(x)  (((x) << GPIO4_PU_Pos) & GPIO4_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO5           OCHSEL
  *  @access     PINMUX->GPIO5
  *  @brief      Output channel select
  */
#define GPIO5_OCHSEL_Pos  (0)
#define GPIO5_OCHSEL_Msk  (0x3U << GPIO5_OCHSEL_Pos)

#define GPIO5_OCHSEL_GPIO5       ((0x00U) << GPIO5_OCHSEL_Pos)
#define GPIO5_OCHSEL_EPWR_TZO    ((0x01U) << GPIO5_OCHSEL_Pos)
#define GPIO5_OCHSEL_PWM_SOCO    ((0x02U) << GPIO5_OCHSEL_Pos)
#define GPIO5_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO5_OCHSEL_Pos)

#define GPIO5_OCHSEL_(x)  (((x) << GPIO5_OCHSEL_Pos) & GPIO5_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO5           DEGLITCH
  *  @access     PINMUX->GPIO5
  *  @brief      Input deglitch
  */
#define GPIO5_DEGLITCH_Pos  (5)
#define GPIO5_DEGLITCH_Msk  (0x1U << GPIO5_DEGLITCH_Pos)

#define GPIO5_DEGLITCH_DISABLE  ((0x0U) << GPIO5_DEGLITCH_Pos)
#define GPIO5_DEGLITCH_ENABLE   ((0x1U) << GPIO5_DEGLITCH_Pos)

#define GPIO5_DEGLITCH_(x)  (((x) << GPIO5_DEGLITCH_Pos) & GPIO5_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO5           STRENGTH
  *  @access     PINMUX->GPIO5
  *  @brief      Output driving strength
  */
#define GPIO5_STRENGTH_Pos  (6)
#define GPIO5_STRENGTH_Msk  (0x1U << GPIO5_STRENGTH_Pos)

#define GPIO5_STRENGTH_1_MA   ((0x0U) << GPIO5_STRENGTH_Pos)
#define GPIO5_STRENGTH_20_MA  ((0x1U) << GPIO5_STRENGTH_Pos)

#define GPIO5_STRENGTH_(x)  (((x) << GPIO5_STRENGTH_Pos) & GPIO5_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO5           ICHEN
  *  @access     PINMUX->GPIO5
  *  @brief      Input channel enable
  */
#define GPIO5_ICHEN_Pos  (8)
#define GPIO5_ICHEN_Msk  (0x1U << GPIO5_ICHEN_Pos)

#define GPIO5_ICHEN_(x)  (((x) << GPIO5_ICHEN_Pos) & GPIO5_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO5           PD
  *  @access     PINMUX->GPIO5
  *  @brief      Pull down enable
  */
#define GPIO5_PD_Pos  (16)
#define GPIO5_PD_Msk  (0x1U << GPIO5_PD_Pos)

#define GPIO5_PD_(x)  (((x) << GPIO5_PD_Pos) & GPIO5_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO5           PU
  *  @access     PINMUX->GPIO5
  *  @brief      Pull up enable
  */
#define GPIO5_PU_Pos  (24)
#define GPIO5_PU_Msk  (0x1U << GPIO5_PU_Pos)

#define GPIO5_PU_(x)  (((x) << GPIO5_PU_Pos) & GPIO5_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO6           OCHSEL
  *  @access     PINMUX->GPIO6
  *  @brief      Channel select
  */
#define GPIO6_OCHSEL_Pos  (0)
#define GPIO6_OCHSEL_Msk  (0x3U << GPIO6_OCHSEL_Pos)

#define GPIO6_OCHSEL_GPIO6      ((0x00U) << GPIO6_OCHSEL_Pos)
#define GPIO6_OCHSEL_SPI0_SCLK  ((0x01U) << GPIO6_OCHSEL_Pos)
#define GPIO6_OCHSEL_UART1_TXD  ((0x02U) << GPIO6_OCHSEL_Pos)
#define GPIO6_OCHSEL_COMP_MON2  ((0x03U) << GPIO6_OCHSEL_Pos)

#define GPIO6_OCHSEL_(x)  (((x) << GPIO6_OCHSEL_Pos) & GPIO6_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO6           LOOPBACK
  *  @access     PINMUX->GPIO6
  *  @brief      Data loopback for UART1
  */
#define GPIO6_LOOPBACK_Pos  (2)
#define GPIO6_LOOPBACK_Msk  (0x1U << GPIO6_LOOPBACK_Pos)

#define GPIO6_LOOPBACK_DISABLE  ((0x0U) << GPIO6_LOOPBACK_Pos)
#define GPIO6_LOOPBACK_ENABLE   ((0x1U) << GPIO6_LOOPBACK_Pos)

#define GPIO6_LOOPBACK_(x)  (((x) << GPIO6_LOOPBACK_Pos) & GPIO6_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO6           DEGLITCH
  *  @access     PINMUX->GPIO6
  *  @brief      Input deglitch
  */
#define GPIO6_DEGLITCH_Pos  (5)
#define GPIO6_DEGLITCH_Msk  (0x1U << GPIO6_DEGLITCH_Pos)

#define GPIO6_DEGLITCH_DISABLE  ((0x0U) << GPIO6_DEGLITCH_Pos)
#define GPIO6_DEGLITCH_ENABLE   ((0x1U) << GPIO6_DEGLITCH_Pos)

#define GPIO6_DEGLITCH_(x)  (((x) << GPIO6_DEGLITCH_Pos) & GPIO6_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO6           STRENGTH
  *  @access     PINMUX->GPIO6
  *  @brief      Output driving strength
  */
#define GPIO6_STRENGTH_Pos  (6)
#define GPIO6_STRENGTH_Msk  (0x1U << GPIO6_STRENGTH_Pos)

#define GPIO6_STRENGTH_1_MA   ((0x0U) << GPIO6_STRENGTH_Pos)
#define GPIO6_STRENGTH_20_MA  ((0x1U) << GPIO6_STRENGTH_Pos)

#define GPIO6_STRENGTH_(x)  (((x) << GPIO6_STRENGTH_Pos) & GPIO6_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO6           ICHEN
  *  @access     PINMUX->GPIO6
  *  @brief      Input channel enable
  */
#define GPIO6_ICHEN_Pos  (8)
#define GPIO6_ICHEN_Msk  (0x7U << GPIO6_ICHEN_Pos)

#define GPIO6_ICHEN_(x)  (((x) << GPIO6_ICHEN_Pos) & GPIO6_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO6           PD
  *  @access     PINMUX->GPIO6
  *  @brief      Pull down enable
  */
#define GPIO6_PD_Pos  (16)
#define GPIO6_PD_Msk  (0x7U << GPIO6_PD_Pos)

#define GPIO6_PD_(x)  (((x) << GPIO6_PD_Pos) & GPIO6_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO6           PU
  *  @access     PINMUX->GPIO6
  *  @brief      Pull up enable
  */
#define GPIO6_PU_Pos  (24)
#define GPIO6_PU_Msk  (0x7U << GPIO6_PU_Pos)

#define GPIO6_PU_(x)  (((x) << GPIO6_PU_Pos) & GPIO6_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO7           OCHSEL
  *  @access     PINMUX->GPIO7
  *  @brief      Output channel select
  */
#define GPIO7_OCHSEL_Pos  (0)
#define GPIO7_OCHSEL_Msk  (0x3U << GPIO7_OCHSEL_Pos)

#define GPIO7_OCHSEL_GPIO7      ((0x00U) << GPIO7_OCHSEL_Pos)
#define GPIO7_OCHSEL_SPI0_SFRM  ((0x01U) << GPIO7_OCHSEL_Pos)
#define GPIO7_OCHSEL_UART1_RXD  ((0x02U) << GPIO7_OCHSEL_Pos)
#define GPIO7_OCHSEL_COMP_MON2  ((0x03U) << GPIO7_OCHSEL_Pos)

#define GPIO7_OCHSEL_(x)  (((x) << GPIO7_OCHSEL_Pos) & GPIO7_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO7           LOOPBACK
  *  @access     PINMUX->GPIO7
  *  @brief      Data loopback for UART1
  */
#define GPIO7_LOOPBACK_Pos  (2)
#define GPIO7_LOOPBACK_Msk  (0x1U << GPIO7_LOOPBACK_Pos)

#define GPIO7_LOOPBACK_DISABLE  ((0x0U) << GPIO7_LOOPBACK_Pos)
#define GPIO7_LOOPBACK_ENABLE   ((0x1U) << GPIO7_LOOPBACK_Pos)

#define GPIO7_LOOPBACK_(x)  (((x) << GPIO7_LOOPBACK_Pos) & GPIO7_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO7           DEGLITCH
  *  @access     PINMUX->GPIO7
  *  @brief      Input deglitch
  */
#define GPIO7_DEGLITCH_Pos  (5)
#define GPIO7_DEGLITCH_Msk  (0x1U << GPIO7_DEGLITCH_Pos)

#define GPIO7_DEGLITCH_DISABLE  ((0x0U) << GPIO7_DEGLITCH_Pos)
#define GPIO7_DEGLITCH_ENABLE   ((0x1U) << GPIO7_DEGLITCH_Pos)

#define GPIO7_DEGLITCH_(x)  (((x) << GPIO7_DEGLITCH_Pos) & GPIO7_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO7           STRENGTH
  *  @access     PINMUX->GPIO7
  *  @brief      Output driving strength
  */
#define GPIO7_STRENGTH_Pos  (6)
#define GPIO7_STRENGTH_Msk  (0x1U << GPIO7_STRENGTH_Pos)

#define GPIO7_STRENGTH_1_MA   ((0x0U) << GPIO7_STRENGTH_Pos)
#define GPIO7_STRENGTH_20_MA  ((0x1U) << GPIO7_STRENGTH_Pos)

#define GPIO7_STRENGTH_(x)  (((x) << GPIO7_STRENGTH_Pos) & GPIO7_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO7           ICHEN
  *  @access     PINMUX->GPIO7
  *  @brief      Input channel enable
  */
#define GPIO7_ICHEN_Pos  (8)
#define GPIO7_ICHEN_Msk  (0x7U << GPIO7_ICHEN_Pos)

#define GPIO7_ICHEN_(x)  (((x) << GPIO7_ICHEN_Pos) & GPIO7_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO7           PD
  *  @access     PINMUX->GPIO7
  *  @brief      Pull down enable
  */
#define GPIO7_PD_Pos  (16)
#define GPIO7_PD_Msk  (0x7U << GPIO7_PD_Pos)

#define GPIO7_PD_(x)  (((x) << GPIO7_PD_Pos) & GPIO7_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO7           PU
  *  @access     PINMUX->GPIO7
  *  @brief      Pull up enable
  */
#define GPIO7_PU_Pos  (24)
#define GPIO7_PU_Msk  (0x7U << GPIO7_PU_Pos)

#define GPIO7_PU_(x)  (((x) << GPIO7_PU_Pos) & GPIO7_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO8           OCHSEL
  *  @access     PINMUX->GPIO8
  *  @brief      Output channel select
  */
#define GPIO8_OCHSEL_Pos  (0)
#define GPIO8_OCHSEL_Msk  (0x3U << GPIO8_OCHSEL_Pos)

#define GPIO8_OCHSEL_GPIO8      ((0x00U) << GPIO8_OCHSEL_Pos)
#define GPIO8_OCHSEL_SPI0_MOSI  ((0x01U) << GPIO8_OCHSEL_Pos)
#define GPIO8_OCHSEL_CAN_TXD    ((0x02U) << GPIO8_OCHSEL_Pos)
#define GPIO8_OCHSEL_COMP_MON4  ((0x03U) << GPIO8_OCHSEL_Pos)

#define GPIO8_OCHSEL_(x)  (((x) << GPIO8_OCHSEL_Pos) & GPIO8_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO8           LOOPBACK
  *  @access     PINMUX->GPIO8
  *  @brief      Data loopback for SPI0 and CAN
  */
#define GPIO8_LOOPBACK_Pos  (2)
#define GPIO8_LOOPBACK_Msk  (0x1U << GPIO8_LOOPBACK_Pos)

#define GPIO8_LOOPBACK_DISABLE  ((0x0U) << GPIO8_LOOPBACK_Pos)
#define GPIO8_LOOPBACK_ENABLE   ((0x1U) << GPIO8_LOOPBACK_Pos)

#define GPIO8_LOOPBACK_(x)  (((x) << GPIO8_LOOPBACK_Pos) & GPIO8_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO8           DEGLITCH
  *  @access     PINMUX->GPIO8
  *  @brief      Input deglitch
  */
#define GPIO8_DEGLITCH_Pos  (5)
#define GPIO8_DEGLITCH_Msk  (0x1U << GPIO8_DEGLITCH_Pos)

#define GPIO8_DEGLITCH_DISABLE  ((0x0U) << GPIO8_DEGLITCH_Pos)
#define GPIO8_DEGLITCH_ENABLE   ((0x1U) << GPIO8_DEGLITCH_Pos)

#define GPIO8_DEGLITCH_(x)  (((x) << GPIO8_DEGLITCH_Pos) & GPIO8_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO8           STRENGTH
  *  @access     PINMUX->GPIO8
  *  @brief      Output driving strength
  */
#define GPIO8_STRENGTH_Pos  (6)
#define GPIO8_STRENGTH_Msk  (0x1U << GPIO8_STRENGTH_Pos)

#define GPIO8_STRENGTH_1_MA   ((0x0U) << GPIO8_STRENGTH_Pos)
#define GPIO8_STRENGTH_20_MA  ((0x1U) << GPIO8_STRENGTH_Pos)

#define GPIO8_STRENGTH_(x)  (((x) << GPIO8_STRENGTH_Pos) & GPIO8_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO8           ICHEN
  *  @access     PINMUX->GPIO8
  *  @brief      Input channel enable
  */
#define GPIO8_ICHEN_Pos  (8)
#define GPIO8_ICHEN_Msk  (0x7U << GPIO8_ICHEN_Pos)

#define GPIO8_ICHEN_(x)  (((x) << GPIO8_ICHEN_Pos) & GPIO8_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO8           PD
  *  @access     PINMUX->GPIO8
  *  @brief      Pull down enable
  */
#define GPIO8_PD_Pos  (16)
#define GPIO8_PD_Msk  (0x7U << GPIO8_PD_Pos)

#define GPIO8_PD_(x)  (((x) << GPIO8_PD_Pos) & GPIO8_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO8           PU
  *  @access     PINMUX->GPIO8
  *  @brief      Pull up enable
  */
#define GPIO8_PU_Pos  (24)
#define GPIO8_PU_Msk  (0x7U << GPIO8_PU_Pos)

#define GPIO8_PU_(x)  (((x) << GPIO8_PU_Pos) & GPIO8_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO9           OCHSEL
  *  @access     PINMUX->GPIO9
  *  @brief      Output channel select
  */
#define GPIO9_OCHSEL_Pos  (0)
#define GPIO9_OCHSEL_Msk  (0x3U << GPIO9_OCHSEL_Pos)

#define GPIO9_OCHSEL_GPIO9      ((0x00U) << GPIO9_OCHSEL_Pos)
#define GPIO9_OCHSEL_SPI0_MISO  ((0x01U) << GPIO9_OCHSEL_Pos)
#define GPIO9_OCHSEL_CAN_RXD    ((0x02U) << GPIO9_OCHSEL_Pos)
#define GPIO9_OCHSEL_COMP_MON5  ((0x03U) << GPIO9_OCHSEL_Pos)

#define GPIO9_OCHSEL_(x)  (((x) << GPIO9_OCHSEL_Pos) & GPIO9_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO9           LOOPBACK
  *  @access     PINMUX->GPIO9
  *  @brief      Data loopback for SPI0 and CAN
  */
#define GPIO9_LOOPBACK_Pos  (2)
#define GPIO9_LOOPBACK_Msk  (0x1U << GPIO9_LOOPBACK_Pos)

#define GPIO9_LOOPBACK_DISABLE  ((0x0U) << GPIO9_LOOPBACK_Pos)
#define GPIO9_LOOPBACK_ENABLE   ((0x1U) << GPIO9_LOOPBACK_Pos)

#define GPIO9_LOOPBACK_(x)  (((x) << GPIO9_LOOPBACK_Pos) & GPIO9_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO9           DEGLITCH
  *  @access     PINMUX->GPIO9
  *  @brief      Input deglitch
  */
#define GPIO9_DEGLITCH_Pos  (5)
#define GPIO9_DEGLITCH_Msk  (0x1U << GPIO9_DEGLITCH_Pos)

#define GPIO9_DEGLITCH_DISABLE  ((0x0U) << GPIO9_DEGLITCH_Pos)
#define GPIO9_DEGLITCH_ENABLE   ((0x1U) << GPIO9_DEGLITCH_Pos)

#define GPIO9_DEGLITCH_(x)  (((x) << GPIO9_DEGLITCH_Pos) & GPIO9_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO9           STRENGTH
  *  @access     PINMUX->GPIO9
  *  @brief      Output driving strength
  */
#define GPIO9_STRENGTH_Pos  (6)
#define GPIO9_STRENGTH_Msk  (0x1U << GPIO9_STRENGTH_Pos)

#define GPIO9_STRENGTH_1_MA   ((0x0U) << GPIO9_STRENGTH_Pos)
#define GPIO9_STRENGTH_20_MA  ((0x1U) << GPIO9_STRENGTH_Pos)

#define GPIO9_STRENGTH_(x)  (((x) << GPIO9_STRENGTH_Pos) & GPIO9_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO9           ICHEN
  *  @access     PINMUX->GPIO9
  *  @brief      Input channel enable
  */
#define GPIO9_ICHEN_Pos  (8)
#define GPIO9_ICHEN_Msk  (0x7U << GPIO9_ICHEN_Pos)

#define GPIO9_ICHEN_(x)  (((x) << GPIO9_ICHEN_Pos) & GPIO9_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO9           PD
  *  @access     PINMUX->GPIO9
  *  @brief      Pull down enable
  */
#define GPIO9_PD_Pos  (16)
#define GPIO9_PD_Msk  (0x7U << GPIO9_PD_Pos)

#define GPIO9_PD_(x)  (((x) << GPIO9_PD_Pos) & GPIO9_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO9           PU
  *  @access     PINMUX->GPIO9
  *  @brief      Pull up enable
  */
#define GPIO9_PU_Pos  (24)
#define GPIO9_PU_Msk  (0x7U << GPIO9_PU_Pos)

#define GPIO9_PU_(x)  (((x) << GPIO9_PU_Pos) & GPIO9_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO10          OCHSEL
  *  @access     PINMUX->GPIO10
  *  @brief      Output channel select
  */
#define GPIO10_OCHSEL_Pos  (0)
#define GPIO10_OCHSEL_Msk  (0x3U << GPIO10_OCHSEL_Pos)

#define GPIO10_OCHSEL_GPIO10     ((0x00U) << GPIO10_OCHSEL_Pos)
#define GPIO10_OCHSEL_UART0_TXD  ((0x01U) << GPIO10_OCHSEL_Pos)
#define GPIO10_OCHSEL_PWM0A      ((0x02U) << GPIO10_OCHSEL_Pos)
#define GPIO10_OCHSEL_I2C_SCL    ((0x03U) << GPIO10_OCHSEL_Pos)

#define GPIO10_OCHSEL_(x)  (((x) << GPIO10_OCHSEL_Pos) & GPIO10_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO10          LOOPBACK
  *  @access     PINMUX->GPIO10
  *  @brief      Data loopback for UART0
  */
#define GPIO10_LOOPBACK_Pos  (2)
#define GPIO10_LOOPBACK_Msk  (0x1U << GPIO10_LOOPBACK_Pos)

#define GPIO10_LOOPBACK_DISABLE  ((0x0U) << GPIO10_LOOPBACK_Pos)
#define GPIO10_LOOPBACK_ENABLE   ((0x1U) << GPIO10_LOOPBACK_Pos)

#define GPIO10_LOOPBACK_(x)  (((x) << GPIO10_LOOPBACK_Pos) & GPIO10_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO10          DEGLITCH
  *  @access     PINMUX->GPIO10
  *  @brief      Input deglitch
  */
#define GPIO10_DEGLITCH_Pos  (5)
#define GPIO10_DEGLITCH_Msk  (0x1U << GPIO10_DEGLITCH_Pos)

#define GPIO10_DEGLITCH_DISABLE  ((0x0U) << GPIO10_DEGLITCH_Pos)
#define GPIO10_DEGLITCH_ENABLE   ((0x1U) << GPIO10_DEGLITCH_Pos)

#define GPIO10_DEGLITCH_(x)  (((x) << GPIO10_DEGLITCH_Pos) & GPIO10_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO10          STRENGTH
  *  @access     PINMUX->GPIO10
  *  @brief      Output driving strength
  */
#define GPIO10_STRENGTH_Pos  (6)
#define GPIO10_STRENGTH_Msk  (0x1U << GPIO10_STRENGTH_Pos)

#define GPIO10_STRENGTH_1_MA   ((0x0U) << GPIO10_STRENGTH_Pos)
#define GPIO10_STRENGTH_20_MA  ((0x1U) << GPIO10_STRENGTH_Pos)

#define GPIO10_STRENGTH_(x)  (((x) << GPIO10_STRENGTH_Pos) & GPIO10_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO10          ICHEN
  *  @access     PINMUX->GPIO10
  *  @brief      Input channel enable
  */
#define GPIO10_ICHEN_Pos  (8)
#define GPIO10_ICHEN_Msk  (0xFU << GPIO10_ICHEN_Pos)

#define GPIO10_ICHEN_(x)  (((x) << GPIO10_ICHEN_Pos) & GPIO10_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO10          PD
  *  @access     PINMUX->GPIO10
  *  @brief      Pull down enable
  */
#define GPIO10_PD_Pos  (16)
#define GPIO10_PD_Msk  (0xFU << GPIO10_PD_Pos)

#define GPIO10_PD_(x)  (((x) << GPIO10_PD_Pos) & GPIO10_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO10          PU
  *  @access     PINMUX->GPIO10
  *  @brief      Pull up enable
  */
#define GPIO10_PU_Pos  (24)
#define GPIO10_PU_Msk  (0xFU << GPIO10_PU_Pos)

#define GPIO10_PU_(x)  (((x) << GPIO10_PU_Pos) & GPIO10_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO11          OCHSEL
  *  @access     PINMUX->GPIO11
  *  @brief      Output channel select
  */
#define GPIO11_OCHSEL_Pos  (0)
#define GPIO11_OCHSEL_Msk  (0x3U << GPIO11_OCHSEL_Pos)

#define GPIO11_OCHSEL_GPIO11     ((0x00U) << GPIO11_OCHSEL_Pos)
#define GPIO11_OCHSEL_UART0_RXD  ((0x01U) << GPIO11_OCHSEL_Pos)
#define GPIO11_OCHSEL_PWM0B      ((0x02U) << GPIO11_OCHSEL_Pos)
#define GPIO11_OCHSEL_I2C_SDA    ((0x03U) << GPIO11_OCHSEL_Pos)

#define GPIO11_OCHSEL_(x)  (((x) << GPIO11_OCHSEL_Pos) & GPIO11_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO11          LOOPBACK
  *  @access     PINMUX->GPIO11
  *  @brief      Data loopback for UART0
  */
#define GPIO11_LOOPBACK_Pos  (2)
#define GPIO11_LOOPBACK_Msk  (0x1U << GPIO11_LOOPBACK_Pos)

#define GPIO11_LOOPBACK_DISABLE  ((0x0U) << GPIO11_LOOPBACK_Pos)
#define GPIO11_LOOPBACK_ENABLE   ((0x1U) << GPIO11_LOOPBACK_Pos)

#define GPIO11_LOOPBACK_(x)  (((x) << GPIO11_LOOPBACK_Pos) & GPIO11_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO11          DEGLITCH
  *  @access     PINMUX->GPIO11
  *  @brief      Input deglitch
  */
#define GPIO11_DEGLITCH_Pos  (5)
#define GPIO11_DEGLITCH_Msk  (0x1U << GPIO11_DEGLITCH_Pos)

#define GPIO11_DEGLITCH_DISABLE  ((0x0U) << GPIO11_DEGLITCH_Pos)
#define GPIO11_DEGLITCH_ENABLE   ((0x1U) << GPIO11_DEGLITCH_Pos)

#define GPIO11_DEGLITCH_(x)  (((x) << GPIO11_DEGLITCH_Pos) & GPIO11_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO11          STRENGTH
  *  @access     PINMUX->GPIO11
  *  @brief      Output driving strength
  */
#define GPIO11_STRENGTH_Pos  (6)
#define GPIO11_STRENGTH_Msk  (0x1U << GPIO11_STRENGTH_Pos)

#define GPIO11_STRENGTH_1_MA   ((0x0U) << GPIO11_STRENGTH_Pos)
#define GPIO11_STRENGTH_20_MA  ((0x1U) << GPIO11_STRENGTH_Pos)

#define GPIO11_STRENGTH_(x)  (((x) << GPIO11_STRENGTH_Pos) & GPIO11_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO11          ICHEN
  *  @access     PINMUX->GPIO11
  *  @brief      Input channel enable
  */
#define GPIO11_ICHEN_Pos  (8)
#define GPIO11_ICHEN_Msk  (0xFU << GPIO11_ICHEN_Pos)

#define GPIO11_ICHEN_(x)  (((x) << GPIO11_ICHEN_Pos) & GPIO11_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO11          PD
  *  @access     PINMUX->GPIO11
  *  @brief      Pull down enable
  */
#define GPIO11_PD_Pos  (16)
#define GPIO11_PD_Msk  (0xFU << GPIO11_PD_Pos)

#define GPIO11_PD_(x)  (((x) << GPIO11_PD_Pos) & GPIO11_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO11          PU
  *  @access     PINMUX->GPIO11
  *  @brief      Pull up enable
  */
#define GPIO11_PU_Pos  (24)
#define GPIO11_PU_Msk  (0xFU << GPIO11_PU_Pos)

#define GPIO11_PU_(x)  (((x) << GPIO11_PU_Pos) & GPIO11_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO12          OCHSEL
  *  @access     PINMUX->GPIO12
  *  @brief      Output channel select
  */
#define GPIO12_OCHSEL_Pos  (0)
#define GPIO12_OCHSEL_Msk  (0x3U << GPIO12_OCHSEL_Pos)

#define GPIO12_OCHSEL_GPIO12     ((0x00U) << GPIO12_OCHSEL_Pos)
#define GPIO12_OCHSEL_SPI1_SCLK  ((0x01U) << GPIO12_OCHSEL_Pos)
#define GPIO12_OCHSEL_PWM1A      ((0x02U) << GPIO12_OCHSEL_Pos)
#define GPIO12_OCHSEL_PWM3A      ((0x03U) << GPIO12_OCHSEL_Pos)

#define GPIO12_OCHSEL_(x)  (((x) << GPIO12_OCHSEL_Pos) & GPIO12_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO12          DEGLITCH
  *  @access     PINMUX->GPIO12
  *  @brief      Input deglitch
  */
#define GPIO12_DEGLITCH_Pos  (5)
#define GPIO12_DEGLITCH_Msk  (0x1U << GPIO12_DEGLITCH_Pos)

#define GPIO12_DEGLITCH_DISABLE  ((0x0U) << GPIO12_DEGLITCH_Pos)
#define GPIO12_DEGLITCH_ENABLE   ((0x1U) << GPIO12_DEGLITCH_Pos)

#define GPIO12_DEGLITCH_(x)  (((x) << GPIO12_DEGLITCH_Pos) & GPIO12_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO12          STRENGTH
  *  @access     PINMUX->GPIO12
  *  @brief      Output driving strength
  */
#define GPIO12_STRENGTH_Pos  (6)
#define GPIO12_STRENGTH_Msk  (0x1U << GPIO12_STRENGTH_Pos)

#define GPIO12_STRENGTH_1_MA   ((0x0U) << GPIO12_STRENGTH_Pos)
#define GPIO12_STRENGTH_20_MA  ((0x1U) << GPIO12_STRENGTH_Pos)

#define GPIO12_STRENGTH_(x)  (((x) << GPIO12_STRENGTH_Pos) & GPIO12_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO12          ICHEN
  *  @access     PINMUX->GPIO12
  *  @brief      Input channel enable
  */
#define GPIO12_ICHEN_Pos  (8)
#define GPIO12_ICHEN_Msk  (0x3U << GPIO12_ICHEN_Pos)

#define GPIO12_ICHEN_(x)  (((x) << GPIO12_ICHEN_Pos) & GPIO12_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO12          PD
  *  @access     PINMUX->GPIO12
  *  @brief      Pull down enable
  */
#define GPIO12_PD_Pos  (16)
#define GPIO12_PD_Msk  (0xFU << GPIO12_PD_Pos)

#define GPIO12_PD_(x)  (((x) << GPIO12_PD_Pos) & GPIO12_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO12          PU
  *  @access     PINMUX->GPIO12
  *  @brief      Pull up enable
  */
#define GPIO12_PU_Pos  (24)
#define GPIO12_PU_Msk  (0xFU << GPIO12_PU_Pos)

#define GPIO12_PU_(x)  (((x) << GPIO12_PU_Pos) & GPIO12_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO13          OCHSEL
  *  @access     PINMUX->GPIO13
  *  @brief      Output channel select
  */
#define GPIO13_OCHSEL_Pos  (0)
#define GPIO13_OCHSEL_Msk  (0x3U << GPIO13_OCHSEL_Pos)

#define GPIO13_OCHSEL_GPIO13     ((0x00U) << GPIO13_OCHSEL_Pos)
#define GPIO13_OCHSEL_SPI1_SFRM  ((0x01U) << GPIO13_OCHSEL_Pos)
#define GPIO13_OCHSEL_PWM1B      ((0x02U) << GPIO13_OCHSEL_Pos)
#define GPIO13_OCHSEL_PWM3B      ((0x03U) << GPIO13_OCHSEL_Pos)

#define GPIO13_OCHSEL_(x)  (((x) << GPIO13_OCHSEL_Pos) & GPIO13_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO13          DEGLITCH
  *  @access     PINMUX->GPIO13
  *  @brief      Input deglitch
  */
#define GPIO13_DEGLITCH_Pos  (5)
#define GPIO13_DEGLITCH_Msk  (0x1U << GPIO13_DEGLITCH_Pos)

#define GPIO13_DEGLITCH_DISABLE  ((0x0U) << GPIO13_DEGLITCH_Pos)
#define GPIO13_DEGLITCH_ENABLE   ((0x1U) << GPIO13_DEGLITCH_Pos)

#define GPIO13_DEGLITCH_(x)  (((x) << GPIO13_DEGLITCH_Pos) & GPIO13_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO13          STRENGTH
  *  @access     PINMUX->GPIO13
  *  @brief      Output driving strength
  */
#define GPIO13_STRENGTH_Pos  (6)
#define GPIO13_STRENGTH_Msk  (0x1U << GPIO13_STRENGTH_Pos)

#define GPIO13_STRENGTH_1_MA   ((0x0U) << GPIO13_STRENGTH_Pos)
#define GPIO13_STRENGTH_20_MA  ((0x1U) << GPIO13_STRENGTH_Pos)

#define GPIO13_STRENGTH_(x)  (((x) << GPIO13_STRENGTH_Pos) & GPIO13_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO13          ICHEN
  *  @access     PINMUX->GPIO13
  *  @brief      Input channel enable
  */
#define GPIO13_ICHEN_Pos  (8)
#define GPIO13_ICHEN_Msk  (0x3U << GPIO13_ICHEN_Pos)

#define GPIO13_ICHEN_(x)  (((x) << GPIO13_ICHEN_Pos) & GPIO13_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO13          PD
  *  @access     PINMUX->GPIO13
  *  @brief      Pull down enable
  */
#define GPIO13_PD_Pos  (16)
#define GPIO13_PD_Msk  (0xFU << GPIO13_PD_Pos)

#define GPIO13_PD_(x)  (((x) << GPIO13_PD_Pos) & GPIO13_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO13          PU
  *  @access     PINMUX->GPIO13
  *  @brief      Pull up enable
  */
#define GPIO13_PU_Pos  (24)
#define GPIO13_PU_Msk  (0xFU << GPIO13_PU_Pos)

#define GPIO13_PU_(x)  (((x) << GPIO13_PU_Pos) & GPIO13_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO14          OCHSEL
  *  @access     PINMUX->GPIO14
  *  @brief      Output channel select
  */
#define GPIO14_OCHSEL_Pos  (0)
#define GPIO14_OCHSEL_Msk  (0x3U << GPIO14_OCHSEL_Pos)

#define GPIO14_OCHSEL_GPIO14     ((0x00U) << GPIO14_OCHSEL_Pos)
#define GPIO14_OCHSEL_SPI1_MOSI  ((0x01U) << GPIO14_OCHSEL_Pos)
#define GPIO14_OCHSEL_PWM2A      ((0x02U) << GPIO14_OCHSEL_Pos)
#define GPIO14_OCHSEL_I2C_SCL    ((0x03U) << GPIO14_OCHSEL_Pos)

#define GPIO14_OCHSEL_(x)  (((x) << GPIO14_OCHSEL_Pos) & GPIO14_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO14          LOOPBACK
  *  @access     PINMUX->GPIO14
  *  @brief      Data loopback for SPI1
  */
#define GPIO14_LOOPBACK_Pos  (2)
#define GPIO14_LOOPBACK_Msk  (0x1U << GPIO14_LOOPBACK_Pos)

#define GPIO14_LOOPBACK_DISABLE  ((0x0U) << GPIO14_LOOPBACK_Pos)
#define GPIO14_LOOPBACK_ENABLE   ((0x1U) << GPIO14_LOOPBACK_Pos)

#define GPIO14_LOOPBACK_(x)  (((x) << GPIO14_LOOPBACK_Pos) & GPIO14_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO14          DEGLITCH
  *  @access     PINMUX->GPIO14
  *  @brief      Input deglitch
  */
#define GPIO14_DEGLITCH_Pos  (5)
#define GPIO14_DEGLITCH_Msk  (0x1U << GPIO14_DEGLITCH_Pos)

#define GPIO14_DEGLITCH_DISABLE  ((0x0U) << GPIO14_DEGLITCH_Pos)
#define GPIO14_DEGLITCH_ENABLE   ((0x1U) << GPIO14_DEGLITCH_Pos)

#define GPIO14_DEGLITCH_(x)  (((x) << GPIO14_DEGLITCH_Pos) & GPIO14_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO14          STRENGTH
  *  @access     PINMUX->GPIO14
  *  @brief      Output driving strength
  */
#define GPIO14_STRENGTH_Pos  (6)
#define GPIO14_STRENGTH_Msk  (0x1U << GPIO14_STRENGTH_Pos)

#define GPIO14_STRENGTH_1_MA   ((0x0U) << GPIO14_STRENGTH_Pos)
#define GPIO14_STRENGTH_20_MA  ((0x1U) << GPIO14_STRENGTH_Pos)

#define GPIO14_STRENGTH_(x)  (((x) << GPIO14_STRENGTH_Pos) & GPIO14_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO14          ICHEN
  *  @access     PINMUX->GPIO14
  *  @brief      Input channel enable
  */
#define GPIO14_ICHEN_Pos  (8)
#define GPIO14_ICHEN_Msk  (0xFU << GPIO14_ICHEN_Pos)

#define GPIO14_ICHEN_(x)  (((x) << GPIO14_ICHEN_Pos) & GPIO14_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO14          PD
  *  @access     PINMUX->GPIO14
  *  @brief      Pull down enable
  */
#define GPIO14_PD_Pos  (16)
#define GPIO14_PD_Msk  (0xFU << GPIO14_PD_Pos)

#define GPIO14_PD_(x)  (((x) << GPIO14_PD_Pos) & GPIO14_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO14          PU
  *  @access     PINMUX->GPIO14
  *  @brief      Pull up enable
  */
#define GPIO14_PU_Pos  (24)
#define GPIO14_PU_Msk  (0xFU << GPIO14_PU_Pos)

#define GPIO14_PU_(x)  (((x) << GPIO14_PU_Pos) & GPIO14_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO15          OCHSEL
  *  @access     PINMUX->GPIO15
  *  @brief      Output channel select
  */
#define GPIO15_OCHSEL_Pos  (0)
#define GPIO15_OCHSEL_Msk  (0x3U << GPIO15_OCHSEL_Pos)

#define GPIO15_OCHSEL_GPIO15     ((0x00U) << GPIO15_OCHSEL_Pos)
#define GPIO15_OCHSEL_SPI1_MISO  ((0x01U) << GPIO15_OCHSEL_Pos)
#define GPIO15_OCHSEL_PWM2B      ((0x02U) << GPIO15_OCHSEL_Pos)
#define GPIO15_OCHSEL_I2C_SDA    ((0x03U) << GPIO15_OCHSEL_Pos)

#define GPIO15_OCHSEL_(x)  (((x) << GPIO15_OCHSEL_Pos) & GPIO15_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO15          LOOPBACK
  *  @access     PINMUX->GPIO15
  *  @brief      Data loopback for SPI1
  */
#define GPIO15_LOOPBACK_Pos  (2)
#define GPIO15_LOOPBACK_Msk  (0x1U << GPIO15_LOOPBACK_Pos)

#define GPIO15_LOOPBACK_DISABLE  ((0x0U) << GPIO15_LOOPBACK_Pos)
#define GPIO15_LOOPBACK_ENABLE   ((0x1U) << GPIO15_LOOPBACK_Pos)

#define GPIO15_LOOPBACK_(x)  (((x) << GPIO15_LOOPBACK_Pos) & GPIO15_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO15          DEGLITCH
  *  @access     PINMUX->GPIO15
  *  @brief      Input deglitch
  */
#define GPIO15_DEGLITCH_Pos  (5)
#define GPIO15_DEGLITCH_Msk  (0x1U << GPIO15_DEGLITCH_Pos)

#define GPIO15_DEGLITCH_DISABLE  ((0x0U) << GPIO15_DEGLITCH_Pos)
#define GPIO15_DEGLITCH_ENABLE   ((0x1U) << GPIO15_DEGLITCH_Pos)

#define GPIO15_DEGLITCH_(x)  (((x) << GPIO15_DEGLITCH_Pos) & GPIO15_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO15          STRENGTH
  *  @access     PINMUX->GPIO15
  *  @brief      Output driving strength
  */
#define GPIO15_STRENGTH_Pos  (6)
#define GPIO15_STRENGTH_Msk  (0x1U << GPIO15_STRENGTH_Pos)

#define GPIO15_STRENGTH_1_MA   ((0x0U) << GPIO15_STRENGTH_Pos)
#define GPIO15_STRENGTH_20_MA  ((0x1U) << GPIO15_STRENGTH_Pos)

#define GPIO15_STRENGTH_(x)  (((x) << GPIO15_STRENGTH_Pos) & GPIO15_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO15          ICHEN
  *  @access     PINMUX->GPIO15
  *  @brief      Input channel enable
  */
#define GPIO15_ICHEN_Pos  (8)
#define GPIO15_ICHEN_Msk  (0xFU << GPIO15_ICHEN_Pos)

#define GPIO15_ICHEN_(x)  (((x) << GPIO15_ICHEN_Pos) & GPIO15_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO15          PD
  *  @access     PINMUX->GPIO15
  *  @brief      Pull down enable
  */
#define GPIO15_PD_Pos  (16)
#define GPIO15_PD_Msk  (0xFU << GPIO15_PD_Pos)

#define GPIO15_PD_(x)  (((x) << GPIO15_PD_Pos) & GPIO15_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO15          PU
  *  @access     PINMUX->GPIO15
  *  @brief      Pull up enable
  */
#define GPIO15_PU_Pos  (24)
#define GPIO15_PU_Msk  (0xFU << GPIO15_PU_Pos)

#define GPIO15_PU_(x)  (((x) << GPIO15_PU_Pos) & GPIO15_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO16          OCHSEL
  *  @access     PINMUX->GPIO16
  *  @brief      Output channel select
  */
#define GPIO16_OCHSEL_Pos  (0)
#define GPIO16_OCHSEL_Msk  (0x3U << GPIO16_OCHSEL_Pos)

#define GPIO16_OCHSEL_GPIO16     ((0x00U) << GPIO16_OCHSEL_Pos)
#define GPIO16_OCHSEL_UART1_TXD  ((0x01U) << GPIO16_OCHSEL_Pos)
#define GPIO16_OCHSEL_CAN_TXD    ((0x02U) << GPIO16_OCHSEL_Pos)
#define GPIO16_OCHSEL_SPI1_SFRM  ((0x03U) << GPIO16_OCHSEL_Pos)

#define GPIO16_OCHSEL_(x)  (((x) << GPIO16_OCHSEL_Pos) & GPIO16_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO16          LOOPBACK
  *  @access     PINMUX->GPIO16
  *  @brief      Data loopback for UART1 and CAN
  */
#define GPIO16_LOOPBACK_Pos  (2)
#define GPIO16_LOOPBACK_Msk  (0x1U << GPIO16_LOOPBACK_Pos)

#define GPIO16_LOOPBACK_DISABLE  ((0x0U) << GPIO16_LOOPBACK_Pos)
#define GPIO16_LOOPBACK_ENABLE   ((0x1U) << GPIO16_LOOPBACK_Pos)

#define GPIO16_LOOPBACK_(x)  (((x) << GPIO16_LOOPBACK_Pos) & GPIO16_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO16          DEGLITCH
  *  @access     PINMUX->GPIO16
  *  @brief      Input deglitch
  */
#define GPIO16_DEGLITCH_Pos  (5)
#define GPIO16_DEGLITCH_Msk  (0x1U << GPIO16_DEGLITCH_Pos)

#define GPIO16_DEGLITCH_DISABLE  ((0x0U) << GPIO16_DEGLITCH_Pos)
#define GPIO16_DEGLITCH_ENABLE   ((0x1U) << GPIO16_DEGLITCH_Pos)

#define GPIO16_DEGLITCH_(x)  (((x) << GPIO16_DEGLITCH_Pos) & GPIO16_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO16          STRENGTH
  *  @access     PINMUX->GPIO16
  *  @brief      Output driving strength
  */
#define GPIO16_STRENGTH_Pos  (6)
#define GPIO16_STRENGTH_Msk  (0x1U << GPIO16_STRENGTH_Pos)

#define GPIO16_STRENGTH_1_MA   ((0x0U) << GPIO16_STRENGTH_Pos)
#define GPIO16_STRENGTH_20_MA  ((0x1U) << GPIO16_STRENGTH_Pos)

#define GPIO16_STRENGTH_(x)  (((x) << GPIO16_STRENGTH_Pos) & GPIO16_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO16          ICHEN
  *  @access     PINMUX->GPIO16
  *  @brief      Input channel enable
  */
#define GPIO16_ICHEN_Pos  (8)
#define GPIO16_ICHEN_Msk  (0xFU << GPIO16_ICHEN_Pos)

#define GPIO16_ICHEN_(x)  (((x) << GPIO16_ICHEN_Pos) & GPIO16_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO16          PD
  *  @access     PINMUX->GPIO16
  *  @brief      Pull down enable
  */
#define GPIO16_PD_Pos  (16)
#define GPIO16_PD_Msk  (0xFU << GPIO16_PD_Pos)

#define GPIO16_PD_(x)  (((x) << GPIO16_PD_Pos) & GPIO16_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO16          PU
  *  @access     PINMUX->GPIO16
  *  @brief      Pull up enable
  */
#define GPIO16_PU_Pos  (24)
#define GPIO16_PU_Msk  (0xFU << GPIO16_PU_Pos)

#define GPIO16_PU_(x)  (((x) << GPIO16_PU_Pos) & GPIO16_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO17          OCHSEL
  *  @access     PINMUX->GPIO17
  *  @brief      Output channel select
  */
#define GPIO17_OCHSEL_Pos  (0)
#define GPIO17_OCHSEL_Msk  (0x3U << GPIO17_OCHSEL_Pos)

#define GPIO17_OCHSEL_GPIO17     ((0x00U) << GPIO17_OCHSEL_Pos)
#define GPIO17_OCHSEL_UART1_RXD  ((0x01U) << GPIO17_OCHSEL_Pos)
#define GPIO17_OCHSEL_CAN_RXD    ((0x02U) << GPIO17_OCHSEL_Pos)
#define GPIO17_OCHSEL_SPI1_SCLK  ((0x03U) << GPIO17_OCHSEL_Pos)

#define GPIO17_OCHSEL_(x)  (((x) << GPIO17_OCHSEL_Pos) & GPIO17_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO17          LOOPBACK
  *  @access     PINMUX->GPIO17
  *  @brief      Data loopback for UART1 and CAN
  */
#define GPIO17_LOOPBACK_Pos  (2)
#define GPIO17_LOOPBACK_Msk  (0x1U << GPIO17_LOOPBACK_Pos)

#define GPIO17_LOOPBACK_DISABLE  ((0x0U) << GPIO17_LOOPBACK_Pos)
#define GPIO17_LOOPBACK_ENABLE   ((0x1U) << GPIO17_LOOPBACK_Pos)

#define GPIO17_LOOPBACK_(x)  (((x) << GPIO17_LOOPBACK_Pos) & GPIO17_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO17          DEGLITCH
  *  @access     PINMUX->GPIO17
  *  @brief      Input deglitch
  */
#define GPIO17_DEGLITCH_Pos  (5)
#define GPIO17_DEGLITCH_Msk  (0x1U << GPIO17_DEGLITCH_Pos)

#define GPIO17_DEGLITCH_DISABLE  ((0x0U) << GPIO17_DEGLITCH_Pos)
#define GPIO17_DEGLITCH_ENABLE   ((0x1U) << GPIO17_DEGLITCH_Pos)

#define GPIO17_DEGLITCH_(x)  (((x) << GPIO17_DEGLITCH_Pos) & GPIO17_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO17          STRENGTH
  *  @access     PINMUX->GPIO17
  *  @brief      Output driving strength
  */
#define GPIO17_STRENGTH_Pos  (6)
#define GPIO17_STRENGTH_Msk  (0x1U << GPIO17_STRENGTH_Pos)

#define GPIO17_STRENGTH_1_MA   ((0x0U) << GPIO17_STRENGTH_Pos)
#define GPIO17_STRENGTH_20_MA  ((0x1U) << GPIO17_STRENGTH_Pos)

#define GPIO17_STRENGTH_(x)  (((x) << GPIO17_STRENGTH_Pos) & GPIO17_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO17          ICHEN
  *  @access     PINMUX->GPIO17
  *  @brief      Input channel enable
  */
#define GPIO17_ICHEN_Pos  (8)
#define GPIO17_ICHEN_Msk  (0xFU << GPIO17_ICHEN_Pos)

#define GPIO17_ICHEN_(x)  (((x) << GPIO17_ICHEN_Pos) & GPIO17_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO17          PD
  *  @access     PINMUX->GPIO17
  *  @brief      Pull down enable
  */
#define GPIO17_PD_Pos  (16)
#define GPIO17_PD_Msk  (0xFU << GPIO17_PD_Pos)

#define GPIO17_PD_(x)  (((x) << GPIO17_PD_Pos) & GPIO17_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO17          PU
  *  @access     PINMUX->GPIO17
  *  @brief      Pull up enable
  */
#define GPIO17_PU_Pos  (24)
#define GPIO17_PU_Msk  (0xFU << GPIO17_PU_Pos)

#define GPIO17_PU_(x)  (((x) << GPIO17_PU_Pos) & GPIO17_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO18          OCHSEL
  *  @access     PINMUX->GPIO18
  *  @brief      Output channel select
  */
#define GPIO18_OCHSEL_Pos  (0)
#define GPIO18_OCHSEL_Msk  (0x3U << GPIO18_OCHSEL_Pos)

#define GPIO18_OCHSEL_GPIO18      ((0x00U) << GPIO18_OCHSEL_Pos)
#define GPIO18_OCHSEL_PWM_SOCO    ((0x01U) << GPIO18_OCHSEL_Pos)
#define GPIO18_OCHSEL_PWM_SYNCO   ((0x02U) << GPIO18_OCHSEL_Pos)
#define GPIO18_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO18_OCHSEL_Pos)

#define GPIO18_OCHSEL_(x)  (((x) << GPIO18_OCHSEL_Pos) & GPIO18_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO18          DEGLITCH
  *  @access     PINMUX->GPIO18
  *  @brief      Input deglitch
  */
#define GPIO18_DEGLITCH_Pos  (5)
#define GPIO18_DEGLITCH_Msk  (0x1U << GPIO18_DEGLITCH_Pos)

#define GPIO18_DEGLITCH_DISABLE  ((0x0U) << GPIO18_DEGLITCH_Pos)
#define GPIO18_DEGLITCH_ENABLE   ((0x1U) << GPIO18_DEGLITCH_Pos)

#define GPIO18_DEGLITCH_(x)  (((x) << GPIO18_DEGLITCH_Pos) & GPIO18_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO18          STRENGTH
  *  @access     PINMUX->GPIO18
  *  @brief      Output driving strength
  */
#define GPIO18_STRENGTH_Pos  (6)
#define GPIO18_STRENGTH_Msk  (0x1U << GPIO18_STRENGTH_Pos)

#define GPIO18_STRENGTH_1_MA   ((0x0U) << GPIO18_STRENGTH_Pos)
#define GPIO18_STRENGTH_20_MA  ((0x1U) << GPIO18_STRENGTH_Pos)

#define GPIO18_STRENGTH_(x)  (((x) << GPIO18_STRENGTH_Pos) & GPIO18_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO18          ICHEN
  *  @access     PINMUX->GPIO18
  *  @brief      Input channel enable
  */
#define GPIO18_ICHEN_Pos  (8)
#define GPIO18_ICHEN_Msk  (0x1U << GPIO18_ICHEN_Pos)

#define GPIO18_ICHEN_(x)  (((x) << GPIO18_ICHEN_Pos) & GPIO18_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO18          PD
  *  @access     PINMUX->GPIO18
  *  @brief      Pull down enable
  */
#define GPIO18_PD_Pos  (16)
#define GPIO18_PD_Msk  (0x1U << GPIO18_PD_Pos)

#define GPIO18_PD_(x)  (((x) << GPIO18_PD_Pos) & GPIO18_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO18          PU
  *  @access     PINMUX->GPIO18
  *  @brief      Pull up enable
  */
#define GPIO18_PU_Pos  (24)
#define GPIO18_PU_Msk  (0x1U << GPIO18_PU_Pos)

#define GPIO18_PU_(x)  (((x) << GPIO18_PU_Pos) & GPIO18_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO19          OCHSEL
  *  @access     PINMUX->GPIO19
  *  @brief      Output channel select
  */
#define GPIO19_OCHSEL_Pos  (0)
#define GPIO19_OCHSEL_Msk  (0x3U << GPIO19_OCHSEL_Pos)

#define GPIO19_OCHSEL_GPIO19      ((0x00U) << GPIO19_OCHSEL_Pos)
#define GPIO19_OCHSEL_PWM2B       ((0x01U) << GPIO19_OCHSEL_Pos)
#define GPIO19_OCHSEL_PWM0A       ((0x02U) << GPIO19_OCHSEL_Pos)
#define GPIO19_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO19_OCHSEL_Pos)

#define GPIO19_OCHSEL_(x)  (((x) << GPIO19_OCHSEL_Pos) & GPIO19_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO19          DEGLITCH
  *  @access     PINMUX->GPIO19
  *  @brief      Input deglitch
  */
#define GPIO19_DEGLITCH_Pos  (5)
#define GPIO19_DEGLITCH_Msk  (0x1U << GPIO19_DEGLITCH_Pos)

#define GPIO19_DEGLITCH_DISABLE  ((0x0U) << GPIO19_DEGLITCH_Pos)
#define GPIO19_DEGLITCH_ENABLE   ((0x1U) << GPIO19_DEGLITCH_Pos)

#define GPIO19_DEGLITCH_(x)  (((x) << GPIO19_DEGLITCH_Pos) & GPIO19_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO19          STRENGTH
  *  @access     PINMUX->GPIO19
  *  @brief      Output driving strength
  */
#define GPIO19_STRENGTH_Pos  (6)
#define GPIO19_STRENGTH_Msk  (0x1U << GPIO19_STRENGTH_Pos)

#define GPIO19_STRENGTH_1_MA   ((0x0U) << GPIO19_STRENGTH_Pos)
#define GPIO19_STRENGTH_20_MA  ((0x1U) << GPIO19_STRENGTH_Pos)

#define GPIO19_STRENGTH_(x)  (((x) << GPIO19_STRENGTH_Pos) & GPIO19_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO19          ICHEN
  *  @access     PINMUX->GPIO19
  *  @brief      Input channel enable
  */
#define GPIO19_ICHEN_Pos  (8)
#define GPIO19_ICHEN_Msk  (0x1U << GPIO19_ICHEN_Pos)

#define GPIO19_ICHEN_(x)  (((x) << GPIO19_ICHEN_Pos) & GPIO19_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO19          PD
  *  @access     PINMUX->GPIO19
  *  @brief      Pull down enable
  */
#define GPIO19_PD_Pos  (16)
#define GPIO19_PD_Msk  (0x7U << GPIO19_PD_Pos)

#define GPIO19_PD_(x)  (((x) << GPIO19_PD_Pos) & GPIO19_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO19          PU
  *  @access     PINMUX->GPIO19
  *  @brief      Pull up enable
  */
#define GPIO19_PU_Pos  (24)
#define GPIO19_PU_Msk  (0x7U << GPIO19_PU_Pos)

#define GPIO19_PU_(x)  (((x) << GPIO19_PU_Pos) & GPIO19_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO20          OCHSEL
  *  @access     PINMUX->GPIO20
  *  @brief      Output channel select
  */
#define GPIO20_OCHSEL_Pos  (0)
#define GPIO20_OCHSEL_Msk  (0x3U << GPIO20_OCHSEL_Pos)

#define GPIO20_OCHSEL_GPIO20      ((0x00U) << GPIO20_OCHSEL_Pos)
#define GPIO20_OCHSEL_PWM2A       ((0x01U) << GPIO20_OCHSEL_Pos)
#define GPIO20_OCHSEL_PWM1A       ((0x02U) << GPIO20_OCHSEL_Pos)
#define GPIO20_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO20_OCHSEL_Pos)

#define GPIO20_OCHSEL_(x)  (((x) << GPIO20_OCHSEL_Pos) & GPIO20_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO20          DEGLITCH
  *  @access     PINMUX->GPIO20
  *  @brief      Input deglitch
  */
#define GPIO20_DEGLITCH_Pos  (5)
#define GPIO20_DEGLITCH_Msk  (0x1U << GPIO20_DEGLITCH_Pos)

#define GPIO20_DEGLITCH_DISABLE  ((0x0U) << GPIO20_DEGLITCH_Pos)
#define GPIO20_DEGLITCH_ENABLE   ((0x1U) << GPIO20_DEGLITCH_Pos)

#define GPIO20_DEGLITCH_(x)  (((x) << GPIO20_DEGLITCH_Pos) & GPIO20_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO20          STRENGTH
  *  @access     PINMUX->GPIO20
  *  @brief      Output driving strength
  */
#define GPIO20_STRENGTH_Pos  (6)
#define GPIO20_STRENGTH_Msk  (0x1U << GPIO20_STRENGTH_Pos)

#define GPIO20_STRENGTH_1_MA   ((0x0U) << GPIO20_STRENGTH_Pos)
#define GPIO20_STRENGTH_20_MA  ((0x1U) << GPIO20_STRENGTH_Pos)

#define GPIO20_STRENGTH_(x)  (((x) << GPIO20_STRENGTH_Pos) & GPIO20_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO20          ICHEN
  *  @access     PINMUX->GPIO20
  *  @brief      Input channel enable
  */
#define GPIO20_ICHEN_Pos  (8)
#define GPIO20_ICHEN_Msk  (0x1U << GPIO20_ICHEN_Pos)

#define GPIO20_ICHEN_(x)  (((x) << GPIO20_ICHEN_Pos) & GPIO20_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO20          PD
  *  @access     PINMUX->GPIO20
  *  @brief      Pull down enable
  */
#define GPIO20_PD_Pos  (16)
#define GPIO20_PD_Msk  (0x7U << GPIO20_PD_Pos)

#define GPIO20_PD_(x)  (((x) << GPIO20_PD_Pos) & GPIO20_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO20          PU
  *  @access     PINMUX->GPIO20
  *  @brief      Pull up enable
  */
#define GPIO20_PU_Pos  (24)
#define GPIO20_PU_Msk  (0x7U << GPIO20_PU_Pos)

#define GPIO20_PU_(x)  (((x) << GPIO20_PU_Pos) & GPIO20_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO21          OCHSEL
  *  @access     PINMUX->GPIO21
  *  @brief      Output channel select
  */
#define GPIO21_OCHSEL_Pos  (0)
#define GPIO21_OCHSEL_Msk  (0x3U << GPIO21_OCHSEL_Pos)

#define GPIO21_OCHSEL_GPIO21      ((0x00U) << GPIO21_OCHSEL_Pos)
#define GPIO21_OCHSEL_PWM1B       ((0x01U) << GPIO21_OCHSEL_Pos)
#define GPIO21_OCHSEL_PWM2A       ((0x02U) << GPIO21_OCHSEL_Pos)
#define GPIO21_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO21_OCHSEL_Pos)

#define GPIO21_OCHSEL_(x)  (((x) << GPIO21_OCHSEL_Pos) & GPIO21_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO21          DEGLITCH
  *  @access     PINMUX->GPIO21
  *  @brief      Input deglitch
  */
#define GPIO21_DEGLITCH_Pos  (5)
#define GPIO21_DEGLITCH_Msk  (0x1U << GPIO21_DEGLITCH_Pos)

#define GPIO21_DEGLITCH_DISABLE  ((0x0U) << GPIO21_DEGLITCH_Pos)
#define GPIO21_DEGLITCH_ENABLE   ((0x1U) << GPIO21_DEGLITCH_Pos)

#define GPIO21_DEGLITCH_(x)  (((x) << GPIO21_DEGLITCH_Pos) & GPIO21_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO21          STRENGTH
  *  @access     PINMUX->GPIO21
  *  @brief      Output driving strength
  */
#define GPIO21_STRENGTH_Pos  (6)
#define GPIO21_STRENGTH_Msk  (0x1U << GPIO21_STRENGTH_Pos)

#define GPIO21_STRENGTH_1_MA   ((0x0U) << GPIO21_STRENGTH_Pos)
#define GPIO21_STRENGTH_20_MA  ((0x1U) << GPIO21_STRENGTH_Pos)

#define GPIO21_STRENGTH_(x)  (((x) << GPIO21_STRENGTH_Pos) & GPIO21_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO21          ICHEN
  *  @access     PINMUX->GPIO21
  *  @brief      Input channel enable
  */
#define GPIO21_ICHEN_Pos  (8)
#define GPIO21_ICHEN_Msk  (0x1U << GPIO21_ICHEN_Pos)

#define GPIO21_ICHEN_(x)  (((x) << GPIO21_ICHEN_Pos) & GPIO21_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO21          PD
  *  @access     PINMUX->GPIO21
  *  @brief      Pull down enable
  */
#define GPIO21_PD_Pos  (16)
#define GPIO21_PD_Msk  (0x7U << GPIO21_PD_Pos)

#define GPIO21_PD_(x)  (((x) << GPIO21_PD_Pos) & GPIO21_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO21          PU
  *  @access     PINMUX->GPIO21
  *  @brief      Pull up enable
  */
#define GPIO21_PU_Pos  (24)
#define GPIO21_PU_Msk  (0x7U << GPIO21_PU_Pos)

#define GPIO21_PU_(x)  (((x) << GPIO21_PU_Pos) & GPIO21_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO22          OCHSEL
  *  @access     PINMUX->GPIO22
  *  @brief      Output channel select
  */
#define GPIO22_OCHSEL_Pos  (0)
#define GPIO22_OCHSEL_Msk  (0x3U << GPIO22_OCHSEL_Pos)

#define GPIO22_OCHSEL_GPIO22      ((0x00U) << GPIO22_OCHSEL_Pos)
#define GPIO22_OCHSEL_PWM1A       ((0x01U) << GPIO22_OCHSEL_Pos)
#define GPIO22_OCHSEL_PWM0B       ((0x02U) << GPIO22_OCHSEL_Pos)
#define GPIO22_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO22_OCHSEL_Pos)

#define GPIO22_OCHSEL_(x)  (((x) << GPIO22_OCHSEL_Pos) & GPIO22_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO22          DEGLITCH
  *  @access     PINMUX->GPIO22
  *  @brief      Input deglitch
  */
#define GPIO22_DEGLITCH_Pos  (5)
#define GPIO22_DEGLITCH_Msk  (0x1U << GPIO22_DEGLITCH_Pos)

#define GPIO22_DEGLITCH_DISABLE  ((0x0U) << GPIO22_DEGLITCH_Pos)
#define GPIO22_DEGLITCH_ENABLE   ((0x1U) << GPIO22_DEGLITCH_Pos)

#define GPIO22_DEGLITCH_(x)  (((x) << GPIO22_DEGLITCH_Pos) & GPIO22_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO22          STRENGTH
  *  @access     PINMUX->GPIO22
  *  @brief      Output driving strength
  */
#define GPIO22_STRENGTH_Pos  (6)
#define GPIO22_STRENGTH_Msk  (0x1U << GPIO22_STRENGTH_Pos)

#define GPIO22_STRENGTH_1_MA   ((0x0U) << GPIO22_STRENGTH_Pos)
#define GPIO22_STRENGTH_20_MA  ((0x1U) << GPIO22_STRENGTH_Pos)

#define GPIO22_STRENGTH_(x)  (((x) << GPIO22_STRENGTH_Pos) & GPIO22_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO22          ICHEN
  *  @access     PINMUX->GPIO22
  *  @brief      Input channel enable
  */
#define GPIO22_ICHEN_Pos  (8)
#define GPIO22_ICHEN_Msk  (0x1U << GPIO22_ICHEN_Pos)

#define GPIO22_ICHEN_(x)  (((x) << GPIO22_ICHEN_Pos) & GPIO22_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO22          PD
  *  @access     PINMUX->GPIO22
  *  @brief      Pull down enable
  */
#define GPIO22_PD_Pos  (16)
#define GPIO22_PD_Msk  (0x7U << GPIO22_PD_Pos)

#define GPIO22_PD_(x)  (((x) << GPIO22_PD_Pos) & GPIO22_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO22          PU
  *  @access     PINMUX->GPIO22
  *  @brief      Pull up enable
  */
#define GPIO22_PU_Pos  (24)
#define GPIO22_PU_Msk  (0x7U << GPIO22_PU_Pos)

#define GPIO22_PU_(x)  (((x) << GPIO22_PU_Pos) & GPIO22_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO23          OCHSEL
  *  @access     PINMUX->GPIO23
  *  @brief      Output channel select
  */
#define GPIO23_OCHSEL_Pos  (0)
#define GPIO23_OCHSEL_Msk  (0x3U << GPIO23_OCHSEL_Pos)

#define GPIO23_OCHSEL_GPIO23      ((0x00U) << GPIO23_OCHSEL_Pos)
#define GPIO23_OCHSEL_PWM0B       ((0x01U) << GPIO23_OCHSEL_Pos)
#define GPIO23_OCHSEL_PWM1B       ((0x02U) << GPIO23_OCHSEL_Pos)
#define GPIO23_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO23_OCHSEL_Pos)

#define GPIO23_OCHSEL_(x)  (((x) << GPIO23_OCHSEL_Pos) & GPIO23_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO23          DEGLITCH
  *  @access     PINMUX->GPIO23
  *  @brief      Input deglitch
  */
#define GPIO23_DEGLITCH_Pos  (5)
#define GPIO23_DEGLITCH_Msk  (0x1U << GPIO23_DEGLITCH_Pos)

#define GPIO23_DEGLITCH_DISABLE  ((0x0U) << GPIO23_DEGLITCH_Pos)
#define GPIO23_DEGLITCH_ENABLE   ((0x1U) << GPIO23_DEGLITCH_Pos)

#define GPIO23_DEGLITCH_(x)  (((x) << GPIO23_DEGLITCH_Pos) & GPIO23_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO23          STRENGTH
  *  @access     PINMUX->GPIO23
  *  @brief      Output driving strength
  */
#define GPIO23_STRENGTH_Pos  (6)
#define GPIO23_STRENGTH_Msk  (0x1U << GPIO23_STRENGTH_Pos)

#define GPIO23_STRENGTH_1_MA   ((0x0U) << GPIO23_STRENGTH_Pos)
#define GPIO23_STRENGTH_20_MA  ((0x1U) << GPIO23_STRENGTH_Pos)

#define GPIO23_STRENGTH_(x)  (((x) << GPIO23_STRENGTH_Pos) & GPIO23_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO23          ICHEN
  *  @access     PINMUX->GPIO23
  *  @brief      Input channel enable
  */
#define GPIO23_ICHEN_Pos  (8)
#define GPIO23_ICHEN_Msk  (0x1U << GPIO23_ICHEN_Pos)

#define GPIO23_ICHEN_(x)  (((x) << GPIO23_ICHEN_Pos) & GPIO23_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO23          PD
  *  @access     PINMUX->GPIO23
  *  @brief      Pull down enable
  */
#define GPIO23_PD_Pos  (16)
#define GPIO23_PD_Msk  (0x7U << GPIO23_PD_Pos)

#define GPIO23_PD_(x)  (((x) << GPIO23_PD_Pos) & GPIO23_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO23          PU
  *  @access     PINMUX->GPIO23
  *  @brief      Pull up enable
  */
#define GPIO23_PU_Pos  (24)
#define GPIO23_PU_Msk  (0x7U << GPIO23_PU_Pos)

#define GPIO23_PU_(x)  (((x) << GPIO23_PU_Pos) & GPIO23_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO24          OCHSEL
  *  @access     PINMUX->GPIO24
  *  @brief      Output channel select
  */
#define GPIO24_OCHSEL_Pos  (0)
#define GPIO24_OCHSEL_Msk  (0x3U << GPIO24_OCHSEL_Pos)

#define GPIO24_OCHSEL_GPIO24      ((0x00U) << GPIO24_OCHSEL_Pos)
#define GPIO24_OCHSEL_PWM0A       ((0x01U) << GPIO24_OCHSEL_Pos)
#define GPIO24_OCHSEL_PWM2B       ((0x02U) << GPIO24_OCHSEL_Pos)
#define GPIO24_OCHSEL_ECAP_APWMO  ((0x03U) << GPIO24_OCHSEL_Pos)

#define GPIO24_OCHSEL_(x)  (((x) << GPIO24_OCHSEL_Pos) & GPIO24_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO24          DEGLITCH
  *  @access     PINMUX->GPIO24
  *  @brief      Input deglitch
  */
#define GPIO24_DEGLITCH_Pos  (5)
#define GPIO24_DEGLITCH_Msk  (0x1U << GPIO24_DEGLITCH_Pos)

#define GPIO24_DEGLITCH_DISABLE  ((0x0U) << GPIO24_DEGLITCH_Pos)
#define GPIO24_DEGLITCH_ENABLE   ((0x1U) << GPIO24_DEGLITCH_Pos)

#define GPIO24_DEGLITCH_(x)  (((x) << GPIO24_DEGLITCH_Pos) & GPIO24_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO24          STRENGTH
  *  @access     PINMUX->GPIO24
  *  @brief      Output driving strength
  */
#define GPIO24_STRENGTH_Pos  (6)
#define GPIO24_STRENGTH_Msk  (0x1U << GPIO24_STRENGTH_Pos)

#define GPIO24_STRENGTH_1_MA   ((0x0U) << GPIO24_STRENGTH_Pos)
#define GPIO24_STRENGTH_20_MA  ((0x1U) << GPIO24_STRENGTH_Pos)

#define GPIO24_STRENGTH_(x)  (((x) << GPIO24_STRENGTH_Pos) & GPIO24_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO24          ICHEN
  *  @access     PINMUX->GPIO24
  *  @brief      Input channel enable
  */
#define GPIO24_ICHEN_Pos  (8)
#define GPIO24_ICHEN_Msk  (0x1U << GPIO24_ICHEN_Pos)

#define GPIO24_ICHEN_(x)  (((x) << GPIO24_ICHEN_Pos) & GPIO24_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO24          PD
  *  @access     PINMUX->GPIO24
  *  @brief      Pull down enable
  */
#define GPIO24_PD_Pos  (16)
#define GPIO24_PD_Msk  (0x7U << GPIO24_PD_Pos)

#define GPIO24_PD_(x)  (((x) << GPIO24_PD_Pos) & GPIO24_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO24          PU
  *  @access     PINMUX->GPIO24
  *  @brief      Pull up enable
  */
#define GPIO24_PU_Pos  (24)
#define GPIO24_PU_Msk  (0x7U << GPIO24_PU_Pos)

#define GPIO24_PU_(x)  (((x) << GPIO24_PU_Pos) & GPIO24_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO25          OCHSEL
  *  @access     PINMUX->GPIO25
  *  @brief      Output channel select
  */
#define GPIO25_OCHSEL_Pos  (0)
#define GPIO25_OCHSEL_Msk  (0x3U << GPIO25_OCHSEL_Pos)

#define GPIO25_OCHSEL_GPIO25     ((0x00U) << GPIO25_OCHSEL_Pos)
#define GPIO25_OCHSEL_UART1_TXD  ((0x01U) << GPIO25_OCHSEL_Pos)
#define GPIO25_OCHSEL_CAN_TXD    ((0x02U) << GPIO25_OCHSEL_Pos)
#define GPIO25_OCHSEL_I2C_SCL    ((0x03U) << GPIO25_OCHSEL_Pos)

#define GPIO25_OCHSEL_(x)  (((x) << GPIO25_OCHSEL_Pos) & GPIO25_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO25          LOOPBACK
  *  @access     PINMUX->GPIO25
  *  @brief      Data loopback for UART1 and CAN
  */
#define GPIO25_LOOPBACK_Pos  (2)
#define GPIO25_LOOPBACK_Msk  (0x1U << GPIO25_LOOPBACK_Pos)

#define GPIO25_LOOPBACK_DISABLE  ((0x0U) << GPIO25_LOOPBACK_Pos)
#define GPIO25_LOOPBACK_ENABLE   ((0x1U) << GPIO25_LOOPBACK_Pos)

#define GPIO25_LOOPBACK_(x)  (((x) << GPIO25_LOOPBACK_Pos) & GPIO25_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO25          DEGLITCH
  *  @access     PINMUX->GPIO25
  *  @brief      Input deglitch
  */
#define GPIO25_DEGLITCH_Pos  (5)
#define GPIO25_DEGLITCH_Msk  (0x1U << GPIO25_DEGLITCH_Pos)

#define GPIO25_DEGLITCH_DISABLE  ((0x0U) << GPIO25_DEGLITCH_Pos)
#define GPIO25_DEGLITCH_ENABLE   ((0x1U) << GPIO25_DEGLITCH_Pos)

#define GPIO25_DEGLITCH_(x)  (((x) << GPIO25_DEGLITCH_Pos) & GPIO25_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO25          STRENGTH
  *  @access     PINMUX->GPIO25
  *  @brief      Output driving strength
  */
#define GPIO25_STRENGTH_Pos  (6)
#define GPIO25_STRENGTH_Msk  (0x3U << GPIO25_STRENGTH_Pos)

#define GPIO25_STRENGTH_5_MA   ((0x00U) << GPIO25_STRENGTH_Pos)
#define GPIO25_STRENGTH_10_MA  ((0x01U) << GPIO25_STRENGTH_Pos)
#define GPIO25_STRENGTH_15_MA  ((0x02U) << GPIO25_STRENGTH_Pos)
#define GPIO25_STRENGTH_20_MA  ((0x03U) << GPIO25_STRENGTH_Pos)

#define GPIO25_STRENGTH_(x)  (((x) << GPIO25_STRENGTH_Pos) & GPIO25_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO25          ICHEN
  *  @access     PINMUX->GPIO25
  *  @brief      Input channel enable
  */
#define GPIO25_ICHEN_Pos  (8)
#define GPIO25_ICHEN_Msk  (0xFU << GPIO25_ICHEN_Pos)

#define GPIO25_ICHEN_(x)  (((x) << GPIO25_ICHEN_Pos) & GPIO25_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO25          PD
  *  @access     PINMUX->GPIO25
  *  @brief      Pull down enable
  */
#define GPIO25_PD_Pos  (16)
#define GPIO25_PD_Msk  (0xFU << GPIO25_PD_Pos)

#define GPIO25_PD_(x)  (((x) << GPIO25_PD_Pos) & GPIO25_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO25          PU
  *  @access     PINMUX->GPIO25
  *  @brief      Pull up enable
  */
#define GPIO25_PU_Pos  (24)
#define GPIO25_PU_Msk  (0xFU << GPIO25_PU_Pos)

#define GPIO25_PU_(x)  (((x) << GPIO25_PU_Pos) & GPIO25_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO26          OCHSEL
  *  @access     PINMUX->GPIO26
  *  @brief      Output channel select
  */
#define GPIO26_OCHSEL_Pos  (0)
#define GPIO26_OCHSEL_Msk  (0x3U << GPIO26_OCHSEL_Pos)

#define GPIO26_OCHSEL_GPIO26     ((0x00U) << GPIO26_OCHSEL_Pos)
#define GPIO26_OCHSEL_UART1_RXD  ((0x01U) << GPIO26_OCHSEL_Pos)
#define GPIO26_OCHSEL_CAN_RXD    ((0x02U) << GPIO26_OCHSEL_Pos)
#define GPIO26_OCHSEL_I2C_SDA    ((0x03U) << GPIO26_OCHSEL_Pos)

#define GPIO26_OCHSEL_(x)  (((x) << GPIO26_OCHSEL_Pos) & GPIO26_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO26          LOOPBACK
  *  @access     PINMUX->GPIO26
  *  @brief      Data loopback for UART1 and CAN
  */
#define GPIO26_LOOPBACK_Pos  (2)
#define GPIO26_LOOPBACK_Msk  (0x1U << GPIO26_LOOPBACK_Pos)

#define GPIO26_LOOPBACK_DISABLE  ((0x0U) << GPIO26_LOOPBACK_Pos)
#define GPIO26_LOOPBACK_ENABLE   ((0x1U) << GPIO26_LOOPBACK_Pos)

#define GPIO26_LOOPBACK_(x)  (((x) << GPIO26_LOOPBACK_Pos) & GPIO26_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO26          DEGLITCH
  *  @access     PINMUX->GPIO26
  *  @brief      Input deglitch
  */
#define GPIO26_DEGLITCH_Pos  (5)
#define GPIO26_DEGLITCH_Msk  (0x1U << GPIO26_DEGLITCH_Pos)

#define GPIO26_DEGLITCH_DISABLE  ((0x0U) << GPIO26_DEGLITCH_Pos)
#define GPIO26_DEGLITCH_ENABLE   ((0x1U) << GPIO26_DEGLITCH_Pos)

#define GPIO26_DEGLITCH_(x)  (((x) << GPIO26_DEGLITCH_Pos) & GPIO26_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO26          STRENGTH
  *  @access     PINMUX->GPIO26
  *  @brief      Output driving strength
  */
#define GPIO26_STRENGTH_Pos  (6)
#define GPIO26_STRENGTH_Msk  (0x3U << GPIO26_STRENGTH_Pos)

#define GPIO26_STRENGTH_5_MA   ((0x00U) << GPIO26_STRENGTH_Pos)
#define GPIO26_STRENGTH_10_MA  ((0x01U) << GPIO26_STRENGTH_Pos)
#define GPIO26_STRENGTH_15_MA  ((0x02U) << GPIO26_STRENGTH_Pos)
#define GPIO26_STRENGTH_20_MA  ((0x03U) << GPIO26_STRENGTH_Pos)

#define GPIO26_STRENGTH_(x)  (((x) << GPIO26_STRENGTH_Pos) & GPIO26_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO26          ICHEN
  *  @access     PINMUX->GPIO26
  *  @brief      Input channel enable
  */
#define GPIO26_ICHEN_Pos  (8)
#define GPIO26_ICHEN_Msk  (0xFU << GPIO26_ICHEN_Pos)

#define GPIO26_ICHEN_(x)  (((x) << GPIO26_ICHEN_Pos) & GPIO26_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO26          PD
  *  @access     PINMUX->GPIO26
  *  @brief      Pull down enable
  */
#define GPIO26_PD_Pos  (16)
#define GPIO26_PD_Msk  (0xFU << GPIO26_PD_Pos)

#define GPIO26_PD_(x)  (((x) << GPIO26_PD_Pos) & GPIO26_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO26          PU
  *  @access     PINMUX->GPIO26
  *  @brief      Pull up enable
  */
#define GPIO26_PU_Pos  (24)
#define GPIO26_PU_Msk  (0xFU << GPIO26_PU_Pos)

#define GPIO26_PU_(x)  (((x) << GPIO26_PU_Pos) & GPIO26_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO27          DEGLITCH
  *  @access     PINMUX->GPIO27
  *  @brief      Input deglitch
  */
#define GPIO27_DEGLITCH_Pos  (5)
#define GPIO27_DEGLITCH_Msk  (0x1U << GPIO27_DEGLITCH_Pos)

#define GPIO27_DEGLITCH_DISABLE  ((0x0U) << GPIO27_DEGLITCH_Pos)
#define GPIO27_DEGLITCH_ENABLE   ((0x1U) << GPIO27_DEGLITCH_Pos)

#define GPIO27_DEGLITCH_(x)  (((x) << GPIO27_DEGLITCH_Pos) & GPIO27_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO27          STRENGTH
  *  @access     PINMUX->GPIO27
  *  @brief      Output driving strength
  */
#define GPIO27_STRENGTH_Pos  (6)
#define GPIO27_STRENGTH_Msk  (0x3U << GPIO27_STRENGTH_Pos)

#define GPIO27_STRENGTH_5_MA   ((0x00U) << GPIO27_STRENGTH_Pos)
#define GPIO27_STRENGTH_10_MA  ((0x01U) << GPIO27_STRENGTH_Pos)
#define GPIO27_STRENGTH_15_MA  ((0x02U) << GPIO27_STRENGTH_Pos)
#define GPIO27_STRENGTH_20_MA  ((0x03U) << GPIO27_STRENGTH_Pos)

#define GPIO27_STRENGTH_(x)  (((x) << GPIO27_STRENGTH_Pos) & GPIO27_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO27          ICHEN
  *  @access     PINMUX->GPIO27
  *  @brief      Input channel enable
  */
#define GPIO27_ICHEN_Pos  (8)
#define GPIO27_ICHEN_Msk  (0x1U << GPIO27_ICHEN_Pos)

#define GPIO27_ICHEN_(x)  (((x) << GPIO27_ICHEN_Pos) & GPIO27_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO27          PD
  *  @access     PINMUX->GPIO27
  *  @brief      Pull down enable
  */
#define GPIO27_PD_Pos  (16)
#define GPIO27_PD_Msk  (0x1U << GPIO27_PD_Pos)

#define GPIO27_PD_(x)  (((x) << GPIO27_PD_Pos) & GPIO27_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO27          PU
  *  @access     PINMUX->GPIO27
  *  @brief      Pull up enable
  */
#define GPIO27_PU_Pos  (24)
#define GPIO27_PU_Msk  (0x1U << GPIO27_PU_Pos)

#define GPIO27_PU_(x)  (((x) << GPIO27_PU_Pos) & GPIO27_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO28          OCHSEL
  *  @access     PINMUX->GPIO28
  *  @brief      Output channel select
  */
#define GPIO28_OCHSEL_Pos  (0)
#define GPIO28_OCHSEL_Msk  (0x3U << GPIO28_OCHSEL_Pos)

#define GPIO28_OCHSEL_GPIO28     ((0x00U) << GPIO28_OCHSEL_Pos)
#define GPIO28_OCHSEL_ANA_IN5    ((0x01U) << GPIO28_OCHSEL_Pos)
#define GPIO28_OCHSEL_SPI1_SCLK  ((0x02U) << GPIO28_OCHSEL_Pos)
#define GPIO28_OCHSEL_PWM_SOCAO  ((0x03U) << GPIO28_OCHSEL_Pos)

#define GPIO28_OCHSEL_(x)  (((x) << GPIO28_OCHSEL_Pos) & GPIO28_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO28          DEGLITCH
  *  @access     PINMUX->GPIO28
  *  @brief      Input deglitch
  */
#define GPIO28_DEGLITCH_Pos  (5)
#define GPIO28_DEGLITCH_Msk  (0x1U << GPIO28_DEGLITCH_Pos)

#define GPIO28_DEGLITCH_DISABLE  ((0x0U) << GPIO28_DEGLITCH_Pos)
#define GPIO28_DEGLITCH_ENABLE   ((0x1U) << GPIO28_DEGLITCH_Pos)

#define GPIO28_DEGLITCH_(x)  (((x) << GPIO28_DEGLITCH_Pos) & GPIO28_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO28          STRENGTH
  *  @access     PINMUX->GPIO28
  *  @brief      Output driving strength
  */
#define GPIO28_STRENGTH_Pos  (6)
#define GPIO28_STRENGTH_Msk  (0x3U << GPIO28_STRENGTH_Pos)

#define GPIO28_STRENGTH_5_MA   ((0x00U) << GPIO28_STRENGTH_Pos)
#define GPIO28_STRENGTH_10_MA  ((0x01U) << GPIO28_STRENGTH_Pos)
#define GPIO28_STRENGTH_15_MA  ((0x02U) << GPIO28_STRENGTH_Pos)
#define GPIO28_STRENGTH_20_MA  ((0x03U) << GPIO28_STRENGTH_Pos)

#define GPIO28_STRENGTH_(x)  (((x) << GPIO28_STRENGTH_Pos) & GPIO28_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO28          ICHEN
  *  @access     PINMUX->GPIO28
  *  @brief      Input channel enable
  */
#define GPIO28_ICHEN_Pos  (8)
#define GPIO28_ICHEN_Msk  (0x7U << GPIO28_ICHEN_Pos)

#define GPIO28_ICHEN_(x)  (((x) << GPIO28_ICHEN_Pos) & GPIO28_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO28          PD
  *  @access     PINMUX->GPIO28
  *  @brief      Pull down enable
  */
#define GPIO28_PD_Pos  (16)
#define GPIO28_PD_Msk  (0x7U << GPIO28_PD_Pos)

#define GPIO28_PD_(x)  (((x) << GPIO28_PD_Pos) & GPIO28_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO28          PU
  *  @access     PINMUX->GPIO28
  *  @brief      Pull up enable
  */
#define GPIO28_PU_Pos  (24)
#define GPIO28_PU_Msk  (0x7U << GPIO28_PU_Pos)

#define GPIO28_PU_(x)  (((x) << GPIO28_PU_Pos) & GPIO28_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO29          OCHSEL
  *  @access     PINMUX->GPIO29
  *  @brief      Output channel select
  */
#define GPIO29_OCHSEL_Pos  (0)
#define GPIO29_OCHSEL_Msk  (0x3U << GPIO29_OCHSEL_Pos)

#define GPIO29_OCHSEL_GPIO29     ((0x00U) << GPIO29_OCHSEL_Pos)
#define GPIO29_OCHSEL_ANA_IN6    ((0x01U) << GPIO29_OCHSEL_Pos)
#define GPIO29_OCHSEL_SPI1_SFRM  ((0x02U) << GPIO29_OCHSEL_Pos)
#define GPIO29_OCHSEL_PWM_SOCBO  ((0x03U) << GPIO29_OCHSEL_Pos)

#define GPIO29_OCHSEL_(x)  (((x) << GPIO29_OCHSEL_Pos) & GPIO29_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO29          DEGLITCH
  *  @access     PINMUX->GPIO29
  *  @brief      Input deglitch
  */
#define GPIO29_DEGLITCH_Pos  (5)
#define GPIO29_DEGLITCH_Msk  (0x1U << GPIO29_DEGLITCH_Pos)

#define GPIO29_DEGLITCH_DISABLE  ((0x0U) << GPIO29_DEGLITCH_Pos)
#define GPIO29_DEGLITCH_ENABLE   ((0x1U) << GPIO29_DEGLITCH_Pos)

#define GPIO29_DEGLITCH_(x)  (((x) << GPIO29_DEGLITCH_Pos) & GPIO29_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO29          STRENGTH
  *  @access     PINMUX->GPIO29
  *  @brief      Output driving strength
  */
#define GPIO29_STRENGTH_Pos  (6)
#define GPIO29_STRENGTH_Msk  (0x3U << GPIO29_STRENGTH_Pos)

#define GPIO29_STRENGTH_5_MA   ((0x00U) << GPIO29_STRENGTH_Pos)
#define GPIO29_STRENGTH_10_MA  ((0x01U) << GPIO29_STRENGTH_Pos)
#define GPIO29_STRENGTH_15_MA  ((0x02U) << GPIO29_STRENGTH_Pos)
#define GPIO29_STRENGTH_20_MA  ((0x03U) << GPIO29_STRENGTH_Pos)

#define GPIO29_STRENGTH_(x)  (((x) << GPIO29_STRENGTH_Pos) & GPIO29_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO29          ICHEN
  *  @access     PINMUX->GPIO29
  *  @brief      Input channel enable
  */
#define GPIO29_ICHEN_Pos  (8)
#define GPIO29_ICHEN_Msk  (0x7U << GPIO29_ICHEN_Pos)

#define GPIO29_ICHEN_(x)  (((x) << GPIO29_ICHEN_Pos) & GPIO29_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO29          PD
  *  @access     PINMUX->GPIO29
  *  @brief      Pull down enable
  */
#define GPIO29_PD_Pos  (16)
#define GPIO29_PD_Msk  (0x7U << GPIO29_PD_Pos)

#define GPIO29_PD_(x)  (((x) << GPIO29_PD_Pos) & GPIO29_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO29          PU
  *  @access     PINMUX->GPIO29
  *  @brief      Pull up enable
  */
#define GPIO29_PU_Pos  (24)
#define GPIO29_PU_Msk  (0x7U << GPIO29_PU_Pos)

#define GPIO29_PU_(x)  (((x) << GPIO29_PU_Pos) & GPIO29_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO30          OCHSEL
  *  @access     PINMUX->GPIO30
  *  @brief      Output channel select
  */
#define GPIO30_OCHSEL_Pos  (0)
#define GPIO30_OCHSEL_Msk  (0x3U << GPIO30_OCHSEL_Pos)

#define GPIO30_OCHSEL_GPIO30     ((0x00U) << GPIO30_OCHSEL_Pos)
#define GPIO30_OCHSEL_ANA_IN7    ((0x01U) << GPIO30_OCHSEL_Pos)
#define GPIO30_OCHSEL_SPI1_MOSI  ((0x02U) << GPIO30_OCHSEL_Pos)
#define GPIO30_OCHSEL_PWM_SOCCO  ((0x03U) << GPIO30_OCHSEL_Pos)

#define GPIO30_OCHSEL_(x)  (((x) << GPIO30_OCHSEL_Pos) & GPIO30_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO30          LOOPBACK
  *  @access     PINMUX->GPIO30
  *  @brief      Data loopback for SPI1
  */
#define GPIO30_LOOPBACK_Pos  (2)
#define GPIO30_LOOPBACK_Msk  (0x1U << GPIO30_LOOPBACK_Pos)

#define GPIO30_LOOPBACK_DISABLE  ((0x0U) << GPIO30_LOOPBACK_Pos)
#define GPIO30_LOOPBACK_ENABLE   ((0x1U) << GPIO30_LOOPBACK_Pos)

#define GPIO30_LOOPBACK_(x)  (((x) << GPIO30_LOOPBACK_Pos) & GPIO30_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO30          DEGLITCH
  *  @access     PINMUX->GPIO30
  *  @brief      Input deglitch
  */
#define GPIO30_DEGLITCH_Pos  (5)
#define GPIO30_DEGLITCH_Msk  (0x1U << GPIO30_DEGLITCH_Pos)

#define GPIO30_DEGLITCH_DISABLE  ((0x0U) << GPIO30_DEGLITCH_Pos)
#define GPIO30_DEGLITCH_ENABLE   ((0x1U) << GPIO30_DEGLITCH_Pos)

#define GPIO30_DEGLITCH_(x)  (((x) << GPIO30_DEGLITCH_Pos) & GPIO30_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO30          STRENGTH
  *  @access     PINMUX->GPIO30
  *  @brief      Output driving strength
  */
#define GPIO30_STRENGTH_Pos  (6)
#define GPIO30_STRENGTH_Msk  (0x3U << GPIO30_STRENGTH_Pos)

#define GPIO30_STRENGTH_5_MA   ((0x00U) << GPIO30_STRENGTH_Pos)
#define GPIO30_STRENGTH_10_MA  ((0x01U) << GPIO30_STRENGTH_Pos)
#define GPIO30_STRENGTH_15_MA  ((0x02U) << GPIO30_STRENGTH_Pos)
#define GPIO30_STRENGTH_20_MA  ((0x03U) << GPIO30_STRENGTH_Pos)

#define GPIO30_STRENGTH_(x)  (((x) << GPIO30_STRENGTH_Pos) & GPIO30_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO30          ICHEN
  *  @access     PINMUX->GPIO30
  *  @brief      Input channel enable
  */
#define GPIO30_ICHEN_Pos  (8)
#define GPIO30_ICHEN_Msk  (0x7U << GPIO30_ICHEN_Pos)

#define GPIO30_ICHEN_(x)  (((x) << GPIO30_ICHEN_Pos) & GPIO30_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO30          PD
  *  @access     PINMUX->GPIO30
  *  @brief      Pull down enable
  */
#define GPIO30_PD_Pos  (16)
#define GPIO30_PD_Msk  (0x7U << GPIO30_PD_Pos)

#define GPIO30_PD_(x)  (((x) << GPIO30_PD_Pos) & GPIO30_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO30          PU
  *  @access     PINMUX->GPIO30
  *  @brief      Pull up enable
  */
#define GPIO30_PU_Pos  (24)
#define GPIO30_PU_Msk  (0x7U << GPIO30_PU_Pos)

#define GPIO30_PU_(x)  (((x) << GPIO30_PU_Pos) & GPIO30_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO31          OCHSEL
  *  @access     PINMUX->GPIO31
  *  @brief      Output channel select
  */
#define GPIO31_OCHSEL_Pos  (0)
#define GPIO31_OCHSEL_Msk  (0x3U << GPIO31_OCHSEL_Pos)

#define GPIO31_OCHSEL_GPIO31     ((0x00U) << GPIO31_OCHSEL_Pos)
#define GPIO31_OCHSEL_ANA_IN8    ((0x01U) << GPIO31_OCHSEL_Pos)
#define GPIO31_OCHSEL_SPI1_MISO  ((0x02U) << GPIO31_OCHSEL_Pos)
#define GPIO31_OCHSEL_PWM_SYNCO  ((0x03U) << GPIO31_OCHSEL_Pos)

#define GPIO31_OCHSEL_(x)  (((x) << GPIO31_OCHSEL_Pos) & GPIO31_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO31          LOOPBACK
  *  @access     PINMUX->GPIO31
  *  @brief      Data loopback for SPI1
  */
#define GPIO31_LOOPBACK_Pos  (2)
#define GPIO31_LOOPBACK_Msk  (0x1U << GPIO31_LOOPBACK_Pos)

#define GPIO31_LOOPBACK_DISABLE  ((0x0U) << GPIO31_LOOPBACK_Pos)
#define GPIO31_LOOPBACK_ENABLE   ((0x1U) << GPIO31_LOOPBACK_Pos)

#define GPIO31_LOOPBACK_(x)  (((x) << GPIO31_LOOPBACK_Pos) & GPIO31_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO31          DEGLITCH
  *  @access     PINMUX->GPIO31
  *  @brief      Input deglitch
  */
#define GPIO31_DEGLITCH_Pos  (5)
#define GPIO31_DEGLITCH_Msk  (0x1U << GPIO31_DEGLITCH_Pos)

#define GPIO31_DEGLITCH_DISABLE  ((0x0U) << GPIO31_DEGLITCH_Pos)
#define GPIO31_DEGLITCH_ENABLE   ((0x1U) << GPIO31_DEGLITCH_Pos)

#define GPIO31_DEGLITCH_(x)  (((x) << GPIO31_DEGLITCH_Pos) & GPIO31_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO31          STRENGTH
  *  @access     PINMUX->GPIO31
  *  @brief      Output driving strength
  */
#define GPIO31_STRENGTH_Pos  (6)
#define GPIO31_STRENGTH_Msk  (0x3U << GPIO31_STRENGTH_Pos)

#define GPIO31_STRENGTH_5_MA   ((0x00U) << GPIO31_STRENGTH_Pos)
#define GPIO31_STRENGTH_10_MA  ((0x01U) << GPIO31_STRENGTH_Pos)
#define GPIO31_STRENGTH_15_MA  ((0x02U) << GPIO31_STRENGTH_Pos)
#define GPIO31_STRENGTH_20_MA  ((0x03U) << GPIO31_STRENGTH_Pos)

#define GPIO31_STRENGTH_(x)  (((x) << GPIO31_STRENGTH_Pos) & GPIO31_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO31          ICHEN
  *  @access     PINMUX->GPIO31
  *  @brief      Input channel enable
  */
#define GPIO31_ICHEN_Pos  (8)
#define GPIO31_ICHEN_Msk  (0x7U << GPIO31_ICHEN_Pos)

#define GPIO31_ICHEN_(x)  (((x) << GPIO31_ICHEN_Pos) & GPIO31_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO31          PD
  *  @access     PINMUX->GPIO31
  *  @brief      Pull down enable
  */
#define GPIO31_PD_Pos  (16)
#define GPIO31_PD_Msk  (0x7U << GPIO31_PD_Pos)

#define GPIO31_PD_(x)  (((x) << GPIO31_PD_Pos) & GPIO31_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO31          PU
  *  @access     PINMUX->GPIO31
  *  @brief      Pull up enable
  */
#define GPIO31_PU_Pos  (24)
#define GPIO31_PU_Msk  (0x7U << GPIO31_PU_Pos)

#define GPIO31_PU_(x)  (((x) << GPIO31_PU_Pos) & GPIO31_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO32          OCHSEL
  *  @access     PINMUX->GPIO32
  *  @brief      Output channel select
  */
#define GPIO32_OCHSEL_Pos  (0)
#define GPIO32_OCHSEL_Msk  (0x3U << GPIO32_OCHSEL_Pos)

#define GPIO32_OCHSEL_GPIO32     ((0x00U) << GPIO32_OCHSEL_Pos)
#define GPIO32_OCHSEL_UART1_TXD  ((0x01U) << GPIO32_OCHSEL_Pos)
#define GPIO32_OCHSEL_I2C_SCL    ((0x02U) << GPIO32_OCHSEL_Pos)
#define GPIO32_OCHSEL_COMP_MON6  ((0x03U) << GPIO32_OCHSEL_Pos)

#define GPIO32_OCHSEL_(x)  (((x) << GPIO32_OCHSEL_Pos) & GPIO32_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO32          LOOPBACK
  *  @access     PINMUX->GPIO32
  *  @brief      Data loopback for UART1
  */
#define GPIO32_LOOPBACK_Pos  (2)
#define GPIO32_LOOPBACK_Msk  (0x1U << GPIO32_LOOPBACK_Pos)

#define GPIO32_LOOPBACK_DISABLE  ((0x0U) << GPIO32_LOOPBACK_Pos)
#define GPIO32_LOOPBACK_ENABLE   ((0x1U) << GPIO32_LOOPBACK_Pos)

#define GPIO32_LOOPBACK_(x)  (((x) << GPIO32_LOOPBACK_Pos) & GPIO32_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO32          DEGLITCH
  *  @access     PINMUX->GPIO32
  *  @brief      Input deglitch
  */
#define GPIO32_DEGLITCH_Pos  (5)
#define GPIO32_DEGLITCH_Msk  (0x1U << GPIO32_DEGLITCH_Pos)

#define GPIO32_DEGLITCH_DISABLE  ((0x0U) << GPIO32_DEGLITCH_Pos)
#define GPIO32_DEGLITCH_ENABLE   ((0x1U) << GPIO32_DEGLITCH_Pos)

#define GPIO32_DEGLITCH_(x)  (((x) << GPIO32_DEGLITCH_Pos) & GPIO32_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO32          STRENGTH
  *  @access     PINMUX->GPIO32
  *  @brief      Output driving strength
  */
#define GPIO32_STRENGTH_Pos  (6)
#define GPIO32_STRENGTH_Msk  (0x1U << GPIO32_STRENGTH_Pos)

#define GPIO32_STRENGTH_1_MA   ((0x0U) << GPIO32_STRENGTH_Pos)
#define GPIO32_STRENGTH_20_MA  ((0x1U) << GPIO32_STRENGTH_Pos)

#define GPIO32_STRENGTH_(x)  (((x) << GPIO32_STRENGTH_Pos) & GPIO32_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO32          ICHEN
  *  @access     PINMUX->GPIO32
  *  @brief      Input channel enable
  */
#define GPIO32_ICHEN_Pos  (8)
#define GPIO32_ICHEN_Msk  (0x7U << GPIO32_ICHEN_Pos)

#define GPIO32_ICHEN_(x)  (((x) << GPIO32_ICHEN_Pos) & GPIO32_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO32          PD
  *  @access     PINMUX->GPIO32
  *  @brief      Pull down enable
  */
#define GPIO32_PD_Pos  (16)
#define GPIO32_PD_Msk  (0x7U << GPIO32_PD_Pos)

#define GPIO32_PD_(x)  (((x) << GPIO32_PD_Pos) & GPIO32_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO32          PU
  *  @access     PINMUX->GPIO32
  *  @brief      Pull up enable
  */
#define GPIO32_PU_Pos  (24)
#define GPIO32_PU_Msk  (0x7U << GPIO32_PU_Pos)

#define GPIO32_PU_(x)  (((x) << GPIO32_PU_Pos) & GPIO32_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO33          OCHSEL
  *  @access     PINMUX->GPIO33
  *  @brief      Output channel select
  */
#define GPIO33_OCHSEL_Pos  (0)
#define GPIO33_OCHSEL_Msk  (0x3U << GPIO33_OCHSEL_Pos)

#define GPIO33_OCHSEL_GPIO33     ((0x00U) << GPIO33_OCHSEL_Pos)
#define GPIO33_OCHSEL_UART1_RXD  ((0x01U) << GPIO33_OCHSEL_Pos)
#define GPIO33_OCHSEL_I2C_SDA    ((0x02U) << GPIO33_OCHSEL_Pos)
#define GPIO33_OCHSEL_COMP_MON7  ((0x03U) << GPIO33_OCHSEL_Pos)

#define GPIO33_OCHSEL_(x)  (((x) << GPIO33_OCHSEL_Pos) & GPIO33_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO33          LOOPBACK
  *  @access     PINMUX->GPIO33
  *  @brief      Data loopback for UART1
  */
#define GPIO33_LOOPBACK_Pos  (2)
#define GPIO33_LOOPBACK_Msk  (0x1U << GPIO33_LOOPBACK_Pos)

#define GPIO33_LOOPBACK_DISABLE  ((0x0U) << GPIO33_LOOPBACK_Pos)
#define GPIO33_LOOPBACK_ENABLE   ((0x1U) << GPIO33_LOOPBACK_Pos)

#define GPIO33_LOOPBACK_(x)  (((x) << GPIO33_LOOPBACK_Pos) & GPIO33_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO33          DEGLITCH
  *  @access     PINMUX->GPIO33
  *  @brief      Input deglitch
  */
#define GPIO33_DEGLITCH_Pos  (5)
#define GPIO33_DEGLITCH_Msk  (0x1U << GPIO33_DEGLITCH_Pos)

#define GPIO33_DEGLITCH_DISABLE  ((0x0U) << GPIO33_DEGLITCH_Pos)
#define GPIO33_DEGLITCH_ENABLE   ((0x1U) << GPIO33_DEGLITCH_Pos)

#define GPIO33_DEGLITCH_(x)  (((x) << GPIO33_DEGLITCH_Pos) & GPIO33_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO33          STRENGTH
  *  @access     PINMUX->GPIO33
  *  @brief      Output driving strength
  */
#define GPIO33_STRENGTH_Pos  (6)
#define GPIO33_STRENGTH_Msk  (0x1U << GPIO33_STRENGTH_Pos)

#define GPIO33_STRENGTH_1_MA   ((0x0U) << GPIO33_STRENGTH_Pos)
#define GPIO33_STRENGTH_20_MA  ((0x1U) << GPIO33_STRENGTH_Pos)

#define GPIO33_STRENGTH_(x)  (((x) << GPIO33_STRENGTH_Pos) & GPIO33_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO33          ICHEN
  *  @access     PINMUX->GPIO33
  *  @brief      Input channel enable
  */
#define GPIO33_ICHEN_Pos  (8)
#define GPIO33_ICHEN_Msk  (0x7U << GPIO33_ICHEN_Pos)

#define GPIO33_ICHEN_(x)  (((x) << GPIO33_ICHEN_Pos) & GPIO33_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO33          PD
  *  @access     PINMUX->GPIO33
  *  @brief      Pull down enable
  */
#define GPIO33_PD_Pos  (16)
#define GPIO33_PD_Msk  (0x7U << GPIO33_PD_Pos)

#define GPIO33_PD_(x)  (((x) << GPIO33_PD_Pos) & GPIO33_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO33          PU
  *  @access     PINMUX->GPIO33
  *  @brief      Pull up enable
  */
#define GPIO33_PU_Pos  (24)
#define GPIO33_PU_Msk  (0x7U << GPIO33_PU_Pos)

#define GPIO33_PU_(x)  (((x) << GPIO33_PU_Pos) & GPIO33_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO34          OCHSEL
  *  @access     PINMUX->GPIO34
  *  @brief      Output channel select
  */
#define GPIO34_OCHSEL_Pos  (0)
#define GPIO34_OCHSEL_Msk  (0x3U << GPIO34_OCHSEL_Pos)

#define GPIO34_OCHSEL_GPIO34     ((0x00U) << GPIO34_OCHSEL_Pos)
#define GPIO34_OCHSEL_CAN_TXD    ((0x01U) << GPIO34_OCHSEL_Pos)
#define GPIO34_OCHSEL_I2C_SCL    ((0x02U) << GPIO34_OCHSEL_Pos)
#define GPIO34_OCHSEL_EPWR_TZ0O  ((0x03U) << GPIO34_OCHSEL_Pos)

#define GPIO34_OCHSEL_(x)  (((x) << GPIO34_OCHSEL_Pos) & GPIO34_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO34          LOOPBACK
  *  @access     PINMUX->GPIO34
  *  @brief      Data loopback for CAN
  */
#define GPIO34_LOOPBACK_Pos  (2)
#define GPIO34_LOOPBACK_Msk  (0x1U << GPIO34_LOOPBACK_Pos)

#define GPIO34_LOOPBACK_DISABLE  ((0x0U) << GPIO34_LOOPBACK_Pos)
#define GPIO34_LOOPBACK_ENABLE   ((0x1U) << GPIO34_LOOPBACK_Pos)

#define GPIO34_LOOPBACK_(x)  (((x) << GPIO34_LOOPBACK_Pos) & GPIO34_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO34          DEGLITCH
  *  @access     PINMUX->GPIO34
  *  @brief      Input deglitch
  */
#define GPIO34_DEGLITCH_Pos  (5)
#define GPIO34_DEGLITCH_Msk  (0x1U << GPIO34_DEGLITCH_Pos)

#define GPIO34_DEGLITCH_DISABLE  ((0x0U) << GPIO34_DEGLITCH_Pos)
#define GPIO34_DEGLITCH_ENABLE   ((0x1U) << GPIO34_DEGLITCH_Pos)

#define GPIO34_DEGLITCH_(x)  (((x) << GPIO34_DEGLITCH_Pos) & GPIO34_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO34          STRENGTH
  *  @access     PINMUX->GPIO34
  *  @brief      Output driving strength
  */
#define GPIO34_STRENGTH_Pos  (6)
#define GPIO34_STRENGTH_Msk  (0x1U << GPIO34_STRENGTH_Pos)

#define GPIO34_STRENGTH_1_MA   ((0x0U) << GPIO34_STRENGTH_Pos)
#define GPIO34_STRENGTH_20_MA  ((0x1U) << GPIO34_STRENGTH_Pos)

#define GPIO34_STRENGTH_(x)  (((x) << GPIO34_STRENGTH_Pos) & GPIO34_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO34          ICHEN
  *  @access     PINMUX->GPIO34
  *  @brief      Input channel enable
  */
#define GPIO34_ICHEN_Pos  (8)
#define GPIO34_ICHEN_Msk  (0x7U << GPIO34_ICHEN_Pos)

#define GPIO34_ICHEN_(x)  (((x) << GPIO34_ICHEN_Pos) & GPIO34_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO34          PD
  *  @access     PINMUX->GPIO34
  *  @brief      Pull down enable
  */
#define GPIO34_PD_Pos  (16)
#define GPIO34_PD_Msk  (0x7U << GPIO34_PD_Pos)

#define GPIO34_PD_(x)  (((x) << GPIO34_PD_Pos) & GPIO34_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO34          PU
  *  @access     PINMUX->GPIO34
  *  @brief      Pull up enable
  */
#define GPIO34_PU_Pos  (24)
#define GPIO34_PU_Msk  (0x7U << GPIO34_PU_Pos)

#define GPIO34_PU_(x)  (((x) << GPIO34_PU_Pos) & GPIO34_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO35          OCHSEL
  *  @access     PINMUX->GPIO35
  *  @brief      Output channel select
  */
#define GPIO35_OCHSEL_Pos  (0)
#define GPIO35_OCHSEL_Msk  (0x3U << GPIO35_OCHSEL_Pos)

#define GPIO35_OCHSEL_GPIO35     ((0x00U) << GPIO35_OCHSEL_Pos)
#define GPIO35_OCHSEL_CAN_RXD    ((0x01U) << GPIO35_OCHSEL_Pos)
#define GPIO35_OCHSEL_I2C_SDA    ((0x02U) << GPIO35_OCHSEL_Pos)
#define GPIO35_OCHSEL_EPWR_TZ1O  ((0x03U) << GPIO35_OCHSEL_Pos)

#define GPIO35_OCHSEL_(x)  (((x) << GPIO35_OCHSEL_Pos) & GPIO35_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO35          LOOPBACK
  *  @access     PINMUX->GPIO35
  *  @brief      Data loopback for CAN
  */
#define GPIO35_LOOPBACK_Pos  (2)
#define GPIO35_LOOPBACK_Msk  (0x1U << GPIO35_LOOPBACK_Pos)

#define GPIO35_LOOPBACK_DISABLE  ((0x0U) << GPIO35_LOOPBACK_Pos)
#define GPIO35_LOOPBACK_ENABLE   ((0x1U) << GPIO35_LOOPBACK_Pos)

#define GPIO35_LOOPBACK_(x)  (((x) << GPIO35_LOOPBACK_Pos) & GPIO35_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO35          DEGLITCH
  *  @access     PINMUX->GPIO35
  *  @brief      Input deglitch
  */
#define GPIO35_DEGLITCH_Pos  (5)
#define GPIO35_DEGLITCH_Msk  (0x1U << GPIO35_DEGLITCH_Pos)

#define GPIO35_DEGLITCH_DISABLE  ((0x0U) << GPIO35_DEGLITCH_Pos)
#define GPIO35_DEGLITCH_ENABLE   ((0x1U) << GPIO35_DEGLITCH_Pos)

#define GPIO35_DEGLITCH_(x)  (((x) << GPIO35_DEGLITCH_Pos) & GPIO35_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO35          STRENGTH
  *  @access     PINMUX->GPIO35
  *  @brief      Output driving strength
  */
#define GPIO35_STRENGTH_Pos  (6)
#define GPIO35_STRENGTH_Msk  (0x1U << GPIO35_STRENGTH_Pos)

#define GPIO35_STRENGTH_1_MA   ((0x0U) << GPIO35_STRENGTH_Pos)
#define GPIO35_STRENGTH_20_MA  ((0x1U) << GPIO35_STRENGTH_Pos)

#define GPIO35_STRENGTH_(x)  (((x) << GPIO35_STRENGTH_Pos) & GPIO35_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO35          ICHEN
  *  @access     PINMUX->GPIO35
  *  @brief      Input channel enable
  */
#define GPIO35_ICHEN_Pos  (8)
#define GPIO35_ICHEN_Msk  (0x7U << GPIO35_ICHEN_Pos)

#define GPIO35_ICHEN_(x)  (((x) << GPIO35_ICHEN_Pos) & GPIO35_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO35          PD
  *  @access     PINMUX->GPIO35
  *  @brief      Pull down enable
  */
#define GPIO35_PD_Pos  (16)
#define GPIO35_PD_Msk  (0x7U << GPIO35_PD_Pos)

#define GPIO35_PD_(x)  (((x) << GPIO35_PD_Pos) & GPIO35_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO35          PU
  *  @access     PINMUX->GPIO35
  *  @brief      Pull up enable
  */
#define GPIO35_PU_Pos  (24)
#define GPIO35_PU_Msk  (0x7U << GPIO35_PU_Pos)

#define GPIO35_PU_(x)  (((x) << GPIO35_PU_Pos) & GPIO35_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO36          OCHSEL
  *  @access     PINMUX->GPIO36
  *  @brief      Output channel select
  */
#define GPIO36_OCHSEL_Pos  (0)
#define GPIO36_OCHSEL_Msk  (0x3U << GPIO36_OCHSEL_Pos)

#define GPIO36_OCHSEL_GPIO36     ((0x00U) << GPIO36_OCHSEL_Pos)
#define GPIO36_OCHSEL_ANA_PHU    ((0x01U) << GPIO36_OCHSEL_Pos)
#define GPIO36_OCHSEL_SPI1_SCLK  ((0x02U) << GPIO36_OCHSEL_Pos)
#define GPIO36_OCHSEL_UART1_TXD  ((0x03U) << GPIO36_OCHSEL_Pos)

#define GPIO36_OCHSEL_(x)  (((x) << GPIO36_OCHSEL_Pos) & GPIO36_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO36          LOOPBACK
  *  @access     PINMUX->GPIO36
  *  @brief      Data loopback for UART1
  */
#define GPIO36_LOOPBACK_Pos  (2)
#define GPIO36_LOOPBACK_Msk  (0x1U << GPIO36_LOOPBACK_Pos)

#define GPIO36_LOOPBACK_DISABLE  ((0x0U) << GPIO36_LOOPBACK_Pos)
#define GPIO36_LOOPBACK_ENABLE   ((0x1U) << GPIO36_LOOPBACK_Pos)

#define GPIO36_LOOPBACK_(x)  (((x) << GPIO36_LOOPBACK_Pos) & GPIO36_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO36          DEGLITCH
  *  @access     PINMUX->GPIO36
  *  @brief      Input deglitch
  */
#define GPIO36_DEGLITCH_Pos  (5)
#define GPIO36_DEGLITCH_Msk  (0x1U << GPIO36_DEGLITCH_Pos)

#define GPIO36_DEGLITCH_DISABLE  ((0x0U) << GPIO36_DEGLITCH_Pos)
#define GPIO36_DEGLITCH_ENABLE   ((0x1U) << GPIO36_DEGLITCH_Pos)

#define GPIO36_DEGLITCH_(x)  (((x) << GPIO36_DEGLITCH_Pos) & GPIO36_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO36          STRENGTH
  *  @access     PINMUX->GPIO36
  *  @brief      Output driving strength
  */
#define GPIO36_STRENGTH_Pos  (6)
#define GPIO36_STRENGTH_Msk  (0x3U << GPIO36_STRENGTH_Pos)

#define GPIO36_STRENGTH_5_MA   ((0x00U) << GPIO36_STRENGTH_Pos)
#define GPIO36_STRENGTH_10_MA  ((0x01U) << GPIO36_STRENGTH_Pos)
#define GPIO36_STRENGTH_15_MA  ((0x02U) << GPIO36_STRENGTH_Pos)
#define GPIO36_STRENGTH_20_MA  ((0x03U) << GPIO36_STRENGTH_Pos)

#define GPIO36_STRENGTH_(x)  (((x) << GPIO36_STRENGTH_Pos) & GPIO36_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO36          ICHEN
  *  @access     PINMUX->GPIO36
  *  @brief      Input channel enable
  */
#define GPIO36_ICHEN_Pos  (8)
#define GPIO36_ICHEN_Msk  (0xFU << GPIO36_ICHEN_Pos)

#define GPIO36_ICHEN_(x)  (((x) << GPIO36_ICHEN_Pos) & GPIO36_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO36          PD
  *  @access     PINMUX->GPIO36
  *  @brief      Pull down enable
  */
#define GPIO36_PD_Pos  (16)
#define GPIO36_PD_Msk  (0xFU << GPIO36_PD_Pos)

#define GPIO36_PD_(x)  (((x) << GPIO36_PD_Pos) & GPIO36_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO36          PU
  *  @access     PINMUX->GPIO36
  *  @brief      Pull up enable
  */
#define GPIO36_PU_Pos  (24)
#define GPIO36_PU_Msk  (0xFU << GPIO36_PU_Pos)

#define GPIO36_PU_(x)  (((x) << GPIO36_PU_Pos) & GPIO36_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO37          OCHSEL
  *  @access     PINMUX->GPIO37
  *  @brief      Output channel select
  */
#define GPIO37_OCHSEL_Pos  (0)
#define GPIO37_OCHSEL_Msk  (0x3U << GPIO37_OCHSEL_Pos)

#define GPIO37_OCHSEL_GPIO37     ((0x00U) << GPIO37_OCHSEL_Pos)
#define GPIO37_OCHSEL_ANA_PHV    ((0x01U) << GPIO37_OCHSEL_Pos)
#define GPIO37_OCHSEL_SPI1_SFRM  ((0x02U) << GPIO37_OCHSEL_Pos)
#define GPIO37_OCHSEL_UART1_RXD  ((0x03U) << GPIO37_OCHSEL_Pos)

#define GPIO37_OCHSEL_(x)  (((x) << GPIO37_OCHSEL_Pos) & GPIO37_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO37          LOOPBACK
  *  @access     PINMUX->GPIO37
  *  @brief      Data loopback for UART1
  */
#define GPIO37_LOOPBACK_Pos  (2)
#define GPIO37_LOOPBACK_Msk  (0x1U << GPIO37_LOOPBACK_Pos)

#define GPIO37_LOOPBACK_DISABLE  ((0x0U) << GPIO37_LOOPBACK_Pos)
#define GPIO37_LOOPBACK_ENABLE   ((0x1U) << GPIO37_LOOPBACK_Pos)

#define GPIO37_LOOPBACK_(x)  (((x) << GPIO37_LOOPBACK_Pos) & GPIO37_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO37          DEGLITCH
  *  @access     PINMUX->GPIO37
  *  @brief      Input deglitch
  */
#define GPIO37_DEGLITCH_Pos  (5)
#define GPIO37_DEGLITCH_Msk  (0x1U << GPIO37_DEGLITCH_Pos)

#define GPIO37_DEGLITCH_DISABLE  ((0x0U) << GPIO37_DEGLITCH_Pos)
#define GPIO37_DEGLITCH_ENABLE   ((0x1U) << GPIO37_DEGLITCH_Pos)

#define GPIO37_DEGLITCH_(x)  (((x) << GPIO37_DEGLITCH_Pos) & GPIO37_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO37          STRENGTH
  *  @access     PINMUX->GPIO37
  *  @brief      Output driving strength
  */
#define GPIO37_STRENGTH_Pos  (6)
#define GPIO37_STRENGTH_Msk  (0x3U << GPIO37_STRENGTH_Pos)

#define GPIO37_STRENGTH_5_MA   ((0x00U) << GPIO37_STRENGTH_Pos)
#define GPIO37_STRENGTH_10_MA  ((0x01U) << GPIO37_STRENGTH_Pos)
#define GPIO37_STRENGTH_15_MA  ((0x02U) << GPIO37_STRENGTH_Pos)
#define GPIO37_STRENGTH_20_MA  ((0x03U) << GPIO37_STRENGTH_Pos)

#define GPIO37_STRENGTH_(x)  (((x) << GPIO37_STRENGTH_Pos) & GPIO37_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO37          ICHEN
  *  @access     PINMUX->GPIO37
  *  @brief      Input channel enable
  */
#define GPIO37_ICHEN_Pos  (8)
#define GPIO37_ICHEN_Msk  (0xFU << GPIO37_ICHEN_Pos)

#define GPIO37_ICHEN_(x)  (((x) << GPIO37_ICHEN_Pos) & GPIO37_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO37          PD
  *  @access     PINMUX->GPIO37
  *  @brief      Pull down enable
  */
#define GPIO37_PD_Pos  (16)
#define GPIO37_PD_Msk  (0xFU << GPIO37_PD_Pos)

#define GPIO37_PD_(x)  (((x) << GPIO37_PD_Pos) & GPIO37_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO37          PU
  *  @access     PINMUX->GPIO37
  *  @brief      Pull up enable
  */
#define GPIO37_PU_Pos  (24)
#define GPIO37_PU_Msk  (0xFU << GPIO37_PU_Pos)

#define GPIO37_PU_(x)  (((x) << GPIO37_PU_Pos) & GPIO37_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO38          OCHSEL
  *  @access     PINMUX->GPIO38
  *  @brief      Output channel select
  */
#define GPIO38_OCHSEL_Pos  (0)
#define GPIO38_OCHSEL_Msk  (0x3U << GPIO38_OCHSEL_Pos)

#define GPIO38_OCHSEL_GPIO38     ((0x00U) << GPIO38_OCHSEL_Pos)
#define GPIO38_OCHSEL_ANA_PHW    ((0x01U) << GPIO38_OCHSEL_Pos)
#define GPIO38_OCHSEL_SPI1_MOSI  ((0x02U) << GPIO38_OCHSEL_Pos)
#define GPIO38_OCHSEL_CAN_TXD    ((0x03U) << GPIO38_OCHSEL_Pos)

#define GPIO38_OCHSEL_(x)  (((x) << GPIO38_OCHSEL_Pos) & GPIO38_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO38          LOOPBACK
  *  @access     PINMUX->GPIO38
  *  @brief      Data loopback for SPI1 and CAN
  */
#define GPIO38_LOOPBACK_Pos  (2)
#define GPIO38_LOOPBACK_Msk  (0x1U << GPIO38_LOOPBACK_Pos)

#define GPIO38_LOOPBACK_DISABLE  ((0x0U) << GPIO38_LOOPBACK_Pos)
#define GPIO38_LOOPBACK_ENABLE   ((0x1U) << GPIO38_LOOPBACK_Pos)

#define GPIO38_LOOPBACK_(x)  (((x) << GPIO38_LOOPBACK_Pos) & GPIO38_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO38          DEGLITCH
  *  @access     PINMUX->GPIO38
  *  @brief      Input deglitch
  */
#define GPIO38_DEGLITCH_Pos  (5)
#define GPIO38_DEGLITCH_Msk  (0x1U << GPIO38_DEGLITCH_Pos)

#define GPIO38_DEGLITCH_DISABLE  ((0x0U) << GPIO38_DEGLITCH_Pos)
#define GPIO38_DEGLITCH_ENABLE   ((0x1U) << GPIO38_DEGLITCH_Pos)

#define GPIO38_DEGLITCH_(x)  (((x) << GPIO38_DEGLITCH_Pos) & GPIO38_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO38          STRENGTH
  *  @access     PINMUX->GPIO38
  *  @brief      Output driving strength
  */
#define GPIO38_STRENGTH_Pos  (6)
#define GPIO38_STRENGTH_Msk  (0x3U << GPIO38_STRENGTH_Pos)

#define GPIO38_STRENGTH_5_MA   ((0x00U) << GPIO38_STRENGTH_Pos)
#define GPIO38_STRENGTH_10_MA  ((0x01U) << GPIO38_STRENGTH_Pos)
#define GPIO38_STRENGTH_15_MA  ((0x02U) << GPIO38_STRENGTH_Pos)
#define GPIO38_STRENGTH_20_MA  ((0x03U) << GPIO38_STRENGTH_Pos)

#define GPIO38_STRENGTH_(x)  (((x) << GPIO38_STRENGTH_Pos) & GPIO38_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO38          ICHEN
  *  @access     PINMUX->GPIO38
  *  @brief      Input channel enable
  */
#define GPIO38_ICHEN_Pos  (8)
#define GPIO38_ICHEN_Msk  (0xFU << GPIO38_ICHEN_Pos)

#define GPIO38_ICHEN_(x)  (((x) << GPIO38_ICHEN_Pos) & GPIO38_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO38          PD
  *  @access     PINMUX->GPIO38
  *  @brief      Pull down enable
  */
#define GPIO38_PD_Pos  (16)
#define GPIO38_PD_Msk  (0xFU << GPIO38_PD_Pos)

#define GPIO38_PD_(x)  (((x) << GPIO38_PD_Pos) & GPIO38_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO38          PU
  *  @access     PINMUX->GPIO38
  *  @brief      Pull up enable
  */
#define GPIO38_PU_Pos  (24)
#define GPIO38_PU_Msk  (0xFU << GPIO38_PU_Pos)

#define GPIO38_PU_(x)  (((x) << GPIO38_PU_Pos) & GPIO38_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO39          OCHSEL
  *  @access     PINMUX->GPIO39
  *  @brief      Output channel select
  */
#define GPIO39_OCHSEL_Pos  (0)
#define GPIO39_OCHSEL_Msk  (0x3U << GPIO39_OCHSEL_Pos)

#define GPIO39_OCHSEL_GPIO39     ((0x00U) << GPIO39_OCHSEL_Pos)
#define GPIO39_OCHSEL_ANA_PHC    ((0x01U) << GPIO39_OCHSEL_Pos)
#define GPIO39_OCHSEL_SPI1_MISO  ((0x02U) << GPIO39_OCHSEL_Pos)
#define GPIO39_OCHSEL_CAN_RXD    ((0x03U) << GPIO39_OCHSEL_Pos)

#define GPIO39_OCHSEL_(x)  (((x) << GPIO39_OCHSEL_Pos) & GPIO39_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO39          LOOPBACK
  *  @access     PINMUX->GPIO39
  *  @brief      Data loopback for SPI1 and CAN
  */
#define GPIO39_LOOPBACK_Pos  (2)
#define GPIO39_LOOPBACK_Msk  (0x1U << GPIO39_LOOPBACK_Pos)

#define GPIO39_LOOPBACK_DISABLE  ((0x0U) << GPIO39_LOOPBACK_Pos)
#define GPIO39_LOOPBACK_ENABLE   ((0x1U) << GPIO39_LOOPBACK_Pos)

#define GPIO39_LOOPBACK_(x)  (((x) << GPIO39_LOOPBACK_Pos) & GPIO39_LOOPBACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO39          DEGLITCH
  *  @access     PINMUX->GPIO39
  *  @brief      Input deglitch
  */
#define GPIO39_DEGLITCH_Pos  (5)
#define GPIO39_DEGLITCH_Msk  (0x1U << GPIO39_DEGLITCH_Pos)

#define GPIO39_DEGLITCH_DISABLE  ((0x0U) << GPIO39_DEGLITCH_Pos)
#define GPIO39_DEGLITCH_ENABLE   ((0x1U) << GPIO39_DEGLITCH_Pos)

#define GPIO39_DEGLITCH_(x)  (((x) << GPIO39_DEGLITCH_Pos) & GPIO39_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO39          STRENGTH
  *  @access     PINMUX->GPIO39
  *  @brief      Output driving strength
  */
#define GPIO39_STRENGTH_Pos  (6)
#define GPIO39_STRENGTH_Msk  (0x3U << GPIO39_STRENGTH_Pos)

#define GPIO39_STRENGTH_5_MA   ((0x00U) << GPIO39_STRENGTH_Pos)
#define GPIO39_STRENGTH_10_MA  ((0x01U) << GPIO39_STRENGTH_Pos)
#define GPIO39_STRENGTH_15_MA  ((0x02U) << GPIO39_STRENGTH_Pos)
#define GPIO39_STRENGTH_20_MA  ((0x03U) << GPIO39_STRENGTH_Pos)

#define GPIO39_STRENGTH_(x)  (((x) << GPIO39_STRENGTH_Pos) & GPIO39_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO39          ICHEN
  *  @access     PINMUX->GPIO39
  *  @brief      Input channel enable
  */
#define GPIO39_ICHEN_Pos  (8)
#define GPIO39_ICHEN_Msk  (0xFU << GPIO39_ICHEN_Pos)

#define GPIO39_ICHEN_(x)  (((x) << GPIO39_ICHEN_Pos) & GPIO39_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO39          PD
  *  @access     PINMUX->GPIO39
  *  @brief      Pull down enable
  */
#define GPIO39_PD_Pos  (16)
#define GPIO39_PD_Msk  (0xFU << GPIO39_PD_Pos)

#define GPIO39_PD_(x)  (((x) << GPIO39_PD_Pos) & GPIO39_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO39          PU
  *  @access     PINMUX->GPIO39
  *  @brief      Pull up enable
  */
#define GPIO39_PU_Pos  (24)
#define GPIO39_PU_Msk  (0xFU << GPIO39_PU_Pos)

#define GPIO39_PU_(x)  (((x) << GPIO39_PU_Pos) & GPIO39_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO40          OCHSEL
  *  @access     PINMUX->GPIO40
  *  @brief      Output channel select
  */
#define GPIO40_OCHSEL_Pos  (0)
#define GPIO40_OCHSEL_Msk  (0x1U << GPIO40_OCHSEL_Pos)

#define GPIO40_OCHSEL_GPIO40   ((0x0U) << GPIO40_OCHSEL_Pos)
#define GPIO40_OCHSEL_ANA_IN9  ((0x1U) << GPIO40_OCHSEL_Pos)

#define GPIO40_OCHSEL_(x)  (((x) << GPIO40_OCHSEL_Pos) & GPIO40_OCHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO40          DEGLITCH
  *  @access     PINMUX->GPIO40
  *  @brief      Input deglitch
  */
#define GPIO40_DEGLITCH_Pos  (5)
#define GPIO40_DEGLITCH_Msk  (0x1U << GPIO40_DEGLITCH_Pos)

#define GPIO40_DEGLITCH_DISABLE  ((0x0U) << GPIO40_DEGLITCH_Pos)
#define GPIO40_DEGLITCH_ENABLE   ((0x1U) << GPIO40_DEGLITCH_Pos)

#define GPIO40_DEGLITCH_(x)  (((x) << GPIO40_DEGLITCH_Pos) & GPIO40_DEGLITCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO40          STRENGTH
  *  @access     PINMUX->GPIO40
  *  @brief      Output driving strength
  */
#define GPIO40_STRENGTH_Pos  (6)
#define GPIO40_STRENGTH_Msk  (0x3U << GPIO40_STRENGTH_Pos)

#define GPIO40_STRENGTH_5_MA   ((0x00U) << GPIO40_STRENGTH_Pos)
#define GPIO40_STRENGTH_10_MA  ((0x01U) << GPIO40_STRENGTH_Pos)
#define GPIO40_STRENGTH_15_MA  ((0x02U) << GPIO40_STRENGTH_Pos)
#define GPIO40_STRENGTH_20_MA  ((0x03U) << GPIO40_STRENGTH_Pos)

#define GPIO40_STRENGTH_(x)  (((x) << GPIO40_STRENGTH_Pos) & GPIO40_STRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO40          ICHEN
  *  @access     PINMUX->GPIO40
  *  @brief      Input channel enable
  */
#define GPIO40_ICHEN_Pos  (8)
#define GPIO40_ICHEN_Msk  (0x1U << GPIO40_ICHEN_Pos)

#define GPIO40_ICHEN_(x)  (((x) << GPIO40_ICHEN_Pos) & GPIO40_ICHEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO40          PD
  *  @access     PINMUX->GPIO40
  *  @brief      Pull down enable
  */
#define GPIO40_PD_Pos  (16)
#define GPIO40_PD_Msk  (0x3U << GPIO40_PD_Pos)

#define GPIO40_PD_(x)  (((x) << GPIO40_PD_Pos) & GPIO40_PD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          GPIO40          PU
  *  @access     PINMUX->GPIO40
  *  @brief      Pull up enable
  */
#define GPIO40_PU_Pos  (24)
#define GPIO40_PU_Msk  (0x3U << GPIO40_PU_Pos)

#define GPIO40_PU_(x)  (((x) << GPIO40_PU_Pos) & GPIO40_PU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC0
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 0 source select
  */
#define COMPMONCTL_SRC0_Pos  (0)
#define COMPMONCTL_SRC0_Msk  (0x7U << COMPMONCTL_SRC0_Pos)

#define COMPMONCTL_SRC0_COMP0L      ((0x000U) << COMPMONCTL_SRC0_Pos)
#define COMPMONCTL_SRC0_COMP0H      ((0x001U) << COMPMONCTL_SRC0_Pos)
#define COMPMONCTL_SRC0_PHCOMPU     ((0x002U) << COMPMONCTL_SRC0_Pos)
#define COMPMONCTL_SRC0_PHCOMPV     ((0x003U) << COMPMONCTL_SRC0_Pos)
#define COMPMONCTL_SRC0_PHCOMPW     ((0x004U) << COMPMONCTL_SRC0_Pos)
#define COMPMONCTL_SRC0_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC0_Pos)
#define COMPMONCTL_SRC0_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC0_Pos)
#define COMPMONCTL_SRC0_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC0_Pos)

#define COMPMONCTL_SRC0_(x)  (((x) << COMPMONCTL_SRC0_Pos) & COMPMONCTL_SRC0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC1
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 1 source select
  */
#define COMPMONCTL_SRC1_Pos  (4)
#define COMPMONCTL_SRC1_Msk  (0x7U << COMPMONCTL_SRC1_Pos)

#define COMPMONCTL_SRC1_COMP0L      ((0x000U) << COMPMONCTL_SRC1_Pos)
#define COMPMONCTL_SRC1_COMP0H      ((0x001U) << COMPMONCTL_SRC1_Pos)
#define COMPMONCTL_SRC1_PHCOMPU     ((0x002U) << COMPMONCTL_SRC1_Pos)
#define COMPMONCTL_SRC1_PHCOMPV     ((0x003U) << COMPMONCTL_SRC1_Pos)
#define COMPMONCTL_SRC1_PHCOMPW     ((0x004U) << COMPMONCTL_SRC1_Pos)
#define COMPMONCTL_SRC1_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC1_Pos)
#define COMPMONCTL_SRC1_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC1_Pos)
#define COMPMONCTL_SRC1_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC1_Pos)

#define COMPMONCTL_SRC1_(x)  (((x) << COMPMONCTL_SRC1_Pos) & COMPMONCTL_SRC1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC2
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 2 source select
  */
#define COMPMONCTL_SRC2_Pos  (8)
#define COMPMONCTL_SRC2_Msk  (0x7U << COMPMONCTL_SRC2_Pos)

#define COMPMONCTL_SRC2_COMP0L      ((0x000U) << COMPMONCTL_SRC2_Pos)
#define COMPMONCTL_SRC2_COMP0H      ((0x001U) << COMPMONCTL_SRC2_Pos)
#define COMPMONCTL_SRC2_PHCOMPU     ((0x002U) << COMPMONCTL_SRC2_Pos)
#define COMPMONCTL_SRC2_PHCOMPV     ((0x003U) << COMPMONCTL_SRC2_Pos)
#define COMPMONCTL_SRC2_PHCOMPW     ((0x004U) << COMPMONCTL_SRC2_Pos)
#define COMPMONCTL_SRC2_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC2_Pos)
#define COMPMONCTL_SRC2_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC2_Pos)
#define COMPMONCTL_SRC2_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC2_Pos)

#define COMPMONCTL_SRC2_(x)  (((x) << COMPMONCTL_SRC2_Pos) & COMPMONCTL_SRC2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC3
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 3 source select
  */
#define COMPMONCTL_SRC3_Pos  (12)
#define COMPMONCTL_SRC3_Msk  (0x7U << COMPMONCTL_SRC3_Pos)

#define COMPMONCTL_SRC3_COMP0L      ((0x000U) << COMPMONCTL_SRC3_Pos)
#define COMPMONCTL_SRC3_COMP0H      ((0x001U) << COMPMONCTL_SRC3_Pos)
#define COMPMONCTL_SRC3_PHCOMPU     ((0x002U) << COMPMONCTL_SRC3_Pos)
#define COMPMONCTL_SRC3_PHCOMPV     ((0x003U) << COMPMONCTL_SRC3_Pos)
#define COMPMONCTL_SRC3_PHCOMPW     ((0x004U) << COMPMONCTL_SRC3_Pos)
#define COMPMONCTL_SRC3_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC3_Pos)
#define COMPMONCTL_SRC3_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC3_Pos)
#define COMPMONCTL_SRC3_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC3_Pos)

#define COMPMONCTL_SRC3_(x)  (((x) << COMPMONCTL_SRC3_Pos) & COMPMONCTL_SRC3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC4
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 4 source select
  */
#define COMPMONCTL_SRC4_Pos  (16)
#define COMPMONCTL_SRC4_Msk  (0x7U << COMPMONCTL_SRC4_Pos)

#define COMPMONCTL_SRC4_COMP0L      ((0x000U) << COMPMONCTL_SRC4_Pos)
#define COMPMONCTL_SRC4_COMP0H      ((0x001U) << COMPMONCTL_SRC4_Pos)
#define COMPMONCTL_SRC4_PHCOMPU     ((0x002U) << COMPMONCTL_SRC4_Pos)
#define COMPMONCTL_SRC4_PHCOMPV     ((0x003U) << COMPMONCTL_SRC4_Pos)
#define COMPMONCTL_SRC4_PHCOMPW     ((0x004U) << COMPMONCTL_SRC4_Pos)
#define COMPMONCTL_SRC4_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC4_Pos)
#define COMPMONCTL_SRC4_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC4_Pos)
#define COMPMONCTL_SRC4_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC4_Pos)

#define COMPMONCTL_SRC4_(x)  (((x) << COMPMONCTL_SRC4_Pos) & COMPMONCTL_SRC4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC5
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 5 source select
  */
#define COMPMONCTL_SRC5_Pos  (20)
#define COMPMONCTL_SRC5_Msk  (0x7U << COMPMONCTL_SRC5_Pos)

#define COMPMONCTL_SRC5_COMP0L      ((0x000U) << COMPMONCTL_SRC5_Pos)
#define COMPMONCTL_SRC5_COMP0H      ((0x001U) << COMPMONCTL_SRC5_Pos)
#define COMPMONCTL_SRC5_PHCOMPU     ((0x002U) << COMPMONCTL_SRC5_Pos)
#define COMPMONCTL_SRC5_PHCOMPV     ((0x003U) << COMPMONCTL_SRC5_Pos)
#define COMPMONCTL_SRC5_PHCOMPW     ((0x004U) << COMPMONCTL_SRC5_Pos)
#define COMPMONCTL_SRC5_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC5_Pos)
#define COMPMONCTL_SRC5_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC5_Pos)
#define COMPMONCTL_SRC5_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC5_Pos)

#define COMPMONCTL_SRC5_(x)  (((x) << COMPMONCTL_SRC5_Pos) & COMPMONCTL_SRC5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC6
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 6 source select
  */
#define COMPMONCTL_SRC6_Pos  (24)
#define COMPMONCTL_SRC6_Msk  (0x7U << COMPMONCTL_SRC6_Pos)

#define COMPMONCTL_SRC6_COMP0L      ((0x000U) << COMPMONCTL_SRC6_Pos)
#define COMPMONCTL_SRC6_COMP0H      ((0x001U) << COMPMONCTL_SRC6_Pos)
#define COMPMONCTL_SRC6_PHCOMPU     ((0x002U) << COMPMONCTL_SRC6_Pos)
#define COMPMONCTL_SRC6_PHCOMPV     ((0x003U) << COMPMONCTL_SRC6_Pos)
#define COMPMONCTL_SRC6_PHCOMPW     ((0x004U) << COMPMONCTL_SRC6_Pos)
#define COMPMONCTL_SRC6_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC6_Pos)
#define COMPMONCTL_SRC6_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC6_Pos)
#define COMPMONCTL_SRC6_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC6_Pos)

#define COMPMONCTL_SRC6_(x)  (((x) << COMPMONCTL_SRC6_Pos) & COMPMONCTL_SRC6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          COMPMONCTL      SRC7
  *  @access     PINMUX->COMPMONCTL
  *  @brief      COMP output monitor 7 source select
  */
#define COMPMONCTL_SRC7_Pos  (28)
#define COMPMONCTL_SRC7_Msk  (0x7U << COMPMONCTL_SRC7_Pos)

#define COMPMONCTL_SRC7_COMP0L      ((0x000U) << COMPMONCTL_SRC7_Pos)
#define COMPMONCTL_SRC7_COMP0H      ((0x001U) << COMPMONCTL_SRC7_Pos)
#define COMPMONCTL_SRC7_PHCOMPU     ((0x002U) << COMPMONCTL_SRC7_Pos)
#define COMPMONCTL_SRC7_PHCOMPV     ((0x003U) << COMPMONCTL_SRC7_Pos)
#define COMPMONCTL_SRC7_PHCOMPW     ((0x004U) << COMPMONCTL_SRC7_Pos)
#define COMPMONCTL_SRC7_PHCOMPUFLT  ((0x005U) << COMPMONCTL_SRC7_Pos)
#define COMPMONCTL_SRC7_PHCOMPVFLT  ((0x006U) << COMPMONCTL_SRC7_Pos)
#define COMPMONCTL_SRC7_PHCOMPWFLT  ((0x007U) << COMPMONCTL_SRC7_Pos)

#define COMPMONCTL_SRC7_(x)  (((x) << COMPMONCTL_SRC7_Pos) & COMPMONCTL_SRC7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PINMUX          PINMUXREGKEY    KEY
  *  @access     PINMUX->PINMUXREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected pinmux registers
  */
#define PINMUXREGKEY_KEY_Pos  (0)
#define PINMUXREGKEY_KEY_Msk  (0xFFFFFFFFU << PINMUXREGKEY_KEY_Pos)

#define PINMUXREGKEY_KEY_(x)  (((x) << PINMUXREGKEY_KEY_Pos) & PINMUXREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      EPWR:                                                                 */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZFLT       EPWRTZ0
  *  @access     EPWR->EPWRTZFLT
  *  @brief      Filtered EPWRTZ0 event without latch
  */
#define EPWRTZFLT_EPWRTZ0_Pos  (0)
#define EPWRTZFLT_EPWRTZ0_Msk  (0x1U << EPWRTZFLT_EPWRTZ0_Pos)

#define EPWRTZFLT_EPWRTZ0_NOT_OCCUR  ((0x0U) << EPWRTZFLT_EPWRTZ0_Pos)
#define EPWRTZFLT_EPWRTZ0_OCCUR      ((0x1U) << EPWRTZFLT_EPWRTZ0_Pos)

#define EPWRTZFLT_EPWRTZ0_(x)  (((x) << EPWRTZFLT_EPWRTZ0_Pos) & EPWRTZFLT_EPWRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZFLT       EPWRTZ1
  *  @access     EPWR->EPWRTZFLT
  *  @brief      Filtered EPWRTZ1 event without latch
  */
#define EPWRTZFLT_EPWRTZ1_Pos  (1)
#define EPWRTZFLT_EPWRTZ1_Msk  (0x1U << EPWRTZFLT_EPWRTZ1_Pos)

#define EPWRTZFLT_EPWRTZ1_NOT_OCCUR  ((0x0U) << EPWRTZFLT_EPWRTZ1_Pos)
#define EPWRTZFLT_EPWRTZ1_OCCUR      ((0x1U) << EPWRTZFLT_EPWRTZ1_Pos)

#define EPWRTZFLT_EPWRTZ1_(x)  (((x) << EPWRTZFLT_EPWRTZ1_Pos) & EPWRTZFLT_EPWRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZFLG       EPWRTZ0
  *  @access     EPWR->EPWRTZFLG
  *  @brief      Latched EPWRTZ0 event  flag after filtering
  */
#define EPWRTZFLG_EPWRTZ0_Pos  (0)
#define EPWRTZFLG_EPWRTZ0_Msk  (0x1U << EPWRTZFLG_EPWRTZ0_Pos)

#define EPWRTZFLG_EPWRTZ0_NOT_OCCUR  ((0x0U) << EPWRTZFLG_EPWRTZ0_Pos)
#define EPWRTZFLG_EPWRTZ0_OCCUR      ((0x1U) << EPWRTZFLG_EPWRTZ0_Pos)

#define EPWRTZFLG_EPWRTZ0_(x)  (((x) << EPWRTZFLG_EPWRTZ0_Pos) & EPWRTZFLG_EPWRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZFLG       EPWRTZ1
  *  @access     EPWR->EPWRTZFLG
  *  @brief      Latched EPWRTZ1 event flag after filtering
  */
#define EPWRTZFLG_EPWRTZ1_Pos  (1)
#define EPWRTZFLG_EPWRTZ1_Msk  (0x1U << EPWRTZFLG_EPWRTZ1_Pos)

#define EPWRTZFLG_EPWRTZ1_NOT_OCCUR  ((0x0U) << EPWRTZFLG_EPWRTZ1_Pos)
#define EPWRTZFLG_EPWRTZ1_OCCUR      ((0x1U) << EPWRTZFLG_EPWRTZ1_Pos)

#define EPWRTZFLG_EPWRTZ1_(x)  (((x) << EPWRTZFLG_EPWRTZ1_Pos) & EPWRTZFLG_EPWRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZCLR       EPWRTZ0
  *  @access     EPWR->EPWRTZCLR
  *  @brief      Latched EPWRTZ0 flag clear
  */
#define EPWRTZCLR_EPWRTZ0_Pos  (0)
#define EPWRTZCLR_EPWRTZ0_Msk  (0x1U << EPWRTZCLR_EPWRTZ0_Pos)

#define EPWRTZCLR_EPWRTZ0_NO_EFFECT  ((0x0U) << EPWRTZCLR_EPWRTZ0_Pos)
#define EPWRTZCLR_EPWRTZ0_CLEAR      ((0x1U) << EPWRTZCLR_EPWRTZ0_Pos)

#define EPWRTZCLR_EPWRTZ0_(x)  (((x) << EPWRTZCLR_EPWRTZ0_Pos) & EPWRTZCLR_EPWRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZCLR       EPWRTZ1
  *  @access     EPWR->EPWRTZCLR
  *  @brief      Latched EPWRTZ1 flag clear
  */
#define EPWRTZCLR_EPWRTZ1_Pos  (1)
#define EPWRTZCLR_EPWRTZ1_Msk  (0x1U << EPWRTZCLR_EPWRTZ1_Pos)

#define EPWRTZCLR_EPWRTZ1_NO_EFFECT  ((0x0U) << EPWRTZCLR_EPWRTZ1_Pos)
#define EPWRTZCLR_EPWRTZ1_CLEAR      ((0x1U) << EPWRTZCLR_EPWRTZ1_Pos)

#define EPWRTZCLR_EPWRTZ1_(x)  (((x) << EPWRTZCLR_EPWRTZ1_Pos) & EPWRTZCLR_EPWRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      SEL4PWM
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Trip-zone output select for PWM
  */
#define EPWRTZ0CTL_SEL4PWM_Pos  (0)
#define EPWRTZ0CTL_SEL4PWM_Msk  (0x7U << EPWRTZ0CTL_SEL4PWM_Pos)

#define EPWRTZ0CTL_SEL4PWM_ORIGINAL                     ((0x000U) << EPWRTZ0CTL_SEL4PWM_Pos)
#define EPWRTZ0CTL_SEL4PWM_SYNC                         ((0x001U) << EPWRTZ0CTL_SEL4PWM_Pos)
#define EPWRTZ0CTL_SEL4PWM_FILTRED                      ((0x002U) << EPWRTZ0CTL_SEL4PWM_Pos)
#define EPWRTZ0CTL_SEL4PWM_LATCHED                      ((0x003U) << EPWRTZ0CTL_SEL4PWM_Pos)
#define EPWRTZ0CTL_SEL4PWM_ORIGINAL_OR_LATCHED          ((0x004U) << EPWRTZ0CTL_SEL4PWM_Pos)
#define EPWRTZ0CTL_SEL4PWM_SYNC_OR_LATCHED              ((0x005U) << EPWRTZ0CTL_SEL4PWM_Pos)
#define EPWRTZ0CTL_SEL4PWM_FILTERED_OR_LATCHED          ((0x006U) << EPWRTZ0CTL_SEL4PWM_Pos)
#define EPWRTZ0CTL_SEL4PWM_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << EPWRTZ0CTL_SEL4PWM_Pos)

#define EPWRTZ0CTL_SEL4PWM_(x)  (((x) << EPWRTZ0CTL_SEL4PWM_Pos) & EPWRTZ0CTL_SEL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      POL4PWM
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Trip-zone output polarity for PWM
  */
#define EPWRTZ0CTL_POL4PWM_Pos  (3)
#define EPWRTZ0CTL_POL4PWM_Msk  (0x1U << EPWRTZ0CTL_POL4PWM_Pos)

#define EPWRTZ0CTL_POL4PWM_ACTIVE_LOW   ((0x0U) << EPWRTZ0CTL_POL4PWM_Pos)
#define EPWRTZ0CTL_POL4PWM_ACTIVE_HIGH  ((0x1U) << EPWRTZ0CTL_POL4PWM_Pos)

#define EPWRTZ0CTL_POL4PWM_(x)  (((x) << EPWRTZ0CTL_POL4PWM_Pos) & EPWRTZ0CTL_POL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      SEL4GPIO
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Trip-zone output select for GPIO
  */
#define EPWRTZ0CTL_SEL4GPIO_Pos  (4)
#define EPWRTZ0CTL_SEL4GPIO_Msk  (0x7U << EPWRTZ0CTL_SEL4GPIO_Pos)

#define EPWRTZ0CTL_SEL4GPIO_ORIGINAL                     ((0x000U) << EPWRTZ0CTL_SEL4GPIO_Pos)
#define EPWRTZ0CTL_SEL4GPIO_SYNC                         ((0x001U) << EPWRTZ0CTL_SEL4GPIO_Pos)
#define EPWRTZ0CTL_SEL4GPIO_FILTRED                      ((0x002U) << EPWRTZ0CTL_SEL4GPIO_Pos)
#define EPWRTZ0CTL_SEL4GPIO_LATCHED                      ((0x003U) << EPWRTZ0CTL_SEL4GPIO_Pos)
#define EPWRTZ0CTL_SEL4GPIO_ORIGINAL_OR_LATCHED          ((0x004U) << EPWRTZ0CTL_SEL4GPIO_Pos)
#define EPWRTZ0CTL_SEL4GPIO_SYNC_OR_LATCHED              ((0x005U) << EPWRTZ0CTL_SEL4GPIO_Pos)
#define EPWRTZ0CTL_SEL4GPIO_FILTERED_OR_LATCHED          ((0x006U) << EPWRTZ0CTL_SEL4GPIO_Pos)
#define EPWRTZ0CTL_SEL4GPIO_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << EPWRTZ0CTL_SEL4GPIO_Pos)

#define EPWRTZ0CTL_SEL4GPIO_(x)  (((x) << EPWRTZ0CTL_SEL4GPIO_Pos) & EPWRTZ0CTL_SEL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      POL4GPIO
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Trip-zone output polarity for GPIO
  */
#define EPWRTZ0CTL_POL4GPIO_Pos  (7)
#define EPWRTZ0CTL_POL4GPIO_Msk  (0x1U << EPWRTZ0CTL_POL4GPIO_Pos)

#define EPWRTZ0CTL_POL4GPIO_ACTIVE_LOW   ((0x0U) << EPWRTZ0CTL_POL4GPIO_Pos)
#define EPWRTZ0CTL_POL4GPIO_ACTIVE_HIGH  ((0x1U) << EPWRTZ0CTL_POL4GPIO_Pos)

#define EPWRTZ0CTL_POL4GPIO_(x)  (((x) << EPWRTZ0CTL_POL4GPIO_Pos) & EPWRTZ0CTL_POL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      IE
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Trip-zone event input enable
  */
#define EPWRTZ0CTL_IE_Pos  (8)
#define EPWRTZ0CTL_IE_Msk  (0x1U << EPWRTZ0CTL_IE_Pos)

#define EPWRTZ0CTL_IE_DISABLE  ((0x0U) << EPWRTZ0CTL_IE_Pos)
#define EPWRTZ0CTL_IE_ENABLE   ((0x1U) << EPWRTZ0CTL_IE_Pos)

#define EPWRTZ0CTL_IE_(x)  (((x) << EPWRTZ0CTL_IE_Pos) & EPWRTZ0CTL_IE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      INPOL
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Trip-zone input polarity
  */
#define EPWRTZ0CTL_INPOL_Pos  (9)
#define EPWRTZ0CTL_INPOL_Msk  (0x1U << EPWRTZ0CTL_INPOL_Pos)

#define EPWRTZ0CTL_INPOL_ACTIVE_LOW   ((0x0U) << EPWRTZ0CTL_INPOL_Pos)
#define EPWRTZ0CTL_INPOL_ACTIVE_HIGH  ((0x1U) << EPWRTZ0CTL_INPOL_Pos)

#define EPWRTZ0CTL_INPOL_(x)  (((x) << EPWRTZ0CTL_INPOL_Pos) & EPWRTZ0CTL_INPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      SYNCCLREN
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Enable latched EPWRTZ0 status clear by PWMSYNC
  */
#define EPWRTZ0CTL_SYNCCLREN_Pos  (10)
#define EPWRTZ0CTL_SYNCCLREN_Msk  (0x1U << EPWRTZ0CTL_SYNCCLREN_Pos)

#define EPWRTZ0CTL_SYNCCLREN_DISABLE  ((0x0U) << EPWRTZ0CTL_SYNCCLREN_Pos)
#define EPWRTZ0CTL_SYNCCLREN_ENABLE   ((0x1U) << EPWRTZ0CTL_SYNCCLREN_Pos)

#define EPWRTZ0CTL_SYNCCLREN_(x)  (((x) << EPWRTZ0CTL_SYNCCLREN_Pos) & EPWRTZ0CTL_SYNCCLREN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      FLTDIV
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Filter's clock dividing ratio is (FLTDIV+1)
  */
#define EPWRTZ0CTL_FLTDIV_Pos  (11)
#define EPWRTZ0CTL_FLTDIV_Msk  (0x3FFU << EPWRTZ0CTL_FLTDIV_Pos)

#define EPWRTZ0CTL_FLTDIV_(x)  (((x) << EPWRTZ0CTL_FLTDIV_Pos) & EPWRTZ0CTL_FLTDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      FLTWIN
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Filter's window size is (FLTWIN+1) samples
  */
#define EPWRTZ0CTL_FLTWIN_Pos  (21)
#define EPWRTZ0CTL_FLTWIN_Msk  (0x1FU << EPWRTZ0CTL_FLTWIN_Pos)

#define EPWRTZ0CTL_FLTWIN_(x)  (((x) << EPWRTZ0CTL_FLTWIN_Pos) & EPWRTZ0CTL_FLTWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      FLTTH
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Filter's threhold is (FLTTH+1) 1's/0's for output to toggle
  */
#define EPWRTZ0CTL_FLTTH_Pos  (26)
#define EPWRTZ0CTL_FLTTH_Msk  (0x1FU << EPWRTZ0CTL_FLTTH_Pos)

#define EPWRTZ0CTL_FLTTH_(x)  (((x) << EPWRTZ0CTL_FLTTH_Pos) & EPWRTZ0CTL_FLTTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ0CTL      FLTRST
  *  @access     EPWR->EPWRTZ0CTL
  *  @brief      Reset all registers in the filter with the input
  */
#define EPWRTZ0CTL_FLTRST_Pos  (31)
#define EPWRTZ0CTL_FLTRST_Msk  (0x1U << EPWRTZ0CTL_FLTRST_Pos)

#define EPWRTZ0CTL_FLTRST_NO_EFFECT  ((0x0U) << EPWRTZ0CTL_FLTRST_Pos)
#define EPWRTZ0CTL_FLTRST_RESET      ((0x1U) << EPWRTZ0CTL_FLTRST_Pos)

#define EPWRTZ0CTL_FLTRST_(x)  (((x) << EPWRTZ0CTL_FLTRST_Pos) & EPWRTZ0CTL_FLTRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      SEL4PWM
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Trip-zone output select for PWM
  */
#define EPWRTZ1CTL_SEL4PWM_Pos  (0)
#define EPWRTZ1CTL_SEL4PWM_Msk  (0x7U << EPWRTZ1CTL_SEL4PWM_Pos)

#define EPWRTZ1CTL_SEL4PWM_ORIGINAL                     ((0x000U) << EPWRTZ1CTL_SEL4PWM_Pos)
#define EPWRTZ1CTL_SEL4PWM_SYNC                         ((0x001U) << EPWRTZ1CTL_SEL4PWM_Pos)
#define EPWRTZ1CTL_SEL4PWM_FILTRED                      ((0x002U) << EPWRTZ1CTL_SEL4PWM_Pos)
#define EPWRTZ1CTL_SEL4PWM_LATCHED                      ((0x003U) << EPWRTZ1CTL_SEL4PWM_Pos)
#define EPWRTZ1CTL_SEL4PWM_ORIGINAL_OR_LATCHED          ((0x004U) << EPWRTZ1CTL_SEL4PWM_Pos)
#define EPWRTZ1CTL_SEL4PWM_SYNC_OR_LATCHED              ((0x005U) << EPWRTZ1CTL_SEL4PWM_Pos)
#define EPWRTZ1CTL_SEL4PWM_FILTERED_OR_LATCHED          ((0x006U) << EPWRTZ1CTL_SEL4PWM_Pos)
#define EPWRTZ1CTL_SEL4PWM_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << EPWRTZ1CTL_SEL4PWM_Pos)

#define EPWRTZ1CTL_SEL4PWM_(x)  (((x) << EPWRTZ1CTL_SEL4PWM_Pos) & EPWRTZ1CTL_SEL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      POL4PWM
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Trip-zone output polarity for PWM
  */
#define EPWRTZ1CTL_POL4PWM_Pos  (3)
#define EPWRTZ1CTL_POL4PWM_Msk  (0x1U << EPWRTZ1CTL_POL4PWM_Pos)

#define EPWRTZ1CTL_POL4PWM_ACTIVE_LOW   ((0x0U) << EPWRTZ1CTL_POL4PWM_Pos)
#define EPWRTZ1CTL_POL4PWM_ACTIVE_HIGH  ((0x1U) << EPWRTZ1CTL_POL4PWM_Pos)

#define EPWRTZ1CTL_POL4PWM_(x)  (((x) << EPWRTZ1CTL_POL4PWM_Pos) & EPWRTZ1CTL_POL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      SEL4GPIO
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Trip-zone output select for GPIO
  */
#define EPWRTZ1CTL_SEL4GPIO_Pos  (4)
#define EPWRTZ1CTL_SEL4GPIO_Msk  (0x7U << EPWRTZ1CTL_SEL4GPIO_Pos)

#define EPWRTZ1CTL_SEL4GPIO_ORIGINAL                     ((0x000U) << EPWRTZ1CTL_SEL4GPIO_Pos)
#define EPWRTZ1CTL_SEL4GPIO_SYNC                         ((0x001U) << EPWRTZ1CTL_SEL4GPIO_Pos)
#define EPWRTZ1CTL_SEL4GPIO_FILTRED                      ((0x002U) << EPWRTZ1CTL_SEL4GPIO_Pos)
#define EPWRTZ1CTL_SEL4GPIO_LATCHED                      ((0x003U) << EPWRTZ1CTL_SEL4GPIO_Pos)
#define EPWRTZ1CTL_SEL4GPIO_ORIGINAL_OR_LATCHED          ((0x004U) << EPWRTZ1CTL_SEL4GPIO_Pos)
#define EPWRTZ1CTL_SEL4GPIO_SYNC_OR_LATCHED              ((0x005U) << EPWRTZ1CTL_SEL4GPIO_Pos)
#define EPWRTZ1CTL_SEL4GPIO_FILTERED_OR_LATCHED          ((0x006U) << EPWRTZ1CTL_SEL4GPIO_Pos)
#define EPWRTZ1CTL_SEL4GPIO_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << EPWRTZ1CTL_SEL4GPIO_Pos)

#define EPWRTZ1CTL_SEL4GPIO_(x)  (((x) << EPWRTZ1CTL_SEL4GPIO_Pos) & EPWRTZ1CTL_SEL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      POL4GPIO
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Trip-zone output polarity for GPIO
  */
#define EPWRTZ1CTL_POL4GPIO_Pos  (7)
#define EPWRTZ1CTL_POL4GPIO_Msk  (0x1U << EPWRTZ1CTL_POL4GPIO_Pos)

#define EPWRTZ1CTL_POL4GPIO_ACTIVE_LOW   ((0x0U) << EPWRTZ1CTL_POL4GPIO_Pos)
#define EPWRTZ1CTL_POL4GPIO_ACTIVE_HIGH  ((0x1U) << EPWRTZ1CTL_POL4GPIO_Pos)

#define EPWRTZ1CTL_POL4GPIO_(x)  (((x) << EPWRTZ1CTL_POL4GPIO_Pos) & EPWRTZ1CTL_POL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      IE
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Trip-zone event input enable
  */
#define EPWRTZ1CTL_IE_Pos  (8)
#define EPWRTZ1CTL_IE_Msk  (0x1U << EPWRTZ1CTL_IE_Pos)

#define EPWRTZ1CTL_IE_DISABLE  ((0x0U) << EPWRTZ1CTL_IE_Pos)
#define EPWRTZ1CTL_IE_ENABLE   ((0x1U) << EPWRTZ1CTL_IE_Pos)

#define EPWRTZ1CTL_IE_(x)  (((x) << EPWRTZ1CTL_IE_Pos) & EPWRTZ1CTL_IE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      INPOL
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Trip-zone input polarity
  */
#define EPWRTZ1CTL_INPOL_Pos  (9)
#define EPWRTZ1CTL_INPOL_Msk  (0x1U << EPWRTZ1CTL_INPOL_Pos)

#define EPWRTZ1CTL_INPOL_ACTIVE_LOW   ((0x0U) << EPWRTZ1CTL_INPOL_Pos)
#define EPWRTZ1CTL_INPOL_ACTIVE_HIGH  ((0x1U) << EPWRTZ1CTL_INPOL_Pos)

#define EPWRTZ1CTL_INPOL_(x)  (((x) << EPWRTZ1CTL_INPOL_Pos) & EPWRTZ1CTL_INPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      SYNCCLREN
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Enable latched EPWRTZ1 status clear by PWMSYNC
  */
#define EPWRTZ1CTL_SYNCCLREN_Pos  (10)
#define EPWRTZ1CTL_SYNCCLREN_Msk  (0x1U << EPWRTZ1CTL_SYNCCLREN_Pos)

#define EPWRTZ1CTL_SYNCCLREN_DISABLE  ((0x0U) << EPWRTZ1CTL_SYNCCLREN_Pos)
#define EPWRTZ1CTL_SYNCCLREN_ENABLE   ((0x1U) << EPWRTZ1CTL_SYNCCLREN_Pos)

#define EPWRTZ1CTL_SYNCCLREN_(x)  (((x) << EPWRTZ1CTL_SYNCCLREN_Pos) & EPWRTZ1CTL_SYNCCLREN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      FLTDIV
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Filter's clock dividing ratio is (FLTDIV+1)
  */
#define EPWRTZ1CTL_FLTDIV_Pos  (11)
#define EPWRTZ1CTL_FLTDIV_Msk  (0x3FFU << EPWRTZ1CTL_FLTDIV_Pos)

#define EPWRTZ1CTL_FLTDIV_(x)  (((x) << EPWRTZ1CTL_FLTDIV_Pos) & EPWRTZ1CTL_FLTDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      FLTWIN
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Filter's window size is (FLTWIN+1) samples
  */
#define EPWRTZ1CTL_FLTWIN_Pos  (21)
#define EPWRTZ1CTL_FLTWIN_Msk  (0x1FU << EPWRTZ1CTL_FLTWIN_Pos)

#define EPWRTZ1CTL_FLTWIN_(x)  (((x) << EPWRTZ1CTL_FLTWIN_Pos) & EPWRTZ1CTL_FLTWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      FLTTH
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Filter's threhold is (FLTTH+1) 1's/0's for output to toggle
  */
#define EPWRTZ1CTL_FLTTH_Pos  (26)
#define EPWRTZ1CTL_FLTTH_Msk  (0x1FU << EPWRTZ1CTL_FLTTH_Pos)

#define EPWRTZ1CTL_FLTTH_(x)  (((x) << EPWRTZ1CTL_FLTTH_Pos) & EPWRTZ1CTL_FLTTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRTZ1CTL      FLTRST
  *  @access     EPWR->EPWRTZ1CTL
  *  @brief      Reset all registers in the filter with the input
  */
#define EPWRTZ1CTL_FLTRST_Pos  (31)
#define EPWRTZ1CTL_FLTRST_Msk  (0x1U << EPWRTZ1CTL_FLTRST_Pos)

#define EPWRTZ1CTL_FLTRST_NO_EFFECT  ((0x0U) << EPWRTZ1CTL_FLTRST_Pos)
#define EPWRTZ1CTL_FLTRST_RESET      ((0x1U) << EPWRTZ1CTL_FLTRST_Pos)

#define EPWRTZ1CTL_FLTRST_(x)  (((x) << EPWRTZ1CTL_FLTRST_Pos) & EPWRTZ1CTL_FLTRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         SCLKDIV
  *  @access     EPWR->EPWRCTL
  *  @brief      Set the serial interface clock dividing ratio from HCLK to (SCLKDIV+1)
  *              The minimum value is 1. Write 0 will be ignored.
  */
#define EPWRCTL_SCLKDIV_Pos  (0)
#define EPWRCTL_SCLKDIV_Msk  (0xFFU << EPWRCTL_SCLKDIV_Pos)


#define EPWRCTL_SCLKDIV_(x)  (((x) << EPWRCTL_SCLKDIV_Pos) & EPWRCTL_SCLKDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         SIFBC
  *  @access     EPWR->EPWRCTL
  *  @brief      Serial interface backward compatible mode
  */
#define EPWRCTL_SIFBC_Pos  (8)
#define EPWRCTL_SIFBC_Msk  (0x1U << EPWRCTL_SIFBC_Pos)

#define EPWRCTL_SIFBC_NORMAL      ((0x0U) << EPWRCTL_SIFBC_Pos)
#define EPWRCTL_SIFBC_COMPATIBLE  ((0x1U) << EPWRCTL_SIFBC_Pos)

#define EPWRCTL_SIFBC_(x)  (((x) << EPWRCTL_SIFBC_Pos) & EPWRCTL_SIFBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         CHKWKUP
  *  @access     EPWR->EPWRCTL
  *  @brief      Check wakeup condition when issue stop or sleep command
  */
#define EPWRCTL_CHKWKUP_Pos  (9)
#define EPWRCTL_CHKWKUP_Msk  (0x1U << EPWRCTL_CHKWKUP_Pos)

#define EPWRCTL_CHKWKUP_NO   ((0x0U) << EPWRCTL_CHKWKUP_Pos)
#define EPWRCTL_CHKWKUP_YES  ((0x1U) << EPWRCTL_CHKWKUP_Pos)

#define EPWRCTL_CHKWKUP_(x)  (((x) << EPWRCTL_CHKWKUP_Pos) & EPWRCTL_CHKWKUP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         TZSEL4GPIO
  *  @access     EPWR->EPWRCTL
  *  @brief      Select which TZ signal is to output to GPIO
  */
#define EPWRCTL_TZSEL4GPIO_Pos  (10)
#define EPWRCTL_TZSEL4GPIO_Msk  (0x1U << EPWRCTL_TZSEL4GPIO_Pos)

#define EPWRCTL_TZSEL4GPIO_EPWRTZ0  ((0x0U) << EPWRCTL_TZSEL4GPIO_Pos)
#define EPWRCTL_TZSEL4GPIO_EPWRTZ1  ((0x1U) << EPWRCTL_TZSEL4GPIO_Pos)

#define EPWRCTL_TZSEL4GPIO_(x)  (((x) << EPWRCTL_TZSEL4GPIO_Pos) & EPWRCTL_TZSEL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM0CLRTZ0
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM0 to clear the latched EPWRTZ0 status
  */
#define EPWRCTL_PWM0CLRTZ0_Pos  (16)
#define EPWRCTL_PWM0CLRTZ0_Msk  (0x1U << EPWRCTL_PWM0CLRTZ0_Pos)

#define EPWRCTL_PWM0CLRTZ0_DISABLE  ((0x0U) << EPWRCTL_PWM0CLRTZ0_Pos)
#define EPWRCTL_PWM0CLRTZ0_ENABLE   ((0x1U) << EPWRCTL_PWM0CLRTZ0_Pos)

#define EPWRCTL_PWM0CLRTZ0_(x)  (((x) << EPWRCTL_PWM0CLRTZ0_Pos) & EPWRCTL_PWM0CLRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM1CLRTZ0
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM1 to clear the latched EPWRTZ0 status
  */
#define EPWRCTL_PWM1CLRTZ0_Pos  (17)
#define EPWRCTL_PWM1CLRTZ0_Msk  (0x1U << EPWRCTL_PWM1CLRTZ0_Pos)

#define EPWRCTL_PWM1CLRTZ0_DISABLE  ((0x0U) << EPWRCTL_PWM1CLRTZ0_Pos)
#define EPWRCTL_PWM1CLRTZ0_ENABLE   ((0x1U) << EPWRCTL_PWM1CLRTZ0_Pos)

#define EPWRCTL_PWM1CLRTZ0_(x)  (((x) << EPWRCTL_PWM1CLRTZ0_Pos) & EPWRCTL_PWM1CLRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM2CLRTZ0
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM2 to clear the latched EPWRTZ0 status
  */
#define EPWRCTL_PWM2CLRTZ0_Pos  (18)
#define EPWRCTL_PWM2CLRTZ0_Msk  (0x1U << EPWRCTL_PWM2CLRTZ0_Pos)

#define EPWRCTL_PWM2CLRTZ0_DISABLE  ((0x0U) << EPWRCTL_PWM2CLRTZ0_Pos)
#define EPWRCTL_PWM2CLRTZ0_ENABLE   ((0x1U) << EPWRCTL_PWM2CLRTZ0_Pos)

#define EPWRCTL_PWM2CLRTZ0_(x)  (((x) << EPWRCTL_PWM2CLRTZ0_Pos) & EPWRCTL_PWM2CLRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM3CLRTZ0
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM3 to clear the latched EPWRTZ0 status
  */
#define EPWRCTL_PWM3CLRTZ0_Pos  (19)
#define EPWRCTL_PWM3CLRTZ0_Msk  (0x1U << EPWRCTL_PWM3CLRTZ0_Pos)

#define EPWRCTL_PWM3CLRTZ0_DISABLE  ((0x0U) << EPWRCTL_PWM3CLRTZ0_Pos)
#define EPWRCTL_PWM3CLRTZ0_ENABLE   ((0x1U) << EPWRCTL_PWM3CLRTZ0_Pos)

#define EPWRCTL_PWM3CLRTZ0_(x)  (((x) << EPWRCTL_PWM3CLRTZ0_Pos) & EPWRCTL_PWM3CLRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM0CLRTZ1
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM0 to clear the latched EPWRTZ1 status
  */
#define EPWRCTL_PWM0CLRTZ1_Pos  (24)
#define EPWRCTL_PWM0CLRTZ1_Msk  (0x1U << EPWRCTL_PWM0CLRTZ1_Pos)

#define EPWRCTL_PWM0CLRTZ1_DISABLE  ((0x0U) << EPWRCTL_PWM0CLRTZ1_Pos)
#define EPWRCTL_PWM0CLRTZ1_ENABLE   ((0x1U) << EPWRCTL_PWM0CLRTZ1_Pos)

#define EPWRCTL_PWM0CLRTZ1_(x)  (((x) << EPWRCTL_PWM0CLRTZ1_Pos) & EPWRCTL_PWM0CLRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM1CLRTZ1
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM1 to clear the latched EPWRTZ1 status
  */
#define EPWRCTL_PWM1CLRTZ1_Pos  (25)
#define EPWRCTL_PWM1CLRTZ1_Msk  (0x1U << EPWRCTL_PWM1CLRTZ1_Pos)

#define EPWRCTL_PWM1CLRTZ1_DISABLE  ((0x0U) << EPWRCTL_PWM1CLRTZ1_Pos)
#define EPWRCTL_PWM1CLRTZ1_ENABLE   ((0x1U) << EPWRCTL_PWM1CLRTZ1_Pos)

#define EPWRCTL_PWM1CLRTZ1_(x)  (((x) << EPWRCTL_PWM1CLRTZ1_Pos) & EPWRCTL_PWM1CLRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM2CLRTZ1
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM2 to clear the latched EPWRTZ1 status
  */
#define EPWRCTL_PWM2CLRTZ1_Pos  (26)
#define EPWRCTL_PWM2CLRTZ1_Msk  (0x1U << EPWRCTL_PWM2CLRTZ1_Pos)

#define EPWRCTL_PWM2CLRTZ1_DISABLE  ((0x0U) << EPWRCTL_PWM2CLRTZ1_Pos)
#define EPWRCTL_PWM2CLRTZ1_ENABLE   ((0x1U) << EPWRCTL_PWM2CLRTZ1_Pos)

#define EPWRCTL_PWM2CLRTZ1_(x)  (((x) << EPWRCTL_PWM2CLRTZ1_Pos) & EPWRCTL_PWM2CLRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRCTL         PWM3CLRTZ1
  *  @access     EPWR->EPWRCTL
  *  @brief      Enable SYNC from PWM3 to clear the latched EPWRTZ1 status
  */
#define EPWRCTL_PWM3CLRTZ1_Pos  (27)
#define EPWRCTL_PWM3CLRTZ1_Msk  (0x1U << EPWRCTL_PWM3CLRTZ1_Pos)

#define EPWRCTL_PWM3CLRTZ1_DISABLE  ((0x0U) << EPWRCTL_PWM3CLRTZ1_Pos)
#define EPWRCTL_PWM3CLRTZ1_ENABLE   ((0x1U) << EPWRCTL_PWM3CLRTZ1_Pos)

#define EPWRCTL_PWM3CLRTZ1_(x)  (((x) << EPWRCTL_PWM3CLRTZ1_Pos) & EPWRCTL_PWM3CLRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRSCTL        WDATA
  *  @access     EPWR->EPWRSCTL
  *  @brief      Data to write to ePower module for register with specified address.
  */
#define EPWRSCTL_WDATA_Pos  (0)
#define EPWRSCTL_WDATA_Msk  (0xFFFFU << EPWRSCTL_WDATA_Pos)

#define EPWRSCTL_WDATA_(x)  (((x) << EPWRSCTL_WDATA_Pos) & EPWRSCTL_WDATA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRSCTL        ADDR
  *  @access     EPWR->EPWRSCTL
  *  @brief      Register address to be read or write via the serial interface
  */
#define EPWRSCTL_ADDR_Pos  (16)
#define EPWRSCTL_ADDR_Msk  (0x3FU << EPWRSCTL_ADDR_Pos)

#define EPWRSCTL_ADDR_(x)  (((x) << EPWRSCTL_ADDR_Pos) & EPWRSCTL_ADDR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRSCTL        CMD
  *  @access     EPWR->EPWRSCTL
  *  @brief      Serial interface command.
  *              For command to write register shadow value, the register address and the
  *              register value to write should be also specified.
  *              For command to read register active value, the register address should be also
  *              specified.
  */
#define EPWRSCTL_CMD_Pos  (22)
#define EPWRSCTL_CMD_Msk  (0x7U << EPWRSCTL_CMD_Pos)

#define EPWRSCTL_CMD_GET_ID        ((0x000U) << EPWRSCTL_CMD_Pos)
#define EPWRSCTL_CMD_WRITE_SHADOW  ((0x001U) << EPWRSCTL_CMD_Pos)
#define EPWRSCTL_CMD_WRITE_ACTIVE  ((0x002U) << EPWRSCTL_CMD_Pos)
#define EPWRSCTL_CMD_READ_ACTIVE   ((0x003U) << EPWRSCTL_CMD_Pos)
#define EPWRSCTL_CMD_RESET_REG     ((0x004U) << EPWRSCTL_CMD_Pos)
#define EPWRSCTL_CMD_FEED_WDT      ((0x005U) << EPWRSCTL_CMD_Pos)
#define EPWRSCTL_CMD_STOP          ((0x006U) << EPWRSCTL_CMD_Pos)
#define EPWRSCTL_CMD_SLEEP         ((0x007U) << EPWRSCTL_CMD_Pos)

#define EPWRSCTL_CMD_(x)  (((x) << EPWRSCTL_CMD_Pos) & EPWRSCTL_CMD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRSCTL        WKEY
  *  @access     EPWR->EPWRSCTL
  *  @brief      Write key for this register
  *              Write 0x7F to this field results in:
  *              1. Update CMD, ADDR, WDATA fields of the register.
  *              2. Starts a new command execution
  *              3. Sets EPWRSTS register to 0x1.
  *              This filed is automatcally cleared to 0x0.
  */
#define EPWRSCTL_WKEY_Pos  (25)
#define EPWRSCTL_WKEY_Msk  (0x7FU << EPWRSCTL_WKEY_Pos)

#define EPWRSCTL_WKEY_(x)  (((x) << EPWRSCTL_WKEY_Pos) & EPWRSCTL_WKEY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRSRDAT       RDATA
  *  @access     EPWR->EPWRSRDAT
  *  @brief      ePower chip ID by GET_ID command or register value readback by RD_ACTIVE command
  */
#define EPWRSRDAT_RDATA_Pos  (0)
#define EPWRSRDAT_RDATA_Msk  (0xFFFFU << EPWRSRDAT_RDATA_Pos)

#define EPWRSRDAT_RDATA_(x)  (((x) << EPWRSRDAT_RDATA_Pos) & EPWRSRDAT_RDATA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRSSTS        BUSY
  *  @access     EPWR->EPWRSSTS
  *  @brief      ePower serial interface bus busy status
  */
#define EPWRSSTS_BUSY_Pos  (0)
#define EPWRSSTS_BUSY_Msk  (0x1U << EPWRSSTS_BUSY_Pos)

#define EPWRSSTS_BUSY_IDLE  ((0x0U) << EPWRSSTS_BUSY_Pos)
#define EPWRSSTS_BUSY_BUSY  ((0x1U) << EPWRSSTS_BUSY_Pos)

#define EPWRSSTS_BUSY_(x)  (((x) << EPWRSSTS_BUSY_Pos) & EPWRSSTS_BUSY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRSSTS        ERROR
  *  @access     EPWR->EPWRSSTS
  *  @brief      ePower serial interface error status for the latest communication
  */
#define EPWRSSTS_ERROR_Pos  (1)
#define EPWRSSTS_ERROR_Msk  (0x1U << EPWRSSTS_ERROR_Pos)

#define EPWRSSTS_ERROR_CORRECT  ((0x0U) << EPWRSSTS_ERROR_Pos)
#define EPWRSSTS_ERROR_ERROR    ((0x1U) << EPWRSSTS_ERROR_Pos)

#define EPWRSSTS_ERROR_(x)  (((x) << EPWRSSTS_ERROR_Pos) & EPWRSSTS_ERROR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              EPWR            EPWRREGKEY      KEY
  *  @access     EPWR->EPWRREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected registers
  */
#define EPWRREGKEY_KEY_Pos  (0)
#define EPWRREGKEY_KEY_Msk  (0xFFFFFFFFU << EPWRREGKEY_KEY_Pos)

#define EPWRREGKEY_KEY_(x)  (((x) << EPWRREGKEY_KEY_Pos) & EPWRREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      PHCOMP:                                                               */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPSTS       PHUFLT
  *  @access     PHCOMP->PHCOMPSTS
  *  @brief      U-phase realtime filtered output status
  */
#define PHCOMPSTS_PHUFLT_Pos  (0)
#define PHCOMPSTS_PHUFLT_Msk  (0x1U << PHCOMPSTS_PHUFLT_Pos)

#define PHCOMPSTS_PHUFLT_LOW   ((0x0U) << PHCOMPSTS_PHUFLT_Pos)
#define PHCOMPSTS_PHUFLT_HIGH  ((0x1U) << PHCOMPSTS_PHUFLT_Pos)

#define PHCOMPSTS_PHUFLT_(x)  (((x) << PHCOMPSTS_PHUFLT_Pos) & PHCOMPSTS_PHUFLT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPSTS       PHVFLT
  *  @access     PHCOMP->PHCOMPSTS
  *  @brief      V-phase realtime filtered output status
  */
#define PHCOMPSTS_PHVFLT_Pos  (1)
#define PHCOMPSTS_PHVFLT_Msk  (0x1U << PHCOMPSTS_PHVFLT_Pos)

#define PHCOMPSTS_PHVFLT_LOW   ((0x0U) << PHCOMPSTS_PHVFLT_Pos)
#define PHCOMPSTS_PHVFLT_HIGH  ((0x1U) << PHCOMPSTS_PHVFLT_Pos)

#define PHCOMPSTS_PHVFLT_(x)  (((x) << PHCOMPSTS_PHVFLT_Pos) & PHCOMPSTS_PHVFLT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPSTS       PHWFLT
  *  @access     PHCOMP->PHCOMPSTS
  *  @brief      W-phase realtime filtered output status
  */
#define PHCOMPSTS_PHWFLT_Pos  (2)
#define PHCOMPSTS_PHWFLT_Msk  (0x1U << PHCOMPSTS_PHWFLT_Pos)

#define PHCOMPSTS_PHWFLT_LOW   ((0x0U) << PHCOMPSTS_PHWFLT_Pos)
#define PHCOMPSTS_PHWFLT_HIGH  ((0x1U) << PHCOMPSTS_PHWFLT_Pos)

#define PHCOMPSTS_PHWFLT_(x)  (((x) << PHCOMPSTS_PHWFLT_Pos) & PHCOMPSTS_PHWFLT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPSTS       PHURAW
  *  @access     PHCOMP->PHCOMPSTS
  *  @brief      U-phase realtime original output status
  */
#define PHCOMPSTS_PHURAW_Pos  (3)
#define PHCOMPSTS_PHURAW_Msk  (0x1U << PHCOMPSTS_PHURAW_Pos)

#define PHCOMPSTS_PHURAW_LOW   ((0x0U) << PHCOMPSTS_PHURAW_Pos)
#define PHCOMPSTS_PHURAW_HIGH  ((0x1U) << PHCOMPSTS_PHURAW_Pos)

#define PHCOMPSTS_PHURAW_(x)  (((x) << PHCOMPSTS_PHURAW_Pos) & PHCOMPSTS_PHURAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPSTS       PHVRAW
  *  @access     PHCOMP->PHCOMPSTS
  *  @brief      V-phase realtime original output status
  */
#define PHCOMPSTS_PHVRAW_Pos  (4)
#define PHCOMPSTS_PHVRAW_Msk  (0x1U << PHCOMPSTS_PHVRAW_Pos)

#define PHCOMPSTS_PHVRAW_LOW   ((0x0U) << PHCOMPSTS_PHVRAW_Pos)
#define PHCOMPSTS_PHVRAW_HIGH  ((0x1U) << PHCOMPSTS_PHVRAW_Pos)

#define PHCOMPSTS_PHVRAW_(x)  (((x) << PHCOMPSTS_PHVRAW_Pos) & PHCOMPSTS_PHVRAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPSTS       PHWRAW
  *  @access     PHCOMP->PHCOMPSTS
  *  @brief      W-phase realtime original output status
  */
#define PHCOMPSTS_PHWRAW_Pos  (5)
#define PHCOMPSTS_PHWRAW_Msk  (0x1U << PHCOMPSTS_PHWRAW_Pos)

#define PHCOMPSTS_PHWRAW_LOW   ((0x0U) << PHCOMPSTS_PHWRAW_Pos)
#define PHCOMPSTS_PHWRAW_HIGH  ((0x1U) << PHCOMPSTS_PHWRAW_Pos)

#define PHCOMPSTS_PHWRAW_(x)  (((x) << PHCOMPSTS_PHWRAW_Pos) & PHCOMPSTS_PHWRAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRAWIF     PHUZCL
  *  @access     PHCOMP->PHCOMPRAWIF
  *  @brief      U-Phase zero-cross to low event flag
  */
#define PHCOMPRAWIF_PHUZCL_Pos  (0)
#define PHCOMPRAWIF_PHUZCL_Msk  (0x1U << PHCOMPRAWIF_PHUZCL_Pos)

#define PHCOMPRAWIF_PHUZCL_NOT_OCCUR  ((0x0U) << PHCOMPRAWIF_PHUZCL_Pos)
#define PHCOMPRAWIF_PHUZCL_OCCUR      ((0x1U) << PHCOMPRAWIF_PHUZCL_Pos)

#define PHCOMPRAWIF_PHUZCL_(x)  (((x) << PHCOMPRAWIF_PHUZCL_Pos) & PHCOMPRAWIF_PHUZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRAWIF     PHUZCH
  *  @access     PHCOMP->PHCOMPRAWIF
  *  @brief      U-Phase zero-cross to high event flag
  */
#define PHCOMPRAWIF_PHUZCH_Pos  (1)
#define PHCOMPRAWIF_PHUZCH_Msk  (0x1U << PHCOMPRAWIF_PHUZCH_Pos)

#define PHCOMPRAWIF_PHUZCH_NOT_OCCUR  ((0x0U) << PHCOMPRAWIF_PHUZCH_Pos)
#define PHCOMPRAWIF_PHUZCH_OCCUR      ((0x1U) << PHCOMPRAWIF_PHUZCH_Pos)

#define PHCOMPRAWIF_PHUZCH_(x)  (((x) << PHCOMPRAWIF_PHUZCH_Pos) & PHCOMPRAWIF_PHUZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRAWIF     PHVZCL
  *  @access     PHCOMP->PHCOMPRAWIF
  *  @brief      V-phase zero-cross to low event flag
  */
#define PHCOMPRAWIF_PHVZCL_Pos  (2)
#define PHCOMPRAWIF_PHVZCL_Msk  (0x1U << PHCOMPRAWIF_PHVZCL_Pos)

#define PHCOMPRAWIF_PHVZCL_NOT_OCCUR  ((0x0U) << PHCOMPRAWIF_PHVZCL_Pos)
#define PHCOMPRAWIF_PHVZCL_OCCUR      ((0x1U) << PHCOMPRAWIF_PHVZCL_Pos)

#define PHCOMPRAWIF_PHVZCL_(x)  (((x) << PHCOMPRAWIF_PHVZCL_Pos) & PHCOMPRAWIF_PHVZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRAWIF     PHVZCH
  *  @access     PHCOMP->PHCOMPRAWIF
  *  @brief      V-phase zero-cross to high event flag
  */
#define PHCOMPRAWIF_PHVZCH_Pos  (3)
#define PHCOMPRAWIF_PHVZCH_Msk  (0x1U << PHCOMPRAWIF_PHVZCH_Pos)

#define PHCOMPRAWIF_PHVZCH_NOT_OCCUR  ((0x0U) << PHCOMPRAWIF_PHVZCH_Pos)
#define PHCOMPRAWIF_PHVZCH_OCCUR      ((0x1U) << PHCOMPRAWIF_PHVZCH_Pos)

#define PHCOMPRAWIF_PHVZCH_(x)  (((x) << PHCOMPRAWIF_PHVZCH_Pos) & PHCOMPRAWIF_PHVZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRAWIF     PHWZCL
  *  @access     PHCOMP->PHCOMPRAWIF
  *  @brief      W-phase zero-cross to low event flag
  */
#define PHCOMPRAWIF_PHWZCL_Pos  (4)
#define PHCOMPRAWIF_PHWZCL_Msk  (0x1U << PHCOMPRAWIF_PHWZCL_Pos)

#define PHCOMPRAWIF_PHWZCL_NOT_OCCUR  ((0x0U) << PHCOMPRAWIF_PHWZCL_Pos)
#define PHCOMPRAWIF_PHWZCL_OCCUR      ((0x1U) << PHCOMPRAWIF_PHWZCL_Pos)

#define PHCOMPRAWIF_PHWZCL_(x)  (((x) << PHCOMPRAWIF_PHWZCL_Pos) & PHCOMPRAWIF_PHWZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRAWIF     PHWZCH
  *  @access     PHCOMP->PHCOMPRAWIF
  *  @brief      W-phase zero-cross to high event flag
  */
#define PHCOMPRAWIF_PHWZCH_Pos  (5)
#define PHCOMPRAWIF_PHWZCH_Msk  (0x1U << PHCOMPRAWIF_PHWZCH_Pos)

#define PHCOMPRAWIF_PHWZCH_NOT_OCCUR  ((0x0U) << PHCOMPRAWIF_PHWZCH_Pos)
#define PHCOMPRAWIF_PHWZCH_OCCUR      ((0x1U) << PHCOMPRAWIF_PHWZCH_Pos)

#define PHCOMPRAWIF_PHWZCH_(x)  (((x) << PHCOMPRAWIF_PHWZCH_Pos) & PHCOMPRAWIF_PHWZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIF        PHUZCL
  *  @access     PHCOMP->PHCOMPIF
  *  @brief      U-Phase zero-cross to low interrupt flag
  */
#define PHCOMPIF_PHUZCL_Pos  (0)
#define PHCOMPIF_PHUZCL_Msk  (0x1U << PHCOMPIF_PHUZCL_Pos)

#define PHCOMPIF_PHUZCL_NOT_OCCUR  ((0x0U) << PHCOMPIF_PHUZCL_Pos)
#define PHCOMPIF_PHUZCL_OCCUR      ((0x1U) << PHCOMPIF_PHUZCL_Pos)

#define PHCOMPIF_PHUZCL_(x)  (((x) << PHCOMPIF_PHUZCL_Pos) & PHCOMPIF_PHUZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIF        PHUZCH
  *  @access     PHCOMP->PHCOMPIF
  *  @brief      V-phase zero-cross to high interrupt flag
  */
#define PHCOMPIF_PHUZCH_Pos  (1)
#define PHCOMPIF_PHUZCH_Msk  (0x1U << PHCOMPIF_PHUZCH_Pos)

#define PHCOMPIF_PHUZCH_NOT_OCCUR  ((0x0U) << PHCOMPIF_PHUZCH_Pos)
#define PHCOMPIF_PHUZCH_OCCUR      ((0x1U) << PHCOMPIF_PHUZCH_Pos)

#define PHCOMPIF_PHUZCH_(x)  (((x) << PHCOMPIF_PHUZCH_Pos) & PHCOMPIF_PHUZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIF        PHVZCL
  *  @access     PHCOMP->PHCOMPIF
  *  @brief      V-phase zero-cross to low interrupt flag
  */
#define PHCOMPIF_PHVZCL_Pos  (2)
#define PHCOMPIF_PHVZCL_Msk  (0x1U << PHCOMPIF_PHVZCL_Pos)

#define PHCOMPIF_PHVZCL_NOT_OCCUR  ((0x0U) << PHCOMPIF_PHVZCL_Pos)
#define PHCOMPIF_PHVZCL_OCCUR      ((0x1U) << PHCOMPIF_PHVZCL_Pos)

#define PHCOMPIF_PHVZCL_(x)  (((x) << PHCOMPIF_PHVZCL_Pos) & PHCOMPIF_PHVZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIF        PHVZCH
  *  @access     PHCOMP->PHCOMPIF
  *  @brief      V-phase zero-cross to high interrupt flag
  */
#define PHCOMPIF_PHVZCH_Pos  (3)
#define PHCOMPIF_PHVZCH_Msk  (0x1U << PHCOMPIF_PHVZCH_Pos)

#define PHCOMPIF_PHVZCH_NOT_OCCUR  ((0x0U) << PHCOMPIF_PHVZCH_Pos)
#define PHCOMPIF_PHVZCH_OCCUR      ((0x1U) << PHCOMPIF_PHVZCH_Pos)

#define PHCOMPIF_PHVZCH_(x)  (((x) << PHCOMPIF_PHVZCH_Pos) & PHCOMPIF_PHVZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIF        PHWZCL
  *  @access     PHCOMP->PHCOMPIF
  *  @brief      W-phase zero-cross to low interrupt flag
  */
#define PHCOMPIF_PHWZCL_Pos  (4)
#define PHCOMPIF_PHWZCL_Msk  (0x1U << PHCOMPIF_PHWZCL_Pos)

#define PHCOMPIF_PHWZCL_NOT_OCCUR  ((0x0U) << PHCOMPIF_PHWZCL_Pos)
#define PHCOMPIF_PHWZCL_OCCUR      ((0x1U) << PHCOMPIF_PHWZCL_Pos)

#define PHCOMPIF_PHWZCL_(x)  (((x) << PHCOMPIF_PHWZCL_Pos) & PHCOMPIF_PHWZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIF        PHWZCH
  *  @access     PHCOMP->PHCOMPIF
  *  @brief      W-phase zero-cross to high interrupt flag
  */
#define PHCOMPIF_PHWZCH_Pos  (5)
#define PHCOMPIF_PHWZCH_Msk  (0x1U << PHCOMPIF_PHWZCH_Pos)

#define PHCOMPIF_PHWZCH_NOT_OCCUR  ((0x0U) << PHCOMPIF_PHWZCH_Pos)
#define PHCOMPIF_PHWZCH_OCCUR      ((0x1U) << PHCOMPIF_PHWZCH_Pos)

#define PHCOMPIF_PHWZCH_(x)  (((x) << PHCOMPIF_PHWZCH_Pos) & PHCOMPIF_PHWZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIF        INT
  *  @access     PHCOMP->PHCOMPIF
  *  @brief      Global phase comparison interrupt flag
  */
#define PHCOMPIF_INT_Pos  (6)
#define PHCOMPIF_INT_Msk  (0x1U << PHCOMPIF_INT_Pos)

#define PHCOMPIF_INT_NOT_OCCUR  ((0x0U) << PHCOMPIF_INT_Pos)
#define PHCOMPIF_INT_OCCUR      ((0x1U) << PHCOMPIF_INT_Pos)

#define PHCOMPIF_INT_(x)  (((x) << PHCOMPIF_INT_Pos) & PHCOMPIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIC        PHUZCL
  *  @access     PHCOMP->PHCOMPIC
  *  @brief      U-Phase zero-cross to low interrupt clear
  */
#define PHCOMPIC_PHUZCL_Pos  (0)
#define PHCOMPIC_PHUZCL_Msk  (0x1U << PHCOMPIC_PHUZCL_Pos)

#define PHCOMPIC_PHUZCL_NO_EFFECT  ((0x0U) << PHCOMPIC_PHUZCL_Pos)
#define PHCOMPIC_PHUZCL_CLEAR      ((0x1U) << PHCOMPIC_PHUZCL_Pos)

#define PHCOMPIC_PHUZCL_(x)  (((x) << PHCOMPIC_PHUZCL_Pos) & PHCOMPIC_PHUZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIC        PHUZCH
  *  @access     PHCOMP->PHCOMPIC
  *  @brief      V-phase zero-cross to high interrupt clear
  */
#define PHCOMPIC_PHUZCH_Pos  (1)
#define PHCOMPIC_PHUZCH_Msk  (0x1U << PHCOMPIC_PHUZCH_Pos)

#define PHCOMPIC_PHUZCH_NO_EFFECT  ((0x0U) << PHCOMPIC_PHUZCH_Pos)
#define PHCOMPIC_PHUZCH_CLEAR      ((0x1U) << PHCOMPIC_PHUZCH_Pos)

#define PHCOMPIC_PHUZCH_(x)  (((x) << PHCOMPIC_PHUZCH_Pos) & PHCOMPIC_PHUZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIC        PHVZCL
  *  @access     PHCOMP->PHCOMPIC
  *  @brief      V-phase zero-cross to low interrupt clear
  */
#define PHCOMPIC_PHVZCL_Pos  (2)
#define PHCOMPIC_PHVZCL_Msk  (0x1U << PHCOMPIC_PHVZCL_Pos)

#define PHCOMPIC_PHVZCL_NO_EFFECT  ((0x0U) << PHCOMPIC_PHVZCL_Pos)
#define PHCOMPIC_PHVZCL_CLEAR      ((0x1U) << PHCOMPIC_PHVZCL_Pos)

#define PHCOMPIC_PHVZCL_(x)  (((x) << PHCOMPIC_PHVZCL_Pos) & PHCOMPIC_PHVZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIC        PHVZCH
  *  @access     PHCOMP->PHCOMPIC
  *  @brief      V-phase zero-cross to high interrupt clear
  */
#define PHCOMPIC_PHVZCH_Pos  (3)
#define PHCOMPIC_PHVZCH_Msk  (0x1U << PHCOMPIC_PHVZCH_Pos)

#define PHCOMPIC_PHVZCH_NO_EFFECT  ((0x0U) << PHCOMPIC_PHVZCH_Pos)
#define PHCOMPIC_PHVZCH_CLEAR      ((0x1U) << PHCOMPIC_PHVZCH_Pos)

#define PHCOMPIC_PHVZCH_(x)  (((x) << PHCOMPIC_PHVZCH_Pos) & PHCOMPIC_PHVZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIC        PHWZCL
  *  @access     PHCOMP->PHCOMPIC
  *  @brief      W-Phase zero-cross to low interrupt clear
  */
#define PHCOMPIC_PHWZCL_Pos  (4)
#define PHCOMPIC_PHWZCL_Msk  (0x1U << PHCOMPIC_PHWZCL_Pos)

#define PHCOMPIC_PHWZCL_NO_EFFECT  ((0x0U) << PHCOMPIC_PHWZCL_Pos)
#define PHCOMPIC_PHWZCL_CLEAR      ((0x1U) << PHCOMPIC_PHWZCL_Pos)

#define PHCOMPIC_PHWZCL_(x)  (((x) << PHCOMPIC_PHWZCL_Pos) & PHCOMPIC_PHWZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIC        PHWZCH
  *  @access     PHCOMP->PHCOMPIC
  *  @brief      W-Phase zero-cross to high interrupt clear
  */
#define PHCOMPIC_PHWZCH_Pos  (5)
#define PHCOMPIC_PHWZCH_Msk  (0x1U << PHCOMPIC_PHWZCH_Pos)

#define PHCOMPIC_PHWZCH_NO_EFFECT  ((0x0U) << PHCOMPIC_PHWZCH_Pos)
#define PHCOMPIC_PHWZCH_CLEAR      ((0x1U) << PHCOMPIC_PHWZCH_Pos)

#define PHCOMPIC_PHWZCH_(x)  (((x) << PHCOMPIC_PHWZCH_Pos) & PHCOMPIC_PHWZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIC        INT
  *  @access     PHCOMP->PHCOMPIC
  *  @brief      Global phase comparison interrupt clear
  */
#define PHCOMPIC_INT_Pos  (6)
#define PHCOMPIC_INT_Msk  (0x1U << PHCOMPIC_INT_Pos)

#define PHCOMPIC_INT_NO_EFFECT  ((0x0U) << PHCOMPIC_INT_Pos)
#define PHCOMPIC_INT_CLEAR      ((0x1U) << PHCOMPIC_INT_Pos)

#define PHCOMPIC_INT_(x)  (((x) << PHCOMPIC_INT_Pos) & PHCOMPIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIE        PHUZCL
  *  @access     PHCOMP->PHCOMPIE
  *  @brief      U-Phase zero-cross to low interrupt enable
  */
#define PHCOMPIE_PHUZCL_Pos  (0)
#define PHCOMPIE_PHUZCL_Msk  (0x1U << PHCOMPIE_PHUZCL_Pos)

#define PHCOMPIE_PHUZCL_DISABLE  ((0x0U) << PHCOMPIE_PHUZCL_Pos)
#define PHCOMPIE_PHUZCL_ENABLE   ((0x1U) << PHCOMPIE_PHUZCL_Pos)

#define PHCOMPIE_PHUZCL_(x)  (((x) << PHCOMPIE_PHUZCL_Pos) & PHCOMPIE_PHUZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIE        PHUZCH
  *  @access     PHCOMP->PHCOMPIE
  *  @brief      U-phase zero-cross to high interrupt enable
  */
#define PHCOMPIE_PHUZCH_Pos  (1)
#define PHCOMPIE_PHUZCH_Msk  (0x1U << PHCOMPIE_PHUZCH_Pos)

#define PHCOMPIE_PHUZCH_DISABLE  ((0x0U) << PHCOMPIE_PHUZCH_Pos)
#define PHCOMPIE_PHUZCH_ENABLE   ((0x1U) << PHCOMPIE_PHUZCH_Pos)

#define PHCOMPIE_PHUZCH_(x)  (((x) << PHCOMPIE_PHUZCH_Pos) & PHCOMPIE_PHUZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIE        PHVZCL
  *  @access     PHCOMP->PHCOMPIE
  *  @brief      V-phase zero-cross to low interrupt enable
  */
#define PHCOMPIE_PHVZCL_Pos  (2)
#define PHCOMPIE_PHVZCL_Msk  (0x1U << PHCOMPIE_PHVZCL_Pos)

#define PHCOMPIE_PHVZCL_DISABLE  ((0x0U) << PHCOMPIE_PHVZCL_Pos)
#define PHCOMPIE_PHVZCL_ENABLE   ((0x1U) << PHCOMPIE_PHVZCL_Pos)

#define PHCOMPIE_PHVZCL_(x)  (((x) << PHCOMPIE_PHVZCL_Pos) & PHCOMPIE_PHVZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIE        PHVZCH
  *  @access     PHCOMP->PHCOMPIE
  *  @brief      V-phase zero-cross to high interrupt enable
  */
#define PHCOMPIE_PHVZCH_Pos  (3)
#define PHCOMPIE_PHVZCH_Msk  (0x1U << PHCOMPIE_PHVZCH_Pos)

#define PHCOMPIE_PHVZCH_DISABLE  ((0x0U) << PHCOMPIE_PHVZCH_Pos)
#define PHCOMPIE_PHVZCH_ENABLE   ((0x1U) << PHCOMPIE_PHVZCH_Pos)

#define PHCOMPIE_PHVZCH_(x)  (((x) << PHCOMPIE_PHVZCH_Pos) & PHCOMPIE_PHVZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIE        PHWZCL
  *  @access     PHCOMP->PHCOMPIE
  *  @brief      W-Phase zero-cross to low interrupt enable
  */
#define PHCOMPIE_PHWZCL_Pos  (4)
#define PHCOMPIE_PHWZCL_Msk  (0x1U << PHCOMPIE_PHWZCL_Pos)

#define PHCOMPIE_PHWZCL_DISABLE  ((0x0U) << PHCOMPIE_PHWZCL_Pos)
#define PHCOMPIE_PHWZCL_ENABLE   ((0x1U) << PHCOMPIE_PHWZCL_Pos)

#define PHCOMPIE_PHWZCL_(x)  (((x) << PHCOMPIE_PHWZCL_Pos) & PHCOMPIE_PHWZCL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPIE        PHWZCH
  *  @access     PHCOMP->PHCOMPIE
  *  @brief      W-Phase zero-cross to high interrupt enable
  */
#define PHCOMPIE_PHWZCH_Pos  (5)
#define PHCOMPIE_PHWZCH_Msk  (0x1U << PHCOMPIE_PHWZCH_Pos)

#define PHCOMPIE_PHWZCH_DISABLE  ((0x0U) << PHCOMPIE_PHWZCH_Pos)
#define PHCOMPIE_PHWZCH_ENABLE   ((0x1U) << PHCOMPIE_PHWZCH_Pos)

#define PHCOMPIE_PHWZCH_(x)  (((x) << PHCOMPIE_PHWZCH_Pos) & PHCOMPIE_PHWZCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PHUEN
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      U-phase comparitor enable
  */
#define PHCOMPCTL_PHUEN_Pos  (0)
#define PHCOMPCTL_PHUEN_Msk  (0x1U << PHCOMPCTL_PHUEN_Pos)

#define PHCOMPCTL_PHUEN_DISABLE  ((0x0U) << PHCOMPCTL_PHUEN_Pos)
#define PHCOMPCTL_PHUEN_ENABLE   ((0x1U) << PHCOMPCTL_PHUEN_Pos)

#define PHCOMPCTL_PHUEN_(x)  (((x) << PHCOMPCTL_PHUEN_Pos) & PHCOMPCTL_PHUEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PHUSEL
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      U-Phase comparitor input channel select
  */
#define PHCOMPCTL_PHUSEL_Pos  (1)
#define PHCOMPCTL_PHUSEL_Msk  (0x7U << PHCOMPCTL_PHUSEL_Pos)

#define PHCOMPCTL_PHUSEL_PHU      ((0x000U) << PHCOMPCTL_PHUSEL_Pos)
#define PHCOMPCTL_PHUSEL_PHV      ((0x001U) << PHCOMPCTL_PHUSEL_Pos)
#define PHCOMPCTL_PHUSEL_PHW      ((0x002U) << PHCOMPCTL_PHUSEL_Pos)
#define PHCOMPCTL_PHUSEL_ANA_IN0  ((0x003U) << PHCOMPCTL_PHUSEL_Pos)
#define PHCOMPCTL_PHUSEL_ANA_IN1  ((0x004U) << PHCOMPCTL_PHUSEL_Pos)
#define PHCOMPCTL_PHUSEL_ANA_IN2  ((0x005U) << PHCOMPCTL_PHUSEL_Pos)
#define PHCOMPCTL_PHUSEL_ANA_IN3  ((0x006U) << PHCOMPCTL_PHUSEL_Pos)
#define PHCOMPCTL_PHUSEL_ANA_IN4  ((0x007U) << PHCOMPCTL_PHUSEL_Pos)

#define PHCOMPCTL_PHUSEL_(x)  (((x) << PHCOMPCTL_PHUSEL_Pos) & PHCOMPCTL_PHUSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PHVEN
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      V-phase comparitor enable
  */
#define PHCOMPCTL_PHVEN_Pos  (4)
#define PHCOMPCTL_PHVEN_Msk  (0x1U << PHCOMPCTL_PHVEN_Pos)

#define PHCOMPCTL_PHVEN_DISABLE  ((0x0U) << PHCOMPCTL_PHVEN_Pos)
#define PHCOMPCTL_PHVEN_ENABLE   ((0x1U) << PHCOMPCTL_PHVEN_Pos)

#define PHCOMPCTL_PHVEN_(x)  (((x) << PHCOMPCTL_PHVEN_Pos) & PHCOMPCTL_PHVEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PHVSEL
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      V-Phase comparitor input channel select
  */
#define PHCOMPCTL_PHVSEL_Pos  (5)
#define PHCOMPCTL_PHVSEL_Msk  (0x7U << PHCOMPCTL_PHVSEL_Pos)

#define PHCOMPCTL_PHVSEL_PHU      ((0x000U) << PHCOMPCTL_PHVSEL_Pos)
#define PHCOMPCTL_PHVSEL_PHV      ((0x001U) << PHCOMPCTL_PHVSEL_Pos)
#define PHCOMPCTL_PHVSEL_PHW      ((0x002U) << PHCOMPCTL_PHVSEL_Pos)
#define PHCOMPCTL_PHVSEL_ANA_IN0  ((0x003U) << PHCOMPCTL_PHVSEL_Pos)
#define PHCOMPCTL_PHVSEL_ANA_IN1  ((0x004U) << PHCOMPCTL_PHVSEL_Pos)
#define PHCOMPCTL_PHVSEL_ANA_IN2  ((0x005U) << PHCOMPCTL_PHVSEL_Pos)
#define PHCOMPCTL_PHVSEL_ANA_IN3  ((0x006U) << PHCOMPCTL_PHVSEL_Pos)
#define PHCOMPCTL_PHVSEL_ANA_IN4  ((0x007U) << PHCOMPCTL_PHVSEL_Pos)

#define PHCOMPCTL_PHVSEL_(x)  (((x) << PHCOMPCTL_PHVSEL_Pos) & PHCOMPCTL_PHVSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PHWEN
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      W-phase comparion enable
  */
#define PHCOMPCTL_PHWEN_Pos  (8)
#define PHCOMPCTL_PHWEN_Msk  (0x1U << PHCOMPCTL_PHWEN_Pos)

#define PHCOMPCTL_PHWEN_DISABLE  ((0x0U) << PHCOMPCTL_PHWEN_Pos)
#define PHCOMPCTL_PHWEN_ENABLE   ((0x1U) << PHCOMPCTL_PHWEN_Pos)

#define PHCOMPCTL_PHWEN_(x)  (((x) << PHCOMPCTL_PHWEN_Pos) & PHCOMPCTL_PHWEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PHWSEL
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      W-Phase comparitor input channel select
  */
#define PHCOMPCTL_PHWSEL_Pos  (9)
#define PHCOMPCTL_PHWSEL_Msk  (0x7U << PHCOMPCTL_PHWSEL_Pos)

#define PHCOMPCTL_PHWSEL_PHU      ((0x000U) << PHCOMPCTL_PHWSEL_Pos)
#define PHCOMPCTL_PHWSEL_PHV      ((0x001U) << PHCOMPCTL_PHWSEL_Pos)
#define PHCOMPCTL_PHWSEL_PHW      ((0x002U) << PHCOMPCTL_PHWSEL_Pos)
#define PHCOMPCTL_PHWSEL_ANA_IN0  ((0x003U) << PHCOMPCTL_PHWSEL_Pos)
#define PHCOMPCTL_PHWSEL_ANA_IN1  ((0x004U) << PHCOMPCTL_PHWSEL_Pos)
#define PHCOMPCTL_PHWSEL_ANA_IN2  ((0x005U) << PHCOMPCTL_PHWSEL_Pos)
#define PHCOMPCTL_PHWSEL_ANA_IN3  ((0x006U) << PHCOMPCTL_PHWSEL_Pos)
#define PHCOMPCTL_PHWSEL_ANA_IN4  ((0x007U) << PHCOMPCTL_PHWSEL_Pos)

#define PHCOMPCTL_PHWSEL_(x)  (((x) << PHCOMPCTL_PHWSEL_Pos) & PHCOMPCTL_PHWSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PHREFSEL
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      Phase comparitor reference select
  */
#define PHCOMPCTL_PHREFSEL_Pos  (12)
#define PHCOMPCTL_PHREFSEL_Msk  (0x7U << PHCOMPCTL_PHREFSEL_Pos)

#define PHCOMPCTL_PHREFSEL_PHC      ((0x000U) << PHCOMPCTL_PHREFSEL_Pos)
#define PHCOMPCTL_PHREFSEL_DAC1     ((0x001U) << PHCOMPCTL_PHREFSEL_Pos)
#define PHCOMPCTL_PHREFSEL_DAC2     ((0x002U) << PHCOMPCTL_PHREFSEL_Pos)
#define PHCOMPCTL_PHREFSEL_ANA_IN0  ((0x003U) << PHCOMPCTL_PHREFSEL_Pos)
#define PHCOMPCTL_PHREFSEL_ANA_IN1  ((0x004U) << PHCOMPCTL_PHREFSEL_Pos)
#define PHCOMPCTL_PHREFSEL_ANA_IN2  ((0x005U) << PHCOMPCTL_PHREFSEL_Pos)
#define PHCOMPCTL_PHREFSEL_ANA_IN3  ((0x006U) << PHCOMPCTL_PHREFSEL_Pos)
#define PHCOMPCTL_PHREFSEL_ANA_IN4  ((0x007U) << PHCOMPCTL_PHREFSEL_Pos)

#define PHCOMPCTL_PHREFSEL_(x)  (((x) << PHCOMPCTL_PHREFSEL_Pos) & PHCOMPCTL_PHREFSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       HYSTSEL
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      Comparitor hysterisis select
  */
#define PHCOMPCTL_HYSTSEL_Pos  (15)
#define PHCOMPCTL_HYSTSEL_Msk  (0x3U << PHCOMPCTL_HYSTSEL_Pos)

#define PHCOMPCTL_HYSTSEL_0_MV   ((0x00U) << PHCOMPCTL_HYSTSEL_Pos)
#define PHCOMPCTL_HYSTSEL_12_MV  ((0x01U) << PHCOMPCTL_HYSTSEL_Pos)
#define PHCOMPCTL_HYSTSEL_24_MV  ((0x02U) << PHCOMPCTL_HYSTSEL_Pos)
#define PHCOMPCTL_HYSTSEL_36_MV  ((0x03U) << PHCOMPCTL_HYSTSEL_Pos)

#define PHCOMPCTL_HYSTSEL_(x)  (((x) << PHCOMPCTL_HYSTSEL_Pos) & PHCOMPCTL_HYSTSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       MODE
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      Operation mode
  */
#define PHCOMPCTL_MODE_Pos  (17)
#define PHCOMPCTL_MODE_Msk  (0x1U << PHCOMPCTL_MODE_Pos)

#define PHCOMPCTL_MODE_BEMF_PHCOMP  ((0x0U) << PHCOMPCTL_MODE_Pos)
#define PHCOMPCTL_MODE_NORMAL_COMP  ((0x1U) << PHCOMPCTL_MODE_Pos)

#define PHCOMPCTL_MODE_(x)  (((x) << PHCOMPCTL_MODE_Pos) & PHCOMPCTL_MODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PWM0BLANK
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      Trigger blanking due to PWM0 toggling
  */
#define PHCOMPCTL_PWM0BLANK_Pos  (18)
#define PHCOMPCTL_PWM0BLANK_Msk  (0x1U << PHCOMPCTL_PWM0BLANK_Pos)

#define PHCOMPCTL_PWM0BLANK_DISABLE  ((0x0U) << PHCOMPCTL_PWM0BLANK_Pos)
#define PHCOMPCTL_PWM0BLANK_ENABLE   ((0x1U) << PHCOMPCTL_PWM0BLANK_Pos)

#define PHCOMPCTL_PWM0BLANK_(x)  (((x) << PHCOMPCTL_PWM0BLANK_Pos) & PHCOMPCTL_PWM0BLANK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PWM1BLANK
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      Trigger blanking due to PWM1 toggling
  */
#define PHCOMPCTL_PWM1BLANK_Pos  (19)
#define PHCOMPCTL_PWM1BLANK_Msk  (0x1U << PHCOMPCTL_PWM1BLANK_Pos)

#define PHCOMPCTL_PWM1BLANK_DISABLE  ((0x0U) << PHCOMPCTL_PWM1BLANK_Pos)
#define PHCOMPCTL_PWM1BLANK_ENABLE   ((0x1U) << PHCOMPCTL_PWM1BLANK_Pos)

#define PHCOMPCTL_PWM1BLANK_(x)  (((x) << PHCOMPCTL_PWM1BLANK_Pos) & PHCOMPCTL_PWM1BLANK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PWM2BLANK
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      Trigger blanking due to PWM2 toggling
  */
#define PHCOMPCTL_PWM2BLANK_Pos  (20)
#define PHCOMPCTL_PWM2BLANK_Msk  (0x1U << PHCOMPCTL_PWM2BLANK_Pos)

#define PHCOMPCTL_PWM2BLANK_DISABLE  ((0x0U) << PHCOMPCTL_PWM2BLANK_Pos)
#define PHCOMPCTL_PWM2BLANK_ENABLE   ((0x1U) << PHCOMPCTL_PWM2BLANK_Pos)

#define PHCOMPCTL_PWM2BLANK_(x)  (((x) << PHCOMPCTL_PWM2BLANK_Pos) & PHCOMPCTL_PWM2BLANK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPCTL       PWM3BLANK
  *  @access     PHCOMP->PHCOMPCTL
  *  @brief      Trigger blanking due to PWM3 toggling
  */
#define PHCOMPCTL_PWM3BLANK_Pos  (21)
#define PHCOMPCTL_PWM3BLANK_Msk  (0x1U << PHCOMPCTL_PWM3BLANK_Pos)

#define PHCOMPCTL_PWM3BLANK_DISABLE  ((0x0U) << PHCOMPCTL_PWM3BLANK_Pos)
#define PHCOMPCTL_PWM3BLANK_ENABLE   ((0x1U) << PHCOMPCTL_PWM3BLANK_Pos)

#define PHCOMPCTL_PWM3BLANK_(x)  (((x) << PHCOMPCTL_PWM3BLANK_Pos) & PHCOMPCTL_PWM3BLANK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPBLANK     OFFSET
  *  @access     PHCOMP->PHCOMPBLANK
  *  @brief      Blanking window offset referred to the toggling of all PWM outputs
  */
#define PHCOMPBLANK_OFFSET_Pos  (0)
#define PHCOMPBLANK_OFFSET_Msk  (0xFFFFU << PHCOMPBLANK_OFFSET_Pos)

#define PHCOMPBLANK_OFFSET_(x)  (((x) << PHCOMPBLANK_OFFSET_Pos) & PHCOMPBLANK_OFFSET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPBLANK     WINSIZE
  *  @access     PHCOMP->PHCOMPBLANK
  *  @brief      Blanking window size
  */
#define PHCOMPBLANK_WINSIZE_Pos  (16)
#define PHCOMPBLANK_WINSIZE_Msk  (0xFFFFU << PHCOMPBLANK_WINSIZE_Pos)

#define PHCOMPBLANK_WINSIZE_(x)  (((x) << PHCOMPBLANK_WINSIZE_Pos) & PHCOMPBLANK_WINSIZE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPFILTER    FLTDIV
  *  @access     PHCOMP->PHCOMPFILTER
  *  @brief      Set the filter's clock dividing ratio to (FLTDIV+1)
  */
#define PHCOMPFILTER_FLTDIV_Pos  (0)
#define PHCOMPFILTER_FLTDIV_Msk  (0x3FFU << PHCOMPFILTER_FLTDIV_Pos)

#define PHCOMPFILTER_FLTDIV_(x)  (((x) << PHCOMPFILTER_FLTDIV_Pos) & PHCOMPFILTER_FLTDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPFILTER    FLTWIN
  *  @access     PHCOMP->PHCOMPFILTER
  *  @brief      Set the filter's window size to (FLTWIN+1) samples
  */
#define PHCOMPFILTER_FLTWIN_Pos  (10)
#define PHCOMPFILTER_FLTWIN_Msk  (0x1FU << PHCOMPFILTER_FLTWIN_Pos)

#define PHCOMPFILTER_FLTWIN_(x)  (((x) << PHCOMPFILTER_FLTWIN_Pos) & PHCOMPFILTER_FLTWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPFILTER    FLTTH
  *  @access     PHCOMP->PHCOMPFILTER
  *  @brief      Set the filter's threhold to (FLTTH+1) 1's/0's for output to toggle
  */
#define PHCOMPFILTER_FLTTH_Pos  (15)
#define PHCOMPFILTER_FLTTH_Msk  (0x1FU << PHCOMPFILTER_FLTTH_Pos)

#define PHCOMPFILTER_FLTTH_(x)  (((x) << PHCOMPFILTER_FLTTH_Pos) & PHCOMPFILTER_FLTTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRST       PHURST
  *  @access     PHCOMP->PHCOMPRST
  *  @brief      Reset U-phase comparison state machine
  *              In BEMF phase comparitor mode, the 1st zero-cross event will be ignored after
  *              the reset pulse
  */
#define PHCOMPRST_PHURST_Pos  (0)
#define PHCOMPRST_PHURST_Msk  (0x1U << PHCOMPRST_PHURST_Pos)

#define PHCOMPRST_PHURST_NO_EFFECT  ((0x0U) << PHCOMPRST_PHURST_Pos)
#define PHCOMPRST_PHURST_RESET      ((0x1U) << PHCOMPRST_PHURST_Pos)

#define PHCOMPRST_PHURST_(x)  (((x) << PHCOMPRST_PHURST_Pos) & PHCOMPRST_PHURST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRST       PHVRST
  *  @access     PHCOMP->PHCOMPRST
  *  @brief      Reset V-phase comparison state machine
  *              In BEMF phase comparitor mode, the 1st zero-cross event will be ignored after
  *              the reset pulse
  */
#define PHCOMPRST_PHVRST_Pos  (1)
#define PHCOMPRST_PHVRST_Msk  (0x1U << PHCOMPRST_PHVRST_Pos)

#define PHCOMPRST_PHVRST_NO_EFFECT  ((0x0U) << PHCOMPRST_PHVRST_Pos)
#define PHCOMPRST_PHVRST_RESET      ((0x1U) << PHCOMPRST_PHVRST_Pos)

#define PHCOMPRST_PHVRST_(x)  (((x) << PHCOMPRST_PHVRST_Pos) & PHCOMPRST_PHVRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPRST       PHWRST
  *  @access     PHCOMP->PHCOMPRST
  *  @brief      Reset W-phase comparison state machine
  *              In BEMF phase comparitor mode, the 1st zero-cross event will be ignored after
  *              the reset pulse
  */
#define PHCOMPRST_PHWRST_Pos  (2)
#define PHCOMPRST_PHWRST_Msk  (0x1U << PHCOMPRST_PHWRST_Pos)

#define PHCOMPRST_PHWRST_NO_EFFECT  ((0x0U) << PHCOMPRST_PHWRST_Pos)
#define PHCOMPRST_PHWRST_RESET      ((0x1U) << PHCOMPRST_PHWRST_Pos)

#define PHCOMPRST_PHWRST_(x)  (((x) << PHCOMPRST_PHWRST_Pos) & PHCOMPRST_PHWRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PHCOMP          PHCOMPREGKEY    KEY
  *  @access     PHCOMP->PHCOMPREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected registers
  */
#define PHCOMPREGKEY_KEY_Pos  (0)
#define PHCOMPREGKEY_KEY_Msk  (0xFFFFFFFFU << PHCOMPREGKEY_KEY_Pos)

#define PHCOMPREGKEY_KEY_(x)  (((x) << PHCOMPREGKEY_KEY_Pos) & PHCOMPREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      ENGR:                                                                 */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ENGR            ADC1OFFSET      VAL
  *  @access     ENGR->ADC1OFFSET
  *  @brief      Offset trim, which is a signed number within [-4096, 4095]
  */
#define ADC1OFFSET_VAL_Pos  (0)
#define ADC1OFFSET_VAL_Msk  (0xFFFFFFFFU << ADC1OFFSET_VAL_Pos)

#define ADC1OFFSET_VAL_(x)  (((x) << ADC1OFFSET_VAL_Pos) & ADC1OFFSET_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ENGR            MEMECCEN        ROMECC
  *  @access     ENGR->MEMECCEN
  *  @brief      ROM ECC enable
  */
#define MEMECCEN_ROMECC_Pos  (0)
#define MEMECCEN_ROMECC_Msk  (0x1U << MEMECCEN_ROMECC_Pos)

#define MEMECCEN_ROMECC_DISABLE  ((0x0U) << MEMECCEN_ROMECC_Pos)
#define MEMECCEN_ROMECC_ENABLE   ((0x1U) << MEMECCEN_ROMECC_Pos)

#define MEMECCEN_ROMECC_(x)  (((x) << MEMECCEN_ROMECC_Pos) & MEMECCEN_ROMECC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ENGR            MEMECCEN        FLASHECC
  *  @access     ENGR->MEMECCEN
  *  @brief      FLASH ECC enable
  */
#define MEMECCEN_FLASHECC_Pos  (1)
#define MEMECCEN_FLASHECC_Msk  (0x1U << MEMECCEN_FLASHECC_Pos)

#define MEMECCEN_FLASHECC_DISABLE  ((0x0U) << MEMECCEN_FLASHECC_Pos)
#define MEMECCEN_FLASHECC_ENABLE   ((0x1U) << MEMECCEN_FLASHECC_Pos)

#define MEMECCEN_FLASHECC_(x)  (((x) << MEMECCEN_FLASHECC_Pos) & MEMECCEN_FLASHECC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ENGR            MEMECCEN        RAM0ECC
  *  @access     ENGR->MEMECCEN
  *  @brief      RAM0 ECC enable
  */
#define MEMECCEN_RAM0ECC_Pos  (2)
#define MEMECCEN_RAM0ECC_Msk  (0x1U << MEMECCEN_RAM0ECC_Pos)

#define MEMECCEN_RAM0ECC_DISABLE  ((0x0U) << MEMECCEN_RAM0ECC_Pos)
#define MEMECCEN_RAM0ECC_ENABLE   ((0x1U) << MEMECCEN_RAM0ECC_Pos)

#define MEMECCEN_RAM0ECC_(x)  (((x) << MEMECCEN_RAM0ECC_Pos) & MEMECCEN_RAM0ECC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ENGR            MEMECCEN        RAM1ECC
  *  @access     ENGR->MEMECCEN
  *  @brief      RAM1 ECC enable
  */
#define MEMECCEN_RAM1ECC_Pos  (3)
#define MEMECCEN_RAM1ECC_Msk  (0x1U << MEMECCEN_RAM1ECC_Pos)

#define MEMECCEN_RAM1ECC_DISABLE  ((0x0U) << MEMECCEN_RAM1ECC_Pos)
#define MEMECCEN_RAM1ECC_ENABLE   ((0x1U) << MEMECCEN_RAM1ECC_Pos)

#define MEMECCEN_RAM1ECC_(x)  (((x) << MEMECCEN_RAM1ECC_Pos) & MEMECCEN_RAM1ECC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ENGR            MEMECCEN        CANECC
  *  @access     ENGR->MEMECCEN
  *  @brief      CAN ECC enable
  */
#define MEMECCEN_CANECC_Pos  (4)
#define MEMECCEN_CANECC_Msk  (0x1U << MEMECCEN_CANECC_Pos)

#define MEMECCEN_CANECC_DISABLE  ((0x0U) << MEMECCEN_CANECC_Pos)
#define MEMECCEN_CANECC_ENABLE   ((0x1U) << MEMECCEN_CANECC_Pos)

#define MEMECCEN_CANECC_(x)  (((x) << MEMECCEN_CANECC_Pos) & MEMECCEN_CANECC_Msk)


/******************************************************************************/
/*                                                                            */
/*      WDT:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTLOAD         VAL
  *  @access     WDTx->WDTLOAD
  *  @brief      Load value (Minimum valid value is 1)
  *              The value from which the counter is to decrease. When this register is written
  *              to, the count is immediately restarted from the new value.
  */
#define WDTLOAD_VAL_Pos  (0)
#define WDTLOAD_VAL_Msk  (0xFFFFFFFFU << WDTLOAD_VAL_Pos)

#define WDTLOAD_VAL_(x)  (((x) << WDTLOAD_VAL_Pos) & WDTLOAD_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTCNT          VAL
  *  @access     WDTx->WDTCNT
  *  @brief      Current value of the decrementing counter.
  */
#define WDTCNT_VAL_Pos  (0)
#define WDTCNT_VAL_Msk  (0xFFFFFFFFU << WDTCNT_VAL_Pos)

#define WDTCNT_VAL_(x)  (((x) << WDTCNT_VAL_Pos) & WDTCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTCTL          EN
  *  @access     WDTx->WDTCTL
  *  @brief      Enable the watchdog counter
  */
#define WDTCTL_EN_Pos  (0)
#define WDTCTL_EN_Msk  (0x1U << WDTCTL_EN_Pos)

#define WDTCTL_EN_DISABLE  ((0x0U) << WDTCTL_EN_Pos)
#define WDTCTL_EN_ENABLE   ((0x1U) << WDTCTL_EN_Pos)

#define WDTCTL_EN_(x)  (((x) << WDTCTL_EN_Pos) & WDTCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTCTL          HALTEDRUN
  *  @access     WDTx->WDTCTL
  *  @brief      Allow watchdog to run during CPU halted mode
  */
#define WDTCTL_HALTEDRUN_Pos  (1)
#define WDTCTL_HALTEDRUN_Msk  (0x1U << WDTCTL_HALTEDRUN_Pos)

#define WDTCTL_HALTEDRUN_DISABLE  ((0x0U) << WDTCTL_HALTEDRUN_Pos)
#define WDTCTL_HALTEDRUN_ENABLE   ((0x1U) << WDTCTL_HALTEDRUN_Pos)

#define WDTCTL_HALTEDRUN_(x)  (((x) << WDTCTL_HALTEDRUN_Pos) & WDTCTL_HALTEDRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTCTL          LOCKUPRUN
  *  @access     WDTx->WDTCTL
  *  @brief      Allow watchdog to run during CPU lockup mode
  */
#define WDTCTL_LOCKUPRUN_Pos  (2)
#define WDTCTL_LOCKUPRUN_Msk  (0x1U << WDTCTL_LOCKUPRUN_Pos)

#define WDTCTL_LOCKUPRUN_DISABLE  ((0x0U) << WDTCTL_LOCKUPRUN_Pos)
#define WDTCTL_LOCKUPRUN_ENABLE   ((0x1U) << WDTCTL_LOCKUPRUN_Pos)

#define WDTCTL_LOCKUPRUN_(x)  (((x) << WDTCTL_LOCKUPRUN_Pos) & WDTCTL_LOCKUPRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTRAWIF        INT
  *  @access     WDTx->WDTRAWIF
  *  @brief      Raw interrupt flag from the counter
  *              The value is ANDed with WDTIE to create the masked interrupt, which is passed to
  *              the interrupt output pin.
  */
#define WDTRAWIF_INT_Pos  (0)
#define WDTRAWIF_INT_Msk  (0x1U << WDTRAWIF_INT_Pos)

#define WDTRAWIF_INT_NOT_OCCUR  ((0x0U) << WDTRAWIF_INT_Pos)
#define WDTRAWIF_INT_OCCUR      ((0x1U) << WDTRAWIF_INT_Pos)

#define WDTRAWIF_INT_(x)  (((x) << WDTRAWIF_INT_Pos) & WDTRAWIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTIF           INT
  *  @access     WDTx->WDTIF
  *  @brief      Interrupt flag from the counter
  *              The value is the logical AND of WDTRAWIF and WDTIE
  */
#define WDTIF_INT_Pos  (0)
#define WDTIF_INT_Msk  (0x1U << WDTIF_INT_Pos)

#define WDTIF_INT_NOT_OCCUR  ((0x0U) << WDTIF_INT_Pos)
#define WDTIF_INT_OCCUR      ((0x1U) << WDTIF_INT_Pos)

#define WDTIF_INT_(x)  (((x) << WDTIF_INT_Pos) & WDTIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTIC           INT
  *  @access     WDTx->WDTIC
  *  @brief      Clear interrupt.
  *              If write 1 to this bit when WDTCNT is within [WDTTHL, WDTTHH], the WDTCNT will
  *              be reset to WDTLOAD
  */
#define WDTIC_INT_Pos  (0)
#define WDTIC_INT_Msk  (0x1U << WDTIC_INT_Pos)

#define WDTIC_INT_NO_EFFECT  ((0x0U) << WDTIC_INT_Pos)
#define WDTIC_INT_CLEAR      ((0x1U) << WDTIC_INT_Pos)

#define WDTIC_INT_(x)  (((x) << WDTIC_INT_Pos) & WDTIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTIE           INT
  *  @access     WDTx->WDTIE
  *  @brief      Interrupt enable
  */
#define WDTIE_INT_Pos  (0)
#define WDTIE_INT_Msk  (0x1U << WDTIE_INT_Pos)

#define WDTIE_INT_DISABLE  ((0x0U) << WDTIE_INT_Pos)
#define WDTIE_INT_ENABLE   ((0x1U) << WDTIE_INT_Pos)

#define WDTIE_INT_(x)  (((x) << WDTIE_INT_Pos) & WDTIE_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTTHL          VAL
  *  @access     WDTx->WDTTHL
  *  @brief      Watchdog can be feed (via write a 1 to WDTIC) only when WDTCNT is within
  *              [WDTTHL, WDTTHH]
  */
#define WDTTHL_VAL_Pos  (0)
#define WDTTHL_VAL_Msk  (0xFFFFFFFFU << WDTTHL_VAL_Pos)

#define WDTTHL_VAL_(x)  (((x) << WDTTHL_VAL_Pos) & WDTTHL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTTHH          VAL
  *  @access     WDTx->WDTTHH
  *  @brief      Watchdog can be feed (via write a 1 to WDTIC) only when WDTCNT is within
  *              [WDTTHL, WDTTHH]
  */
#define WDTTHH_VAL_Pos  (0)
#define WDTTHH_VAL_Msk  (0xFFFFFFFFU << WDTTHH_VAL_Pos)

#define WDTTHH_VAL_(x)  (((x) << WDTTHH_VAL_Pos) & WDTTHH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              WDTx            WDTREGKEY       KEY
  *  @access     WDTx->WDTREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected watchdog registers
  */
#define WDTREGKEY_KEY_Pos  (0)
#define WDTREGKEY_KEY_Msk  (0xFFFFFFFFU << WDTREGKEY_KEY_Pos)

#define WDTREGKEY_KEY_(x)  (((x) << WDTREGKEY_KEY_Pos) & WDTREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      GPIO:                                                                 */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GPLR            VAL
  *  @access     GPIO->GPLR
  *  @brief      GPIO pin leve
  *              0: Write a 0 sets the pin level to low
  *              Read a 0 indicates current pin level is low
  *              1: Write a 1 sets the pin level to high
  *              Read a 1 indicates current pin level is high
  */
#define GPLR_VAL_Pos  (0)
#define GPLR_VAL_Msk  (0xFFFFFFFFU << GPLR_VAL_Pos)

#define GPLR_VAL_(x)  (((x) << GPLR_VAL_Pos) & GPLR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GSLR            VAL
  *  @access     GPIO->GSLR
  *  @brief      Set GPIO output to high
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 sets output to high. This bit is self-cleared to 0
  */
#define GSLR_VAL_Pos  (0)
#define GSLR_VAL_Msk  (0xFFFFFFFFU << GSLR_VAL_Pos)

#define GSLR_VAL_(x)  (((x) << GSLR_VAL_Pos) & GSLR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GCLR            VAL
  *  @access     GPIO->GCLR
  *  @brief      Clear GPIO output to low
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 clears output to low. This bit is self-cleared to 0
  */
#define GCLR_VAL_Pos  (0)
#define GCLR_VAL_Msk  (0xFFFFFFFFU << GCLR_VAL_Pos)

#define GCLR_VAL_(x)  (((x) << GCLR_VAL_Pos) & GCLR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GPDR            VAL
  *  @access     GPIO->GPDR
  *  @brief      Set GPIO direction
  *              0: Set GPIO as input
  *              1: Set GPIO as output
  */
#define GPDR_VAL_Pos  (0)
#define GPDR_VAL_Msk  (0xFFFFFFFFU << GPDR_VAL_Pos)

#define GPDR_VAL_(x)  (((x) << GPDR_VAL_Pos) & GPDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GSDR            VAL
  *  @access     GPIO->GSDR
  *  @brief      Set GPDR register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 sets GPDR bit. This bit is self-cleared to 0
  */
#define GSDR_VAL_Pos  (0)
#define GSDR_VAL_Msk  (0xFFFFFFFFU << GSDR_VAL_Pos)

#define GSDR_VAL_(x)  (((x) << GSDR_VAL_Pos) & GSDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GCDR            VAL
  *  @access     GPIO->GCDR
  *  @brief      Clear GPDR register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 clears GPDR bit. This bit is self-cleared to 0
  */
#define GCDR_VAL_Pos  (0)
#define GCDR_VAL_Msk  (0xFFFFFFFFU << GCDR_VAL_Pos)

#define GCDR_VAL_(x)  (((x) << GCDR_VAL_Pos) & GCDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GRER            VAL
  *  @access     GPIO->GRER
  *  @brief      Enable GPIO rising edge detection
  *              0: Disable rising edge detection on GPIO
  *              1: Enable rising edge detection on GPIO
  */
#define GRER_VAL_Pos  (0)
#define GRER_VAL_Msk  (0xFFFFFFFFU << GRER_VAL_Pos)

#define GRER_VAL_(x)  (((x) << GRER_VAL_Pos) & GRER_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GSRE            VAL
  *  @access     GPIO->GSRE
  *  @brief      Set GRER register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 sets GRER bit. This bit is self-cleared to 0
  */
#define GSRE_VAL_Pos  (0)
#define GSRE_VAL_Msk  (0xFFFFFFFFU << GSRE_VAL_Pos)

#define GSRE_VAL_(x)  (((x) << GSRE_VAL_Pos) & GSRE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GCRE            VAL
  *  @access     GPIO->GCRE
  *  @brief      Clear GRER register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 clears GRER bit. This bit is self-cleared to 0
  */
#define GCRE_VAL_Pos  (0)
#define GCRE_VAL_Msk  (0xFFFFFFFFU << GCRE_VAL_Pos)

#define GCRE_VAL_(x)  (((x) << GCRE_VAL_Pos) & GCRE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GFER            VAL
  *  @access     GPIO->GFER
  *  @brief      Enable GPIO falling edge detection
  *              0: Disable falling edge detection on GPIO
  *              1: Enable falling edge detection on GPIO
  */
#define GFER_VAL_Pos  (0)
#define GFER_VAL_Msk  (0xFFFFFFFFU << GFER_VAL_Pos)

#define GFER_VAL_(x)  (((x) << GFER_VAL_Pos) & GFER_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GSFE            VAL
  *  @access     GPIO->GSFE
  *  @brief      Set GFER register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 sets GFER bit. This bit is self-cleared to 0
  */
#define GSFE_VAL_Pos  (0)
#define GSFE_VAL_Msk  (0xFFFFFFFFU << GSFE_VAL_Pos)

#define GSFE_VAL_(x)  (((x) << GSFE_VAL_Pos) & GSFE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GCFE            VAL
  *  @access     GPIO->GCFE
  *  @brief      Clear GFER register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 clear GFER bit. This bit is self-cleared to 0
  */
#define GCFE_VAL_Pos  (0)
#define GCFE_VAL_Msk  (0xFFFFFFFFU << GCFE_VAL_Pos)

#define GCFE_VAL_(x)  (((x) << GCFE_VAL_Pos) & GCFE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GRERAWIF        VAL
  *  @access     GPIO->GRERAWIF
  *  @brief      GPIO rising edge detected flag
  *              0: No detected rising edge on GPIO
  *              1: Rising edge on GPIO was detected
  */
#define GRERAWIF_VAL_Pos  (0)
#define GRERAWIF_VAL_Msk  (0xFFFFFFFFU << GRERAWIF_VAL_Pos)

#define GRERAWIF_VAL_(x)  (((x) << GRERAWIF_VAL_Pos) & GRERAWIF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GFERAWIF        VAL
  *  @access     GPIO->GFERAWIF
  *  @brief      GPIO falling edge detected flag
  *              0: No detected falling edge on GPIO
  *              1: Falling edge on GPIO was detected
  */
#define GFERAWIF_VAL_Pos  (0)
#define GFERAWIF_VAL_Msk  (0xFFFFFFFFU << GFERAWIF_VAL_Pos)

#define GFERAWIF_VAL_(x)  (((x) << GFERAWIF_VAL_Pos) & GFERAWIF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GREIF           VAL
  *  @access     GPIO->GREIF
  *  @brief      GPIO rising edge triggered interrupt flag
  *              This register is the logic AND of GRERAWIF0 and GREIE0
  */
#define GREIF_VAL_Pos  (0)
#define GREIF_VAL_Msk  (0xFFFFFFFFU << GREIF_VAL_Pos)

#define GREIF_VAL_(x)  (((x) << GREIF_VAL_Pos) & GREIF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GFEIF           VAL
  *  @access     GPIO->GFEIF
  *  @brief      GPIO falling edge triggerred interrupt flag
  *              This register is the logic AND of GFERAWIF0 and GFEIE0
  */
#define GFEIF_VAL_Pos  (0)
#define GFEIF_VAL_Msk  (0xFFFFFFFFU << GFEIF_VAL_Pos)

#define GFEIF_VAL_(x)  (((x) << GFEIF_VAL_Pos) & GFEIF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GREIE           VAL
  *  @access     GPIO->GREIE
  *  @brief      GPIO rising edge triggered interrupt enable
  *              0: Disable GPIO rising edge triggered interrupt
  *              1: Enable GPIO rising edge triggered interrupt
  */
#define GREIE_VAL_Pos  (0)
#define GREIE_VAL_Msk  (0xFFFFFFFFU << GREIE_VAL_Pos)

#define GREIE_VAL_(x)  (((x) << GREIE_VAL_Pos) & GREIE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GFEIE           VAL
  *  @access     GPIO->GFEIE
  *  @brief      GPIO falling edge triggered interrupt enable
  *              0: Disable GPIO falling edge triggered interrupt
  *              1: Enable GPIO falling edge triggered interrupt
  */
#define GFEIE_VAL_Pos  (0)
#define GFEIE_VAL_Msk  (0xFFFFFFFFU << GFEIE_VAL_Pos)

#define GFEIE_VAL_(x)  (((x) << GFEIE_VAL_Pos) & GFEIE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GREIC           VAL
  *  @access     GPIO->GREIC
  *  @brief      Clear latched GPIO rising edge triggered interrupt and status
  *              0: Write a 0 has no effect and always reads back 0.
  *              1: Write a 1 clears the GRERAWIF0 bit and GREIF0 bit.
  *              This bit is self-cleared to 0.
  */
#define GREIC_VAL_Pos  (0)
#define GREIC_VAL_Msk  (0xFFFFFFFFU << GREIC_VAL_Pos)

#define GREIC_VAL_(x)  (((x) << GREIC_VAL_Pos) & GREIC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GFEIC           VAL
  *  @access     GPIO->GFEIC
  *  @brief      Clear latched GPIO falling edge triggered interrupt and status
  *              0: Write a 0 has no effect and always reads back 0.
  *              1: Write a 1 clears the GFERAWIF0 bit and GFEIF0 bit. This bit is self-cleared
  *              to 0.
  */
#define GFEIC_VAL_Pos  (0)
#define GFEIC_VAL_Msk  (0xFFFFFFFFU << GFEIC_VAL_Pos)

#define GFEIC_VAL_(x)  (((x) << GFEIC_VAL_Pos) & GFEIC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GREIFRC         VAL
  *  @access     GPIO->GREIFRC
  *  @brief      Force GPIO rising edge event
  *              0: Write a 0 has no effect and always reads back 0.
  *              1: Write a 1 forces a rising edge event on GPIO. This bit is self-cleared to 0.
  */
#define GREIFRC_VAL_Pos  (0)
#define GREIFRC_VAL_Msk  (0xFFFFFFFFU << GREIFRC_VAL_Pos)

#define GREIFRC_VAL_(x)  (((x) << GREIFRC_VAL_Pos) & GREIFRC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GFEIFRC         VAL
  *  @access     GPIO->GFEIFRC
  *  @brief      Force GPIO falling edge event
  *              0: Write a 0 has no effect and always reads back 0.
  *              1: Write a 1 forces a falling edge event on GPIO. This bit is self-cleared to 0.
  */
#define GFEIFRC_VAL_Pos  (0)
#define GFEIFRC_VAL_Msk  (0xFFFFFFFFU << GFEIFRC_VAL_Pos)

#define GFEIFRC_VAL_(x)  (((x) << GFEIFRC_VAL_Pos) & GFEIFRC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GLDE            VAL
  *  @access     GPIO->GLDE
  *  @brief      GPIO level detect enable
  *              0: Disable level detect on GPIO
  *              1: Enable level detect on GPIO
  */
#define GLDE_VAL_Pos  (0)
#define GLDE_VAL_Msk  (0xFFFFFFFFU << GLDE_VAL_Pos)

#define GLDE_VAL_(x)  (((x) << GLDE_VAL_Pos) & GLDE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GSLDE           VAL
  *  @access     GPIO->GSLDE
  *  @brief      Set GLDE register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 sets GLDE bit. This bit is self-cleared to 0
  */
#define GSLDE_VAL_Pos  (0)
#define GSLDE_VAL_Msk  (0xFFFFFFFFU << GSLDE_VAL_Pos)

#define GSLDE_VAL_(x)  (((x) << GSLDE_VAL_Pos) & GSLDE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GCLDE           VAL
  *  @access     GPIO->GCLDE
  *  @brief      Clear GLDE register bit
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 clears GLDE bit. This bit is self-cleared to 0
  */
#define GCLDE_VAL_Pos  (0)
#define GCLDE_VAL_Msk  (0xFFFFFFFFU << GCLDE_VAL_Pos)

#define GCLDE_VAL_(x)  (((x) << GCLDE_VAL_Pos) & GCLDE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GLPOL           VAL
  *  @access     GPIO->GLPOL
  *  @brief      GPIO level detect polarity
  *              0: Detect when GPIO is in low level
  *              1: Detect when GPIO is in high level
  */
#define GLPOL_VAL_Pos  (0)
#define GLPOL_VAL_Msk  (0xFFFFFFFFU << GLPOL_VAL_Pos)

#define GLPOL_VAL_(x)  (((x) << GLPOL_VAL_Pos) & GLPOL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GLRAWIF         VAL
  *  @access     GPIO->GLRAWIF
  *  @brief      Latched GPIO level detected flag
  *              0: Specified level was not detected on GPIO
  *              1: Specified level was detected on GPIO
  */
#define GLRAWIF_VAL_Pos  (0)
#define GLRAWIF_VAL_Msk  (0xFFFFFFFFU << GLRAWIF_VAL_Pos)

#define GLRAWIF_VAL_(x)  (((x) << GLRAWIF_VAL_Pos) & GLRAWIF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GLIF            VAL
  *  @access     GPIO->GLIF
  *  @brief      GPIO level-triggered interrupt flag
  *              This register is the logic AND of GLRAWIF0 and GLIE0
  *              0: GPIO level-triggered interrupt did not occur
  *              1: GPIO level-triggered interrupt occurred
  */
#define GLIF_VAL_Pos  (0)
#define GLIF_VAL_Msk  (0xFFFFFFFFU << GLIF_VAL_Pos)

#define GLIF_VAL_(x)  (((x) << GLIF_VAL_Pos) & GLIF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GLIE            VAL
  *  @access     GPIO->GLIE
  *  @brief      GPIO level-triggered interrupt enable
  *              0: Disable GPIO level-triggered interrupt
  *              1: Enable GPIO level-triggered interrupt
  */
#define GLIE_VAL_Pos  (0)
#define GLIE_VAL_Msk  (0xFFFFFFFFU << GLIE_VAL_Pos)

#define GLIE_VAL_(x)  (((x) << GLIE_VAL_Pos) & GLIE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GLIC            VAL
  *  @access     GPIO->GLIC
  *  @brief      Clear GPIO level-triggered status and interrupt flag
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 clears the GLRAWIF0 bit and GLIF0 bit. This bit is self-cleared to
  *              0.
  */
#define GLIC_VAL_Pos  (0)
#define GLIC_VAL_Msk  (0xFFFFFFFFU << GLIC_VAL_Pos)

#define GLIC_VAL_(x)  (((x) << GLIC_VAL_Pos) & GLIC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GLIFRC          VAL
  *  @access     GPIO->GLIFRC
  *  @brief      Force GPIO level-triggered event
  *              0: Write a 0 has no effect and always reads back 0
  *              1: Write a 1 forces a GPIO level-triggered event. This bit is self-cleared to 0.
  */
#define GLIFRC_VAL_Pos  (0)
#define GLIFRC_VAL_Msk  (0xFFFFFFFFU << GLIFRC_VAL_Pos)

#define GLIFRC_VAL_(x)  (((x) << GLIFRC_VAL_Pos) & GLIFRC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGRAWIF         LEVEL
  *  @access     GPIO->GGRAWIF
  *  @brief      GPIO level detected flag
  *              This bit is the logic OR of GLRAWIF bits
  */
#define GGRAWIF_LEVEL_Pos  (0)
#define GGRAWIF_LEVEL_Msk  (0x1U << GGRAWIF_LEVEL_Pos)

#define GGRAWIF_LEVEL_NOT_OCCUR  ((0x0U) << GGRAWIF_LEVEL_Pos)
#define GGRAWIF_LEVEL_OCCUR      ((0x1U) << GGRAWIF_LEVEL_Pos)

#define GGRAWIF_LEVEL_(x)  (((x) << GGRAWIF_LEVEL_Pos) & GGRAWIF_LEVEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGRAWIF         EDGE
  *  @access     GPIO->GGRAWIF
  *  @brief      GPIO edge detected flag
  *              This bit is the logic OR of GRERAWIF and GFERAWIF bits
  */
#define GGRAWIF_EDGE_Pos  (1)
#define GGRAWIF_EDGE_Msk  (0x1U << GGRAWIF_EDGE_Pos)

#define GGRAWIF_EDGE_NOT_OCCUR  ((0x0U) << GGRAWIF_EDGE_Pos)
#define GGRAWIF_EDGE_OCCUR      ((0x1U) << GGRAWIF_EDGE_Pos)

#define GGRAWIF_EDGE_(x)  (((x) << GGRAWIF_EDGE_Pos) & GGRAWIF_EDGE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGRAWIF         REDGE
  *  @access     GPIO->GGRAWIF
  *  @brief      GPIO rising edge detected flag
  *              This bit is the logic OR of GRERAWIF bits
  */
#define GGRAWIF_REDGE_Pos  (2)
#define GGRAWIF_REDGE_Msk  (0x1U << GGRAWIF_REDGE_Pos)

#define GGRAWIF_REDGE_NOT_OCCUR  ((0x0U) << GGRAWIF_REDGE_Pos)
#define GGRAWIF_REDGE_OCCUR      ((0x1U) << GGRAWIF_REDGE_Pos)

#define GGRAWIF_REDGE_(x)  (((x) << GGRAWIF_REDGE_Pos) & GGRAWIF_REDGE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGRAWIF         FEDGE
  *  @access     GPIO->GGRAWIF
  *  @brief      GPIO falling edge detected flag
  *              This bit is the logic OR of GFERAWIF bits
  */
#define GGRAWIF_FEDGE_Pos  (3)
#define GGRAWIF_FEDGE_Msk  (0x1U << GGRAWIF_FEDGE_Pos)

#define GGRAWIF_FEDGE_NOT_OCCUR  ((0x0U) << GGRAWIF_FEDGE_Pos)
#define GGRAWIF_FEDGE_OCCUR      ((0x1U) << GGRAWIF_FEDGE_Pos)

#define GGRAWIF_FEDGE_(x)  (((x) << GGRAWIF_FEDGE_Pos) & GGRAWIF_FEDGE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGIF            LEVEL
  *  @access     GPIO->GGIF
  *  @brief      GPIO level-triggered interrupt flag
  */
#define GGIF_LEVEL_Pos  (0)
#define GGIF_LEVEL_Msk  (0x1U << GGIF_LEVEL_Pos)

#define GGIF_LEVEL_NOT_OCCUR  ((0x0U) << GGIF_LEVEL_Pos)
#define GGIF_LEVEL_OCCUR      ((0x1U) << GGIF_LEVEL_Pos)

#define GGIF_LEVEL_(x)  (((x) << GGIF_LEVEL_Pos) & GGIF_LEVEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGIF            EDGE
  *  @access     GPIO->GGIF
  *  @brief      GPIO edge-triggered interrupt flag
  */
#define GGIF_EDGE_Pos  (1)
#define GGIF_EDGE_Msk  (0x1U << GGIF_EDGE_Pos)

#define GGIF_EDGE_NOT_OCCUR  ((0x0U) << GGIF_EDGE_Pos)
#define GGIF_EDGE_OCCUR      ((0x1U) << GGIF_EDGE_Pos)

#define GGIF_EDGE_(x)  (((x) << GGIF_EDGE_Pos) & GGIF_EDGE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGIC            LEVEL
  *  @access     GPIO->GGIC
  *  @brief      GPIO level-triggered interrupt clear
  */
#define GGIC_LEVEL_Pos  (0)
#define GGIC_LEVEL_Msk  (0x1U << GGIC_LEVEL_Pos)

#define GGIC_LEVEL_NO_EFFECT  ((0x0U) << GGIC_LEVEL_Pos)
#define GGIC_LEVEL_CLEAR      ((0x1U) << GGIC_LEVEL_Pos)

#define GGIC_LEVEL_(x)  (((x) << GGIC_LEVEL_Pos) & GGIC_LEVEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GGIC            EDGE
  *  @access     GPIO->GGIC
  *  @brief      GPIO edge-triggered interrupt clear
  */
#define GGIC_EDGE_Pos  (1)
#define GGIC_EDGE_Msk  (0x1U << GGIC_EDGE_Pos)

#define GGIC_EDGE_NO_EFFECT  ((0x0U) << GGIC_EDGE_Pos)
#define GGIC_EDGE_CLEAR      ((0x1U) << GGIC_EDGE_Pos)

#define GGIC_EDGE_(x)  (((x) << GGIC_EDGE_Pos) & GGIC_EDGE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              GPIO            GPIOREGKEY      KEY
  *  @access     GPIO->GPIOREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected GPIO registers
  */
#define GPIOREGKEY_KEY_Pos  (0)
#define GPIOREGKEY_KEY_Msk  (0xFFFFFFFFU << GPIOREGKEY_KEY_Pos)

#define GPIOREGKEY_KEY_(x)  (((x) << GPIOREGKEY_KEY_Pos) & GPIOREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      UART:                                                                 */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTDAT         VAL
  *  @access     UARTx->UARTDAT
  *  @brief      Data transmitted or received on the UART bus.
  *              A write to the register accesses the transmit hold register to set the data to
  *              be transmitted.
  *              A read to the register accesses the receive buffer register to get the received
  *              data
  */
#define UARTDAT_VAL_Pos  (0)
#define UARTDAT_VAL_Msk  (0xFFFFFFFFU << UARTDAT_VAL_Pos)

#define UARTDAT_VAL_(x)  (((x) << UARTDAT_VAL_Pos) & UARTDAT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         RXEN
  *  @access     UARTx->UARTCTL
  *  @brief      UART receive enable
  */
#define UARTCTL_RXEN_Pos  (0)
#define UARTCTL_RXEN_Msk  (0x1U << UARTCTL_RXEN_Pos)

#define UARTCTL_RXEN_DISABLE  ((0x0U) << UARTCTL_RXEN_Pos)
#define UARTCTL_RXEN_ENABLE   ((0x1U) << UARTCTL_RXEN_Pos)

#define UARTCTL_RXEN_(x)  (((x) << UARTCTL_RXEN_Pos) & UARTCTL_RXEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         TXEN
  *  @access     UARTx->UARTCTL
  *  @brief      UART transmit enable
  */
#define UARTCTL_TXEN_Pos  (1)
#define UARTCTL_TXEN_Msk  (0x1U << UARTCTL_TXEN_Pos)

#define UARTCTL_TXEN_DISABLE  ((0x0U) << UARTCTL_TXEN_Pos)
#define UARTCTL_TXEN_ENABLE   ((0x1U) << UARTCTL_TXEN_Pos)

#define UARTCTL_TXEN_(x)  (((x) << UARTCTL_TXEN_Pos) & UARTCTL_TXEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         RXDMAEN
  *  @access     UARTx->UARTCTL
  *  @brief      Receive DMA requests enable
  */
#define UARTCTL_RXDMAEN_Pos  (2)
#define UARTCTL_RXDMAEN_Msk  (0x1U << UARTCTL_RXDMAEN_Pos)

#define UARTCTL_RXDMAEN_DISABLE  ((0x0U) << UARTCTL_RXDMAEN_Pos)
#define UARTCTL_RXDMAEN_ENABLE   ((0x1U) << UARTCTL_RXDMAEN_Pos)

#define UARTCTL_RXDMAEN_(x)  (((x) << UARTCTL_RXDMAEN_Pos) & UARTCTL_RXDMAEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         TXDMAEN
  *  @access     UARTx->UARTCTL
  *  @brief      Transmit DMA requests enable
  */
#define UARTCTL_TXDMAEN_Pos  (3)
#define UARTCTL_TXDMAEN_Msk  (0x1U << UARTCTL_TXDMAEN_Pos)

#define UARTCTL_TXDMAEN_DISABLE  ((0x0U) << UARTCTL_TXDMAEN_Pos)
#define UARTCTL_TXDMAEN_ENABLE   ((0x1U) << UARTCTL_TXDMAEN_Pos)

#define UARTCTL_TXDMAEN_(x)  (((x) << UARTCTL_TXDMAEN_Pos) & UARTCTL_TXDMAEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         LPBK
  *  @access     UARTx->UARTCTL
  *  @brief      Loopback mode for diagnostic testing as below
  *              (1) Set the transmitter serial output to logic 1 state
  *              (2) Disconnect the receiver serial input from pin.
  *              (3) Transmitted data is received immediately. The output of the Transmit Shift
  *              Register is looped back into the Receive Shift Register input.
  *              (4) Support transferring a break signal from the transmitter section to the
  *              receiver section
  *              This bit must be configured before UART is enabled
  */
#define UARTCTL_LPBK_Pos  (4)
#define UARTCTL_LPBK_Msk  (0x1U << UARTCTL_LPBK_Pos)

#define UARTCTL_LPBK_NORMAL_MODE    ((0x0U) << UARTCTL_LPBK_Pos)
#define UARTCTL_LPBK_LOOPBACK_MODE  ((0x1U) << UARTCTL_LPBK_Pos)

#define UARTCTL_LPBK_(x)  (((x) << UARTCTL_LPBK_Pos) & UARTCTL_LPBK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         BUS32
  *  @access     UARTx->UARTCTL
  *  @brief      32-Bit bus width
  */
#define UARTCTL_BUS32_Pos  (5)
#define UARTCTL_BUS32_Msk  (0x1U << UARTCTL_BUS32_Pos)

#define UARTCTL_BUS32_8BIT   ((0x0U) << UARTCTL_BUS32_Pos)
#define UARTCTL_BUS32_32BIT  ((0x1U) << UARTCTL_BUS32_Pos)

#define UARTCTL_BUS32_(x)  (((x) << UARTCTL_BUS32_Pos) & UARTCTL_BUS32_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         ABEN
  *  @access     UARTx->UARTCTL
  *  @brief      Auto baud enable
  */
#define UARTCTL_ABEN_Pos  (6)
#define UARTCTL_ABEN_Msk  (0x1U << UARTCTL_ABEN_Pos)

#define UARTCTL_ABEN_DISABLE  ((0x0U) << UARTCTL_ABEN_Pos)
#define UARTCTL_ABEN_ENABLE   ((0x1U) << UARTCTL_ABEN_Pos)

#define UARTCTL_ABEN_(x)  (((x) << UARTCTL_ABEN_Pos) & UARTCTL_ABEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         ABUP
  *  @access     UARTx->UARTCTL
  *  @brief      Auto baud count update option
  */
#define UARTCTL_ABUP_Pos  (7)
#define UARTCTL_ABUP_Msk  (0x1U << UARTCTL_ABUP_Pos)

#define UARTCTL_ABUP_UPDATE_BY_HW  ((0x0U) << UARTCTL_ABUP_Pos)
#define UARTCTL_ABUP_UPDATE_BY_SW  ((0x1U) << UARTCTL_ABUP_Pos)

#define UARTCTL_ABUP_(x)  (((x) << UARTCTL_ABUP_Pos) & UARTCTL_ABUP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         NRZMODE
  *  @access     UARTx->UARTCTL
  *  @brief      NRZ coding mode.
  *              This bit is ignored in serail infra-red (SIR) mode and general NRZ level is
  *              always used.
  */
#define UARTCTL_NRZMODE_Pos  (8)
#define UARTCTL_NRZMODE_Msk  (0x3U << UARTCTL_NRZMODE_Pos)

#define UARTCTL_NRZMODE_NRZ_LEVEL  ((0x00U) << UARTCTL_NRZMODE_Pos)
#define UARTCTL_NRZMODE_NRZ_SPACE  ((0x02U) << UARTCTL_NRZMODE_Pos)
#define UARTCTL_NRZMODE_NRZ_MARK   ((0x03U) << UARTCTL_NRZMODE_Pos)

#define UARTCTL_NRZMODE_(x)  (((x) << UARTCTL_NRZMODE_Pos) & UARTCTL_NRZMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         DATABIT
  *  @access     UARTx->UARTCTL
  *  @brief      Data bits of each character
  */
#define UARTCTL_DATABIT_Pos  (10)
#define UARTCTL_DATABIT_Msk  (0x3U << UARTCTL_DATABIT_Pos)

#define UARTCTL_DATABIT_5_DATA_BIT  ((0x00U) << UARTCTL_DATABIT_Pos)
#define UARTCTL_DATABIT_6_DATA_BIT  ((0x01U) << UARTCTL_DATABIT_Pos)
#define UARTCTL_DATABIT_7_DATA_BIT  ((0x02U) << UARTCTL_DATABIT_Pos)
#define UARTCTL_DATABIT_8_DATA_BIT  ((0x03U) << UARTCTL_DATABIT_Pos)

#define UARTCTL_DATABIT_(x)  (((x) << UARTCTL_DATABIT_Pos) & UARTCTL_DATABIT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         PRTYBIT
  *  @access     UARTx->UARTCTL
  *  @brief      Parity bit mode
  */
#define UARTCTL_PRTYBIT_Pos  (12)
#define UARTCTL_PRTYBIT_Msk  (0x3U << UARTCTL_PRTYBIT_Pos)

#define UARTCTL_PRTYBIT_EVEN_PARITY         ((0x00U) << UARTCTL_PRTYBIT_Pos)
#define UARTCTL_PRTYBIT_ODD_PARITY          ((0x01U) << UARTCTL_PRTYBIT_Pos)
#define UARTCTL_PRTYBIT_STICKY_HIGH_PARITY  ((0x02U) << UARTCTL_PRTYBIT_Pos)
#define UARTCTL_PRTYBIT_STICKY_LOW_PARITY   ((0x03U) << UARTCTL_PRTYBIT_Pos)

#define UARTCTL_PRTYBIT_(x)  (((x) << UARTCTL_PRTYBIT_Pos) & UARTCTL_PRTYBIT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         PRTYEN
  *  @access     UARTx->UARTCTL
  *  @brief      Parity enable
  */
#define UARTCTL_PRTYEN_Pos  (14)
#define UARTCTL_PRTYEN_Msk  (0x1U << UARTCTL_PRTYEN_Pos)

#define UARTCTL_PRTYEN_PARITY_DISABLE  ((0x0U) << UARTCTL_PRTYEN_Pos)
#define UARTCTL_PRTYEN_PARITY_ENABLE   ((0x1U) << UARTCTL_PRTYEN_Pos)

#define UARTCTL_PRTYEN_(x)  (((x) << UARTCTL_PRTYEN_Pos) & UARTCTL_PRTYEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         STOPBIT
  *  @access     UARTx->UARTCTL
  *  @brief      Stop bits
  */
#define UARTCTL_STOPBIT_Pos  (15)
#define UARTCTL_STOPBIT_Msk  (0x1U << UARTCTL_STOPBIT_Pos)

#define UARTCTL_STOPBIT_1_STOP_BIT  ((0x0U) << UARTCTL_STOPBIT_Pos)
#define UARTCTL_STOPBIT_2_STOP_BIT  ((0x1U) << UARTCTL_STOPBIT_Pos)

#define UARTCTL_STOPBIT_(x)  (((x) << UARTCTL_STOPBIT_Pos) & UARTCTL_STOPBIT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         CLRRF
  *  @access     UARTx->UARTCTL
  *  @brief      Clear the receive FIFO
  */
#define UARTCTL_CLRRF_Pos  (16)
#define UARTCTL_CLRRF_Msk  (0x1U << UARTCTL_CLRRF_Pos)

#define UARTCTL_CLRRF_NO_EFFECT  ((0x0U) << UARTCTL_CLRRF_Pos)
#define UARTCTL_CLRRF_CLEAR      ((0x1U) << UARTCTL_CLRRF_Pos)

#define UARTCTL_CLRRF_(x)  (((x) << UARTCTL_CLRRF_Pos) & UARTCTL_CLRRF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         CLRTF
  *  @access     UARTx->UARTCTL
  *  @brief      Clear the transmit FIFO
  *              The transmit shift register is not affected by this bit, and it completes the
  *              current transmission.
  */
#define UARTCTL_CLRTF_Pos  (17)
#define UARTCTL_CLRTF_Msk  (0x1U << UARTCTL_CLRTF_Pos)

#define UARTCTL_CLRTF_NO_EFFECT  ((0x0U) << UARTCTL_CLRTF_Pos)
#define UARTCTL_CLRTF_CLEAR      ((0x1U) << UARTCTL_CLRTF_Pos)

#define UARTCTL_CLRTF_(x)  (((x) << UARTCTL_CLRTF_Pos) & UARTCTL_CLRTF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         SETBRK
  *  @access     UARTx->UARTCTL
  *  @brief      Set Break
  *              Causes a break condition to be transmitted to the receiving UART. Acts only on
  *              the TXD pin and has no effect on the transmit logic. In FIFO mode, wait until
  *              the transmitter is idle (UARTSTS.TXDONE=1) to set and clear SB.
  */
#define UARTCTL_SETBRK_Pos  (18)
#define UARTCTL_SETBRK_Msk  (0x1U << UARTCTL_SETBRK_Pos)

#define UARTCTL_SETBRK_NO_EFFECT  ((0x0U) << UARTCTL_SETBRK_Pos)
#define UARTCTL_SETBRK_SET_BREAK  ((0x1U) << UARTCTL_SETBRK_Pos)

#define UARTCTL_SETBRK_(x)  (((x) << UARTCTL_SETBRK_Pos) & UARTCTL_SETBRK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         IDLECNTEN
  *  @access     UARTx->UARTCTL
  *  @brief      Bus idle counter enable
  */
#define UARTCTL_IDLECNTEN_Pos  (29)
#define UARTCTL_IDLECNTEN_Msk  (0x1U << UARTCTL_IDLECNTEN_Pos)

#define UARTCTL_IDLECNTEN_DISABLE  ((0x0U) << UARTCTL_IDLECNTEN_Pos)
#define UARTCTL_IDLECNTEN_ENABLE   ((0x1U) << UARTCTL_IDLECNTEN_Pos)

#define UARTCTL_IDLECNTEN_(x)  (((x) << UARTCTL_IDLECNTEN_Pos) & UARTCTL_IDLECNTEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         RFEMODE
  *  @access     UARTx->UARTCTL
  *  @brief      Receive FIFO error report mode
  */
#define UARTCTL_RFEMODE_Pos  (30)
#define UARTCTL_RFEMODE_Msk  (0x1U << UARTCTL_RFEMODE_Pos)

#define UARTCTL_RFEMODE_REPORT_IF_WRITABLE  ((0x0U) << UARTCTL_RFEMODE_Pos)
#define UARTCTL_RFEMODE_REPORT_ALL          ((0x1U) << UARTCTL_RFEMODE_Pos)

#define UARTCTL_RFEMODE_(x)  (((x) << UARTCTL_RFEMODE_Pos) & UARTCTL_RFEMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTCTL         SWAPPIN
  *  @access     UARTx->UARTCTL
  *  @brief      Swap TXD and RXD pin function
  */
#define UARTCTL_SWAPPIN_Pos  (31)
#define UARTCTL_SWAPPIN_Msk  (0x1U << UARTCTL_SWAPPIN_Pos)

#define UARTCTL_SWAPPIN_ORIGINAL_FUNCTION  ((0x0U) << UARTCTL_SWAPPIN_Pos)
#define UARTCTL_SWAPPIN_SWAP_FUNCTION      ((0x1U) << UARTCTL_SWAPPIN_Pos)

#define UARTCTL_SWAPPIN_(x)  (((x) << UARTCTL_SWAPPIN_Pos) & UARTCTL_SWAPPIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          LINEN
  *  @access     UARTx->LINCTL
  *  @brief      LIN mode enable
  */
#define LINCTL_LINEN_Pos  (0)
#define LINCTL_LINEN_Msk  (0x1U << LINCTL_LINEN_Pos)

#define LINCTL_LINEN_UART_MODE  ((0x0U) << LINCTL_LINEN_Pos)
#define LINCTL_LINEN_LIN_MODE   ((0x1U) << LINCTL_LINEN_Pos)

#define LINCTL_LINEN_(x)  (((x) << LINCTL_LINEN_Pos) & LINCTL_LINEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          MASTER
  *  @access     UARTx->LINCTL
  *  @brief      LIN node role
  */
#define LINCTL_MASTER_Pos  (1)
#define LINCTL_MASTER_Msk  (0x1U << LINCTL_MASTER_Pos)

#define LINCTL_MASTER_SLAVE   ((0x0U) << LINCTL_MASTER_Pos)
#define LINCTL_MASTER_MASTER  ((0x1U) << LINCTL_MASTER_Pos)

#define LINCTL_MASTER_(x)  (((x) << LINCTL_MASTER_Pos) & LINCTL_MASTER_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          SBRKLEN
  *  @access     UARTx->LINCTL
  *  @brief      Synchronize break length
  */
#define LINCTL_SBRKLEN_Pos  (2)
#define LINCTL_SBRKLEN_Msk  (0x7U << LINCTL_SBRKLEN_Pos)

#define LINCTL_SBRKLEN_13_BIT  ((0x000U) << LINCTL_SBRKLEN_Pos)
#define LINCTL_SBRKLEN_14_BIT  ((0x001U) << LINCTL_SBRKLEN_Pos)
#define LINCTL_SBRKLEN_15_BIT  ((0x002U) << LINCTL_SBRKLEN_Pos)
#define LINCTL_SBRKLEN_16_BIT  ((0x003U) << LINCTL_SBRKLEN_Pos)
#define LINCTL_SBRKLEN_17_BIT  ((0x004U) << LINCTL_SBRKLEN_Pos)
#define LINCTL_SBRKLEN_18_BIT  ((0x005U) << LINCTL_SBRKLEN_Pos)
#define LINCTL_SBRKLEN_19_BIT  ((0x006U) << LINCTL_SBRKLEN_Pos)
#define LINCTL_SBRKLEN_20_BIT  ((0x007U) << LINCTL_SBRKLEN_Pos)

#define LINCTL_SBRKLEN_(x)  (((x) << LINCTL_SBRKLEN_Pos) & LINCTL_SBRKLEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          SBRKDEL
  *  @access     UARTx->LINCTL
  *  @brief      Synchronize break delimiter
  */
#define LINCTL_SBRKDEL_Pos  (5)
#define LINCTL_SBRKDEL_Msk  (0x3U << LINCTL_SBRKDEL_Pos)

#define LINCTL_SBRKDEL_1_BIT  ((0x00U) << LINCTL_SBRKDEL_Pos)
#define LINCTL_SBRKDEL_2_BIT  ((0x01U) << LINCTL_SBRKDEL_Pos)
#define LINCTL_SBRKDEL_3_BIT  ((0x02U) << LINCTL_SBRKDEL_Pos)
#define LINCTL_SBRKDEL_4_BIT  ((0x03U) << LINCTL_SBRKDEL_Pos)

#define LINCTL_SBRKDEL_(x)  (((x) << LINCTL_SBRKDEL_Pos) & LINCTL_SBRKDEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          RESP
  *  @access     UARTx->LINCTL
  *  @brief      Response to take
  */
#define LINCTL_RESP_Pos  (7)
#define LINCTL_RESP_Msk  (0x3U << LINCTL_RESP_Pos)

#define LINCTL_RESP_RESPONSE_NONE  ((0x00U) << LINCTL_RESP_Pos)
#define LINCTL_RESP_RESPONSE_RX    ((0x01U) << LINCTL_RESP_Pos)
#define LINCTL_RESP_RESPONSE_TX    ((0x02U) << LINCTL_RESP_Pos)
#define LINCTL_RESP_RESPONSE_TR    ((0x03U) << LINCTL_RESP_Pos)

#define LINCTL_RESP_(x)  (((x) << LINCTL_RESP_Pos) & LINCTL_RESP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          RESPLEN
  *  @access     UARTx->LINCTL
  *  @brief      Response data length
  */
#define LINCTL_RESPLEN_Pos  (9)
#define LINCTL_RESPLEN_Msk  (0xFU << LINCTL_RESPLEN_Pos)

#define LINCTL_RESPLEN_X_BYTE  ((0x0000U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_1_BYTE  ((0x0001U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_2_BYTE  ((0x0002U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_3_BYTE  ((0x0003U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_4_BYTE  ((0x0004U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_5_BYTE  ((0x0005U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_6_BYTE  ((0x0006U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_7_BYTE  ((0x0007U) << LINCTL_RESPLEN_Pos)
#define LINCTL_RESPLEN_8_BYTE  ((0x0008U) << LINCTL_RESPLEN_Pos)

#define LINCTL_RESPLEN_(x)  (((x) << LINCTL_RESPLEN_Pos) & LINCTL_RESPLEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          BYTESPACE
  *  @access     UARTx->LINCTL
  *  @brief      Inter-byte space (number of bauds)
  */
#define LINCTL_BYTESPACE_Pos  (13)
#define LINCTL_BYTESPACE_Msk  (0x3U << LINCTL_BYTESPACE_Pos)

#define LINCTL_BYTESPACE_(x)  (((x) << LINCTL_BYTESPACE_Pos) & LINCTL_BYTESPACE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          RESPSPACE
  *  @access     UARTx->LINCTL
  *  @brief      Response space (number of bauds)
  */
#define LINCTL_RESPSPACE_Pos  (16)
#define LINCTL_RESPSPACE_Msk  (0x7U << LINCTL_RESPSPACE_Pos)

#define LINCTL_RESPSPACE_(x)  (((x) << LINCTL_RESPSPACE_Pos) & LINCTL_RESPSPACE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          RFMODE
  *  @access     UARTx->LINCTL
  *  @brief      Receive FIFO operation mode
  */
#define LINCTL_RFMODE_Pos  (20)
#define LINCTL_RFMODE_Msk  (0x1U << LINCTL_RFMODE_Pos)

#define LINCTL_RFMODE_SAVE_ALL_DATA_AND_CHECKSUM  ((0x0U) << LINCTL_RFMODE_Pos)
#define LINCTL_RFMODE_SAVE_CORRECT_DATA           ((0x1U) << LINCTL_RFMODE_Pos)

#define LINCTL_RFMODE_(x)  (((x) << LINCTL_RFMODE_Pos) & LINCTL_RFMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          ATOTH
  *  @access     UARTx->LINCTL
  *  @brief      Auto timeout threshold
  */
#define LINCTL_ATOTH_Pos  (21)
#define LINCTL_ATOTH_Msk  (0x1U << LINCTL_ATOTH_Pos)

#define LINCTL_ATOTH_MANUAL_THRESHOLD  ((0x0U) << LINCTL_ATOTH_Pos)
#define LINCTL_ATOTH_AUTO_THRESHOLD    ((0x1U) << LINCTL_ATOTH_Pos)

#define LINCTL_ATOTH_(x)  (((x) << LINCTL_ATOTH_Pos) & LINCTL_ATOTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          ATXCHKSUM
  *  @access     UARTx->LINCTL
  *  @brief      Auto transmit checksum
  */
#define LINCTL_ATXCHKSUM_Pos  (22)
#define LINCTL_ATXCHKSUM_Msk  (0x1U << LINCTL_ATXCHKSUM_Pos)

#define LINCTL_ATXCHKSUM_MANUAL_TX  ((0x0U) << LINCTL_ATXCHKSUM_Pos)
#define LINCTL_ATXCHKSUM_AUTO_TX    ((0x1U) << LINCTL_ATXCHKSUM_Pos)

#define LINCTL_ATXCHKSUM_(x)  (((x) << LINCTL_ATXCHKSUM_Pos) & LINCTL_ATXCHKSUM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          CHKSUM
  *  @access     UARTx->LINCTL
  *  @brief      Checksum mode
  */
#define LINCTL_CHKSUM_Pos  (23)
#define LINCTL_CHKSUM_Msk  (0x1U << LINCTL_CHKSUM_Pos)

#define LINCTL_CHKSUM_CLASSIC_MODE   ((0x0U) << LINCTL_CHKSUM_Pos)
#define LINCTL_CHKSUM_ENHANCED_MODE  ((0x1U) << LINCTL_CHKSUM_Pos)

#define LINCTL_CHKSUM_(x)  (((x) << LINCTL_CHKSUM_Pos) & LINCTL_CHKSUM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINCTL          TXCHKSUM
  *  @access     UARTx->LINCTL
  *  @brief      One-shot checksum transmit request
  */
#define LINCTL_TXCHKSUM_Pos  (24)
#define LINCTL_TXCHKSUM_Msk  (0x1U << LINCTL_TXCHKSUM_Pos)

#define LINCTL_TXCHKSUM_NO_EFFECT  ((0x0U) << LINCTL_TXCHKSUM_Pos)
#define LINCTL_TXCHKSUM_TRANSMIT   ((0x1U) << LINCTL_TXCHKSUM_Pos)

#define LINCTL_TXCHKSUM_(x)  (((x) << LINCTL_TXCHKSUM_Pos) & LINCTL_TXCHKSUM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINID           ID
  *  @access     UARTx->LINID
  *  @brief      LIN ID
  *              Write to this register set the ID to be transmitted
  *              Read from this register get the received ID
  */
#define LINID_ID_Pos  (0)
#define LINID_ID_Msk  (0xFFU << LINID_ID_Pos)

#define LINID_ID_(x)  (((x) << LINID_ID_Pos) & LINID_ID_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINIDFILT       REFID
  *  @access     UARTx->LINIDFILT
  *  @brief      LIN ID reference for the compare
  */
#define LINIDFILT_REFID_Pos  (0)
#define LINIDFILT_REFID_Msk  (0xFFU << LINIDFILT_REFID_Pos)

#define LINIDFILT_REFID_(x)  (((x) << LINIDFILT_REFID_Pos) & LINIDFILT_REFID_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           LINIDFILT       MASK
  *  @access     UARTx->LINIDFILT
  *  @brief      LIN ID mask
  *              It indicates whether the corresponding bit in REFID is used for comparison
  *              0: Not compare; 1: Compare
  */
#define LINIDFILT_MASK_Pos  (8)
#define LINIDFILT_MASK_Msk  (0xFFU << LINIDFILT_MASK_Pos)

#define LINIDFILT_MASK_(x)  (((x) << LINIDFILT_MASK_Pos) & LINIDFILT_MASK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           BUSIDLETH       VAL
  *  @access     UARTx->BUSIDLETH
  *  @brief      Number of AHB clock cycles to report bus idle (no activity on the RXD)
  */
#define BUSIDLETH_VAL_Pos  (0)
#define BUSIDLETH_VAL_Msk  (0xFFFFFFFFU << BUSIDLETH_VAL_Pos)


#define BUSIDLETH_VAL_(x)  (((x) << BUSIDLETH_VAL_Pos) & BUSIDLETH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTBDCNT       VAL
  *  @access     UARTx->UARTBDCNT
  *  @brief      UART baud rate will be UART clock / UARTBDCNT.
  *              The minimum valid value is 16 and write a value below 16 will be reset to 16.
  */
#define UARTBDCNT_VAL_Pos  (0)
#define UARTBDCNT_VAL_Msk  (0xFFFFU << UARTBDCNT_VAL_Pos)

#define UARTBDCNT_VAL_(x)  (((x) << UARTBDCNT_VAL_Pos) & UARTBDCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTABCNT       VAL
  *  @access     UARTx->UARTABCNT
  *  @brief      Number of UART clock cycles within a start-bit pulse
  */
#define UARTABCNT_VAL_Pos  (0)
#define UARTABCNT_VAL_Msk  (0xFFFFU << UARTABCNT_VAL_Pos)

#define UARTABCNT_VAL_(x)  (((x) << UARTABCNT_VAL_Pos) & UARTABCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTTOTH        VAL
  *  @access     UARTx->UARTTOTH
  *  @brief      Number of UART baud cycles for the specified condition to keep before the
  *              timeout event is generated
  *              The minimum allowed number is 1. Write a value as 0 will be reset to 1
  *              For UART mode, the condition is that there is unread received data in the FIFO
  *              and the RXD bus keeps high
  *              For LIN mode, the condition is that the received data length is below the
  *              expectation when the response field is timeout
  */
#define UARTTOTH_VAL_Pos  (0)
#define UARTTOTH_VAL_Msk  (0xFFU << UARTTOTH_VAL_Pos)

#define UARTTOTH_VAL_(x)  (((x) << UARTTOTH_VAL_Pos) & UARTTOTH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRXLVL       VAL
  *  @access     UARTx->UARTRXLVL
  *  @brief      Number of bytes (0-64) remaining in the Receive FIFO
  */
#define UARTRXLVL_VAL_Pos  (0)
#define UARTRXLVL_VAL_Msk  (0x7FU << UARTRXLVL_VAL_Pos)

#define UARTRXLVL_VAL_(x)  (((x) << UARTRXLVL_VAL_Pos) & UARTRXLVL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTTXLVL       VAL
  *  @access     UARTx->UARTTXLVL
  *  @brief      Number of bytes (0-64) remaining in the Transmit FIFO
  */
#define UARTTXLVL_VAL_Pos  (0)
#define UARTTXLVL_VAL_Msk  (0x7FU << UARTTXLVL_VAL_Pos)

#define UARTTXLVL_VAL_(x)  (((x) << UARTTXLVL_VAL_Pos) & UARTTXLVL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRXTH        VAL
  *  @access     UARTx->UARTRXTH
  *  @brief      Trigger receive data available interrupt when UARTRFLVL>UARTRFTH
  */
#define UARTRXTH_VAL_Pos  (0)
#define UARTRXTH_VAL_Msk  (0x3FU << UARTRXTH_VAL_Pos)

#define UARTRXTH_VAL_(x)  (((x) << UARTRXTH_VAL_Pos) & UARTRXTH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTTXTH        VAL
  *  @access     UARTx->UARTTXTH
  *  @brief      Trigger transmit data request interrupt when UARTTFLVL<=UARTTFTH
  */
#define UARTTXTH_VAL_Pos  (0)
#define UARTTXTH_VAL_Msk  (0x3FU << UARTTXTH_VAL_Pos)

#define UARTTXTH_VAL_(x)  (((x) << UARTTXTH_VAL_Pos) & UARTTXTH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSIRCTL      RXSIREN
  *  @access     UARTx->UARTSIRCTL
  *  @brief      Receiver SIR enable
  */
#define UARTSIRCTL_RXSIREN_Pos  (0)
#define UARTSIRCTL_RXSIREN_Msk  (0x1U << UARTSIRCTL_RXSIREN_Pos)

#define UARTSIRCTL_RXSIREN_UART      ((0x0U) << UARTSIRCTL_RXSIREN_Pos)
#define UARTSIRCTL_RXSIREN_INFRARED  ((0x1U) << UARTSIRCTL_RXSIREN_Pos)

#define UARTSIRCTL_RXSIREN_(x)  (((x) << UARTSIRCTL_RXSIREN_Pos) & UARTSIRCTL_RXSIREN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSIRCTL      TXSIREN
  *  @access     UARTx->UARTSIRCTL
  *  @brief      Transmitter SIR enable
  */
#define UARTSIRCTL_TXSIREN_Pos  (1)
#define UARTSIRCTL_TXSIREN_Msk  (0x1U << UARTSIRCTL_TXSIREN_Pos)

#define UARTSIRCTL_TXSIREN_UART      ((0x0U) << UARTSIRCTL_TXSIREN_Pos)
#define UARTSIRCTL_TXSIREN_INFRARED  ((0x1U) << UARTSIRCTL_TXSIREN_Pos)

#define UARTSIRCTL_TXSIREN_(x)  (((x) << UARTSIRCTL_TXSIREN_Pos) & UARTSIRCTL_TXSIREN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSIRCTL      RXPOL
  *  @access     UARTx->UARTSIRCTL
  *  @brief      Receive data polarity
  */
#define UARTSIRCTL_RXPOL_Pos  (2)
#define UARTSIRCTL_RXPOL_Msk  (0x1U << UARTSIRCTL_RXPOL_Pos)

#define UARTSIRCTL_RXPOL_NEGATIVE_PULSE_AS_ZERO  ((0x0U) << UARTSIRCTL_RXPOL_Pos)
#define UARTSIRCTL_RXPOL_POSITIVE_PULSE_AS_ZERO  ((0x1U) << UARTSIRCTL_RXPOL_Pos)

#define UARTSIRCTL_RXPOL_(x)  (((x) << UARTSIRCTL_RXPOL_Pos) & UARTSIRCTL_RXPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSIRCTL      TXPOL
  *  @access     UARTx->UARTSIRCTL
  *  @brief      Transmit data polarity
  */
#define UARTSIRCTL_TXPOL_Pos  (3)
#define UARTSIRCTL_TXPOL_Msk  (0x1U << UARTSIRCTL_TXPOL_Pos)

#define UARTSIRCTL_TXPOL_NEGATIVE_PULSE_AS_ZERO  ((0x0U) << UARTSIRCTL_TXPOL_Pos)
#define UARTSIRCTL_TXPOL_POSITIVE_PULSE_AS_ZERO  ((0x1U) << UARTSIRCTL_TXPOL_Pos)

#define UARTSIRCTL_TXPOL_(x)  (((x) << UARTSIRCTL_TXPOL_Pos) & UARTSIRCTL_TXPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSIRCTL      XMODE
  *  @access     UARTx->UARTSIRCTL
  *  @brief      Transmit pulse width select
  */
#define UARTSIRCTL_XMODE_Pos  (4)
#define UARTSIRCTL_XMODE_Msk  (0x1U << UARTSIRCTL_XMODE_Pos)

#define UARTSIRCTL_XMODE_WIDTH_3_OVER_16    ((0x0U) << UARTSIRCTL_XMODE_Pos)
#define UARTSIRCTL_XMODE_WIDTH_TXPW_CYCLES  ((0x1U) << UARTSIRCTL_XMODE_Pos)

#define UARTSIRCTL_XMODE_(x)  (((x) << UARTSIRCTL_XMODE_Pos) & UARTSIRCTL_XMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSIRCTL      TXPW
  *  @access     UARTx->UARTSIRCTL
  *  @brief      Transmit pulse width
  *              The minimum allowed value is 1. Write a 0 will be reset as 1 by hardware.
  */
#define UARTSIRCTL_TXPW_Pos  (5)
#define UARTSIRCTL_TXPW_Msk  (0x1FFU << UARTSIRCTL_TXPW_Pos)

#define UARTSIRCTL_TXPW_(x)  (((x) << UARTSIRCTL_TXPW_Pos) & UARTSIRCTL_TXPW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         RXNE
  *  @access     UARTx->UARTSTS
  *  @brief      Receive FIFO not empty (i.e. UARTRFLVL>0)
  */
#define UARTSTS_RXNE_Pos  (0)
#define UARTSTS_RXNE_Msk  (0x1U << UARTSTS_RXNE_Pos)

#define UARTSTS_RXNE_EMPTY      ((0x0U) << UARTSTS_RXNE_Pos)
#define UARTSTS_RXNE_NOT_EMPTY  ((0x1U) << UARTSTS_RXNE_Pos)

#define UARTSTS_RXNE_(x)  (((x) << UARTSTS_RXNE_Pos) & UARTSTS_RXNE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         RXFULL
  *  @access     UARTx->UARTSTS
  *  @brief      Receive FIFO full
  */
#define UARTSTS_RXFULL_Pos  (1)
#define UARTSTS_RXFULL_Msk  (0x1U << UARTSTS_RXFULL_Pos)

#define UARTSTS_RXFULL_NOT_FULL  ((0x0U) << UARTSTS_RXFULL_Pos)
#define UARTSTS_RXFULL_FULL      ((0x1U) << UARTSTS_RXFULL_Pos)

#define UARTSTS_RXFULL_(x)  (((x) << UARTSTS_RXFULL_Pos) & UARTSTS_RXFULL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         TXEMPTY
  *  @access     UARTx->UARTSTS
  *  @brief      Transmit FIFO empty
  */
#define UARTSTS_TXEMPTY_Pos  (2)
#define UARTSTS_TXEMPTY_Msk  (0x1U << UARTSTS_TXEMPTY_Pos)

#define UARTSTS_TXEMPTY_NOT_EMPTY  ((0x0U) << UARTSTS_TXEMPTY_Pos)
#define UARTSTS_TXEMPTY_EMPTY      ((0x1U) << UARTSTS_TXEMPTY_Pos)

#define UARTSTS_TXEMPTY_(x)  (((x) << UARTSTS_TXEMPTY_Pos) & UARTSTS_TXEMPTY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         TXNF
  *  @access     UARTx->UARTSTS
  *  @brief      Transmit FIFO not full (i.e. UARTTFLVL<64)
  */
#define UARTSTS_TXNF_Pos  (3)
#define UARTSTS_TXNF_Msk  (0x1U << UARTSTS_TXNF_Pos)

#define UARTSTS_TXNF_FULL      ((0x0U) << UARTSTS_TXNF_Pos)
#define UARTSTS_TXNF_NOT_FULL  ((0x1U) << UARTSTS_TXNF_Pos)

#define UARTSTS_TXNF_(x)  (((x) << UARTSTS_TXNF_Pos) & UARTSTS_TXNF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         RXPRTYERR
  *  @access     UARTx->UARTSTS
  *  @brief      Parity error indicator for the data just read out from the receive FIFO.
  *              For 32-bit bus, this bit is the logic OR of the parity error for all bytes read.
  */
#define UARTSTS_RXPRTYERR_Pos  (4)
#define UARTSTS_RXPRTYERR_Msk  (0x1U << UARTSTS_RXPRTYERR_Pos)

#define UARTSTS_RXPRTYERR_CORRECT  ((0x0U) << UARTSTS_RXPRTYERR_Pos)
#define UARTSTS_RXPRTYERR_ERROR    ((0x1U) << UARTSTS_RXPRTYERR_Pos)

#define UARTSTS_RXPRTYERR_(x)  (((x) << UARTSTS_RXPRTYERR_Pos) & UARTSTS_RXPRTYERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         RXFRMERR
  *  @access     UARTx->UARTSTS
  *  @brief      Frame error indicator for the data just read out from the receive FIFO.
  *              For 32-bit bus, this bit is the logic OR of the frame error for all bytes read.
  */
#define UARTSTS_RXFRMERR_Pos  (5)
#define UARTSTS_RXFRMERR_Msk  (0x1U << UARTSTS_RXFRMERR_Pos)

#define UARTSTS_RXFRMERR_CORRECT  ((0x0U) << UARTSTS_RXFRMERR_Pos)
#define UARTSTS_RXFRMERR_ERROR    ((0x1U) << UARTSTS_RXFRMERR_Pos)

#define UARTSTS_RXFRMERR_(x)  (((x) << UARTSTS_RXFRMERR_Pos) & UARTSTS_RXFRMERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         RXBRK
  *  @access     UARTx->UARTSTS
  *  @brief      Break condition indicator for the data just read out from the receive FIFO.
  *              For 32-bit bus, this bit is the logic OR of the break condition for all bytes
  *              read.
  */
#define UARTSTS_RXBRK_Pos  (6)
#define UARTSTS_RXBRK_Msk  (0x1U << UARTSTS_RXBRK_Pos)

#define UARTSTS_RXBRK_NORMAL_DATA      ((0x0U) << UARTSTS_RXBRK_Pos)
#define UARTSTS_RXBRK_BREAK_CONDITION  ((0x1U) << UARTSTS_RXBRK_Pos)

#define UARTSTS_RXBRK_(x)  (((x) << UARTSTS_RXBRK_Pos) & UARTSTS_RXBRK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         RXERR
  *  @access     UARTx->UARTSTS
  *  @brief      Indicate there is parity error, frame error or break condition for the un-read
  *              data in the receive FIFO
  */
#define UARTSTS_RXERR_Pos  (7)
#define UARTSTS_RXERR_Msk  (0x1U << UARTSTS_RXERR_Pos)

#define UARTSTS_RXERR_CORRECT  ((0x0U) << UARTSTS_RXERR_Pos)
#define UARTSTS_RXERR_ERROR    ((0x1U) << UARTSTS_RXERR_Pos)

#define UARTSTS_RXERR_(x)  (((x) << UARTSTS_RXERR_Pos) & UARTSTS_RXERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         RXBUSY
  *  @access     UARTx->UARTSTS
  *  @brief      Indicate the UART is receiving
  */
#define UARTSTS_RXBUSY_Pos  (8)
#define UARTSTS_RXBUSY_Msk  (0x1U << UARTSTS_RXBUSY_Pos)

#define UARTSTS_RXBUSY_IDLE  ((0x0U) << UARTSTS_RXBUSY_Pos)
#define UARTSTS_RXBUSY_BUSY  ((0x1U) << UARTSTS_RXBUSY_Pos)

#define UARTSTS_RXBUSY_(x)  (((x) << UARTSTS_RXBUSY_Pos) & UARTSTS_RXBUSY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTSTS         TXBUSY
  *  @access     UARTx->UARTSTS
  *  @brief      Indicate the UART is transmitting
  */
#define UARTSTS_TXBUSY_Pos  (9)
#define UARTSTS_TXBUSY_Msk  (0x1U << UARTSTS_TXBUSY_Pos)

#define UARTSTS_TXBUSY_IDLE  ((0x0U) << UARTSTS_TXBUSY_Pos)
#define UARTSTS_TXBUSY_BUSY  ((0x1U) << UARTSTS_TXBUSY_Pos)

#define UARTSTS_TXBUSY_(x)  (((x) << UARTSTS_TXBUSY_Pos) & UARTSTS_TXBUSY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       RXUDF
  *  @access     UARTx->UARTRAWIF
  *  @brief      Receive underflow interrupt raw flag
  *              It indicates an attempt to read UARTDAT when the receive FIFO is empty
  */
#define UARTRAWIF_RXUDF_Pos  (0)
#define UARTRAWIF_RXUDF_Msk  (0x1U << UARTRAWIF_RXUDF_Pos)

#define UARTRAWIF_RXUDF_NOT_OCCUR  ((0x0U) << UARTRAWIF_RXUDF_Pos)
#define UARTRAWIF_RXUDF_OCCUR      ((0x1U) << UARTRAWIF_RXUDF_Pos)

#define UARTRAWIF_RXUDF_(x)  (((x) << UARTRAWIF_RXUDF_Pos) & UARTRAWIF_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       RXOVF
  *  @access     UARTx->UARTRAWIF
  *  @brief      Receive overflow interrupt raw flag
  *              It indicates a new character is received when the receive FIFO is full and the
  *              new data is dropped.
  */
#define UARTRAWIF_RXOVF_Pos  (1)
#define UARTRAWIF_RXOVF_Msk  (0x1U << UARTRAWIF_RXOVF_Pos)

#define UARTRAWIF_RXOVF_NOT_OCCUR  ((0x0U) << UARTRAWIF_RXOVF_Pos)
#define UARTRAWIF_RXOVF_OCCUR      ((0x1U) << UARTRAWIF_RXOVF_Pos)

#define UARTRAWIF_RXOVF_(x)  (((x) << UARTRAWIF_RXOVF_Pos) & UARTRAWIF_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       RXREQ
  *  @access     UARTx->UARTRAWIF
  *  @brief      Receive data read request interrupt raw flag
  */
#define UARTRAWIF_RXREQ_Pos  (2)
#define UARTRAWIF_RXREQ_Msk  (0x1U << UARTRAWIF_RXREQ_Pos)

#define UARTRAWIF_RXREQ_NOT_OCCUR  ((0x0U) << UARTRAWIF_RXREQ_Pos)
#define UARTRAWIF_RXREQ_OCCUR      ((0x1U) << UARTRAWIF_RXREQ_Pos)

#define UARTRAWIF_RXREQ_(x)  (((x) << UARTRAWIF_RXREQ_Pos) & UARTRAWIF_RXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       RXPRTYERR
  *  @access     UARTx->UARTRAWIF
  *  @brief      Receive parity error interrupt raw flag
  *              This bit is set once a parity error is received
  *              In LIN mode, it indicates parity error for the PID
  */
#define UARTRAWIF_RXPRTYERR_Pos  (3)
#define UARTRAWIF_RXPRTYERR_Msk  (0x1U << UARTRAWIF_RXPRTYERR_Pos)

#define UARTRAWIF_RXPRTYERR_NOT_OCCUR  ((0x0U) << UARTRAWIF_RXPRTYERR_Pos)
#define UARTRAWIF_RXPRTYERR_OCCUR      ((0x1U) << UARTRAWIF_RXPRTYERR_Pos)

#define UARTRAWIF_RXPRTYERR_(x)  (((x) << UARTRAWIF_RXPRTYERR_Pos) & UARTRAWIF_RXPRTYERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       RXFRMERR
  *  @access     UARTx->UARTRAWIF
  *  @brief      Receive frame error interrupt raw flag
  *              This bit is set once a frame error (stop bit is low) is received
  */
#define UARTRAWIF_RXFRMERR_Pos  (4)
#define UARTRAWIF_RXFRMERR_Msk  (0x1U << UARTRAWIF_RXFRMERR_Pos)

#define UARTRAWIF_RXFRMERR_NOT_OCCUR  ((0x0U) << UARTRAWIF_RXFRMERR_Pos)
#define UARTRAWIF_RXFRMERR_OCCUR      ((0x1U) << UARTRAWIF_RXFRMERR_Pos)

#define UARTRAWIF_RXFRMERR_(x)  (((x) << UARTRAWIF_RXFRMERR_Pos) & UARTRAWIF_RXFRMERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       RXBRK
  *  @access     UARTx->UARTRAWIF
  *  @brief      Receive break condition interrupt raw flag
  *              This bit is set once a break condition is received
  */
#define UARTRAWIF_RXBRK_Pos  (5)
#define UARTRAWIF_RXBRK_Msk  (0x1U << UARTRAWIF_RXBRK_Pos)

#define UARTRAWIF_RXBRK_NOT_OCCUR  ((0x0U) << UARTRAWIF_RXBRK_Pos)
#define UARTRAWIF_RXBRK_OCCUR      ((0x1U) << UARTRAWIF_RXBRK_Pos)

#define UARTRAWIF_RXBRK_(x)  (((x) << UARTRAWIF_RXBRK_Pos) & UARTRAWIF_RXBRK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       RXTIMEOUT
  *  @access     UARTx->UARTRAWIF
  *  @brief      Receive time out interrupt raw flag
  *              For LIN mode, it indicates timeout for the response field
  */
#define UARTRAWIF_RXTIMEOUT_Pos  (6)
#define UARTRAWIF_RXTIMEOUT_Msk  (0x1U << UARTRAWIF_RXTIMEOUT_Pos)

#define UARTRAWIF_RXTIMEOUT_NOT_OCCUR  ((0x0U) << UARTRAWIF_RXTIMEOUT_Pos)
#define UARTRAWIF_RXTIMEOUT_OCCUR      ((0x1U) << UARTRAWIF_RXTIMEOUT_Pos)

#define UARTRAWIF_RXTIMEOUT_(x)  (((x) << UARTRAWIF_RXTIMEOUT_Pos) & UARTRAWIF_RXTIMEOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       TXOVF
  *  @access     UARTx->UARTRAWIF
  *  @brief      Transmit overflow interrupt raw flag
  *              It indicates an attempt to write UARTDAT when transmit FIFO is full
  */
#define UARTRAWIF_TXOVF_Pos  (7)
#define UARTRAWIF_TXOVF_Msk  (0x1U << UARTRAWIF_TXOVF_Pos)

#define UARTRAWIF_TXOVF_NOT_OCCUR  ((0x0U) << UARTRAWIF_TXOVF_Pos)
#define UARTRAWIF_TXOVF_OCCUR      ((0x1U) << UARTRAWIF_TXOVF_Pos)

#define UARTRAWIF_TXOVF_(x)  (((x) << UARTRAWIF_TXOVF_Pos) & UARTRAWIF_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       TXREQ
  *  @access     UARTx->UARTRAWIF
  *  @brief      Transmit data write request interrupt raw flag
  */
#define UARTRAWIF_TXREQ_Pos  (8)
#define UARTRAWIF_TXREQ_Msk  (0x1U << UARTRAWIF_TXREQ_Pos)

#define UARTRAWIF_TXREQ_NOT_OCCUR  ((0x0U) << UARTRAWIF_TXREQ_Pos)
#define UARTRAWIF_TXREQ_OCCUR      ((0x1U) << UARTRAWIF_TXREQ_Pos)

#define UARTRAWIF_TXREQ_(x)  (((x) << UARTRAWIF_TXREQ_Pos) & UARTRAWIF_TXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       ABLOCK
  *  @access     UARTx->UARTRAWIF
  *  @brief      Auto-baud lock interrupt raw flag
  */
#define UARTRAWIF_ABLOCK_Pos  (9)
#define UARTRAWIF_ABLOCK_Msk  (0x1U << UARTRAWIF_ABLOCK_Pos)

#define UARTRAWIF_ABLOCK_NOT_OCCUR  ((0x0U) << UARTRAWIF_ABLOCK_Pos)
#define UARTRAWIF_ABLOCK_OCCUR      ((0x1U) << UARTRAWIF_ABLOCK_Pos)

#define UARTRAWIF_ABLOCK_(x)  (((x) << UARTRAWIF_ABLOCK_Pos) & UARTRAWIF_ABLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       LINIDMATCH
  *  @access     UARTx->UARTRAWIF
  *  @brief      LIN received ID match interrupt raw flag
  */
#define UARTRAWIF_LINIDMATCH_Pos  (10)
#define UARTRAWIF_LINIDMATCH_Msk  (0x1U << UARTRAWIF_LINIDMATCH_Pos)

#define UARTRAWIF_LINIDMATCH_NOT_OCCUR  ((0x0U) << UARTRAWIF_LINIDMATCH_Pos)
#define UARTRAWIF_LINIDMATCH_OCCUR      ((0x1U) << UARTRAWIF_LINIDMATCH_Pos)

#define UARTRAWIF_LINIDMATCH_(x)  (((x) << UARTRAWIF_LINIDMATCH_Pos) & UARTRAWIF_LINIDMATCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       LINBITERR
  *  @access     UARTx->UARTRAWIF
  *  @brief      LIN bit error interrupt raw flag
  */
#define UARTRAWIF_LINBITERR_Pos  (11)
#define UARTRAWIF_LINBITERR_Msk  (0x1U << UARTRAWIF_LINBITERR_Pos)

#define UARTRAWIF_LINBITERR_NOT_OCCUR  ((0x0U) << UARTRAWIF_LINBITERR_Pos)
#define UARTRAWIF_LINBITERR_OCCUR      ((0x1U) << UARTRAWIF_LINBITERR_Pos)

#define UARTRAWIF_LINBITERR_(x)  (((x) << UARTRAWIF_LINBITERR_Pos) & UARTRAWIF_LINBITERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       LINCSERR
  *  @access     UARTx->UARTRAWIF
  *  @brief      LIN checksum error interrup raw flag
  */
#define UARTRAWIF_LINCSERR_Pos  (12)
#define UARTRAWIF_LINCSERR_Msk  (0x1U << UARTRAWIF_LINCSERR_Pos)

#define UARTRAWIF_LINCSERR_NOT_OCCUR  ((0x0U) << UARTRAWIF_LINCSERR_Pos)
#define UARTRAWIF_LINCSERR_OCCUR      ((0x1U) << UARTRAWIF_LINCSERR_Pos)

#define UARTRAWIF_LINCSERR_(x)  (((x) << UARTRAWIF_LINCSERR_Pos) & UARTRAWIF_LINCSERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       LINSBERR
  *  @access     UARTx->UARTRAWIF
  *  @brief      LIN received sync byte error raw flag
  */
#define UARTRAWIF_LINSBERR_Pos  (13)
#define UARTRAWIF_LINSBERR_Msk  (0x1U << UARTRAWIF_LINSBERR_Pos)

#define UARTRAWIF_LINSBERR_NOT_OCCUR  ((0x0U) << UARTRAWIF_LINSBERR_Pos)
#define UARTRAWIF_LINSBERR_OCCUR      ((0x1U) << UARTRAWIF_LINSBERR_Pos)

#define UARTRAWIF_LINSBERR_(x)  (((x) << UARTRAWIF_LINSBERR_Pos) & UARTRAWIF_LINSBERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTRAWIF       BUSIDLE
  *  @access     UARTx->UARTRAWIF
  *  @brief      LIN bus idle raw flag
  */
#define UARTRAWIF_BUSIDLE_Pos  (14)
#define UARTRAWIF_BUSIDLE_Msk  (0x1U << UARTRAWIF_BUSIDLE_Pos)

#define UARTRAWIF_BUSIDLE_NOT_OCCUR  ((0x0U) << UARTRAWIF_BUSIDLE_Pos)
#define UARTRAWIF_BUSIDLE_OCCUR      ((0x1U) << UARTRAWIF_BUSIDLE_Pos)

#define UARTRAWIF_BUSIDLE_(x)  (((x) << UARTRAWIF_BUSIDLE_Pos) & UARTRAWIF_BUSIDLE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          RXUDF
  *  @access     UARTx->UARTIF
  *  @brief      Receive underflow interrupt flag
  *              This bit is always 0 if UARTIE_RXUDF=0
  */
#define UARTIF_RXUDF_Pos  (0)
#define UARTIF_RXUDF_Msk  (0x1U << UARTIF_RXUDF_Pos)

#define UARTIF_RXUDF_NOT_OCCUR  ((0x0U) << UARTIF_RXUDF_Pos)
#define UARTIF_RXUDF_OCCUR      ((0x1U) << UARTIF_RXUDF_Pos)

#define UARTIF_RXUDF_(x)  (((x) << UARTIF_RXUDF_Pos) & UARTIF_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          RXOVF
  *  @access     UARTx->UARTIF
  *  @brief      Receive overflow interrupt flag
  *              This bit is always 0 if UARTIE_RXOVF=0
  */
#define UARTIF_RXOVF_Pos  (1)
#define UARTIF_RXOVF_Msk  (0x1U << UARTIF_RXOVF_Pos)

#define UARTIF_RXOVF_NOT_OCCUR  ((0x0U) << UARTIF_RXOVF_Pos)
#define UARTIF_RXOVF_OCCUR      ((0x1U) << UARTIF_RXOVF_Pos)

#define UARTIF_RXOVF_(x)  (((x) << UARTIF_RXOVF_Pos) & UARTIF_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          RXREQ
  *  @access     UARTx->UARTIF
  *  @brief      Receive data read request interrupt flag
  *              This bit is always 0 if UARTIE_RXREQ=0
  */
#define UARTIF_RXREQ_Pos  (2)
#define UARTIF_RXREQ_Msk  (0x1U << UARTIF_RXREQ_Pos)

#define UARTIF_RXREQ_NOT_OCCUR  ((0x0U) << UARTIF_RXREQ_Pos)
#define UARTIF_RXREQ_OCCUR      ((0x1U) << UARTIF_RXREQ_Pos)

#define UARTIF_RXREQ_(x)  (((x) << UARTIF_RXREQ_Pos) & UARTIF_RXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          RXPRTYERR
  *  @access     UARTx->UARTIF
  *  @brief      Receive parity error interrupt flag.
  *              This bit is always 0 if UARTIE_RXPRTYERR=0
  */
#define UARTIF_RXPRTYERR_Pos  (3)
#define UARTIF_RXPRTYERR_Msk  (0x1U << UARTIF_RXPRTYERR_Pos)

#define UARTIF_RXPRTYERR_NOT_OCCUR  ((0x0U) << UARTIF_RXPRTYERR_Pos)
#define UARTIF_RXPRTYERR_OCCUR      ((0x1U) << UARTIF_RXPRTYERR_Pos)

#define UARTIF_RXPRTYERR_(x)  (((x) << UARTIF_RXPRTYERR_Pos) & UARTIF_RXPRTYERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          RXFRMERR
  *  @access     UARTx->UARTIF
  *  @brief      Receive frame error interrupt flag.
  *              This bit is always 0 if UARTIE_RXFRMERR=0
  */
#define UARTIF_RXFRMERR_Pos  (4)
#define UARTIF_RXFRMERR_Msk  (0x1U << UARTIF_RXFRMERR_Pos)

#define UARTIF_RXFRMERR_NOT_OCCUR  ((0x0U) << UARTIF_RXFRMERR_Pos)
#define UARTIF_RXFRMERR_OCCUR      ((0x1U) << UARTIF_RXFRMERR_Pos)

#define UARTIF_RXFRMERR_(x)  (((x) << UARTIF_RXFRMERR_Pos) & UARTIF_RXFRMERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          RXBRK
  *  @access     UARTx->UARTIF
  *  @brief      Receive break condition interrupt flag
  *              This bit is always 0 if UARTIE_RXBRK=0
  */
#define UARTIF_RXBRK_Pos  (5)
#define UARTIF_RXBRK_Msk  (0x1U << UARTIF_RXBRK_Pos)

#define UARTIF_RXBRK_NOT_OCCUR  ((0x0U) << UARTIF_RXBRK_Pos)
#define UARTIF_RXBRK_OCCUR      ((0x1U) << UARTIF_RXBRK_Pos)

#define UARTIF_RXBRK_(x)  (((x) << UARTIF_RXBRK_Pos) & UARTIF_RXBRK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          RXTIMEOUT
  *  @access     UARTx->UARTIF
  *  @brief      Time out detected interrupt flag
  *              This bit is always 0 if UARTIE_RXTIMEOUT=0
  */
#define UARTIF_RXTIMEOUT_Pos  (6)
#define UARTIF_RXTIMEOUT_Msk  (0x1U << UARTIF_RXTIMEOUT_Pos)

#define UARTIF_RXTIMEOUT_NOT_OCCUR  ((0x0U) << UARTIF_RXTIMEOUT_Pos)
#define UARTIF_RXTIMEOUT_OCCUR      ((0x1U) << UARTIF_RXTIMEOUT_Pos)

#define UARTIF_RXTIMEOUT_(x)  (((x) << UARTIF_RXTIMEOUT_Pos) & UARTIF_RXTIMEOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          TXOVF
  *  @access     UARTx->UARTIF
  *  @brief      Transmit overflow interrupt flag
  *              This bit is always 0 if UARTIE_RXOVF=0
  */
#define UARTIF_TXOVF_Pos  (7)
#define UARTIF_TXOVF_Msk  (0x1U << UARTIF_TXOVF_Pos)

#define UARTIF_TXOVF_NOT_OCCUR  ((0x0U) << UARTIF_TXOVF_Pos)
#define UARTIF_TXOVF_OCCUR      ((0x1U) << UARTIF_TXOVF_Pos)

#define UARTIF_TXOVF_(x)  (((x) << UARTIF_TXOVF_Pos) & UARTIF_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          TXREQ
  *  @access     UARTx->UARTIF
  *  @brief      Transmit data write request interrupt flag
  *              This bit is always 0 if UARTIE_TXREQ=0
  */
#define UARTIF_TXREQ_Pos  (8)
#define UARTIF_TXREQ_Msk  (0x1U << UARTIF_TXREQ_Pos)

#define UARTIF_TXREQ_NOT_OCCUR  ((0x0U) << UARTIF_TXREQ_Pos)
#define UARTIF_TXREQ_OCCUR      ((0x1U) << UARTIF_TXREQ_Pos)

#define UARTIF_TXREQ_(x)  (((x) << UARTIF_TXREQ_Pos) & UARTIF_TXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          ABLOCK
  *  @access     UARTx->UARTIF
  *  @brief      Auto-baud lock interrupt flag
  *              This bit is always 0 if UARTIE_ABLOCK=0
  */
#define UARTIF_ABLOCK_Pos  (9)
#define UARTIF_ABLOCK_Msk  (0x1U << UARTIF_ABLOCK_Pos)

#define UARTIF_ABLOCK_NOT_OCCUR  ((0x0U) << UARTIF_ABLOCK_Pos)
#define UARTIF_ABLOCK_OCCUR      ((0x1U) << UARTIF_ABLOCK_Pos)

#define UARTIF_ABLOCK_(x)  (((x) << UARTIF_ABLOCK_Pos) & UARTIF_ABLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          LINIDMATCH
  *  @access     UARTx->UARTIF
  *  @brief      LIN received ID match interrupt flag
  *              This bit is always 0 if UARTIE_LINIDMATCH=0
  */
#define UARTIF_LINIDMATCH_Pos  (10)
#define UARTIF_LINIDMATCH_Msk  (0x1U << UARTIF_LINIDMATCH_Pos)

#define UARTIF_LINIDMATCH_NOT_OCCUR  ((0x0U) << UARTIF_LINIDMATCH_Pos)
#define UARTIF_LINIDMATCH_OCCUR      ((0x1U) << UARTIF_LINIDMATCH_Pos)

#define UARTIF_LINIDMATCH_(x)  (((x) << UARTIF_LINIDMATCH_Pos) & UARTIF_LINIDMATCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          LINBITERR
  *  @access     UARTx->UARTIF
  *  @brief      LIN bit error interrupt flag
  *              This bit is always 0 if UARTIE_LINBITERR=0
  */
#define UARTIF_LINBITERR_Pos  (11)
#define UARTIF_LINBITERR_Msk  (0x1U << UARTIF_LINBITERR_Pos)

#define UARTIF_LINBITERR_NOT_OCCUR  ((0x0U) << UARTIF_LINBITERR_Pos)
#define UARTIF_LINBITERR_OCCUR      ((0x1U) << UARTIF_LINBITERR_Pos)

#define UARTIF_LINBITERR_(x)  (((x) << UARTIF_LINBITERR_Pos) & UARTIF_LINBITERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          LINCSERR
  *  @access     UARTx->UARTIF
  *  @brief      LIN checksum error interrupt flag
  *              This bit is always 0 if UARTIE_LINCSERR=0
  */
#define UARTIF_LINCSERR_Pos  (12)
#define UARTIF_LINCSERR_Msk  (0x1U << UARTIF_LINCSERR_Pos)

#define UARTIF_LINCSERR_NOT_OCCUR  ((0x0U) << UARTIF_LINCSERR_Pos)
#define UARTIF_LINCSERR_OCCUR      ((0x1U) << UARTIF_LINCSERR_Pos)

#define UARTIF_LINCSERR_(x)  (((x) << UARTIF_LINCSERR_Pos) & UARTIF_LINCSERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          LINSBERR
  *  @access     UARTx->UARTIF
  *  @brief      LIN sync byte error interrupt flag
  */
#define UARTIF_LINSBERR_Pos  (13)
#define UARTIF_LINSBERR_Msk  (0x1U << UARTIF_LINSBERR_Pos)

#define UARTIF_LINSBERR_NOT_OCCUR  ((0x0U) << UARTIF_LINSBERR_Pos)
#define UARTIF_LINSBERR_OCCUR      ((0x1U) << UARTIF_LINSBERR_Pos)

#define UARTIF_LINSBERR_(x)  (((x) << UARTIF_LINSBERR_Pos) & UARTIF_LINSBERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          BUSIDLE
  *  @access     UARTx->UARTIF
  *  @brief      Bus idle interrupt flag
  */
#define UARTIF_BUSIDLE_Pos  (14)
#define UARTIF_BUSIDLE_Msk  (0x1U << UARTIF_BUSIDLE_Pos)

#define UARTIF_BUSIDLE_NOT_OCCUR  ((0x0U) << UARTIF_BUSIDLE_Pos)
#define UARTIF_BUSIDLE_OCCUR      ((0x1U) << UARTIF_BUSIDLE_Pos)

#define UARTIF_BUSIDLE_(x)  (((x) << UARTIF_BUSIDLE_Pos) & UARTIF_BUSIDLE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIF          INT
  *  @access     UARTx->UARTIF
  *  @brief      Global interrupt flag
  */
#define UARTIF_INT_Pos  (17)
#define UARTIF_INT_Msk  (0x1U << UARTIF_INT_Pos)

#define UARTIF_INT_NOT_OCCUR  ((0x0U) << UARTIF_INT_Pos)
#define UARTIF_INT_OCCUR      ((0x1U) << UARTIF_INT_Pos)

#define UARTIF_INT_(x)  (((x) << UARTIF_INT_Pos) & UARTIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          RXUDF
  *  @access     UARTx->UARTIC
  *  @brief      Receive underflow interrrupt clear
  */
#define UARTIC_RXUDF_Pos  (0)
#define UARTIC_RXUDF_Msk  (0x1U << UARTIC_RXUDF_Pos)

#define UARTIC_RXUDF_NO_EFFECT  ((0x0U) << UARTIC_RXUDF_Pos)
#define UARTIC_RXUDF_CLEAR      ((0x1U) << UARTIC_RXUDF_Pos)

#define UARTIC_RXUDF_(x)  (((x) << UARTIC_RXUDF_Pos) & UARTIC_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          RXOVF
  *  @access     UARTx->UARTIC
  *  @brief      Receive overflow interrupt clear
  */
#define UARTIC_RXOVF_Pos  (1)
#define UARTIC_RXOVF_Msk  (0x1U << UARTIC_RXOVF_Pos)

#define UARTIC_RXOVF_NO_EFFECT  ((0x0U) << UARTIC_RXOVF_Pos)
#define UARTIC_RXOVF_CLEAR      ((0x1U) << UARTIC_RXOVF_Pos)

#define UARTIC_RXOVF_(x)  (((x) << UARTIC_RXOVF_Pos) & UARTIC_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          RXPRTYERR
  *  @access     UARTx->UARTIC
  *  @brief      Receive parity error interrupt clear
  */
#define UARTIC_RXPRTYERR_Pos  (3)
#define UARTIC_RXPRTYERR_Msk  (0x1U << UARTIC_RXPRTYERR_Pos)

#define UARTIC_RXPRTYERR_NO_EFFECT  ((0x0U) << UARTIC_RXPRTYERR_Pos)
#define UARTIC_RXPRTYERR_CLEAR      ((0x1U) << UARTIC_RXPRTYERR_Pos)

#define UARTIC_RXPRTYERR_(x)  (((x) << UARTIC_RXPRTYERR_Pos) & UARTIC_RXPRTYERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          RXFRMERR
  *  @access     UARTx->UARTIC
  *  @brief      Receive frame error interrupt clear
  */
#define UARTIC_RXFRMERR_Pos  (4)
#define UARTIC_RXFRMERR_Msk  (0x1U << UARTIC_RXFRMERR_Pos)

#define UARTIC_RXFRMERR_NO_EFFECT  ((0x0U) << UARTIC_RXFRMERR_Pos)
#define UARTIC_RXFRMERR_CLEAR      ((0x1U) << UARTIC_RXFRMERR_Pos)

#define UARTIC_RXFRMERR_(x)  (((x) << UARTIC_RXFRMERR_Pos) & UARTIC_RXFRMERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          RXBRK
  *  @access     UARTx->UARTIC
  *  @brief      Receive break condition interrupt clear
  */
#define UARTIC_RXBRK_Pos  (5)
#define UARTIC_RXBRK_Msk  (0x1U << UARTIC_RXBRK_Pos)

#define UARTIC_RXBRK_NO_EFFECT  ((0x0U) << UARTIC_RXBRK_Pos)
#define UARTIC_RXBRK_CLEAR      ((0x1U) << UARTIC_RXBRK_Pos)

#define UARTIC_RXBRK_(x)  (((x) << UARTIC_RXBRK_Pos) & UARTIC_RXBRK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          RXTIMEOUT
  *  @access     UARTx->UARTIC
  *  @brief      Receive timeout interrupt clear
  */
#define UARTIC_RXTIMEOUT_Pos  (6)
#define UARTIC_RXTIMEOUT_Msk  (0x1U << UARTIC_RXTIMEOUT_Pos)

#define UARTIC_RXTIMEOUT_NO_EFFECT  ((0x0U) << UARTIC_RXTIMEOUT_Pos)
#define UARTIC_RXTIMEOUT_CLEAR      ((0x1U) << UARTIC_RXTIMEOUT_Pos)

#define UARTIC_RXTIMEOUT_(x)  (((x) << UARTIC_RXTIMEOUT_Pos) & UARTIC_RXTIMEOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          TXOVF
  *  @access     UARTx->UARTIC
  *  @brief      Transmit overflow interrupt clear
  */
#define UARTIC_TXOVF_Pos  (7)
#define UARTIC_TXOVF_Msk  (0x1U << UARTIC_TXOVF_Pos)

#define UARTIC_TXOVF_NO_EFFECT  ((0x0U) << UARTIC_TXOVF_Pos)
#define UARTIC_TXOVF_CLEAR      ((0x1U) << UARTIC_TXOVF_Pos)

#define UARTIC_TXOVF_(x)  (((x) << UARTIC_TXOVF_Pos) & UARTIC_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          ABLOCK
  *  @access     UARTx->UARTIC
  *  @brief      Auto-baud lock interrupt clear
  */
#define UARTIC_ABLOCK_Pos  (9)
#define UARTIC_ABLOCK_Msk  (0x1U << UARTIC_ABLOCK_Pos)

#define UARTIC_ABLOCK_NO_EFFECT  ((0x0U) << UARTIC_ABLOCK_Pos)
#define UARTIC_ABLOCK_CLEAR      ((0x1U) << UARTIC_ABLOCK_Pos)

#define UARTIC_ABLOCK_(x)  (((x) << UARTIC_ABLOCK_Pos) & UARTIC_ABLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          LINIDMATCH
  *  @access     UARTx->UARTIC
  *  @brief      LIN received ID match interrupt clear
  */
#define UARTIC_LINIDMATCH_Pos  (10)
#define UARTIC_LINIDMATCH_Msk  (0x1U << UARTIC_LINIDMATCH_Pos)

#define UARTIC_LINIDMATCH_NO_EFFECT  ((0x0U) << UARTIC_LINIDMATCH_Pos)
#define UARTIC_LINIDMATCH_CLEAR      ((0x1U) << UARTIC_LINIDMATCH_Pos)

#define UARTIC_LINIDMATCH_(x)  (((x) << UARTIC_LINIDMATCH_Pos) & UARTIC_LINIDMATCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          LINBITERR
  *  @access     UARTx->UARTIC
  *  @brief      LIN bit error interrupt clear
  */
#define UARTIC_LINBITERR_Pos  (11)
#define UARTIC_LINBITERR_Msk  (0x1U << UARTIC_LINBITERR_Pos)

#define UARTIC_LINBITERR_NO_EFFECT  ((0x0U) << UARTIC_LINBITERR_Pos)
#define UARTIC_LINBITERR_CLEAR      ((0x1U) << UARTIC_LINBITERR_Pos)

#define UARTIC_LINBITERR_(x)  (((x) << UARTIC_LINBITERR_Pos) & UARTIC_LINBITERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          LINCSERR
  *  @access     UARTx->UARTIC
  *  @brief      LIN checksum error interrupt clear
  */
#define UARTIC_LINCSERR_Pos  (12)
#define UARTIC_LINCSERR_Msk  (0x1U << UARTIC_LINCSERR_Pos)

#define UARTIC_LINCSERR_NO_EFFECT  ((0x0U) << UARTIC_LINCSERR_Pos)
#define UARTIC_LINCSERR_CLEAR      ((0x1U) << UARTIC_LINCSERR_Pos)

#define UARTIC_LINCSERR_(x)  (((x) << UARTIC_LINCSERR_Pos) & UARTIC_LINCSERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          LINSBERR
  *  @access     UARTx->UARTIC
  *  @brief      LIN sync byte error interrupt clear
  */
#define UARTIC_LINSBERR_Pos  (13)
#define UARTIC_LINSBERR_Msk  (0x1U << UARTIC_LINSBERR_Pos)

#define UARTIC_LINSBERR_NO_EFFECT  ((0x0U) << UARTIC_LINSBERR_Pos)
#define UARTIC_LINSBERR_CLEAR      ((0x1U) << UARTIC_LINSBERR_Pos)

#define UARTIC_LINSBERR_(x)  (((x) << UARTIC_LINSBERR_Pos) & UARTIC_LINSBERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          BUSIDLE
  *  @access     UARTx->UARTIC
  *  @brief      Bus idle interrupt clear
  */
#define UARTIC_BUSIDLE_Pos  (14)
#define UARTIC_BUSIDLE_Msk  (0x1U << UARTIC_BUSIDLE_Pos)

#define UARTIC_BUSIDLE_NO_EFFECT  ((0x0U) << UARTIC_BUSIDLE_Pos)
#define UARTIC_BUSIDLE_CLEAR      ((0x1U) << UARTIC_BUSIDLE_Pos)

#define UARTIC_BUSIDLE_(x)  (((x) << UARTIC_BUSIDLE_Pos) & UARTIC_BUSIDLE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIC          INT
  *  @access     UARTx->UARTIC
  *  @brief      Global interrupt clear
  */
#define UARTIC_INT_Pos  (17)
#define UARTIC_INT_Msk  (0x1U << UARTIC_INT_Pos)

#define UARTIC_INT_NO_EFFECT  ((0x0U) << UARTIC_INT_Pos)
#define UARTIC_INT_CLEAR      ((0x1U) << UARTIC_INT_Pos)

#define UARTIC_INT_(x)  (((x) << UARTIC_INT_Pos) & UARTIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          RXUDF
  *  @access     UARTx->UARTIE
  *  @brief      Receive underflow interrupt enable
  */
#define UARTIE_RXUDF_Pos  (0)
#define UARTIE_RXUDF_Msk  (0x1U << UARTIE_RXUDF_Pos)

#define UARTIE_RXUDF_DISABLE  ((0x0U) << UARTIE_RXUDF_Pos)
#define UARTIE_RXUDF_ENABLE   ((0x1U) << UARTIE_RXUDF_Pos)

#define UARTIE_RXUDF_(x)  (((x) << UARTIE_RXUDF_Pos) & UARTIE_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          RXOVF
  *  @access     UARTx->UARTIE
  *  @brief      Receive overflow interrupt enable
  */
#define UARTIE_RXOVF_Pos  (1)
#define UARTIE_RXOVF_Msk  (0x1U << UARTIE_RXOVF_Pos)

#define UARTIE_RXOVF_DISABLE  ((0x0U) << UARTIE_RXOVF_Pos)
#define UARTIE_RXOVF_ENABLE   ((0x1U) << UARTIE_RXOVF_Pos)

#define UARTIE_RXOVF_(x)  (((x) << UARTIE_RXOVF_Pos) & UARTIE_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          RXREQ
  *  @access     UARTx->UARTIE
  *  @brief      Receive data read request interrupt enable
  */
#define UARTIE_RXREQ_Pos  (2)
#define UARTIE_RXREQ_Msk  (0x1U << UARTIE_RXREQ_Pos)

#define UARTIE_RXREQ_DISABLE  ((0x0U) << UARTIE_RXREQ_Pos)
#define UARTIE_RXREQ_ENABLE   ((0x1U) << UARTIE_RXREQ_Pos)

#define UARTIE_RXREQ_(x)  (((x) << UARTIE_RXREQ_Pos) & UARTIE_RXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          RXPRTYERR
  *  @access     UARTx->UARTIE
  *  @brief      Receive parity error interrupt enable
  */
#define UARTIE_RXPRTYERR_Pos  (3)
#define UARTIE_RXPRTYERR_Msk  (0x1U << UARTIE_RXPRTYERR_Pos)

#define UARTIE_RXPRTYERR_DISABLE  ((0x0U) << UARTIE_RXPRTYERR_Pos)
#define UARTIE_RXPRTYERR_ENABLE   ((0x1U) << UARTIE_RXPRTYERR_Pos)

#define UARTIE_RXPRTYERR_(x)  (((x) << UARTIE_RXPRTYERR_Pos) & UARTIE_RXPRTYERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          RXFRMERR
  *  @access     UARTx->UARTIE
  *  @brief      Receive frame error interrupt enable
  */
#define UARTIE_RXFRMERR_Pos  (4)
#define UARTIE_RXFRMERR_Msk  (0x1U << UARTIE_RXFRMERR_Pos)

#define UARTIE_RXFRMERR_DISABLE  ((0x0U) << UARTIE_RXFRMERR_Pos)
#define UARTIE_RXFRMERR_ENABLE   ((0x1U) << UARTIE_RXFRMERR_Pos)

#define UARTIE_RXFRMERR_(x)  (((x) << UARTIE_RXFRMERR_Pos) & UARTIE_RXFRMERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          RXBRK
  *  @access     UARTx->UARTIE
  *  @brief      Receive break condition interrupt enable
  */
#define UARTIE_RXBRK_Pos  (5)
#define UARTIE_RXBRK_Msk  (0x1U << UARTIE_RXBRK_Pos)

#define UARTIE_RXBRK_DISABLE  ((0x0U) << UARTIE_RXBRK_Pos)
#define UARTIE_RXBRK_ENABLE   ((0x1U) << UARTIE_RXBRK_Pos)

#define UARTIE_RXBRK_(x)  (((x) << UARTIE_RXBRK_Pos) & UARTIE_RXBRK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          RXTIMEOUT
  *  @access     UARTx->UARTIE
  *  @brief      Receive timeout interrupt enable
  */
#define UARTIE_RXTIMEOUT_Pos  (6)
#define UARTIE_RXTIMEOUT_Msk  (0x1U << UARTIE_RXTIMEOUT_Pos)

#define UARTIE_RXTIMEOUT_DISABLE  ((0x0U) << UARTIE_RXTIMEOUT_Pos)
#define UARTIE_RXTIMEOUT_ENABLE   ((0x1U) << UARTIE_RXTIMEOUT_Pos)

#define UARTIE_RXTIMEOUT_(x)  (((x) << UARTIE_RXTIMEOUT_Pos) & UARTIE_RXTIMEOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          TXOVF
  *  @access     UARTx->UARTIE
  *  @brief      Transmit overflow interrupt enable
  */
#define UARTIE_TXOVF_Pos  (7)
#define UARTIE_TXOVF_Msk  (0x1U << UARTIE_TXOVF_Pos)

#define UARTIE_TXOVF_DISABLE  ((0x0U) << UARTIE_TXOVF_Pos)
#define UARTIE_TXOVF_ENABLE   ((0x1U) << UARTIE_TXOVF_Pos)

#define UARTIE_TXOVF_(x)  (((x) << UARTIE_TXOVF_Pos) & UARTIE_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          TXREQ
  *  @access     UARTx->UARTIE
  *  @brief      Transmit data write request interrupt enable
  */
#define UARTIE_TXREQ_Pos  (8)
#define UARTIE_TXREQ_Msk  (0x1U << UARTIE_TXREQ_Pos)

#define UARTIE_TXREQ_DISABLE  ((0x0U) << UARTIE_TXREQ_Pos)
#define UARTIE_TXREQ_ENABLE   ((0x1U) << UARTIE_TXREQ_Pos)

#define UARTIE_TXREQ_(x)  (((x) << UARTIE_TXREQ_Pos) & UARTIE_TXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          ABLOCK
  *  @access     UARTx->UARTIE
  *  @brief      Auto-baud lock interrupt enable
  */
#define UARTIE_ABLOCK_Pos  (9)
#define UARTIE_ABLOCK_Msk  (0x1U << UARTIE_ABLOCK_Pos)

#define UARTIE_ABLOCK_DISABLE  ((0x0U) << UARTIE_ABLOCK_Pos)
#define UARTIE_ABLOCK_ENABLE   ((0x1U) << UARTIE_ABLOCK_Pos)

#define UARTIE_ABLOCK_(x)  (((x) << UARTIE_ABLOCK_Pos) & UARTIE_ABLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          LINIDMATCH
  *  @access     UARTx->UARTIE
  *  @brief      LIN received ID match interrupt enable
  */
#define UARTIE_LINIDMATCH_Pos  (10)
#define UARTIE_LINIDMATCH_Msk  (0x1U << UARTIE_LINIDMATCH_Pos)

#define UARTIE_LINIDMATCH_DISABLE  ((0x0U) << UARTIE_LINIDMATCH_Pos)
#define UARTIE_LINIDMATCH_ENABLE   ((0x1U) << UARTIE_LINIDMATCH_Pos)

#define UARTIE_LINIDMATCH_(x)  (((x) << UARTIE_LINIDMATCH_Pos) & UARTIE_LINIDMATCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          LINBITERR
  *  @access     UARTx->UARTIE
  *  @brief      LIN bit error interrupt enable
  */
#define UARTIE_LINBITERR_Pos  (11)
#define UARTIE_LINBITERR_Msk  (0x1U << UARTIE_LINBITERR_Pos)

#define UARTIE_LINBITERR_DISABLE  ((0x0U) << UARTIE_LINBITERR_Pos)
#define UARTIE_LINBITERR_ENABLE   ((0x1U) << UARTIE_LINBITERR_Pos)

#define UARTIE_LINBITERR_(x)  (((x) << UARTIE_LINBITERR_Pos) & UARTIE_LINBITERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          LINCSERR
  *  @access     UARTx->UARTIE
  *  @brief      LIN checksum error interrupt enable
  */
#define UARTIE_LINCSERR_Pos  (12)
#define UARTIE_LINCSERR_Msk  (0x1U << UARTIE_LINCSERR_Pos)

#define UARTIE_LINCSERR_DISABLE  ((0x0U) << UARTIE_LINCSERR_Pos)
#define UARTIE_LINCSERR_ENABLE   ((0x1U) << UARTIE_LINCSERR_Pos)

#define UARTIE_LINCSERR_(x)  (((x) << UARTIE_LINCSERR_Pos) & UARTIE_LINCSERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          LINSBERR
  *  @access     UARTx->UARTIE
  *  @brief      LIN sync byte error interrupt enable
  */
#define UARTIE_LINSBERR_Pos  (13)
#define UARTIE_LINSBERR_Msk  (0x1U << UARTIE_LINSBERR_Pos)

#define UARTIE_LINSBERR_DISABLE  ((0x0U) << UARTIE_LINSBERR_Pos)
#define UARTIE_LINSBERR_ENABLE   ((0x1U) << UARTIE_LINSBERR_Pos)

#define UARTIE_LINSBERR_(x)  (((x) << UARTIE_LINSBERR_Pos) & UARTIE_LINSBERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTIE          BUSIDLE
  *  @access     UARTx->UARTIE
  *  @brief      Bus idle interrupt enable
  */
#define UARTIE_BUSIDLE_Pos  (14)
#define UARTIE_BUSIDLE_Msk  (0x1U << UARTIE_BUSIDLE_Pos)

#define UARTIE_BUSIDLE_DISABLE  ((0x0U) << UARTIE_BUSIDLE_Pos)
#define UARTIE_BUSIDLE_ENABLE   ((0x1U) << UARTIE_BUSIDLE_Pos)

#define UARTIE_BUSIDLE_(x)  (((x) << UARTIE_BUSIDLE_Pos) & UARTIE_BUSIDLE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTDGCTL       FLTWIN
  *  @access     UARTx->UARTDGCTL
  *  @brief      Deglitch filter window size is (FLTWIN+1) samples
  */
#define UARTDGCTL_FLTWIN_Pos  (0)
#define UARTDGCTL_FLTWIN_Msk  (0xFU << UARTDGCTL_FLTWIN_Pos)

#define UARTDGCTL_FLTWIN_(x)  (((x) << UARTDGCTL_FLTWIN_Pos) & UARTDGCTL_FLTWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTDGCTL       FLTTH
  *  @access     UARTx->UARTDGCTL
  *  @brief      Deglitch filter threshold is (FLTTH+1) 1's/0's for output to toggle
  */
#define UARTDGCTL_FLTTH_Pos  (4)
#define UARTDGCTL_FLTTH_Msk  (0xFU << UARTDGCTL_FLTTH_Pos)

#define UARTDGCTL_FLTTH_(x)  (((x) << UARTDGCTL_FLTTH_Pos) & UARTDGCTL_FLTTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTDGCTL       FLTDIV
  *  @access     UARTx->UARTDGCTL
  *  @brief      Deglitch filter clock dividing ratio, which is (FLTDIV+1)
  */
#define UARTDGCTL_FLTDIV_Pos  (8)
#define UARTDGCTL_FLTDIV_Msk  (0xFU << UARTDGCTL_FLTDIV_Pos)

#define UARTDGCTL_FLTDIV_(x)  (((x) << UARTDGCTL_FLTDIV_Pos) & UARTDGCTL_FLTDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              UARTx           UARTREGKEY      KEY
  *  @access     UARTx->UARTREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected UART registers
  */
#define UARTREGKEY_KEY_Pos  (0)
#define UARTREGKEY_KEY_Msk  (0xFFFFFFFFU << UARTREGKEY_KEY_Pos)

#define UARTREGKEY_KEY_(x)  (((x) << UARTREGKEY_KEY_Pos) & UARTREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      SPI:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIDATA         VAL
  *  @access     SPIx->SPIDATA
  *  @brief      Data to be written to the TXFIFO or read from the RXFIFO
  */
#define SPIDATA_VAL_Pos  (0)
#define SPIDATA_VAL_Msk  (0xFFFFFFFFU << SPIDATA_VAL_Pos)

#define SPIDATA_VAL_(x)  (((x) << SPIDATA_VAL_Pos) & SPIDATA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         EN
  *  @access     SPIx->SPICTL0
  *  @brief      Synchronous Serial Port Enable
  */
#define SPICTL0_EN_Pos  (0)
#define SPICTL0_EN_Msk  (0x1U << SPICTL0_EN_Pos)

#define SPICTL0_EN_DISABLE  ((0x0U) << SPICTL0_EN_Pos)
#define SPICTL0_EN_ENABLE   ((0x1U) << SPICTL0_EN_Pos)

#define SPICTL0_EN_(x)  (((x) << SPICTL0_EN_Pos) & SPICTL0_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         SLVCKRUN
  *  @access     SPIx->SPICTL0
  *  @brief      Slave Clock Free Running
  *              Only used for Slave mode.
  */
#define SPICTL0_SLVCKRUN_Pos  (1)
#define SPICTL0_SLVCKRUN_Msk  (0x1U << SPICTL0_SLVCKRUN_Pos)

#define SPICTL0_SLVCKRUN_DISABLE  ((0x0U) << SPICTL0_SLVCKRUN_Pos)
#define SPICTL0_SLVCKRUN_ENABLE   ((0x1U) << SPICTL0_SLVCKRUN_Pos)

#define SPICTL0_SLVCKRUN_(x)  (((x) << SPICTL0_SLVCKRUN_Pos) & SPICTL0_SLVCKRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         SELSLV
  *  @access     SPIx->SPICTL0
  *  @brief      Select Slave Mode
  */
#define SPICTL0_SELSLV_Pos  (2)
#define SPICTL0_SELSLV_Msk  (0x1U << SPICTL0_SELSLV_Pos)

#define SPICTL0_SELSLV_DISABLE  ((0x0U) << SPICTL0_SELSLV_Pos)
#define SPICTL0_SELSLV_ENABLE   ((0x1U) << SPICTL0_SELSLV_Pos)

#define SPICTL0_SELSLV_(x)  (((x) << SPICTL0_SELSLV_Pos) & SPICTL0_SELSLV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         SPIMODE
  *  @access     SPIx->SPICTL0
  *  @brief      SPI Clock Mode Select (Only used for SPI frame format)
  */
#define SPICTL0_SPIMODE_Pos  (3)
#define SPICTL0_SPIMODE_Msk  (0x3U << SPICTL0_SPIMODE_Pos)

#define SPICTL0_SPIMODE_PHS_POL_00  ((0x00U) << SPICTL0_SPIMODE_Pos)
#define SPICTL0_SPIMODE_PHS_POL_01  ((0x01U) << SPICTL0_SPIMODE_Pos)
#define SPICTL0_SPIMODE_PHS_POL_10  ((0x02U) << SPICTL0_SPIMODE_Pos)
#define SPICTL0_SPIMODE_PHS_POL_11  ((0x03U) << SPICTL0_SPIMODE_Pos)

#define SPICTL0_SPIMODE_(x)  (((x) << SPICTL0_SPIMODE_Pos) & SPICTL0_SPIMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         SFRMINV
  *  @access     SPIx->SPICTL0
  *  @brief      Invert Frame Signal
  */
#define SPICTL0_SFRMINV_Pos  (5)
#define SPICTL0_SFRMINV_Msk  (0x1U << SPICTL0_SFRMINV_Pos)

#define SPICTL0_SFRMINV_DISABLE  ((0x0U) << SPICTL0_SFRMINV_Pos)
#define SPICTL0_SFRMINV_ENABLE   ((0x1U) << SPICTL0_SFRMINV_Pos)

#define SPICTL0_SFRMINV_(x)  (((x) << SPICTL0_SFRMINV_Pos) & SPICTL0_SFRMINV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         RXONLY
  *  @access     SPIx->SPICTL0
  *  @brief      Receive Without Transmit
  *              Only used for Slave mode.
  */
#define SPICTL0_RXONLY_Pos  (6)
#define SPICTL0_RXONLY_Msk  (0x1U << SPICTL0_RXONLY_Pos)

#define SPICTL0_RXONLY_DISABLE  ((0x0U) << SPICTL0_RXONLY_Pos)
#define SPICTL0_RXONLY_ENABLE   ((0x1U) << SPICTL0_RXONLY_Pos)

#define SPICTL0_RXONLY_(x)  (((x) << SPICTL0_RXONLY_Pos) & SPICTL0_RXONLY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         SIZE
  *  @access     SPIx->SPICTL0
  *  @brief      Data Size Select
  */
#define SPICTL0_SIZE_Pos  (7)
#define SPICTL0_SIZE_Msk  (0x1FU << SPICTL0_SIZE_Pos)

#define SPICTL0_SIZE_(x)  (((x) << SPICTL0_SIZE_Pos) & SPICTL0_SIZE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         FRMFMT
  *  @access     SPIx->SPICTL0
  *  @brief      Frame Format
  */
#define SPICTL0_FRMFMT_Pos  (12)
#define SPICTL0_FRMFMT_Msk  (0x3U << SPICTL0_FRMFMT_Pos)

#define SPICTL0_FRMFMT_SPI    ((0x00U) << SPICTL0_FRMFMT_Pos)
#define SPICTL0_FRMFMT_SSP    ((0x01U) << SPICTL0_FRMFMT_Pos)
#define SPICTL0_FRMFMT_MWIRE  ((0x02U) << SPICTL0_FRMFMT_Pos)
#define SPICTL0_FRMFMT_PSP    ((0x03U) << SPICTL0_FRMFMT_Pos)

#define SPICTL0_FRMFMT_(x)  (((x) << SPICTL0_FRMFMT_Pos) & SPICTL0_FRMFMT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         FPACK
  *  @access     SPIx->SPICTL0
  *  @brief      FIFO Packing Enable
  */
#define SPICTL0_FPACK_Pos  (14)
#define SPICTL0_FPACK_Msk  (0x1U << SPICTL0_FPACK_Pos)

#define SPICTL0_FPACK_DISABLE  ((0x0U) << SPICTL0_FPACK_Pos)
#define SPICTL0_FPACK_ENABLE   ((0x1U) << SPICTL0_FPACK_Pos)

#define SPICTL0_FPACK_(x)  (((x) << SPICTL0_FPACK_Pos) & SPICTL0_FPACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         TRIEN
  *  @access     SPIx->SPICTL0
  *  @brief      STXD Tri-State Enable
  */
#define SPICTL0_TRIEN_Pos  (15)
#define SPICTL0_TRIEN_Msk  (0x1U << SPICTL0_TRIEN_Pos)

#define SPICTL0_TRIEN_DISABLE  ((0x0U) << SPICTL0_TRIEN_Pos)
#define SPICTL0_TRIEN_ENABLE   ((0x1U) << SPICTL0_TRIEN_Pos)

#define SPICTL0_TRIEN_(x)  (((x) << SPICTL0_TRIEN_Pos) & SPICTL0_TRIEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         TRIPHS
  *  @access     SPIx->SPICTL0
  *  @brief      STXD Tri-state Enable On Last Phase
  */
#define SPICTL0_TRIPHS_Pos  (16)
#define SPICTL0_TRIPHS_Msk  (0x1U << SPICTL0_TRIPHS_Pos)

#define SPICTL0_TRIPHS_ON_MIDDLE_LSB  ((0x0U) << SPICTL0_TRIPHS_Pos)
#define SPICTL0_TRIPHS_ON_END_LSB     ((0x1U) << SPICTL0_TRIPHS_Pos)

#define SPICTL0_TRIPHS_(x)  (((x) << SPICTL0_TRIPHS_Pos) & SPICTL0_TRIPHS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         MODE
  *  @access     SPIx->SPICTL0
  *  @brief      Mode Select
  */
#define SPICTL0_MODE_Pos  (17)
#define SPICTL0_MODE_Msk  (0x1U << SPICTL0_MODE_Pos)

#define SPICTL0_MODE_SSP      ((0x0U) << SPICTL0_MODE_Pos)
#define SPICTL0_MODE_NETWORK  ((0x1U) << SPICTL0_MODE_Pos)

#define SPICTL0_MODE_(x)  (((x) << SPICTL0_MODE_Pos) & SPICTL0_MODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         FRMSLOT
  *  @access     SPIx->SPICTL0
  *  @brief      Frame Slot
  *              Only used for Network mode.
  *              Specifies the number of time slots per frame (the actual number of time slots is
  *              this field + 1, so 1 to 8 time slots can be specified).
  */
#define SPICTL0_FRMSLOT_Pos  (18)
#define SPICTL0_FRMSLOT_Msk  (0x7U << SPICTL0_FRMSLOT_Pos)

#define SPICTL0_FRMSLOT_(x)  (((x) << SPICTL0_FRMSLOT_Pos) & SPICTL0_FRMSLOT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         MWIREDS
  *  @access     SPIx->SPICTL0
  *  @brief      Microwire Transmit Command Data Size
  *              Only used for MWIRE.
  */
#define SPICTL0_MWIREDS_Pos  (21)
#define SPICTL0_MWIREDS_Msk  (0x1U << SPICTL0_MWIREDS_Pos)

#define SPICTL0_MWIREDS_SIZE_8BIT   ((0x0U) << SPICTL0_MWIREDS_Pos)
#define SPICTL0_MWIREDS_SIZE_16BIT  ((0x1U) << SPICTL0_MWIREDS_Pos)

#define SPICTL0_MWIREDS_(x)  (((x) << SPICTL0_MWIREDS_Pos) & SPICTL0_MWIREDS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         DMARXREQ
  *  @access     SPIx->SPICTL0
  *  @brief      DMA Receive Service Request Enable
  */
#define SPICTL0_DMARXREQ_Pos  (22)
#define SPICTL0_DMARXREQ_Msk  (0x1U << SPICTL0_DMARXREQ_Pos)

#define SPICTL0_DMARXREQ_DISABLE  ((0x0U) << SPICTL0_DMARXREQ_Pos)
#define SPICTL0_DMARXREQ_ENABLE   ((0x1U) << SPICTL0_DMARXREQ_Pos)

#define SPICTL0_DMARXREQ_(x)  (((x) << SPICTL0_DMARXREQ_Pos) & SPICTL0_DMARXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         DMATXREQ
  *  @access     SPIx->SPICTL0
  *  @brief      DMA Transmit Service Request Enable
  */
#define SPICTL0_DMATXREQ_Pos  (23)
#define SPICTL0_DMATXREQ_Msk  (0x1U << SPICTL0_DMATXREQ_Pos)

#define SPICTL0_DMATXREQ_DISABLE  ((0x0U) << SPICTL0_DMATXREQ_Pos)
#define SPICTL0_DMATXREQ_ENABLE   ((0x1U) << SPICTL0_DMATXREQ_Pos)

#define SPICTL0_DMATXREQ_(x)  (((x) << SPICTL0_DMATXREQ_Pos) & SPICTL0_DMATXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL0         SWAPPIN
  *  @access     SPIx->SPICTL0
  *  @brief      Swap MOSI and MISO pin
  */
#define SPICTL0_SWAPPIN_Pos  (24)
#define SPICTL0_SWAPPIN_Msk  (0x1U << SPICTL0_SWAPPIN_Pos)

#define SPICTL0_SWAPPIN_ORIGINAL_FUNCTION  ((0x0U) << SPICTL0_SWAPPIN_Pos)
#define SPICTL0_SWAPPIN_SWAP_FUNCTION      ((0x1U) << SPICTL0_SWAPPIN_Pos)

#define SPICTL0_SWAPPIN_(x)  (((x) << SPICTL0_SWAPPIN_Pos) & SPICTL0_SWAPPIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPICTL1         SFRMLCK
  *  @access     SPIx->SPICTL1
  *  @brief      SFRM Lock Enable
  *              Only valid for SPI format, Master mode
  */
#define SPICTL1_SFRMLCK_Pos  (0)
#define SPICTL1_SFRMLCK_Msk  (0x1U << SPICTL1_SFRMLCK_Pos)

#define SPICTL1_SFRMLCK_DISABLE  ((0x0U) << SPICTL1_SFRMLCK_Pos)
#define SPICTL1_SFRMLCK_ENABLE   ((0x1U) << SPICTL1_SFRMLCK_Pos)

#define SPICTL1_SFRMLCK_(x)  (((x) << SPICTL1_SFRMLCK_Pos) & SPICTL1_SFRMLCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          TXNF
  *  @access     SPIx->SPISTS
  *  @brief      Transmit FIFO Not Full
  */
#define SPISTS_TXNF_Pos  (0)
#define SPISTS_TXNF_Msk  (0x1U << SPISTS_TXNF_Pos)

#define SPISTS_TXNF_FULL      ((0x0U) << SPISTS_TXNF_Pos)
#define SPISTS_TXNF_NOT_FULL  ((0x1U) << SPISTS_TXNF_Pos)

#define SPISTS_TXNF_(x)  (((x) << SPISTS_TXNF_Pos) & SPISTS_TXNF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          TXEMPTY
  *  @access     SPIx->SPISTS
  *  @brief      Transmit FIFO Not Full
  */
#define SPISTS_TXEMPTY_Pos  (1)
#define SPISTS_TXEMPTY_Msk  (0x1U << SPISTS_TXEMPTY_Pos)

#define SPISTS_TXEMPTY_NOT_EMPTY  ((0x0U) << SPISTS_TXEMPTY_Pos)
#define SPISTS_TXEMPTY_EMPTY      ((0x1U) << SPISTS_TXEMPTY_Pos)

#define SPISTS_TXEMPTY_(x)  (((x) << SPISTS_TXEMPTY_Pos) & SPISTS_TXEMPTY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          RXFULL
  *  @access     SPIx->SPISTS
  *  @brief      Receive FIFO full
  */
#define SPISTS_RXFULL_Pos  (2)
#define SPISTS_RXFULL_Msk  (0x1U << SPISTS_RXFULL_Pos)

#define SPISTS_RXFULL_NOT_FULL  ((0x0U) << SPISTS_RXFULL_Pos)
#define SPISTS_RXFULL_FULL      ((0x1U) << SPISTS_RXFULL_Pos)

#define SPISTS_RXFULL_(x)  (((x) << SPISTS_RXFULL_Pos) & SPISTS_RXFULL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          RXNE
  *  @access     SPIx->SPISTS
  *  @brief      Receive FIFO Not Empty
  */
#define SPISTS_RXNE_Pos  (3)
#define SPISTS_RXNE_Msk  (0x1U << SPISTS_RXNE_Pos)

#define SPISTS_RXNE_EMPTY      ((0x0U) << SPISTS_RXNE_Pos)
#define SPISTS_RXNE_NOT_EMPTY  ((0x1U) << SPISTS_RXNE_Pos)

#define SPISTS_RXNE_(x)  (((x) << SPISTS_RXNE_Pos) & SPISTS_RXNE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          BUSY
  *  @access     SPIx->SPISTS
  *  @brief      SPI busy
  */
#define SPISTS_BUSY_Pos  (4)
#define SPISTS_BUSY_Msk  (0x1U << SPISTS_BUSY_Pos)

#define SPISTS_BUSY_PORT_IDLE  ((0x0U) << SPISTS_BUSY_Pos)
#define SPISTS_BUSY_PORT_BUSY  ((0x1U) << SPISTS_BUSY_Pos)

#define SPISTS_BUSY_(x)  (((x) << SPISTS_BUSY_Pos) & SPISTS_BUSY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          SLVCLK
  *  @access     SPIx->SPISTS
  *  @brief      Clock Synchronization Status
  *              Software need only read this bit when the SPIx port is a slave or when the SPIx
  *              port is in the special FIFO test mode.
  *              Software should wait until this bit is cleared before allowing an external
  *              device to assert the external SFRM or SCLK signals.
  */
#define SPISTS_SLVCLK_Pos  (5)
#define SPISTS_SLVCLK_Msk  (0x1U << SPISTS_SLVCLK_Pos)

#define SPISTS_SLVCLK_READY  ((0x0U) << SPISTS_SLVCLK_Pos)
#define SPISTS_SLVCLK_BUSY   ((0x1U) << SPISTS_SLVCLK_Pos)

#define SPISTS_SLVCLK_(x)  (((x) << SPISTS_SLVCLK_Pos) & SPISTS_SLVCLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          TFEVEN
  *  @access     SPIx->SPISTS
  *  @brief      TXFIFO Even Sample Status
  *              This bit must be looked at only when FIFO Packing is enabled. Otherwise, this
  *              bit = 0.
  */
#define SPISTS_TFEVEN_Pos  (6)
#define SPISTS_TFEVEN_Msk  (0x1U << SPISTS_TFEVEN_Pos)

#define SPISTS_TFEVEN_ODD_SAMPLES   ((0x0U) << SPISTS_TFEVEN_Pos)
#define SPISTS_TFEVEN_EVEN_SAMPLES  ((0x1U) << SPISTS_TFEVEN_Pos)

#define SPISTS_TFEVEN_(x)  (((x) << SPISTS_TFEVEN_Pos) & SPISTS_TFEVEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          RFEVEN
  *  @access     SPIx->SPISTS
  *  @brief      RXFIFO Even Sample Status
  *              This bit must be looked at only when FIFO Packing is enabled. Otherwise, this
  *              bit = 0.
  */
#define SPISTS_RFEVEN_Pos  (7)
#define SPISTS_RFEVEN_Msk  (0x1U << SPISTS_RFEVEN_Pos)

#define SPISTS_RFEVEN_ODD_SAMPLES   ((0x0U) << SPISTS_RFEVEN_Pos)
#define SPISTS_RFEVEN_EVEN_SAMPLES  ((0x1U) << SPISTS_RFEVEN_Pos)

#define SPISTS_RFEVEN_(x)  (((x) << SPISTS_RFEVEN_Pos) & SPISTS_RFEVEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          ACTSLOT
  *  @access     SPIx->SPISTS
  *  @brief      Current active time slot.
  *              Because of synchronization between the SPI port's SCLK domain and an internal
  *              bus clock domain, the value in this field becomes stable between the beginning
  *              and end of the currently active time slot.
  */
#define SPISTS_ACTSLOT_Pos  (8)
#define SPISTS_ACTSLOT_Msk  (0x7U << SPISTS_ACTSLOT_Pos)

#define SPISTS_ACTSLOT_SLOT_0  ((0x000U) << SPISTS_ACTSLOT_Pos)
#define SPISTS_ACTSLOT_SLOT_1  ((0x001U) << SPISTS_ACTSLOT_Pos)
#define SPISTS_ACTSLOT_SLOT_2  ((0x002U) << SPISTS_ACTSLOT_Pos)
#define SPISTS_ACTSLOT_SLOT_3  ((0x003U) << SPISTS_ACTSLOT_Pos)
#define SPISTS_ACTSLOT_SLOT_4  ((0x004U) << SPISTS_ACTSLOT_Pos)
#define SPISTS_ACTSLOT_SLOT_5  ((0x005U) << SPISTS_ACTSLOT_Pos)
#define SPISTS_ACTSLOT_SLOT_6  ((0x006U) << SPISTS_ACTSLOT_Pos)
#define SPISTS_ACTSLOT_SLOT_7  ((0x007U) << SPISTS_ACTSLOT_Pos)

#define SPISTS_ACTSLOT_(x)  (((x) << SPISTS_ACTSLOT_Pos) & SPISTS_ACTSLOT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          NETBUSY
  *  @access     SPIx->SPISTS
  *  @brief      Network mode busy
  */
#define SPISTS_NETBUSY_Pos  (11)
#define SPISTS_NETBUSY_Msk  (0x1U << SPISTS_NETBUSY_Pos)

#define SPISTS_NETBUSY_NETWORK_IDLE  ((0x0U) << SPISTS_NETBUSY_Pos)
#define SPISTS_NETBUSY_NETWORK_BUSY  ((0x1U) << SPISTS_NETBUSY_Pos)

#define SPISTS_NETBUSY_(x)  (((x) << SPISTS_NETBUSY_Pos) & SPISTS_NETBUSY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPISTS          SFRMLCK
  *  @access     SPIx->SPISTS
  *  @brief      SFRM Locked
  *              Only valid for SPI format
  */
#define SPISTS_SFRMLCK_Pos  (12)
#define SPISTS_SFRMLCK_Msk  (0x1U << SPISTS_SFRMLCK_Pos)

#define SPISTS_SFRMLCK_NOT_LOCK  ((0x0U) << SPISTS_SFRMLCK_Pos)
#define SPISTS_SFRMLCK_LOCKED    ((0x1U) << SPISTS_SFRMLCK_Pos)

#define SPISTS_SFRMLCK_(x)  (((x) << SPISTS_SFRMLCK_Pos) & SPISTS_SFRMLCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRFLVL        VAL
  *  @access     SPIx->SPIRFLVL
  *  @brief      Number of valid data entries in the receive FIFO
  */
#define SPIRFLVL_VAL_Pos  (0)
#define SPIRFLVL_VAL_Msk  (0x1FU << SPIRFLVL_VAL_Pos)

#define SPIRFLVL_VAL_(x)  (((x) << SPIRFLVL_VAL_Pos) & SPIRFLVL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPITFLVL        VAL
  *  @access     SPIx->SPITFLVL
  *  @brief      Number of valid data entries in the transmit FIFO
  */
#define SPITFLVL_VAL_Pos  (0)
#define SPITFLVL_VAL_Msk  (0x1FU << SPITFLVL_VAL_Pos)

#define SPITFLVL_VAL_(x)  (((x) << SPITFLVL_VAL_Pos) & SPITFLVL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRFTH         VAL
  *  @access     SPIx->SPIRFTH
  *  @brief      Trigger receive data available interrupt when SSPRFLVL>SSPTRFTH
  */
#define SPIRFTH_VAL_Pos  (0)
#define SPIRFTH_VAL_Msk  (0xFU << SPIRFTH_VAL_Pos)

#define SPIRFTH_VAL_(x)  (((x) << SPIRFTH_VAL_Pos) & SPIRFTH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPITFTH         VAL
  *  @access     SPIx->SPITFTH
  *  @brief      Trigger transmit data request interrupt when SSPTFLVL<=SSPTFTH
  */
#define SPITFTH_VAL_Pos  (0)
#define SPITFTH_VAL_Msk  (0xFU << SPITFTH_VAL_Pos)

#define SPITFTH_VAL_(x)  (((x) << SPITFTH_VAL_Pos) & SPITFTH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        RXUD
  *  @access     SPIx->SPIRAWIF
  *  @brief      Receive FIFO underrun interrupt Flag
  */
#define SPIRAWIF_RXUD_Pos  (0)
#define SPIRAWIF_RXUD_Msk  (0x1U << SPIRAWIF_RXUD_Pos)

#define SPIRAWIF_RXUD_NOT_OCCUR  ((0x0U) << SPIRAWIF_RXUD_Pos)
#define SPIRAWIF_RXUD_OCCUR      ((0x1U) << SPIRAWIF_RXUD_Pos)

#define SPIRAWIF_RXUD_(x)  (((x) << SPIRAWIF_RXUD_Pos) & SPIRAWIF_RXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        RXOV
  *  @access     SPIx->SPIRAWIF
  *  @brief      Receive FIFO Overrun Interrupt Flag
  */
#define SPIRAWIF_RXOV_Pos  (1)
#define SPIRAWIF_RXOV_Msk  (0x1U << SPIRAWIF_RXOV_Pos)

#define SPIRAWIF_RXOV_NOT_OCCUR  ((0x0U) << SPIRAWIF_RXOV_Pos)
#define SPIRAWIF_RXOV_OCCUR      ((0x1U) << SPIRAWIF_RXOV_Pos)

#define SPIRAWIF_RXOV_(x)  (((x) << SPIRAWIF_RXOV_Pos) & SPIRAWIF_RXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        RXREQ
  *  @access     SPIx->SPIRAWIF
  *  @brief      Receive FIFO Service Request Interrupt Flag
  */
#define SPIRAWIF_RXREQ_Pos  (2)
#define SPIRAWIF_RXREQ_Msk  (0x1U << SPIRAWIF_RXREQ_Pos)

#define SPIRAWIF_RXREQ_NOT_OCCUR  ((0x0U) << SPIRAWIF_RXREQ_Pos)
#define SPIRAWIF_RXREQ_OCCUR      ((0x1U) << SPIRAWIF_RXREQ_Pos)

#define SPIRAWIF_RXREQ_(x)  (((x) << SPIRAWIF_RXREQ_Pos) & SPIRAWIF_RXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        TO
  *  @access     SPIx->SPIRAWIF
  *  @brief      Receiver Timeout Interrupt Flag
  */
#define SPIRAWIF_TO_Pos  (3)
#define SPIRAWIF_TO_Msk  (0x1U << SPIRAWIF_TO_Pos)

#define SPIRAWIF_TO_NOT_OCCUR  ((0x0U) << SPIRAWIF_TO_Pos)
#define SPIRAWIF_TO_OCCUR      ((0x1U) << SPIRAWIF_TO_Pos)

#define SPIRAWIF_TO_(x)  (((x) << SPIRAWIF_TO_Pos) & SPIRAWIF_TO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        TXUD
  *  @access     SPIx->SPIRAWIF
  *  @brief      Transmit FIFO Underrun Interrupt Flag
  */
#define SPIRAWIF_TXUD_Pos  (4)
#define SPIRAWIF_TXUD_Msk  (0x1U << SPIRAWIF_TXUD_Pos)

#define SPIRAWIF_TXUD_NOT_OCCUR  ((0x0U) << SPIRAWIF_TXUD_Pos)
#define SPIRAWIF_TXUD_OCCUR      ((0x1U) << SPIRAWIF_TXUD_Pos)

#define SPIRAWIF_TXUD_(x)  (((x) << SPIRAWIF_TXUD_Pos) & SPIRAWIF_TXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        TXOV
  *  @access     SPIx->SPIRAWIF
  *  @brief      Transmit FIFO overrun interrupt Flag
  */
#define SPIRAWIF_TXOV_Pos  (5)
#define SPIRAWIF_TXOV_Msk  (0x1U << SPIRAWIF_TXOV_Pos)

#define SPIRAWIF_TXOV_NOT_OCCUR  ((0x0U) << SPIRAWIF_TXOV_Pos)
#define SPIRAWIF_TXOV_OCCUR      ((0x1U) << SPIRAWIF_TXOV_Pos)

#define SPIRAWIF_TXOV_(x)  (((x) << SPIRAWIF_TXOV_Pos) & SPIRAWIF_TXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        TXREQ
  *  @access     SPIx->SPIRAWIF
  *  @brief      Transmit FIFO Service Request Interrupt Flag
  */
#define SPIRAWIF_TXREQ_Pos  (6)
#define SPIRAWIF_TXREQ_Msk  (0x1U << SPIRAWIF_TXREQ_Pos)

#define SPIRAWIF_TXREQ_NOT_OCCUR  ((0x0U) << SPIRAWIF_TXREQ_Pos)
#define SPIRAWIF_TXREQ_OCCUR      ((0x1U) << SPIRAWIF_TXREQ_Pos)

#define SPIRAWIF_TXREQ_(x)  (((x) << SPIRAWIF_TXREQ_Pos) & SPIRAWIF_TXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIRAWIF        BITCNTERR
  *  @access     SPIx->SPIRAWIF
  *  @brief      Bit Count Error Interrupt Flag
  */
#define SPIRAWIF_BITCNTERR_Pos  (7)
#define SPIRAWIF_BITCNTERR_Msk  (0x1U << SPIRAWIF_BITCNTERR_Pos)

#define SPIRAWIF_BITCNTERR_NOT_OCCUR  ((0x0U) << SPIRAWIF_BITCNTERR_Pos)
#define SPIRAWIF_BITCNTERR_OCCUR      ((0x1U) << SPIRAWIF_BITCNTERR_Pos)

#define SPIRAWIF_BITCNTERR_(x)  (((x) << SPIRAWIF_BITCNTERR_Pos) & SPIRAWIF_BITCNTERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           RXUD
  *  @access     SPIx->SPIIF
  *  @brief      Receive FIFO underrun interrupt Flag
  */
#define SPIIF_RXUD_Pos  (0)
#define SPIIF_RXUD_Msk  (0x1U << SPIIF_RXUD_Pos)

#define SPIIF_RXUD_NOT_OCCUR  ((0x0U) << SPIIF_RXUD_Pos)
#define SPIIF_RXUD_OCCUR      ((0x1U) << SPIIF_RXUD_Pos)

#define SPIIF_RXUD_(x)  (((x) << SPIIF_RXUD_Pos) & SPIIF_RXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           RXOV
  *  @access     SPIx->SPIIF
  *  @brief      Receive FIFO Overrun Interrupt Flag
  */
#define SPIIF_RXOV_Pos  (1)
#define SPIIF_RXOV_Msk  (0x1U << SPIIF_RXOV_Pos)

#define SPIIF_RXOV_NOT_OCCUR  ((0x0U) << SPIIF_RXOV_Pos)
#define SPIIF_RXOV_OCCUR      ((0x1U) << SPIIF_RXOV_Pos)

#define SPIIF_RXOV_(x)  (((x) << SPIIF_RXOV_Pos) & SPIIF_RXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           RXREQ
  *  @access     SPIx->SPIIF
  *  @brief      Receive FIFO Service Request Interrupt Flag
  */
#define SPIIF_RXREQ_Pos  (2)
#define SPIIF_RXREQ_Msk  (0x1U << SPIIF_RXREQ_Pos)

#define SPIIF_RXREQ_NOT_OCCUR  ((0x0U) << SPIIF_RXREQ_Pos)
#define SPIIF_RXREQ_OCCUR      ((0x1U) << SPIIF_RXREQ_Pos)

#define SPIIF_RXREQ_(x)  (((x) << SPIIF_RXREQ_Pos) & SPIIF_RXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           TO
  *  @access     SPIx->SPIIF
  *  @brief      Receiver Timeout Interrupt Flag
  */
#define SPIIF_TO_Pos  (3)
#define SPIIF_TO_Msk  (0x1U << SPIIF_TO_Pos)

#define SPIIF_TO_NOT_OCCUR  ((0x0U) << SPIIF_TO_Pos)
#define SPIIF_TO_OCCUR      ((0x1U) << SPIIF_TO_Pos)

#define SPIIF_TO_(x)  (((x) << SPIIF_TO_Pos) & SPIIF_TO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           TXUD
  *  @access     SPIx->SPIIF
  *  @brief      Transmit FIFO Underrun Interrupt Flag
  */
#define SPIIF_TXUD_Pos  (4)
#define SPIIF_TXUD_Msk  (0x1U << SPIIF_TXUD_Pos)

#define SPIIF_TXUD_NOT_OCCUR  ((0x0U) << SPIIF_TXUD_Pos)
#define SPIIF_TXUD_OCCUR      ((0x1U) << SPIIF_TXUD_Pos)

#define SPIIF_TXUD_(x)  (((x) << SPIIF_TXUD_Pos) & SPIIF_TXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           TXOV
  *  @access     SPIx->SPIIF
  *  @brief      Transmit FIFO overrun interrupt Flag
  */
#define SPIIF_TXOV_Pos  (5)
#define SPIIF_TXOV_Msk  (0x1U << SPIIF_TXOV_Pos)

#define SPIIF_TXOV_NOT_OCCUR  ((0x0U) << SPIIF_TXOV_Pos)
#define SPIIF_TXOV_OCCUR      ((0x1U) << SPIIF_TXOV_Pos)

#define SPIIF_TXOV_(x)  (((x) << SPIIF_TXOV_Pos) & SPIIF_TXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           TXREQ
  *  @access     SPIx->SPIIF
  *  @brief      Transmit FIFO Service Request Interrupt Flag
  */
#define SPIIF_TXREQ_Pos  (6)
#define SPIIF_TXREQ_Msk  (0x1U << SPIIF_TXREQ_Pos)

#define SPIIF_TXREQ_NOT_OCCUR  ((0x0U) << SPIIF_TXREQ_Pos)
#define SPIIF_TXREQ_OCCUR      ((0x1U) << SPIIF_TXREQ_Pos)

#define SPIIF_TXREQ_(x)  (((x) << SPIIF_TXREQ_Pos) & SPIIF_TXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           BITCNTERR
  *  @access     SPIx->SPIIF
  *  @brief      Bit Count Error Interrupt Flag
  */
#define SPIIF_BITCNTERR_Pos  (7)
#define SPIIF_BITCNTERR_Msk  (0x1U << SPIIF_BITCNTERR_Pos)

#define SPIIF_BITCNTERR_NOT_OCCUR  ((0x0U) << SPIIF_BITCNTERR_Pos)
#define SPIIF_BITCNTERR_OCCUR      ((0x1U) << SPIIF_BITCNTERR_Pos)

#define SPIIF_BITCNTERR_(x)  (((x) << SPIIF_BITCNTERR_Pos) & SPIIF_BITCNTERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIF           INT
  *  @access     SPIx->SPIIF
  *  @brief      Global interrupt flag
  */
#define SPIIF_INT_Pos  (10)
#define SPIIF_INT_Msk  (0x1U << SPIIF_INT_Pos)

#define SPIIF_INT_NOT_OCCUR  ((0x0U) << SPIIF_INT_Pos)
#define SPIIF_INT_OCCUR      ((0x1U) << SPIIF_INT_Pos)

#define SPIIF_INT_(x)  (((x) << SPIIF_INT_Pos) & SPIIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIC           RXUD
  *  @access     SPIx->SPIIC
  *  @brief      Receive FIFO underrun interrupt Clear
  */
#define SPIIC_RXUD_Pos  (0)
#define SPIIC_RXUD_Msk  (0x1U << SPIIC_RXUD_Pos)

#define SPIIC_RXUD_NO_EFFECT  ((0x0U) << SPIIC_RXUD_Pos)
#define SPIIC_RXUD_CLEAR      ((0x1U) << SPIIC_RXUD_Pos)

#define SPIIC_RXUD_(x)  (((x) << SPIIC_RXUD_Pos) & SPIIC_RXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIC           RXOV
  *  @access     SPIx->SPIIC
  *  @brief      Receive FIFO Overrun Interrupt Clear
  */
#define SPIIC_RXOV_Pos  (1)
#define SPIIC_RXOV_Msk  (0x1U << SPIIC_RXOV_Pos)

#define SPIIC_RXOV_NO_EFFECT  ((0x0U) << SPIIC_RXOV_Pos)
#define SPIIC_RXOV_CLEAR      ((0x1U) << SPIIC_RXOV_Pos)

#define SPIIC_RXOV_(x)  (((x) << SPIIC_RXOV_Pos) & SPIIC_RXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIC           TO
  *  @access     SPIx->SPIIC
  *  @brief      Receiver Timeout Interrupt Clear
  */
#define SPIIC_TO_Pos  (3)
#define SPIIC_TO_Msk  (0x1U << SPIIC_TO_Pos)

#define SPIIC_TO_NO_EFFECT  ((0x0U) << SPIIC_TO_Pos)
#define SPIIC_TO_CLEAR      ((0x1U) << SPIIC_TO_Pos)

#define SPIIC_TO_(x)  (((x) << SPIIC_TO_Pos) & SPIIC_TO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIC           TXUD
  *  @access     SPIx->SPIIC
  *  @brief      Transmit FIFO Underrun Interrupt Clear
  */
#define SPIIC_TXUD_Pos  (4)
#define SPIIC_TXUD_Msk  (0x1U << SPIIC_TXUD_Pos)

#define SPIIC_TXUD_NO_EFFECT  ((0x0U) << SPIIC_TXUD_Pos)
#define SPIIC_TXUD_CLEAR      ((0x1U) << SPIIC_TXUD_Pos)

#define SPIIC_TXUD_(x)  (((x) << SPIIC_TXUD_Pos) & SPIIC_TXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIC           TXOV
  *  @access     SPIx->SPIIC
  *  @brief      Transmit FIFO overrun interrupt Clear
  */
#define SPIIC_TXOV_Pos  (5)
#define SPIIC_TXOV_Msk  (0x1U << SPIIC_TXOV_Pos)

#define SPIIC_TXOV_NO_EFFECT  ((0x0U) << SPIIC_TXOV_Pos)
#define SPIIC_TXOV_CLEAR      ((0x1U) << SPIIC_TXOV_Pos)

#define SPIIC_TXOV_(x)  (((x) << SPIIC_TXOV_Pos) & SPIIC_TXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIC           BITCNTERR
  *  @access     SPIx->SPIIC
  *  @brief      Bit Count Error Interrupt Clear
  */
#define SPIIC_BITCNTERR_Pos  (7)
#define SPIIC_BITCNTERR_Msk  (0x1U << SPIIC_BITCNTERR_Pos)

#define SPIIC_BITCNTERR_NO_EFFECT  ((0x0U) << SPIIC_BITCNTERR_Pos)
#define SPIIC_BITCNTERR_CLEAR      ((0x1U) << SPIIC_BITCNTERR_Pos)

#define SPIIC_BITCNTERR_(x)  (((x) << SPIIC_BITCNTERR_Pos) & SPIIC_BITCNTERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIC           INT
  *  @access     SPIx->SPIIC
  *  @brief      Global Interrupt Clear
  */
#define SPIIC_INT_Pos  (10)
#define SPIIC_INT_Msk  (0x1U << SPIIC_INT_Pos)

#define SPIIC_INT_NO_EFFECT  ((0x0U) << SPIIC_INT_Pos)
#define SPIIC_INT_CLEAR      ((0x1U) << SPIIC_INT_Pos)

#define SPIIC_INT_(x)  (((x) << SPIIC_INT_Pos) & SPIIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           RXUD
  *  @access     SPIx->SPIIE
  *  @brief      Receive FIFO underrun interrupt enable
  */
#define SPIIE_RXUD_Pos  (0)
#define SPIIE_RXUD_Msk  (0x1U << SPIIE_RXUD_Pos)

#define SPIIE_RXUD_DISABLE  ((0x0U) << SPIIE_RXUD_Pos)
#define SPIIE_RXUD_ENABLE   ((0x1U) << SPIIE_RXUD_Pos)

#define SPIIE_RXUD_(x)  (((x) << SPIIE_RXUD_Pos) & SPIIE_RXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           RXOV
  *  @access     SPIx->SPIIE
  *  @brief      Receive FIFO Overrun Interrupt Enable
  */
#define SPIIE_RXOV_Pos  (1)
#define SPIIE_RXOV_Msk  (0x1U << SPIIE_RXOV_Pos)

#define SPIIE_RXOV_DISABLE  ((0x0U) << SPIIE_RXOV_Pos)
#define SPIIE_RXOV_ENABLE   ((0x1U) << SPIIE_RXOV_Pos)

#define SPIIE_RXOV_(x)  (((x) << SPIIE_RXOV_Pos) & SPIIE_RXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           RXREQ
  *  @access     SPIx->SPIIE
  *  @brief      Receive FIFO Service Request Interrupt Enable
  */
#define SPIIE_RXREQ_Pos  (2)
#define SPIIE_RXREQ_Msk  (0x1U << SPIIE_RXREQ_Pos)

#define SPIIE_RXREQ_DISABLE  ((0x0U) << SPIIE_RXREQ_Pos)
#define SPIIE_RXREQ_ENABLE   ((0x1U) << SPIIE_RXREQ_Pos)

#define SPIIE_RXREQ_(x)  (((x) << SPIIE_RXREQ_Pos) & SPIIE_RXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           TO
  *  @access     SPIx->SPIIE
  *  @brief      Receiver Timeout Interrupt Enable
  */
#define SPIIE_TO_Pos  (3)
#define SPIIE_TO_Msk  (0x1U << SPIIE_TO_Pos)

#define SPIIE_TO_DISABLE  ((0x0U) << SPIIE_TO_Pos)
#define SPIIE_TO_ENABLE   ((0x1U) << SPIIE_TO_Pos)

#define SPIIE_TO_(x)  (((x) << SPIIE_TO_Pos) & SPIIE_TO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           TXUD
  *  @access     SPIx->SPIIE
  *  @brief      Transmit FIFO Underrun Interrupt Enable
  */
#define SPIIE_TXUD_Pos  (4)
#define SPIIE_TXUD_Msk  (0x1U << SPIIE_TXUD_Pos)

#define SPIIE_TXUD_DISABLE  ((0x0U) << SPIIE_TXUD_Pos)
#define SPIIE_TXUD_ENABLE   ((0x1U) << SPIIE_TXUD_Pos)

#define SPIIE_TXUD_(x)  (((x) << SPIIE_TXUD_Pos) & SPIIE_TXUD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           TXOV
  *  @access     SPIx->SPIIE
  *  @brief      Transmit FIFO overrun interrupt enable
  */
#define SPIIE_TXOV_Pos  (5)
#define SPIIE_TXOV_Msk  (0x1U << SPIIE_TXOV_Pos)

#define SPIIE_TXOV_DISABLE  ((0x0U) << SPIIE_TXOV_Pos)
#define SPIIE_TXOV_ENABLE   ((0x1U) << SPIIE_TXOV_Pos)

#define SPIIE_TXOV_(x)  (((x) << SPIIE_TXOV_Pos) & SPIIE_TXOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           TXREQ
  *  @access     SPIx->SPIIE
  *  @brief      Transmit FIFO Service Request Interrupt Enable
  */
#define SPIIE_TXREQ_Pos  (6)
#define SPIIE_TXREQ_Msk  (0x1U << SPIIE_TXREQ_Pos)

#define SPIIE_TXREQ_DISABLE  ((0x0U) << SPIIE_TXREQ_Pos)
#define SPIIE_TXREQ_ENABLE   ((0x1U) << SPIIE_TXREQ_Pos)

#define SPIIE_TXREQ_(x)  (((x) << SPIIE_TXREQ_Pos) & SPIIE_TXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIIE           BITCNTERR
  *  @access     SPIx->SPIIE
  *  @brief      Bit Count Error Interrupt Enable
  */
#define SPIIE_BITCNTERR_Pos  (7)
#define SPIIE_BITCNTERR_Msk  (0x1U << SPIIE_BITCNTERR_Pos)

#define SPIIE_BITCNTERR_DISABLE  ((0x0U) << SPIIE_BITCNTERR_Pos)
#define SPIIE_BITCNTERR_ENABLE   ((0x1U) << SPIIE_BITCNTERR_Pos)

#define SPIIE_BITCNTERR_(x)  (((x) << SPIIE_BITCNTERR_Pos) & SPIIE_BITCNTERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPITO           VAL
  *  @access     SPIx->SPITO
  *  @brief      Timeout interval defined as 2^VAL+1 SPI clock (CLK_SPI)
  */
#define SPITO_VAL_Pos  (0)
#define SPITO_VAL_Msk  (0xFFFFFFU << SPITO_VAL_Pos)

#define SPITO_VAL_(x)  (((x) << SPITO_VAL_Pos) & SPITO_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          CLKMODE
  *  @access     SPIx->SPIPSP
  *  @brief      Serial Bit-rate Clock Mode
  *              Only used in PSP frame format.
  */
#define SPIPSP_CLKMODE_Pos  (0)
#define SPIPSP_CLKMODE_Msk  (0x3U << SPIPSP_CLKMODE_Pos)

#define SPIPSP_CLKMODE_DF_SR_IL  ((0x00U) << SPIPSP_CLKMODE_Pos)
#define SPIPSP_CLKMODE_DR_SF_IL  ((0x01U) << SPIPSP_CLKMODE_Pos)
#define SPIPSP_CLKMODE_DR_SF_IH  ((0x02U) << SPIPSP_CLKMODE_Pos)
#define SPIPSP_CLKMODE_DF_SR_IH  ((0x03U) << SPIPSP_CLKMODE_Pos)

#define SPIPSP_CLKMODE_(x)  (((x) << SPIPSP_CLKMODE_Pos) & SPIPSP_CLKMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          SFRMPOL
  *  @access     SPIx->SPIPSP
  *  @brief      Serial Frame Polarity
  */
#define SPIPSP_SFRMPOL_Pos  (2)
#define SPIPSP_SFRMPOL_Msk  (0x1U << SPIPSP_SFRMPOL_Pos)

#define SPIPSP_SFRMPOL_ACTIVE_LOW   ((0x0U) << SPIPSP_SFRMPOL_Pos)
#define SPIPSP_SFRMPOL_ACTIVE_HIGH  ((0x1U) << SPIPSP_SFRMPOL_Pos)

#define SPIPSP_SFRMPOL_(x)  (((x) << SPIPSP_SFRMPOL_Pos) & SPIPSP_SFRMPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          ETDS
  *  @access     SPIx->SPIPSP
  *  @brief      End Of Transfer Data State
  *              Only used in PSP frame format.
  */
#define SPIPSP_ETDS_Pos  (3)
#define SPIPSP_ETDS_Msk  (0x1U << SPIPSP_ETDS_Pos)

#define SPIPSP_ETDS_LOW        ((0x0U) << SPIPSP_ETDS_Pos)
#define SPIPSP_ETDS_LSB_VALUE  ((0x1U) << SPIPSP_ETDS_Pos)

#define SPIPSP_ETDS_(x)  (((x) << SPIPSP_ETDS_Pos) & SPIPSP_ETDS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          STARTDLY
  *  @access     SPIx->SPIPSP
  *  @brief      Start Delay
  *              Only used in PSP frame format.
  *              Do not use in PSP Network mode, and must be 0 when worked in Network mode.
  */
#define SPIPSP_STARTDLY_Pos  (4)
#define SPIPSP_STARTDLY_Msk  (0x7U << SPIPSP_STARTDLY_Pos)

#define SPIPSP_STARTDLY_(x)  (((x) << SPIPSP_STARTDLY_Pos) & SPIPSP_STARTDLY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          DMYSTART
  *  @access     SPIx->SPIPSP
  *  @brief      Dummy Start
  *              Only used in PSP frame format.
  *              Do not use in PSP Network mode, and must be 0 when worked in Network mode.
  */
#define SPIPSP_DMYSTART_Pos  (7)
#define SPIPSP_DMYSTART_Msk  (0xFU << SPIPSP_DMYSTART_Pos)

#define SPIPSP_DMYSTART_(x)  (((x) << SPIPSP_DMYSTART_Pos) & SPIPSP_DMYSTART_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          FRMDLY
  *  @access     SPIx->SPIPSP
  *  @brief      Serial Frame Delay
  *              Only used in PSP frame format.
  *              Do not use in PSP Network mode, and must be 0 when worked in Network mode.
  */
#define SPIPSP_FRMDLY_Pos  (11)
#define SPIPSP_FRMDLY_Msk  (0x7FU << SPIPSP_FRMDLY_Pos)

#define SPIPSP_FRMDLY_(x)  (((x) << SPIPSP_FRMDLY_Pos) & SPIPSP_FRMDLY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          FRMWIDTH
  *  @access     SPIx->SPIPSP
  *  @brief      Serial Frame Width
  *              Only used in PSP frame format.
  *              Only valid when SPI in Master mode.
  */
#define SPIPSP_FRMWIDTH_Pos  (18)
#define SPIPSP_FRMWIDTH_Msk  (0x3FU << SPIPSP_FRMWIDTH_Pos)

#define SPIPSP_FRMWIDTH_(x)  (((x) << SPIPSP_FRMWIDTH_Pos) & SPIPSP_FRMWIDTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          SYNC
  *  @access     SPIx->SPIPSP
  *  @brief      Frame Sync Relative Timing Bit
  *              Only used in PSP frame format.
  */
#define SPIPSP_SYNC_Pos  (25)
#define SPIPSP_SYNC_Msk  (0x1U << SPIPSP_SYNC_Pos)

#define SPIPSP_SYNC_AFTER_DMYSTOP  ((0x0U) << SPIPSP_SYNC_Pos)
#define SPIPSP_SYNC_AFTER_LSB      ((0x1U) << SPIPSP_SYNC_Pos)

#define SPIPSP_SYNC_(x)  (((x) << SPIPSP_SYNC_Pos) & SPIPSP_SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIPSP          DMYSTOP
  *  @access     SPIx->SPIPSP
  *  @brief      Dummy stop
  *              Only used in PSP frame format.
  *              Do not use in PSP Network mode, and must be 0 when worked in Network mode.
  */
#define SPIPSP_DMYSTOP_Pos  (26)
#define SPIPSP_DMYSTOP_Msk  (0x1FU << SPIPSP_DMYSTOP_Pos)

#define SPIPSP_DMYSTOP_(x)  (((x) << SPIPSP_DMYSTOP_Pos) & SPIPSP_DMYSTOP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPITCTL         LOOP
  *  @access     SPIx->SPITCTL
  *  @brief      Loopback mode
  */
#define SPITCTL_LOOP_Pos  (0)
#define SPITCTL_LOOP_Msk  (0x1U << SPITCTL_LOOP_Pos)

#define SPITCTL_LOOP_DISABLE  ((0x0U) << SPITCTL_LOOP_Pos)
#define SPITCTL_LOOP_ENABLE   ((0x1U) << SPITCTL_LOOP_Pos)

#define SPITCTL_LOOP_(x)  (((x) << SPITCTL_LOOP_Pos) & SPITCTL_LOOP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIBDCNT        VAL
  *  @access     SPIx->SPIBDCNT
  *  @brief      SPI baud rate will be SPI clock / (SSPBDCNT+1)
  */
#define SPIBDCNT_VAL_Pos  (0)
#define SPIBDCNT_VAL_Msk  (0xFFFFU << SPIBDCNT_VAL_Pos)

#define SPIBDCNT_VAL_(x)  (((x) << SPIBDCNT_VAL_Pos) & SPIBDCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              SPIx            SPIREGKEY       KEY
  *  @access     SPIx->SPIREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected SPI registers
  */
#define SPIREGKEY_KEY_Pos  (0)
#define SPIREGKEY_KEY_Msk  (0xFFFFFFFFU << SPIREGKEY_KEY_Pos)

#define SPIREGKEY_KEY_(x)  (((x) << SPIREGKEY_KEY_Pos) & SPIREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      TIMER:                                                                */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRLOAD         VAL
  *  @access     TIMERx->TMRLOAD
  *  @brief      Load value from which the counter is to decrease.
  *              A write to this register sets the current counter value.
  */
#define TMRLOAD_VAL_Pos  (0)
#define TMRLOAD_VAL_Msk  (0xFFFFFFFFU << TMRLOAD_VAL_Pos)

#define TMRLOAD_VAL_(x)  (((x) << TMRLOAD_VAL_Pos) & TMRLOAD_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCNT          VAL
  *  @access     TIMERx->TMRCNT
  *  @brief      Current value of timer counter.
  *              A write to this register sets the current counter value.
  */
#define TMRCNT_VAL_Pos  (0)
#define TMRCNT_VAL_Msk  (0xFFFFFFFFU << TMRCNT_VAL_Pos)

#define TMRCNT_VAL_(x)  (((x) << TMRCNT_VAL_Pos) & TMRCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCTL          EN
  *  @access     TIMERx->TMRCTL
  *  @brief      Timer enable
  */
#define TMRCTL_EN_Pos  (0)
#define TMRCTL_EN_Msk  (0x1U << TMRCTL_EN_Pos)

#define TMRCTL_EN_DISABLE  ((0x0U) << TMRCTL_EN_Pos)
#define TMRCTL_EN_ENABLE   ((0x1U) << TMRCTL_EN_Pos)

#define TMRCTL_EN_(x)  (((x) << TMRCTL_EN_Pos) & TMRCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCTL          MODE
  *  @access     TIMERx->TMRCTL
  *  @brief      Operation mode
  */
#define TMRCTL_MODE_Pos  (1)
#define TMRCTL_MODE_Msk  (0x3U << TMRCTL_MODE_Pos)

#define TMRCTL_MODE_GENERAL_TIMER  ((0x00U) << TMRCTL_MODE_Pos)
#define TMRCTL_MODE_GATED_TIMER    ((0x01U) << TMRCTL_MODE_Pos)
#define TMRCTL_MODE_EVENT_COUNTER  ((0x02U) << TMRCTL_MODE_Pos)
#define TMRCTL_MODE_EVENT_CAPTURE  ((0x03U) << TMRCTL_MODE_Pos)

#define TMRCTL_MODE_(x)  (((x) << TMRCTL_MODE_Pos) & TMRCTL_MODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCTL          HOLD
  *  @access     TIMERx->TMRCTL
  *  @brief      Hold counter value upon falling edge of TMRCTL.EN
  */
#define TMRCTL_HOLD_Pos  (3)
#define TMRCTL_HOLD_Msk  (0x1U << TMRCTL_HOLD_Pos)

#define TMRCTL_HOLD_DISABLE  ((0x0U) << TMRCTL_HOLD_Pos)
#define TMRCTL_HOLD_ENABLE   ((0x1U) << TMRCTL_HOLD_Pos)

#define TMRCTL_HOLD_(x)  (((x) << TMRCTL_HOLD_Pos) & TMRCTL_HOLD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCTL          ADCSOCEN
  *  @access     TIMERx->TMRCTL
  *  @brief      ADCSOC generation enable
  */
#define TMRCTL_ADCSOCEN_Pos  (4)
#define TMRCTL_ADCSOCEN_Msk  (0x1U << TMRCTL_ADCSOCEN_Pos)

#define TMRCTL_ADCSOCEN_DISABLE  ((0x0U) << TMRCTL_ADCSOCEN_Pos)
#define TMRCTL_ADCSOCEN_ENABLE   ((0x1U) << TMRCTL_ADCSOCEN_Pos)

#define TMRCTL_ADCSOCEN_(x)  (((x) << TMRCTL_ADCSOCEN_Pos) & TMRCTL_ADCSOCEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCTL          PWMSYNCEN
  *  @access     TIMERx->TMRCTL
  *  @brief      PWMSYNC generation enable
  */
#define TMRCTL_PWMSYNCEN_Pos  (5)
#define TMRCTL_PWMSYNCEN_Msk  (0x1U << TMRCTL_PWMSYNCEN_Pos)

#define TMRCTL_PWMSYNCEN_DISABLE  ((0x0U) << TMRCTL_PWMSYNCEN_Pos)
#define TMRCTL_PWMSYNCEN_ENABLE   ((0x1U) << TMRCTL_PWMSYNCEN_Pos)

#define TMRCTL_PWMSYNCEN_(x)  (((x) << TMRCTL_PWMSYNCEN_Pos) & TMRCTL_PWMSYNCEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCTL          EXTPOL
  *  @access     TIMERx->TMRCTL
  *  @brief      External input polarity
  */
#define TMRCTL_EXTPOL_Pos  (6)
#define TMRCTL_EXTPOL_Msk  (0x1U << TMRCTL_EXTPOL_Pos)

#define TMRCTL_EXTPOL_ACTIVE_LOW   ((0x0U) << TMRCTL_EXTPOL_Pos)
#define TMRCTL_EXTPOL_ACTIVE_HIGH  ((0x1U) << TMRCTL_EXTPOL_Pos)

#define TMRCTL_EXTPOL_(x)  (((x) << TMRCTL_EXTPOL_Pos) & TMRCTL_EXTPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRCTL          EXTSEL
  *  @access     TIMERx->TMRCTL
  *  @brief      External input source select (GPIO number)
  */
#define TMRCTL_EXTSEL_Pos  (7)
#define TMRCTL_EXTSEL_Msk  (0x7FU << TMRCTL_EXTSEL_Pos)

#define TMRCTL_EXTSEL_(x)  (((x) << TMRCTL_EXTSEL_Pos) & TMRCTL_EXTSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRRAWIF        INT
  *  @access     TIMERx->TMRRAWIF
  *  @brief      Raw timer interrupt flag.
  *              This bit is set whenever TMRCNT counts down to 0 and cleared only by writing a 1
  *              to TMRIC
  */
#define TMRRAWIF_INT_Pos  (0)
#define TMRRAWIF_INT_Msk  (0x1U << TMRRAWIF_INT_Pos)

#define TMRRAWIF_INT_NOT_OCCUR  ((0x0U) << TMRRAWIF_INT_Pos)
#define TMRRAWIF_INT_OCCUR      ((0x1U) << TMRRAWIF_INT_Pos)

#define TMRRAWIF_INT_(x)  (((x) << TMRRAWIF_INT_Pos) & TMRRAWIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRIF           INT
  *  @access     TIMERx->TMRIF
  *  @brief      Masked timer interrupt flag
  *              This bit is the logic AND of TMRRAWIF and TMRIE
  */
#define TMRIF_INT_Pos  (0)
#define TMRIF_INT_Msk  (0x1U << TMRIF_INT_Pos)

#define TMRIF_INT_NOT_OCCUR  ((0x0U) << TMRIF_INT_Pos)
#define TMRIF_INT_OCCUR      ((0x1U) << TMRIF_INT_Pos)

#define TMRIF_INT_(x)  (((x) << TMRIF_INT_Pos) & TMRIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRIC           INT
  *  @access     TIMERx->TMRIC
  *  @brief      Timer interrupt clear
  */
#define TMRIC_INT_Pos  (0)
#define TMRIC_INT_Msk  (0x1U << TMRIC_INT_Pos)

#define TMRIC_INT_NO_EFFECT  ((0x0U) << TMRIC_INT_Pos)
#define TMRIC_INT_CLEAR      ((0x1U) << TMRIC_INT_Pos)

#define TMRIC_INT_(x)  (((x) << TMRIC_INT_Pos) & TMRIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRIE           INT
  *  @access     TIMERx->TMRIE
  *  @brief      Timer interrupt enable.
  *              This bit does not affect TMRRAWIF and PWMSYNC/ADCSOC generation
  */
#define TMRIE_INT_Pos  (0)
#define TMRIE_INT_Msk  (0x1U << TMRIE_INT_Pos)

#define TMRIE_INT_DISABLE  ((0x0U) << TMRIE_INT_Pos)
#define TMRIE_INT_ENABLE   ((0x1U) << TMRIE_INT_Pos)

#define TMRIE_INT_(x)  (((x) << TMRIE_INT_Pos) & TMRIE_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              TIMERx          TMRREGKEY       KEY
  *  @access     TIMERx->TMRREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected timer registers
  */
#define TMRREGKEY_KEY_Pos  (0)
#define TMRREGKEY_KEY_Msk  (0xFFFFFFFFU << TMRREGKEY_KEY_Pos)

#define TMRREGKEY_KEY_(x)  (((x) << TMRREGKEY_KEY_Pos) & TMRREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      FLASHC:                                                               */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHCTL        COMMAND
  *  @access     FLASHC->FLASHCTL
  *  @brief      Flash command
  */
#define FLASHCTL_COMMAND_Pos  (0)
#define FLASHCTL_COMMAND_Msk  (0xFU << FLASHCTL_COMMAND_Pos)

#define FLASHCTL_COMMAND_POWER_UP      ((0x0000U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_READ          ((0x0001U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_PROG_WORD     ((0x0002U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_PROG_PAGE     ((0x0003U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_ERASE_SECTOR  ((0x0004U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_ERASE_CHIP    ((0x0005U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_RECALL_READ   ((0x0006U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_SET_CONFIG    ((0x0007U) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_VERIFY_READ   ((0x000EU) << FLASHCTL_COMMAND_Pos)
#define FLASHCTL_COMMAND_POWER_DOWN    ((0x000FU) << FLASHCTL_COMMAND_Pos)

#define FLASHCTL_COMMAND_(x)  (((x) << FLASHCTL_COMMAND_Pos) & FLASHCTL_COMMAND_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHCTL        DATAACCEPT
  *  @access     FLASHC->FLASHCTL
  *  @brief      FLASHDIN cannot be changed when this bit is 0
  */
#define FLASHCTL_DATAACCEPT_Pos  (4)
#define FLASHCTL_DATAACCEPT_Msk  (0x1U << FLASHCTL_DATAACCEPT_Pos)


#define FLASHCTL_DATAACCEPT_(x)  (((x) << FLASHCTL_DATAACCEPT_Pos) & FLASHCTL_DATAACCEPT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHCTL        EXECUTION
  *  @access     FLASHC->FLASHCTL
  *  @brief      Command is in execution
  */
#define FLASHCTL_EXECUTION_Pos  (5)
#define FLASHCTL_EXECUTION_Msk  (0x1U << FLASHCTL_EXECUTION_Pos)

#define FLASHCTL_EXECUTION_IDLE       ((0x0U) << FLASHCTL_EXECUTION_Pos)
#define FLASHCTL_EXECUTION_EXECUTION  ((0x1U) << FLASHCTL_EXECUTION_Pos)

#define FLASHCTL_EXECUTION_(x)  (((x) << FLASHCTL_EXECUTION_Pos) & FLASHCTL_EXECUTION_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHCTL        XIPEN
  *  @access     FLASHC->FLASHCTL
  *  @brief      XIP module enable
  */
#define FLASHCTL_XIPEN_Pos  (6)
#define FLASHCTL_XIPEN_Msk  (0x1U << FLASHCTL_XIPEN_Pos)

#define FLASHCTL_XIPEN_DISABLE  ((0x0U) << FLASHCTL_XIPEN_Pos)
#define FLASHCTL_XIPEN_ENABLE   ((0x1U) << FLASHCTL_XIPEN_Pos)

#define FLASHCTL_XIPEN_(x)  (((x) << FLASHCTL_XIPEN_Pos) & FLASHCTL_XIPEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHCTL        DWCACHE
  *  @access     FLASHC->FLASHCTL
  *  @brief      Enable simple cache if the new address are in the same double-word as the last
  *              address
  */
#define FLASHCTL_DWCACHE_Pos  (7)
#define FLASHCTL_DWCACHE_Msk  (0x1U << FLASHCTL_DWCACHE_Pos)

#define FLASHCTL_DWCACHE_DISABLE  ((0x0U) << FLASHCTL_DWCACHE_Pos)
#define FLASHCTL_DWCACHE_ENABLE   ((0x1U) << FLASHCTL_DWCACHE_Pos)

#define FLASHCTL_DWCACHE_(x)  (((x) << FLASHCTL_DWCACHE_Pos) & FLASHCTL_DWCACHE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHCTL        DWCACHEWE
  *  @access     FLASHC->FLASHCTL
  *  @brief      DWCACHE bit write enable.
  *              Need to write as 1 at the same time when writing DWCACHE bit
  */
#define FLASHCTL_DWCACHEWE_Pos  (8)
#define FLASHCTL_DWCACHEWE_Msk  (0x1U << FLASHCTL_DWCACHEWE_Pos)

#define FLASHCTL_DWCACHEWE_NO_EFFECT  ((0x0U) << FLASHCTL_DWCACHEWE_Pos)
#define FLASHCTL_DWCACHEWE_ENABLE     ((0x1U) << FLASHCTL_DWCACHEWE_Pos)

#define FLASHCTL_DWCACHEWE_(x)  (((x) << FLASHCTL_DWCACHEWE_Pos) & FLASHCTL_DWCACHEWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHADDR       ADDR
  *  @access     FLASHC->FLASHADDR
  *  @brief      Flash address
  */
#define FLASHADDR_ADDR_Pos  (0)
#define FLASHADDR_ADDR_Msk  (0xFFFFFFFFU << FLASHADDR_ADDR_Pos)


#define FLASHADDR_ADDR_(x)  (((x) << FLASHADDR_ADDR_Pos) & FLASHADDR_ADDR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDINL       DINL
  *  @access     FLASHC->FLASHDINL
  *  @brief      Flash input low word data
  */
#define FLASHDINL_DINL_Pos  (0)
#define FLASHDINL_DINL_Msk  (0xFFFFFFFFU << FLASHDINL_DINL_Pos)


#define FLASHDINL_DINL_(x)  (((x) << FLASHDINL_DINL_Pos) & FLASHDINL_DINL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDINH       DINH
  *  @access     FLASHC->FLASHDINH
  *  @brief      Flash input high word data
  */
#define FLASHDINH_DINH_Pos  (0)
#define FLASHDINH_DINH_Msk  (0xFFFFFFFFU << FLASHDINH_DINH_Pos)


#define FLASHDINH_DINH_(x)  (((x) << FLASHDINH_DINH_Pos) & FLASHDINH_DINH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDINE       DINE
  *  @access     FLASHC->FLASHDINE
  *  @brief      Flash input ECC byte data
  *              It is only effective when hardware ECC is disabled
  */
#define FLASHDINE_DINE_Pos  (0)
#define FLASHDINE_DINE_Msk  (0xFFU << FLASHDINE_DINE_Pos)


#define FLASHDINE_DINE_(x)  (((x) << FLASHDINE_DINE_Pos) & FLASHDINE_DINE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDINP       PATTERN
  *  @access     FLASHC->FLASHDINP
  *  @brief      Flash raw input pattern without ECC correction
  */
#define FLASHDINP_PATTERN_Pos  (0)
#define FLASHDINP_PATTERN_Msk  (0x7U << FLASHDINP_PATTERN_Pos)

#define FLASHDINP_PATTERN_NONE  ((0x000U) << FLASHDINP_PATTERN_Pos)
#define FLASHDINP_PATTERN_ALL0  ((0x004U) << FLASHDINP_PATTERN_Pos)
#define FLASHDINP_PATTERN_CB01  ((0x005U) << FLASHDINP_PATTERN_Pos)
#define FLASHDINP_PATTERN_CB10  ((0x006U) << FLASHDINP_PATTERN_Pos)
#define FLASHDINP_PATTERN_ALL1  ((0x007U) << FLASHDINP_PATTERN_Pos)

#define FLASHDINP_PATTERN_(x)  (((x) << FLASHDINP_PATTERN_Pos) & FLASHDINP_PATTERN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDOUTL      DOUTL
  *  @access     FLASHC->FLASHDOUTL
  *  @brief      Flash output low word data
  */
#define FLASHDOUTL_DOUTL_Pos  (0)
#define FLASHDOUTL_DOUTL_Msk  (0xFFFFFFFFU << FLASHDOUTL_DOUTL_Pos)


#define FLASHDOUTL_DOUTL_(x)  (((x) << FLASHDOUTL_DOUTL_Pos) & FLASHDOUTL_DOUTL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDOUTH      DOUTH
  *  @access     FLASHC->FLASHDOUTH
  *  @brief      Flash output high word data
  */
#define FLASHDOUTH_DOUTH_Pos  (0)
#define FLASHDOUTH_DOUTH_Msk  (0xFFFFFFFFU << FLASHDOUTH_DOUTH_Pos)


#define FLASHDOUTH_DOUTH_(x)  (((x) << FLASHDOUTH_DOUTH_Pos) & FLASHDOUTH_DOUTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDOUTE      DOUTE
  *  @access     FLASHC->FLASHDOUTE
  *  @brief      Flash output ECC byte data
  */
#define FLASHDOUTE_DOUTE_Pos  (0)
#define FLASHDOUTE_DOUTE_Msk  (0xFFU << FLASHDOUTE_DOUTE_Pos)


#define FLASHDOUTE_DOUTE_(x)  (((x) << FLASHDOUTE_DOUTE_Pos) & FLASHDOUTE_DOUTE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHDOUTP      PATTERN
  *  @access     FLASHC->FLASHDOUTP
  *  @brief      Flash raw output pattern without ECC correction
  */
#define FLASHDOUTP_PATTERN_Pos  (0)
#define FLASHDOUTP_PATTERN_Msk  (0x7U << FLASHDOUTP_PATTERN_Pos)

#define FLASHDOUTP_PATTERN_NONE  ((0x000U) << FLASHDOUTP_PATTERN_Pos)
#define FLASHDOUTP_PATTERN_ALL0  ((0x004U) << FLASHDOUTP_PATTERN_Pos)
#define FLASHDOUTP_PATTERN_CB01  ((0x005U) << FLASHDOUTP_PATTERN_Pos)
#define FLASHDOUTP_PATTERN_CB10  ((0x006U) << FLASHDOUTP_PATTERN_Pos)
#define FLASHDOUTP_PATTERN_ALL1  ((0x007U) << FLASHDOUTP_PATTERN_Pos)

#define FLASHDOUTP_PATTERN_(x)  (((x) << FLASHDOUTP_PATTERN_Pos) & FLASHDOUTP_PATTERN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING0    TUS
  *  @access     FLASHC->FLASHTIMING0
  *  @brief      
  */
#define FLASHTIMING0_TUS_Pos  (0)
#define FLASHTIMING0_TUS_Msk  (0x1FFU << FLASHTIMING0_TUS_Pos)

#define FLASHTIMING0_TUS_(x)  (((x) << FLASHTIMING0_TUS_Pos) & FLASHTIMING0_TUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING0    TMS
  *  @access     FLASHC->FLASHTIMING0
  *  @brief      
  */
#define FLASHTIMING0_TMS_Pos  (16)
#define FLASHTIMING0_TMS_Msk  (0x7FFU << FLASHTIMING0_TMS_Pos)

#define FLASHTIMING0_TMS_(x)  (((x) << FLASHTIMING0_TMS_Pos) & FLASHTIMING0_TMS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING1    TASRECALL
  *  @access     FLASHC->FLASHTIMING1
  *  @brief      
  */
#define FLASHTIMING1_TASRECALL_Pos  (0)
#define FLASHTIMING1_TASRECALL_Msk  (0x3FU << FLASHTIMING1_TASRECALL_Pos)

#define FLASHTIMING1_TASRECALL_(x)  (((x) << FLASHTIMING1_TASRECALL_Pos) & FLASHTIMING1_TASRECALL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING1    TMH
  *  @access     FLASHC->FLASHTIMING1
  *  @brief      
  */
#define FLASHTIMING1_TMH_Pos  (8)
#define FLASHTIMING1_TMH_Msk  (0x3FU << FLASHTIMING1_TMH_Pos)


#define FLASHTIMING1_TMH_(x)  (((x) << FLASHTIMING1_TMH_Pos) & FLASHTIMING1_TMH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING1    TACCRECALL
  *  @access     FLASHC->FLASHTIMING1
  *  @brief      
  */
#define FLASHTIMING1_TACCRECALL_Pos  (16)
#define FLASHTIMING1_TACCRECALL_Msk  (0x3FU << FLASHTIMING1_TACCRECALL_Pos)

#define FLASHTIMING1_TACCRECALL_(x)  (((x) << FLASHTIMING1_TACCRECALL_Pos) & FLASHTIMING1_TACCRECALL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING1    TACC
  *  @access     FLASHC->FLASHTIMING1
  *  @brief      
  */
#define FLASHTIMING1_TACC_Pos  (24)
#define FLASHTIMING1_TACC_Msk  (0x3FU << FLASHTIMING1_TACC_Pos)

#define FLASHTIMING1_TACC_(x)  (((x) << FLASHTIMING1_TACC_Pos) & FLASHTIMING1_TACC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING2    TNVS
  *  @access     FLASHC->FLASHTIMING2
  *  @brief      
  */
#define FLASHTIMING2_TNVS_Pos  (0)
#define FLASHTIMING2_TNVS_Msk  (0x3FU << FLASHTIMING2_TNVS_Pos)

#define FLASHTIMING2_TNVS_(x)  (((x) << FLASHTIMING2_TNVS_Pos) & FLASHTIMING2_TNVS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING2    TPROG
  *  @access     FLASHC->FLASHTIMING2
  *  @brief      
  */
#define FLASHTIMING2_TPROG_Pos  (8)
#define FLASHTIMING2_TPROG_Msk  (0x3FU << FLASHTIMING2_TPROG_Pos)

#define FLASHTIMING2_TPROG_(x)  (((x) << FLASHTIMING2_TPROG_Pos) & FLASHTIMING2_TPROG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING2    TADS
  *  @access     FLASHC->FLASHTIMING2
  *  @brief      
  */
#define FLASHTIMING2_TADS_Pos  (16)
#define FLASHTIMING2_TADS_Msk  (0x3FU << FLASHTIMING2_TADS_Pos)

#define FLASHTIMING2_TADS_(x)  (((x) << FLASHTIMING2_TADS_Pos) & FLASHTIMING2_TADS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING2    TADH
  *  @access     FLASHC->FLASHTIMING2
  *  @brief      
  */
#define FLASHTIMING2_TADH_Pos  (24)
#define FLASHTIMING2_TADH_Msk  (0x3FU << FLASHTIMING2_TADH_Pos)

#define FLASHTIMING2_TADH_(x)  (((x) << FLASHTIMING2_TADH_Pos) & FLASHTIMING2_TADH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING3    TPGS
  *  @access     FLASHC->FLASHTIMING3
  *  @brief      
  */
#define FLASHTIMING3_TPGS_Pos  (0)
#define FLASHTIMING3_TPGS_Msk  (0x3FU << FLASHTIMING3_TPGS_Pos)

#define FLASHTIMING3_TPGS_(x)  (((x) << FLASHTIMING3_TPGS_Pos) & FLASHTIMING3_TPGS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING3    TPGH
  *  @access     FLASHC->FLASHTIMING3
  *  @brief      
  */
#define FLASHTIMING3_TPGH_Pos  (8)
#define FLASHTIMING3_TPGH_Msk  (0x3FU << FLASHTIMING3_TPGH_Pos)

#define FLASHTIMING3_TPGH_(x)  (((x) << FLASHTIMING3_TPGH_Pos) & FLASHTIMING3_TPGH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING3    TRCVPROG
  *  @access     FLASHC->FLASHTIMING3
  *  @brief      
  */
#define FLASHTIMING3_TRCVPROG_Pos  (16)
#define FLASHTIMING3_TRCVPROG_Msk  (0x3FU << FLASHTIMING3_TRCVPROG_Pos)

#define FLASHTIMING3_TRCVPROG_(x)  (((x) << FLASHTIMING3_TRCVPROG_Pos) & FLASHTIMING3_TRCVPROG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING3    TRCVERASE
  *  @access     FLASHC->FLASHTIMING3
  *  @brief      
  */
#define FLASHTIMING3_TRCVERASE_Pos  (24)
#define FLASHTIMING3_TRCVERASE_Msk  (0xFFU << FLASHTIMING3_TRCVERASE_Pos)

#define FLASHTIMING3_TRCVERASE_(x)  (((x) << FLASHTIMING3_TRCVERASE_Pos) & FLASHTIMING3_TRCVERASE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING4    TRW
  *  @access     FLASHC->FLASHTIMING4
  *  @brief      
  */
#define FLASHTIMING4_TRW_Pos  (0)
#define FLASHTIMING4_TRW_Msk  (0x3FU << FLASHTIMING4_TRW_Pos)

#define FLASHTIMING4_TRW_(x)  (((x) << FLASHTIMING4_TRW_Pos) & FLASHTIMING4_TRW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING4    TSSE
  *  @access     FLASHC->FLASHTIMING4
  *  @brief      
  */
#define FLASHTIMING4_TSSE_Pos  (8)
#define FLASHTIMING4_TSSE_Msk  (0x3FU << FLASHTIMING4_TSSE_Pos)

#define FLASHTIMING4_TSSE_(x)  (((x) << FLASHTIMING4_TSSE_Pos) & FLASHTIMING4_TSSE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING4    TSCE
  *  @access     FLASHC->FLASHTIMING4
  *  @brief      
  */
#define FLASHTIMING4_TSCE_Pos  (16)
#define FLASHTIMING4_TSCE_Msk  (0x7FU << FLASHTIMING4_TSCE_Pos)

#define FLASHTIMING4_TSCE_(x)  (((x) << FLASHTIMING4_TSCE_Pos) & FLASHTIMING4_TSCE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING4    TPREPROG
  *  @access     FLASHC->FLASHTIMING4
  *  @brief      
  */
#define FLASHTIMING4_TPREPROG_Pos  (24)
#define FLASHTIMING4_TPREPROG_Msk  (0x3FU << FLASHTIMING4_TPREPROG_Pos)

#define FLASHTIMING4_TPREPROG_(x)  (((x) << FLASHTIMING4_TPREPROG_Pos) & FLASHTIMING4_TPREPROG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING5    TCONFEN
  *  @access     FLASHC->FLASHTIMING5
  *  @brief      
  */
#define FLASHTIMING5_TCONFEN_Pos  (0)
#define FLASHTIMING5_TCONFEN_Msk  (0x3FU << FLASHTIMING5_TCONFEN_Pos)

#define FLASHTIMING5_TCONFEN_(x)  (((x) << FLASHTIMING5_TCONFEN_Pos) & FLASHTIMING5_TCONFEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING5    TCFL
  *  @access     FLASHC->FLASHTIMING5
  *  @brief      
  */
#define FLASHTIMING5_TCFL_Pos  (8)
#define FLASHTIMING5_TCFL_Msk  (0x3FU << FLASHTIMING5_TCFL_Pos)

#define FLASHTIMING5_TCFL_(x)  (((x) << FLASHTIMING5_TCFL_Pos) & FLASHTIMING5_TCFL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING5    TCFH
  *  @access     FLASHC->FLASHTIMING5
  *  @brief      
  */
#define FLASHTIMING5_TCFH_Pos  (16)
#define FLASHTIMING5_TCFH_Msk  (0x3FU << FLASHTIMING5_TCFH_Pos)

#define FLASHTIMING5_TCFH_(x)  (((x) << FLASHTIMING5_TCFH_Pos) & FLASHTIMING5_TCFH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHTIMING5    TPREPGS
  *  @access     FLASHC->FLASHTIMING5
  *  @brief      
  */
#define FLASHTIMING5_TPREPGS_Pos  (24)
#define FLASHTIMING5_TPREPGS_Msk  (0x3FU << FLASHTIMING5_TPREPGS_Pos)

#define FLASHTIMING5_TPREPGS_(x)  (((x) << FLASHTIMING5_TPREPGS_Pos) & FLASHTIMING5_TPREPGS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR0
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 0
  */
#define FLASHWP_SECTOR0_Pos  (0)
#define FLASHWP_SECTOR0_Msk  (0x1U << FLASHWP_SECTOR0_Pos)

#define FLASHWP_SECTOR0_UNPROTECT  ((0x0U) << FLASHWP_SECTOR0_Pos)
#define FLASHWP_SECTOR0_PROTECT    ((0x1U) << FLASHWP_SECTOR0_Pos)

#define FLASHWP_SECTOR0_(x)  (((x) << FLASHWP_SECTOR0_Pos) & FLASHWP_SECTOR0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR1
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 1
  */
#define FLASHWP_SECTOR1_Pos  (1)
#define FLASHWP_SECTOR1_Msk  (0x1U << FLASHWP_SECTOR1_Pos)

#define FLASHWP_SECTOR1_UNPROTECT  ((0x0U) << FLASHWP_SECTOR1_Pos)
#define FLASHWP_SECTOR1_PROTECT    ((0x1U) << FLASHWP_SECTOR1_Pos)

#define FLASHWP_SECTOR1_(x)  (((x) << FLASHWP_SECTOR1_Pos) & FLASHWP_SECTOR1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR2
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 2
  */
#define FLASHWP_SECTOR2_Pos  (2)
#define FLASHWP_SECTOR2_Msk  (0x1U << FLASHWP_SECTOR2_Pos)

#define FLASHWP_SECTOR2_UNPROTECT  ((0x0U) << FLASHWP_SECTOR2_Pos)
#define FLASHWP_SECTOR2_PROTECT    ((0x1U) << FLASHWP_SECTOR2_Pos)

#define FLASHWP_SECTOR2_(x)  (((x) << FLASHWP_SECTOR2_Pos) & FLASHWP_SECTOR2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR3
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 3
  */
#define FLASHWP_SECTOR3_Pos  (3)
#define FLASHWP_SECTOR3_Msk  (0x1U << FLASHWP_SECTOR3_Pos)

#define FLASHWP_SECTOR3_UNPROTECT  ((0x0U) << FLASHWP_SECTOR3_Pos)
#define FLASHWP_SECTOR3_PROTECT    ((0x1U) << FLASHWP_SECTOR3_Pos)

#define FLASHWP_SECTOR3_(x)  (((x) << FLASHWP_SECTOR3_Pos) & FLASHWP_SECTOR3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR4
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 4
  */
#define FLASHWP_SECTOR4_Pos  (4)
#define FLASHWP_SECTOR4_Msk  (0x1U << FLASHWP_SECTOR4_Pos)

#define FLASHWP_SECTOR4_UNPROTECT  ((0x0U) << FLASHWP_SECTOR4_Pos)
#define FLASHWP_SECTOR4_PROTECT    ((0x1U) << FLASHWP_SECTOR4_Pos)

#define FLASHWP_SECTOR4_(x)  (((x) << FLASHWP_SECTOR4_Pos) & FLASHWP_SECTOR4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR5
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 5
  */
#define FLASHWP_SECTOR5_Pos  (5)
#define FLASHWP_SECTOR5_Msk  (0x1U << FLASHWP_SECTOR5_Pos)

#define FLASHWP_SECTOR5_UNPROTECT  ((0x0U) << FLASHWP_SECTOR5_Pos)
#define FLASHWP_SECTOR5_PROTECT    ((0x1U) << FLASHWP_SECTOR5_Pos)

#define FLASHWP_SECTOR5_(x)  (((x) << FLASHWP_SECTOR5_Pos) & FLASHWP_SECTOR5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR6
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 6
  */
#define FLASHWP_SECTOR6_Pos  (6)
#define FLASHWP_SECTOR6_Msk  (0x1U << FLASHWP_SECTOR6_Pos)

#define FLASHWP_SECTOR6_UNPROTECT  ((0x0U) << FLASHWP_SECTOR6_Pos)
#define FLASHWP_SECTOR6_PROTECT    ((0x1U) << FLASHWP_SECTOR6_Pos)

#define FLASHWP_SECTOR6_(x)  (((x) << FLASHWP_SECTOR6_Pos) & FLASHWP_SECTOR6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR7
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 7
  */
#define FLASHWP_SECTOR7_Pos  (7)
#define FLASHWP_SECTOR7_Msk  (0x1U << FLASHWP_SECTOR7_Pos)

#define FLASHWP_SECTOR7_UNPROTECT  ((0x0U) << FLASHWP_SECTOR7_Pos)
#define FLASHWP_SECTOR7_PROTECT    ((0x1U) << FLASHWP_SECTOR7_Pos)

#define FLASHWP_SECTOR7_(x)  (((x) << FLASHWP_SECTOR7_Pos) & FLASHWP_SECTOR7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR8
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 8
  */
#define FLASHWP_SECTOR8_Pos  (8)
#define FLASHWP_SECTOR8_Msk  (0x1U << FLASHWP_SECTOR8_Pos)

#define FLASHWP_SECTOR8_UNPROTECT  ((0x0U) << FLASHWP_SECTOR8_Pos)
#define FLASHWP_SECTOR8_PROTECT    ((0x1U) << FLASHWP_SECTOR8_Pos)

#define FLASHWP_SECTOR8_(x)  (((x) << FLASHWP_SECTOR8_Pos) & FLASHWP_SECTOR8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR9
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 9
  */
#define FLASHWP_SECTOR9_Pos  (9)
#define FLASHWP_SECTOR9_Msk  (0x1U << FLASHWP_SECTOR9_Pos)

#define FLASHWP_SECTOR9_UNPROTECT  ((0x0U) << FLASHWP_SECTOR9_Pos)
#define FLASHWP_SECTOR9_PROTECT    ((0x1U) << FLASHWP_SECTOR9_Pos)

#define FLASHWP_SECTOR9_(x)  (((x) << FLASHWP_SECTOR9_Pos) & FLASHWP_SECTOR9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR10
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 10
  */
#define FLASHWP_SECTOR10_Pos  (10)
#define FLASHWP_SECTOR10_Msk  (0x1U << FLASHWP_SECTOR10_Pos)

#define FLASHWP_SECTOR10_UNPROTECT  ((0x0U) << FLASHWP_SECTOR10_Pos)
#define FLASHWP_SECTOR10_PROTECT    ((0x1U) << FLASHWP_SECTOR10_Pos)

#define FLASHWP_SECTOR10_(x)  (((x) << FLASHWP_SECTOR10_Pos) & FLASHWP_SECTOR10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR11
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 11
  */
#define FLASHWP_SECTOR11_Pos  (11)
#define FLASHWP_SECTOR11_Msk  (0x1U << FLASHWP_SECTOR11_Pos)

#define FLASHWP_SECTOR11_UNPROTECT  ((0x0U) << FLASHWP_SECTOR11_Pos)
#define FLASHWP_SECTOR11_PROTECT    ((0x1U) << FLASHWP_SECTOR11_Pos)

#define FLASHWP_SECTOR11_(x)  (((x) << FLASHWP_SECTOR11_Pos) & FLASHWP_SECTOR11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR12
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 12
  */
#define FLASHWP_SECTOR12_Pos  (12)
#define FLASHWP_SECTOR12_Msk  (0x1U << FLASHWP_SECTOR12_Pos)

#define FLASHWP_SECTOR12_UNPROTECT  ((0x0U) << FLASHWP_SECTOR12_Pos)
#define FLASHWP_SECTOR12_PROTECT    ((0x1U) << FLASHWP_SECTOR12_Pos)

#define FLASHWP_SECTOR12_(x)  (((x) << FLASHWP_SECTOR12_Pos) & FLASHWP_SECTOR12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR13
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 13
  */
#define FLASHWP_SECTOR13_Pos  (13)
#define FLASHWP_SECTOR13_Msk  (0x1U << FLASHWP_SECTOR13_Pos)

#define FLASHWP_SECTOR13_UNPROTECT  ((0x0U) << FLASHWP_SECTOR13_Pos)
#define FLASHWP_SECTOR13_PROTECT    ((0x1U) << FLASHWP_SECTOR13_Pos)

#define FLASHWP_SECTOR13_(x)  (((x) << FLASHWP_SECTOR13_Pos) & FLASHWP_SECTOR13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR14
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 14
  */
#define FLASHWP_SECTOR14_Pos  (14)
#define FLASHWP_SECTOR14_Msk  (0x1U << FLASHWP_SECTOR14_Pos)

#define FLASHWP_SECTOR14_UNPROTECT  ((0x0U) << FLASHWP_SECTOR14_Pos)
#define FLASHWP_SECTOR14_PROTECT    ((0x1U) << FLASHWP_SECTOR14_Pos)

#define FLASHWP_SECTOR14_(x)  (((x) << FLASHWP_SECTOR14_Pos) & FLASHWP_SECTOR14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR15
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 15
  */
#define FLASHWP_SECTOR15_Pos  (15)
#define FLASHWP_SECTOR15_Msk  (0x1U << FLASHWP_SECTOR15_Pos)

#define FLASHWP_SECTOR15_UNPROTECT  ((0x0U) << FLASHWP_SECTOR15_Pos)
#define FLASHWP_SECTOR15_PROTECT    ((0x1U) << FLASHWP_SECTOR15_Pos)

#define FLASHWP_SECTOR15_(x)  (((x) << FLASHWP_SECTOR15_Pos) & FLASHWP_SECTOR15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR16
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 16
  */
#define FLASHWP_SECTOR16_Pos  (16)
#define FLASHWP_SECTOR16_Msk  (0x1U << FLASHWP_SECTOR16_Pos)

#define FLASHWP_SECTOR16_UNPROTECT  ((0x0U) << FLASHWP_SECTOR16_Pos)
#define FLASHWP_SECTOR16_PROTECT    ((0x1U) << FLASHWP_SECTOR16_Pos)

#define FLASHWP_SECTOR16_(x)  (((x) << FLASHWP_SECTOR16_Pos) & FLASHWP_SECTOR16_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR17
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 17
  */
#define FLASHWP_SECTOR17_Pos  (17)
#define FLASHWP_SECTOR17_Msk  (0x1U << FLASHWP_SECTOR17_Pos)

#define FLASHWP_SECTOR17_UNPROTECT  ((0x0U) << FLASHWP_SECTOR17_Pos)
#define FLASHWP_SECTOR17_PROTECT    ((0x1U) << FLASHWP_SECTOR17_Pos)

#define FLASHWP_SECTOR17_(x)  (((x) << FLASHWP_SECTOR17_Pos) & FLASHWP_SECTOR17_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR18
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 18
  */
#define FLASHWP_SECTOR18_Pos  (18)
#define FLASHWP_SECTOR18_Msk  (0x1U << FLASHWP_SECTOR18_Pos)

#define FLASHWP_SECTOR18_UNPROTECT  ((0x0U) << FLASHWP_SECTOR18_Pos)
#define FLASHWP_SECTOR18_PROTECT    ((0x1U) << FLASHWP_SECTOR18_Pos)

#define FLASHWP_SECTOR18_(x)  (((x) << FLASHWP_SECTOR18_Pos) & FLASHWP_SECTOR18_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR19
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 19
  */
#define FLASHWP_SECTOR19_Pos  (19)
#define FLASHWP_SECTOR19_Msk  (0x1U << FLASHWP_SECTOR19_Pos)

#define FLASHWP_SECTOR19_UNPROTECT  ((0x0U) << FLASHWP_SECTOR19_Pos)
#define FLASHWP_SECTOR19_PROTECT    ((0x1U) << FLASHWP_SECTOR19_Pos)

#define FLASHWP_SECTOR19_(x)  (((x) << FLASHWP_SECTOR19_Pos) & FLASHWP_SECTOR19_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR20
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 20
  */
#define FLASHWP_SECTOR20_Pos  (20)
#define FLASHWP_SECTOR20_Msk  (0x1U << FLASHWP_SECTOR20_Pos)

#define FLASHWP_SECTOR20_UNPROTECT  ((0x0U) << FLASHWP_SECTOR20_Pos)
#define FLASHWP_SECTOR20_PROTECT    ((0x1U) << FLASHWP_SECTOR20_Pos)

#define FLASHWP_SECTOR20_(x)  (((x) << FLASHWP_SECTOR20_Pos) & FLASHWP_SECTOR20_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR21
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 21
  */
#define FLASHWP_SECTOR21_Pos  (21)
#define FLASHWP_SECTOR21_Msk  (0x1U << FLASHWP_SECTOR21_Pos)

#define FLASHWP_SECTOR21_UNPROTECT  ((0x0U) << FLASHWP_SECTOR21_Pos)
#define FLASHWP_SECTOR21_PROTECT    ((0x1U) << FLASHWP_SECTOR21_Pos)

#define FLASHWP_SECTOR21_(x)  (((x) << FLASHWP_SECTOR21_Pos) & FLASHWP_SECTOR21_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR22
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 22
  */
#define FLASHWP_SECTOR22_Pos  (22)
#define FLASHWP_SECTOR22_Msk  (0x1U << FLASHWP_SECTOR22_Pos)

#define FLASHWP_SECTOR22_UNPROTECT  ((0x0U) << FLASHWP_SECTOR22_Pos)
#define FLASHWP_SECTOR22_PROTECT    ((0x1U) << FLASHWP_SECTOR22_Pos)

#define FLASHWP_SECTOR22_(x)  (((x) << FLASHWP_SECTOR22_Pos) & FLASHWP_SECTOR22_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR23
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 23
  */
#define FLASHWP_SECTOR23_Pos  (23)
#define FLASHWP_SECTOR23_Msk  (0x1U << FLASHWP_SECTOR23_Pos)

#define FLASHWP_SECTOR23_UNPROTECT  ((0x0U) << FLASHWP_SECTOR23_Pos)
#define FLASHWP_SECTOR23_PROTECT    ((0x1U) << FLASHWP_SECTOR23_Pos)

#define FLASHWP_SECTOR23_(x)  (((x) << FLASHWP_SECTOR23_Pos) & FLASHWP_SECTOR23_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR24
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 24
  */
#define FLASHWP_SECTOR24_Pos  (24)
#define FLASHWP_SECTOR24_Msk  (0x1U << FLASHWP_SECTOR24_Pos)

#define FLASHWP_SECTOR24_UNPROTECT  ((0x0U) << FLASHWP_SECTOR24_Pos)
#define FLASHWP_SECTOR24_PROTECT    ((0x1U) << FLASHWP_SECTOR24_Pos)

#define FLASHWP_SECTOR24_(x)  (((x) << FLASHWP_SECTOR24_Pos) & FLASHWP_SECTOR24_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR25
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 25
  */
#define FLASHWP_SECTOR25_Pos  (25)
#define FLASHWP_SECTOR25_Msk  (0x1U << FLASHWP_SECTOR25_Pos)

#define FLASHWP_SECTOR25_UNPROTECT  ((0x0U) << FLASHWP_SECTOR25_Pos)
#define FLASHWP_SECTOR25_PROTECT    ((0x1U) << FLASHWP_SECTOR25_Pos)

#define FLASHWP_SECTOR25_(x)  (((x) << FLASHWP_SECTOR25_Pos) & FLASHWP_SECTOR25_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR26
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 26
  */
#define FLASHWP_SECTOR26_Pos  (26)
#define FLASHWP_SECTOR26_Msk  (0x1U << FLASHWP_SECTOR26_Pos)

#define FLASHWP_SECTOR26_UNPROTECT  ((0x0U) << FLASHWP_SECTOR26_Pos)
#define FLASHWP_SECTOR26_PROTECT    ((0x1U) << FLASHWP_SECTOR26_Pos)

#define FLASHWP_SECTOR26_(x)  (((x) << FLASHWP_SECTOR26_Pos) & FLASHWP_SECTOR26_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR27
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 27
  */
#define FLASHWP_SECTOR27_Pos  (27)
#define FLASHWP_SECTOR27_Msk  (0x1U << FLASHWP_SECTOR27_Pos)

#define FLASHWP_SECTOR27_UNPROTECT  ((0x0U) << FLASHWP_SECTOR27_Pos)
#define FLASHWP_SECTOR27_PROTECT    ((0x1U) << FLASHWP_SECTOR27_Pos)

#define FLASHWP_SECTOR27_(x)  (((x) << FLASHWP_SECTOR27_Pos) & FLASHWP_SECTOR27_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR28
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 28
  */
#define FLASHWP_SECTOR28_Pos  (28)
#define FLASHWP_SECTOR28_Msk  (0x1U << FLASHWP_SECTOR28_Pos)

#define FLASHWP_SECTOR28_UNPROTECT  ((0x0U) << FLASHWP_SECTOR28_Pos)
#define FLASHWP_SECTOR28_PROTECT    ((0x1U) << FLASHWP_SECTOR28_Pos)

#define FLASHWP_SECTOR28_(x)  (((x) << FLASHWP_SECTOR28_Pos) & FLASHWP_SECTOR28_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR29
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 29
  */
#define FLASHWP_SECTOR29_Pos  (29)
#define FLASHWP_SECTOR29_Msk  (0x1U << FLASHWP_SECTOR29_Pos)

#define FLASHWP_SECTOR29_UNPROTECT  ((0x0U) << FLASHWP_SECTOR29_Pos)
#define FLASHWP_SECTOR29_PROTECT    ((0x1U) << FLASHWP_SECTOR29_Pos)

#define FLASHWP_SECTOR29_(x)  (((x) << FLASHWP_SECTOR29_Pos) & FLASHWP_SECTOR29_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR30
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 30
  */
#define FLASHWP_SECTOR30_Pos  (30)
#define FLASHWP_SECTOR30_Msk  (0x1U << FLASHWP_SECTOR30_Pos)

#define FLASHWP_SECTOR30_UNPROTECT  ((0x0U) << FLASHWP_SECTOR30_Pos)
#define FLASHWP_SECTOR30_PROTECT    ((0x1U) << FLASHWP_SECTOR30_Pos)

#define FLASHWP_SECTOR30_(x)  (((x) << FLASHWP_SECTOR30_Pos) & FLASHWP_SECTOR30_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHWP         SECTOR31
  *  @access     FLASHC->FLASHWP
  *  @brief      Write protection for flash sector 31
  */
#define FLASHWP_SECTOR31_Pos  (31)
#define FLASHWP_SECTOR31_Msk  (0x1U << FLASHWP_SECTOR31_Pos)

#define FLASHWP_SECTOR31_UNPROTECT  ((0x0U) << FLASHWP_SECTOR31_Pos)
#define FLASHWP_SECTOR31_PROTECT    ((0x1U) << FLASHWP_SECTOR31_Pos)

#define FLASHWP_SECTOR31_(x)  (((x) << FLASHWP_SECTOR31_Pos) & FLASHWP_SECTOR31_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              FLASHC          FLASHCREGKEY    KEY
  *  @access     FLASHC->FLASHCREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected flash registers
  */
#define FLASHCREGKEY_KEY_Pos  (0)
#define FLASHCREGKEY_KEY_Msk  (0xFFFFFFFFU << FLASHCREGKEY_KEY_Pos)

#define FLASHCREGKEY_KEY_(x)  (((x) << FLASHCREGKEY_KEY_Pos) & FLASHCREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      DMAC:                                                                 */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH0
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 0 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH0_Pos  (0)
#define DMATCRAWIF_CH0_Msk  (0x1U << DMATCRAWIF_CH0_Pos)

#define DMATCRAWIF_CH0_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH0_Pos)
#define DMATCRAWIF_CH0_OCCUR      ((0x1U) << DMATCRAWIF_CH0_Pos)

#define DMATCRAWIF_CH0_(x)  (((x) << DMATCRAWIF_CH0_Pos) & DMATCRAWIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH1
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 1 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH1_Pos  (1)
#define DMATCRAWIF_CH1_Msk  (0x1U << DMATCRAWIF_CH1_Pos)

#define DMATCRAWIF_CH1_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH1_Pos)
#define DMATCRAWIF_CH1_OCCUR      ((0x1U) << DMATCRAWIF_CH1_Pos)

#define DMATCRAWIF_CH1_(x)  (((x) << DMATCRAWIF_CH1_Pos) & DMATCRAWIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH2
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 2 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH2_Pos  (2)
#define DMATCRAWIF_CH2_Msk  (0x1U << DMATCRAWIF_CH2_Pos)

#define DMATCRAWIF_CH2_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH2_Pos)
#define DMATCRAWIF_CH2_OCCUR      ((0x1U) << DMATCRAWIF_CH2_Pos)

#define DMATCRAWIF_CH2_(x)  (((x) << DMATCRAWIF_CH2_Pos) & DMATCRAWIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH3
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 3 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH3_Pos  (3)
#define DMATCRAWIF_CH3_Msk  (0x1U << DMATCRAWIF_CH3_Pos)

#define DMATCRAWIF_CH3_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH3_Pos)
#define DMATCRAWIF_CH3_OCCUR      ((0x1U) << DMATCRAWIF_CH3_Pos)

#define DMATCRAWIF_CH3_(x)  (((x) << DMATCRAWIF_CH3_Pos) & DMATCRAWIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH4
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 4 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH4_Pos  (4)
#define DMATCRAWIF_CH4_Msk  (0x1U << DMATCRAWIF_CH4_Pos)

#define DMATCRAWIF_CH4_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH4_Pos)
#define DMATCRAWIF_CH4_OCCUR      ((0x1U) << DMATCRAWIF_CH4_Pos)

#define DMATCRAWIF_CH4_(x)  (((x) << DMATCRAWIF_CH4_Pos) & DMATCRAWIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH5
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 5 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH5_Pos  (5)
#define DMATCRAWIF_CH5_Msk  (0x1U << DMATCRAWIF_CH5_Pos)

#define DMATCRAWIF_CH5_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH5_Pos)
#define DMATCRAWIF_CH5_OCCUR      ((0x1U) << DMATCRAWIF_CH5_Pos)

#define DMATCRAWIF_CH5_(x)  (((x) << DMATCRAWIF_CH5_Pos) & DMATCRAWIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH6
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 6 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH6_Pos  (6)
#define DMATCRAWIF_CH6_Msk  (0x1U << DMATCRAWIF_CH6_Pos)

#define DMATCRAWIF_CH6_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH6_Pos)
#define DMATCRAWIF_CH6_OCCUR      ((0x1U) << DMATCRAWIF_CH6_Pos)

#define DMATCRAWIF_CH6_(x)  (((x) << DMATCRAWIF_CH6_Pos) & DMATCRAWIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCRAWIF      CH7
  *  @access     DMAC->DMATCRAWIF
  *  @brief      Channel 7 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMATCRAWIF_CH7_Pos  (7)
#define DMATCRAWIF_CH7_Msk  (0x1U << DMATCRAWIF_CH7_Pos)

#define DMATCRAWIF_CH7_NOT_OCCUR  ((0x0U) << DMATCRAWIF_CH7_Pos)
#define DMATCRAWIF_CH7_OCCUR      ((0x1U) << DMATCRAWIF_CH7_Pos)

#define DMATCRAWIF_CH7_(x)  (((x) << DMATCRAWIF_CH7_Pos) & DMATCRAWIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH0
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 0 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH0_Pos  (0)
#define DMABTCRAWIF_CH0_Msk  (0x1U << DMABTCRAWIF_CH0_Pos)

#define DMABTCRAWIF_CH0_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH0_Pos)
#define DMABTCRAWIF_CH0_OCCUR      ((0x1U) << DMABTCRAWIF_CH0_Pos)

#define DMABTCRAWIF_CH0_(x)  (((x) << DMABTCRAWIF_CH0_Pos) & DMABTCRAWIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH1
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 1 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH1_Pos  (1)
#define DMABTCRAWIF_CH1_Msk  (0x1U << DMABTCRAWIF_CH1_Pos)

#define DMABTCRAWIF_CH1_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH1_Pos)
#define DMABTCRAWIF_CH1_OCCUR      ((0x1U) << DMABTCRAWIF_CH1_Pos)

#define DMABTCRAWIF_CH1_(x)  (((x) << DMABTCRAWIF_CH1_Pos) & DMABTCRAWIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH2
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 2 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH2_Pos  (2)
#define DMABTCRAWIF_CH2_Msk  (0x1U << DMABTCRAWIF_CH2_Pos)

#define DMABTCRAWIF_CH2_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH2_Pos)
#define DMABTCRAWIF_CH2_OCCUR      ((0x1U) << DMABTCRAWIF_CH2_Pos)

#define DMABTCRAWIF_CH2_(x)  (((x) << DMABTCRAWIF_CH2_Pos) & DMABTCRAWIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH3
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 3 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH3_Pos  (3)
#define DMABTCRAWIF_CH3_Msk  (0x1U << DMABTCRAWIF_CH3_Pos)

#define DMABTCRAWIF_CH3_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH3_Pos)
#define DMABTCRAWIF_CH3_OCCUR      ((0x1U) << DMABTCRAWIF_CH3_Pos)

#define DMABTCRAWIF_CH3_(x)  (((x) << DMABTCRAWIF_CH3_Pos) & DMABTCRAWIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH4
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 4 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH4_Pos  (4)
#define DMABTCRAWIF_CH4_Msk  (0x1U << DMABTCRAWIF_CH4_Pos)

#define DMABTCRAWIF_CH4_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH4_Pos)
#define DMABTCRAWIF_CH4_OCCUR      ((0x1U) << DMABTCRAWIF_CH4_Pos)

#define DMABTCRAWIF_CH4_(x)  (((x) << DMABTCRAWIF_CH4_Pos) & DMABTCRAWIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH5
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 5 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH5_Pos  (5)
#define DMABTCRAWIF_CH5_Msk  (0x1U << DMABTCRAWIF_CH5_Pos)

#define DMABTCRAWIF_CH5_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH5_Pos)
#define DMABTCRAWIF_CH5_OCCUR      ((0x1U) << DMABTCRAWIF_CH5_Pos)

#define DMABTCRAWIF_CH5_(x)  (((x) << DMABTCRAWIF_CH5_Pos) & DMABTCRAWIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH6
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 6 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH6_Pos  (6)
#define DMABTCRAWIF_CH6_Msk  (0x1U << DMABTCRAWIF_CH6_Pos)

#define DMABTCRAWIF_CH6_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH6_Pos)
#define DMABTCRAWIF_CH6_OCCUR      ((0x1U) << DMABTCRAWIF_CH6_Pos)

#define DMABTCRAWIF_CH6_(x)  (((x) << DMABTCRAWIF_CH6_Pos) & DMABTCRAWIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCRAWIF     CH7
  *  @access     DMAC->DMABTCRAWIF
  *  @brief      Channel 7 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMABTCRAWIF_CH7_Pos  (7)
#define DMABTCRAWIF_CH7_Msk  (0x1U << DMABTCRAWIF_CH7_Pos)

#define DMABTCRAWIF_CH7_NOT_OCCUR  ((0x0U) << DMABTCRAWIF_CH7_Pos)
#define DMABTCRAWIF_CH7_OCCUR      ((0x1U) << DMABTCRAWIF_CH7_Pos)

#define DMABTCRAWIF_CH7_(x)  (((x) << DMABTCRAWIF_CH7_Pos) & DMABTCRAWIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH0
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 0 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH0_Pos  (0)
#define DMASTCRAWIF_CH0_Msk  (0x1U << DMASTCRAWIF_CH0_Pos)

#define DMASTCRAWIF_CH0_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH0_Pos)
#define DMASTCRAWIF_CH0_OCCUR      ((0x1U) << DMASTCRAWIF_CH0_Pos)

#define DMASTCRAWIF_CH0_(x)  (((x) << DMASTCRAWIF_CH0_Pos) & DMASTCRAWIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH1
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 1 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH1_Pos  (1)
#define DMASTCRAWIF_CH1_Msk  (0x1U << DMASTCRAWIF_CH1_Pos)

#define DMASTCRAWIF_CH1_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH1_Pos)
#define DMASTCRAWIF_CH1_OCCUR      ((0x1U) << DMASTCRAWIF_CH1_Pos)

#define DMASTCRAWIF_CH1_(x)  (((x) << DMASTCRAWIF_CH1_Pos) & DMASTCRAWIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH2
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 2 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH2_Pos  (2)
#define DMASTCRAWIF_CH2_Msk  (0x1U << DMASTCRAWIF_CH2_Pos)

#define DMASTCRAWIF_CH2_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH2_Pos)
#define DMASTCRAWIF_CH2_OCCUR      ((0x1U) << DMASTCRAWIF_CH2_Pos)

#define DMASTCRAWIF_CH2_(x)  (((x) << DMASTCRAWIF_CH2_Pos) & DMASTCRAWIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH3
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 3 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH3_Pos  (3)
#define DMASTCRAWIF_CH3_Msk  (0x1U << DMASTCRAWIF_CH3_Pos)

#define DMASTCRAWIF_CH3_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH3_Pos)
#define DMASTCRAWIF_CH3_OCCUR      ((0x1U) << DMASTCRAWIF_CH3_Pos)

#define DMASTCRAWIF_CH3_(x)  (((x) << DMASTCRAWIF_CH3_Pos) & DMASTCRAWIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH4
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 4 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH4_Pos  (4)
#define DMASTCRAWIF_CH4_Msk  (0x1U << DMASTCRAWIF_CH4_Pos)

#define DMASTCRAWIF_CH4_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH4_Pos)
#define DMASTCRAWIF_CH4_OCCUR      ((0x1U) << DMASTCRAWIF_CH4_Pos)

#define DMASTCRAWIF_CH4_(x)  (((x) << DMASTCRAWIF_CH4_Pos) & DMASTCRAWIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH5
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 5 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH5_Pos  (5)
#define DMASTCRAWIF_CH5_Msk  (0x1U << DMASTCRAWIF_CH5_Pos)

#define DMASTCRAWIF_CH5_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH5_Pos)
#define DMASTCRAWIF_CH5_OCCUR      ((0x1U) << DMASTCRAWIF_CH5_Pos)

#define DMASTCRAWIF_CH5_(x)  (((x) << DMASTCRAWIF_CH5_Pos) & DMASTCRAWIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH6
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 6 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH6_Pos  (6)
#define DMASTCRAWIF_CH6_Msk  (0x1U << DMASTCRAWIF_CH6_Pos)

#define DMASTCRAWIF_CH6_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH6_Pos)
#define DMASTCRAWIF_CH6_OCCUR      ((0x1U) << DMASTCRAWIF_CH6_Pos)

#define DMASTCRAWIF_CH6_(x)  (((x) << DMASTCRAWIF_CH6_Pos) & DMASTCRAWIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCRAWIF     CH7
  *  @access     DMAC->DMASTCRAWIF
  *  @brief      Channel 7 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMASTCRAWIF_CH7_Pos  (7)
#define DMASTCRAWIF_CH7_Msk  (0x1U << DMASTCRAWIF_CH7_Pos)

#define DMASTCRAWIF_CH7_NOT_OCCUR  ((0x0U) << DMASTCRAWIF_CH7_Pos)
#define DMASTCRAWIF_CH7_OCCUR      ((0x1U) << DMASTCRAWIF_CH7_Pos)

#define DMASTCRAWIF_CH7_(x)  (((x) << DMASTCRAWIF_CH7_Pos) & DMASTCRAWIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH0
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 0 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH0_Pos  (0)
#define DMADTCRAWIF_CH0_Msk  (0x1U << DMADTCRAWIF_CH0_Pos)

#define DMADTCRAWIF_CH0_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH0_Pos)
#define DMADTCRAWIF_CH0_OCCUR      ((0x1U) << DMADTCRAWIF_CH0_Pos)

#define DMADTCRAWIF_CH0_(x)  (((x) << DMADTCRAWIF_CH0_Pos) & DMADTCRAWIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH1
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 1 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH1_Pos  (1)
#define DMADTCRAWIF_CH1_Msk  (0x1U << DMADTCRAWIF_CH1_Pos)

#define DMADTCRAWIF_CH1_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH1_Pos)
#define DMADTCRAWIF_CH1_OCCUR      ((0x1U) << DMADTCRAWIF_CH1_Pos)

#define DMADTCRAWIF_CH1_(x)  (((x) << DMADTCRAWIF_CH1_Pos) & DMADTCRAWIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH2
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 2 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH2_Pos  (2)
#define DMADTCRAWIF_CH2_Msk  (0x1U << DMADTCRAWIF_CH2_Pos)

#define DMADTCRAWIF_CH2_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH2_Pos)
#define DMADTCRAWIF_CH2_OCCUR      ((0x1U) << DMADTCRAWIF_CH2_Pos)

#define DMADTCRAWIF_CH2_(x)  (((x) << DMADTCRAWIF_CH2_Pos) & DMADTCRAWIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH3
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 3 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH3_Pos  (3)
#define DMADTCRAWIF_CH3_Msk  (0x1U << DMADTCRAWIF_CH3_Pos)

#define DMADTCRAWIF_CH3_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH3_Pos)
#define DMADTCRAWIF_CH3_OCCUR      ((0x1U) << DMADTCRAWIF_CH3_Pos)

#define DMADTCRAWIF_CH3_(x)  (((x) << DMADTCRAWIF_CH3_Pos) & DMADTCRAWIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH4
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 4 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH4_Pos  (4)
#define DMADTCRAWIF_CH4_Msk  (0x1U << DMADTCRAWIF_CH4_Pos)

#define DMADTCRAWIF_CH4_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH4_Pos)
#define DMADTCRAWIF_CH4_OCCUR      ((0x1U) << DMADTCRAWIF_CH4_Pos)

#define DMADTCRAWIF_CH4_(x)  (((x) << DMADTCRAWIF_CH4_Pos) & DMADTCRAWIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH5
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 5 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH5_Pos  (5)
#define DMADTCRAWIF_CH5_Msk  (0x1U << DMADTCRAWIF_CH5_Pos)

#define DMADTCRAWIF_CH5_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH5_Pos)
#define DMADTCRAWIF_CH5_OCCUR      ((0x1U) << DMADTCRAWIF_CH5_Pos)

#define DMADTCRAWIF_CH5_(x)  (((x) << DMADTCRAWIF_CH5_Pos) & DMADTCRAWIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH6
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 6 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH6_Pos  (6)
#define DMADTCRAWIF_CH6_Msk  (0x1U << DMADTCRAWIF_CH6_Pos)

#define DMADTCRAWIF_CH6_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH6_Pos)
#define DMADTCRAWIF_CH6_OCCUR      ((0x1U) << DMADTCRAWIF_CH6_Pos)

#define DMADTCRAWIF_CH6_(x)  (((x) << DMADTCRAWIF_CH6_Pos) & DMADTCRAWIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCRAWIF     CH7
  *  @access     DMAC->DMADTCRAWIF
  *  @brief      Channel 7 transfer complete raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMADTCRAWIF_CH7_Pos  (7)
#define DMADTCRAWIF_CH7_Msk  (0x1U << DMADTCRAWIF_CH7_Pos)

#define DMADTCRAWIF_CH7_NOT_OCCUR  ((0x0U) << DMADTCRAWIF_CH7_Pos)
#define DMADTCRAWIF_CH7_OCCUR      ((0x1U) << DMADTCRAWIF_CH7_Pos)

#define DMADTCRAWIF_CH7_(x)  (((x) << DMADTCRAWIF_CH7_Pos) & DMADTCRAWIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH0
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 0 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH0_Pos  (0)
#define DMAERRRAWIF_CH0_Msk  (0x1U << DMAERRRAWIF_CH0_Pos)

#define DMAERRRAWIF_CH0_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH0_Pos)
#define DMAERRRAWIF_CH0_OCCUR      ((0x1U) << DMAERRRAWIF_CH0_Pos)

#define DMAERRRAWIF_CH0_(x)  (((x) << DMAERRRAWIF_CH0_Pos) & DMAERRRAWIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH1
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 1 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH1_Pos  (1)
#define DMAERRRAWIF_CH1_Msk  (0x1U << DMAERRRAWIF_CH1_Pos)

#define DMAERRRAWIF_CH1_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH1_Pos)
#define DMAERRRAWIF_CH1_OCCUR      ((0x1U) << DMAERRRAWIF_CH1_Pos)

#define DMAERRRAWIF_CH1_(x)  (((x) << DMAERRRAWIF_CH1_Pos) & DMAERRRAWIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH2
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 2 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH2_Pos  (2)
#define DMAERRRAWIF_CH2_Msk  (0x1U << DMAERRRAWIF_CH2_Pos)

#define DMAERRRAWIF_CH2_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH2_Pos)
#define DMAERRRAWIF_CH2_OCCUR      ((0x1U) << DMAERRRAWIF_CH2_Pos)

#define DMAERRRAWIF_CH2_(x)  (((x) << DMAERRRAWIF_CH2_Pos) & DMAERRRAWIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH3
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 3 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH3_Pos  (3)
#define DMAERRRAWIF_CH3_Msk  (0x1U << DMAERRRAWIF_CH3_Pos)

#define DMAERRRAWIF_CH3_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH3_Pos)
#define DMAERRRAWIF_CH3_OCCUR      ((0x1U) << DMAERRRAWIF_CH3_Pos)

#define DMAERRRAWIF_CH3_(x)  (((x) << DMAERRRAWIF_CH3_Pos) & DMAERRRAWIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH4
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 4 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH4_Pos  (4)
#define DMAERRRAWIF_CH4_Msk  (0x1U << DMAERRRAWIF_CH4_Pos)

#define DMAERRRAWIF_CH4_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH4_Pos)
#define DMAERRRAWIF_CH4_OCCUR      ((0x1U) << DMAERRRAWIF_CH4_Pos)

#define DMAERRRAWIF_CH4_(x)  (((x) << DMAERRRAWIF_CH4_Pos) & DMAERRRAWIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH5
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 5 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH5_Pos  (5)
#define DMAERRRAWIF_CH5_Msk  (0x1U << DMAERRRAWIF_CH5_Pos)

#define DMAERRRAWIF_CH5_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH5_Pos)
#define DMAERRRAWIF_CH5_OCCUR      ((0x1U) << DMAERRRAWIF_CH5_Pos)

#define DMAERRRAWIF_CH5_(x)  (((x) << DMAERRRAWIF_CH5_Pos) & DMAERRRAWIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH6
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 6 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH6_Pos  (6)
#define DMAERRRAWIF_CH6_Msk  (0x1U << DMAERRRAWIF_CH6_Pos)

#define DMAERRRAWIF_CH6_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH6_Pos)
#define DMAERRRAWIF_CH6_OCCUR      ((0x1U) << DMAERRRAWIF_CH6_Pos)

#define DMAERRRAWIF_CH6_(x)  (((x) << DMAERRRAWIF_CH6_Pos) & DMAERRRAWIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRRAWIF     CH7
  *  @access     DMAC->DMAERRRAWIF
  *  @brief      Channel 7 error raw interrupt flag
  *              This bit can be written for test purpose. It is not recommended to write for
  *              normal operation
  */
#define DMAERRRAWIF_CH7_Pos  (7)
#define DMAERRRAWIF_CH7_Msk  (0x1U << DMAERRRAWIF_CH7_Pos)

#define DMAERRRAWIF_CH7_NOT_OCCUR  ((0x0U) << DMAERRRAWIF_CH7_Pos)
#define DMAERRRAWIF_CH7_OCCUR      ((0x1U) << DMAERRRAWIF_CH7_Pos)

#define DMAERRRAWIF_CH7_(x)  (((x) << DMAERRRAWIF_CH7_Pos) & DMAERRRAWIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH0
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 0 transfer complete  interrupt flag
  */
#define DMATCIF_CH0_Pos  (0)
#define DMATCIF_CH0_Msk  (0x1U << DMATCIF_CH0_Pos)

#define DMATCIF_CH0_NOT_OCCUR  ((0x0U) << DMATCIF_CH0_Pos)
#define DMATCIF_CH0_OCCUR      ((0x1U) << DMATCIF_CH0_Pos)

#define DMATCIF_CH0_(x)  (((x) << DMATCIF_CH0_Pos) & DMATCIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH1
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 1 transfer complete interrupt flag
  */
#define DMATCIF_CH1_Pos  (1)
#define DMATCIF_CH1_Msk  (0x1U << DMATCIF_CH1_Pos)

#define DMATCIF_CH1_NOT_OCCUR  ((0x0U) << DMATCIF_CH1_Pos)
#define DMATCIF_CH1_OCCUR      ((0x1U) << DMATCIF_CH1_Pos)

#define DMATCIF_CH1_(x)  (((x) << DMATCIF_CH1_Pos) & DMATCIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH2
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 2 transfer complete interrupt flag
  */
#define DMATCIF_CH2_Pos  (2)
#define DMATCIF_CH2_Msk  (0x1U << DMATCIF_CH2_Pos)

#define DMATCIF_CH2_NOT_OCCUR  ((0x0U) << DMATCIF_CH2_Pos)
#define DMATCIF_CH2_OCCUR      ((0x1U) << DMATCIF_CH2_Pos)

#define DMATCIF_CH2_(x)  (((x) << DMATCIF_CH2_Pos) & DMATCIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH3
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 3 transfer complete interrupt flag
  */
#define DMATCIF_CH3_Pos  (3)
#define DMATCIF_CH3_Msk  (0x1U << DMATCIF_CH3_Pos)

#define DMATCIF_CH3_NOT_OCCUR  ((0x0U) << DMATCIF_CH3_Pos)
#define DMATCIF_CH3_OCCUR      ((0x1U) << DMATCIF_CH3_Pos)

#define DMATCIF_CH3_(x)  (((x) << DMATCIF_CH3_Pos) & DMATCIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH4
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 4 transfer complete interrupt flag
  */
#define DMATCIF_CH4_Pos  (4)
#define DMATCIF_CH4_Msk  (0x1U << DMATCIF_CH4_Pos)

#define DMATCIF_CH4_NOT_OCCUR  ((0x0U) << DMATCIF_CH4_Pos)
#define DMATCIF_CH4_OCCUR      ((0x1U) << DMATCIF_CH4_Pos)

#define DMATCIF_CH4_(x)  (((x) << DMATCIF_CH4_Pos) & DMATCIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH5
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 5 transfer complete interrupt flag
  */
#define DMATCIF_CH5_Pos  (5)
#define DMATCIF_CH5_Msk  (0x1U << DMATCIF_CH5_Pos)

#define DMATCIF_CH5_NOT_OCCUR  ((0x0U) << DMATCIF_CH5_Pos)
#define DMATCIF_CH5_OCCUR      ((0x1U) << DMATCIF_CH5_Pos)

#define DMATCIF_CH5_(x)  (((x) << DMATCIF_CH5_Pos) & DMATCIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH6
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 6 transfer complete interrupt flag
  */
#define DMATCIF_CH6_Pos  (6)
#define DMATCIF_CH6_Msk  (0x1U << DMATCIF_CH6_Pos)

#define DMATCIF_CH6_NOT_OCCUR  ((0x0U) << DMATCIF_CH6_Pos)
#define DMATCIF_CH6_OCCUR      ((0x1U) << DMATCIF_CH6_Pos)

#define DMATCIF_CH6_(x)  (((x) << DMATCIF_CH6_Pos) & DMATCIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIF         CH7
  *  @access     DMAC->DMATCIF
  *  @brief      Channel 7 transfer complete interrupt flag
  */
#define DMATCIF_CH7_Pos  (7)
#define DMATCIF_CH7_Msk  (0x1U << DMATCIF_CH7_Pos)

#define DMATCIF_CH7_NOT_OCCUR  ((0x0U) << DMATCIF_CH7_Pos)
#define DMATCIF_CH7_OCCUR      ((0x1U) << DMATCIF_CH7_Pos)

#define DMATCIF_CH7_(x)  (((x) << DMATCIF_CH7_Pos) & DMATCIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH0
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 0 transfer complete  interrupt flag
  */
#define DMABTCIF_CH0_Pos  (0)
#define DMABTCIF_CH0_Msk  (0x1U << DMABTCIF_CH0_Pos)

#define DMABTCIF_CH0_NOT_OCCUR  ((0x0U) << DMABTCIF_CH0_Pos)
#define DMABTCIF_CH0_OCCUR      ((0x1U) << DMABTCIF_CH0_Pos)

#define DMABTCIF_CH0_(x)  (((x) << DMABTCIF_CH0_Pos) & DMABTCIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH1
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 1 transfer complete interrupt flag
  */
#define DMABTCIF_CH1_Pos  (1)
#define DMABTCIF_CH1_Msk  (0x1U << DMABTCIF_CH1_Pos)

#define DMABTCIF_CH1_NOT_OCCUR  ((0x0U) << DMABTCIF_CH1_Pos)
#define DMABTCIF_CH1_OCCUR      ((0x1U) << DMABTCIF_CH1_Pos)

#define DMABTCIF_CH1_(x)  (((x) << DMABTCIF_CH1_Pos) & DMABTCIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH2
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 2 transfer complete interrupt flag
  */
#define DMABTCIF_CH2_Pos  (2)
#define DMABTCIF_CH2_Msk  (0x1U << DMABTCIF_CH2_Pos)

#define DMABTCIF_CH2_NOT_OCCUR  ((0x0U) << DMABTCIF_CH2_Pos)
#define DMABTCIF_CH2_OCCUR      ((0x1U) << DMABTCIF_CH2_Pos)

#define DMABTCIF_CH2_(x)  (((x) << DMABTCIF_CH2_Pos) & DMABTCIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH3
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 3 transfer complete interrupt flag
  */
#define DMABTCIF_CH3_Pos  (3)
#define DMABTCIF_CH3_Msk  (0x1U << DMABTCIF_CH3_Pos)

#define DMABTCIF_CH3_NOT_OCCUR  ((0x0U) << DMABTCIF_CH3_Pos)
#define DMABTCIF_CH3_OCCUR      ((0x1U) << DMABTCIF_CH3_Pos)

#define DMABTCIF_CH3_(x)  (((x) << DMABTCIF_CH3_Pos) & DMABTCIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH4
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 4 transfer complete interrupt flag
  */
#define DMABTCIF_CH4_Pos  (4)
#define DMABTCIF_CH4_Msk  (0x1U << DMABTCIF_CH4_Pos)

#define DMABTCIF_CH4_NOT_OCCUR  ((0x0U) << DMABTCIF_CH4_Pos)
#define DMABTCIF_CH4_OCCUR      ((0x1U) << DMABTCIF_CH4_Pos)

#define DMABTCIF_CH4_(x)  (((x) << DMABTCIF_CH4_Pos) & DMABTCIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH5
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 5 transfer complete interrupt flag
  */
#define DMABTCIF_CH5_Pos  (5)
#define DMABTCIF_CH5_Msk  (0x1U << DMABTCIF_CH5_Pos)

#define DMABTCIF_CH5_NOT_OCCUR  ((0x0U) << DMABTCIF_CH5_Pos)
#define DMABTCIF_CH5_OCCUR      ((0x1U) << DMABTCIF_CH5_Pos)

#define DMABTCIF_CH5_(x)  (((x) << DMABTCIF_CH5_Pos) & DMABTCIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH6
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 6 transfer complete interrupt flag
  */
#define DMABTCIF_CH6_Pos  (6)
#define DMABTCIF_CH6_Msk  (0x1U << DMABTCIF_CH6_Pos)

#define DMABTCIF_CH6_NOT_OCCUR  ((0x0U) << DMABTCIF_CH6_Pos)
#define DMABTCIF_CH6_OCCUR      ((0x1U) << DMABTCIF_CH6_Pos)

#define DMABTCIF_CH6_(x)  (((x) << DMABTCIF_CH6_Pos) & DMABTCIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIF        CH7
  *  @access     DMAC->DMABTCIF
  *  @brief      Channel 7 transfer complete interrupt flag
  */
#define DMABTCIF_CH7_Pos  (7)
#define DMABTCIF_CH7_Msk  (0x1U << DMABTCIF_CH7_Pos)

#define DMABTCIF_CH7_NOT_OCCUR  ((0x0U) << DMABTCIF_CH7_Pos)
#define DMABTCIF_CH7_OCCUR      ((0x1U) << DMABTCIF_CH7_Pos)

#define DMABTCIF_CH7_(x)  (((x) << DMABTCIF_CH7_Pos) & DMABTCIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH0
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 0 transfer complete  interrupt flag
  */
#define DMASTCIF_CH0_Pos  (0)
#define DMASTCIF_CH0_Msk  (0x1U << DMASTCIF_CH0_Pos)

#define DMASTCIF_CH0_NOT_OCCUR  ((0x0U) << DMASTCIF_CH0_Pos)
#define DMASTCIF_CH0_OCCUR      ((0x1U) << DMASTCIF_CH0_Pos)

#define DMASTCIF_CH0_(x)  (((x) << DMASTCIF_CH0_Pos) & DMASTCIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH1
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 1 transfer complete interrupt flag
  */
#define DMASTCIF_CH1_Pos  (1)
#define DMASTCIF_CH1_Msk  (0x1U << DMASTCIF_CH1_Pos)

#define DMASTCIF_CH1_NOT_OCCUR  ((0x0U) << DMASTCIF_CH1_Pos)
#define DMASTCIF_CH1_OCCUR      ((0x1U) << DMASTCIF_CH1_Pos)

#define DMASTCIF_CH1_(x)  (((x) << DMASTCIF_CH1_Pos) & DMASTCIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH2
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 2 transfer complete interrupt flag
  */
#define DMASTCIF_CH2_Pos  (2)
#define DMASTCIF_CH2_Msk  (0x1U << DMASTCIF_CH2_Pos)

#define DMASTCIF_CH2_NOT_OCCUR  ((0x0U) << DMASTCIF_CH2_Pos)
#define DMASTCIF_CH2_OCCUR      ((0x1U) << DMASTCIF_CH2_Pos)

#define DMASTCIF_CH2_(x)  (((x) << DMASTCIF_CH2_Pos) & DMASTCIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH3
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 3 transfer complete interrupt flag
  */
#define DMASTCIF_CH3_Pos  (3)
#define DMASTCIF_CH3_Msk  (0x1U << DMASTCIF_CH3_Pos)

#define DMASTCIF_CH3_NOT_OCCUR  ((0x0U) << DMASTCIF_CH3_Pos)
#define DMASTCIF_CH3_OCCUR      ((0x1U) << DMASTCIF_CH3_Pos)

#define DMASTCIF_CH3_(x)  (((x) << DMASTCIF_CH3_Pos) & DMASTCIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH4
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 4 transfer complete interrupt flag
  */
#define DMASTCIF_CH4_Pos  (4)
#define DMASTCIF_CH4_Msk  (0x1U << DMASTCIF_CH4_Pos)

#define DMASTCIF_CH4_NOT_OCCUR  ((0x0U) << DMASTCIF_CH4_Pos)
#define DMASTCIF_CH4_OCCUR      ((0x1U) << DMASTCIF_CH4_Pos)

#define DMASTCIF_CH4_(x)  (((x) << DMASTCIF_CH4_Pos) & DMASTCIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH5
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 5 transfer complete interrupt flag
  */
#define DMASTCIF_CH5_Pos  (5)
#define DMASTCIF_CH5_Msk  (0x1U << DMASTCIF_CH5_Pos)

#define DMASTCIF_CH5_NOT_OCCUR  ((0x0U) << DMASTCIF_CH5_Pos)
#define DMASTCIF_CH5_OCCUR      ((0x1U) << DMASTCIF_CH5_Pos)

#define DMASTCIF_CH5_(x)  (((x) << DMASTCIF_CH5_Pos) & DMASTCIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH6
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 6 transfer complete interrupt flag
  */
#define DMASTCIF_CH6_Pos  (6)
#define DMASTCIF_CH6_Msk  (0x1U << DMASTCIF_CH6_Pos)

#define DMASTCIF_CH6_NOT_OCCUR  ((0x0U) << DMASTCIF_CH6_Pos)
#define DMASTCIF_CH6_OCCUR      ((0x1U) << DMASTCIF_CH6_Pos)

#define DMASTCIF_CH6_(x)  (((x) << DMASTCIF_CH6_Pos) & DMASTCIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIF        CH7
  *  @access     DMAC->DMASTCIF
  *  @brief      Channel 7 transfer complete interrupt flag
  */
#define DMASTCIF_CH7_Pos  (7)
#define DMASTCIF_CH7_Msk  (0x1U << DMASTCIF_CH7_Pos)

#define DMASTCIF_CH7_NOT_OCCUR  ((0x0U) << DMASTCIF_CH7_Pos)
#define DMASTCIF_CH7_OCCUR      ((0x1U) << DMASTCIF_CH7_Pos)

#define DMASTCIF_CH7_(x)  (((x) << DMASTCIF_CH7_Pos) & DMASTCIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH0
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 0 transfer complete  interrupt flag
  */
#define DMADTCIF_CH0_Pos  (0)
#define DMADTCIF_CH0_Msk  (0x1U << DMADTCIF_CH0_Pos)

#define DMADTCIF_CH0_NOT_OCCUR  ((0x0U) << DMADTCIF_CH0_Pos)
#define DMADTCIF_CH0_OCCUR      ((0x1U) << DMADTCIF_CH0_Pos)

#define DMADTCIF_CH0_(x)  (((x) << DMADTCIF_CH0_Pos) & DMADTCIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH1
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 1 transfer complete interrupt flag
  */
#define DMADTCIF_CH1_Pos  (1)
#define DMADTCIF_CH1_Msk  (0x1U << DMADTCIF_CH1_Pos)

#define DMADTCIF_CH1_NOT_OCCUR  ((0x0U) << DMADTCIF_CH1_Pos)
#define DMADTCIF_CH1_OCCUR      ((0x1U) << DMADTCIF_CH1_Pos)

#define DMADTCIF_CH1_(x)  (((x) << DMADTCIF_CH1_Pos) & DMADTCIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH2
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 2 transfer complete interrupt flag
  */
#define DMADTCIF_CH2_Pos  (2)
#define DMADTCIF_CH2_Msk  (0x1U << DMADTCIF_CH2_Pos)

#define DMADTCIF_CH2_NOT_OCCUR  ((0x0U) << DMADTCIF_CH2_Pos)
#define DMADTCIF_CH2_OCCUR      ((0x1U) << DMADTCIF_CH2_Pos)

#define DMADTCIF_CH2_(x)  (((x) << DMADTCIF_CH2_Pos) & DMADTCIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH3
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 3 transfer complete interrupt flag
  */
#define DMADTCIF_CH3_Pos  (3)
#define DMADTCIF_CH3_Msk  (0x1U << DMADTCIF_CH3_Pos)

#define DMADTCIF_CH3_NOT_OCCUR  ((0x0U) << DMADTCIF_CH3_Pos)
#define DMADTCIF_CH3_OCCUR      ((0x1U) << DMADTCIF_CH3_Pos)

#define DMADTCIF_CH3_(x)  (((x) << DMADTCIF_CH3_Pos) & DMADTCIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH4
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 4 transfer complete interrupt flag
  */
#define DMADTCIF_CH4_Pos  (4)
#define DMADTCIF_CH4_Msk  (0x1U << DMADTCIF_CH4_Pos)

#define DMADTCIF_CH4_NOT_OCCUR  ((0x0U) << DMADTCIF_CH4_Pos)
#define DMADTCIF_CH4_OCCUR      ((0x1U) << DMADTCIF_CH4_Pos)

#define DMADTCIF_CH4_(x)  (((x) << DMADTCIF_CH4_Pos) & DMADTCIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH5
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 5 transfer complete interrupt flag
  */
#define DMADTCIF_CH5_Pos  (5)
#define DMADTCIF_CH5_Msk  (0x1U << DMADTCIF_CH5_Pos)

#define DMADTCIF_CH5_NOT_OCCUR  ((0x0U) << DMADTCIF_CH5_Pos)
#define DMADTCIF_CH5_OCCUR      ((0x1U) << DMADTCIF_CH5_Pos)

#define DMADTCIF_CH5_(x)  (((x) << DMADTCIF_CH5_Pos) & DMADTCIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH6
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 6 transfer complete interrupt flag
  */
#define DMADTCIF_CH6_Pos  (6)
#define DMADTCIF_CH6_Msk  (0x1U << DMADTCIF_CH6_Pos)

#define DMADTCIF_CH6_NOT_OCCUR  ((0x0U) << DMADTCIF_CH6_Pos)
#define DMADTCIF_CH6_OCCUR      ((0x1U) << DMADTCIF_CH6_Pos)

#define DMADTCIF_CH6_(x)  (((x) << DMADTCIF_CH6_Pos) & DMADTCIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIF        CH7
  *  @access     DMAC->DMADTCIF
  *  @brief      Channel 7 transfer complete interrupt flag
  */
#define DMADTCIF_CH7_Pos  (7)
#define DMADTCIF_CH7_Msk  (0x1U << DMADTCIF_CH7_Pos)

#define DMADTCIF_CH7_NOT_OCCUR  ((0x0U) << DMADTCIF_CH7_Pos)
#define DMADTCIF_CH7_OCCUR      ((0x1U) << DMADTCIF_CH7_Pos)

#define DMADTCIF_CH7_(x)  (((x) << DMADTCIF_CH7_Pos) & DMADTCIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH0
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 0 error interrrupt flag
  */
#define DMAERRIF_CH0_Pos  (0)
#define DMAERRIF_CH0_Msk  (0x1U << DMAERRIF_CH0_Pos)

#define DMAERRIF_CH0_NOT_OCCUR  ((0x0U) << DMAERRIF_CH0_Pos)
#define DMAERRIF_CH0_OCCUR      ((0x1U) << DMAERRIF_CH0_Pos)

#define DMAERRIF_CH0_(x)  (((x) << DMAERRIF_CH0_Pos) & DMAERRIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH1
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 1 error interrrupt flag
  */
#define DMAERRIF_CH1_Pos  (1)
#define DMAERRIF_CH1_Msk  (0x1U << DMAERRIF_CH1_Pos)

#define DMAERRIF_CH1_NOT_OCCUR  ((0x0U) << DMAERRIF_CH1_Pos)
#define DMAERRIF_CH1_OCCUR      ((0x1U) << DMAERRIF_CH1_Pos)

#define DMAERRIF_CH1_(x)  (((x) << DMAERRIF_CH1_Pos) & DMAERRIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH2
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 2 error interrrupt flag
  */
#define DMAERRIF_CH2_Pos  (2)
#define DMAERRIF_CH2_Msk  (0x1U << DMAERRIF_CH2_Pos)

#define DMAERRIF_CH2_NOT_OCCUR  ((0x0U) << DMAERRIF_CH2_Pos)
#define DMAERRIF_CH2_OCCUR      ((0x1U) << DMAERRIF_CH2_Pos)

#define DMAERRIF_CH2_(x)  (((x) << DMAERRIF_CH2_Pos) & DMAERRIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH3
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 3 error interrrupt flag
  */
#define DMAERRIF_CH3_Pos  (3)
#define DMAERRIF_CH3_Msk  (0x1U << DMAERRIF_CH3_Pos)

#define DMAERRIF_CH3_NOT_OCCUR  ((0x0U) << DMAERRIF_CH3_Pos)
#define DMAERRIF_CH3_OCCUR      ((0x1U) << DMAERRIF_CH3_Pos)

#define DMAERRIF_CH3_(x)  (((x) << DMAERRIF_CH3_Pos) & DMAERRIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH4
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 4 error interrrupt flag
  */
#define DMAERRIF_CH4_Pos  (4)
#define DMAERRIF_CH4_Msk  (0x1U << DMAERRIF_CH4_Pos)

#define DMAERRIF_CH4_NOT_OCCUR  ((0x0U) << DMAERRIF_CH4_Pos)
#define DMAERRIF_CH4_OCCUR      ((0x1U) << DMAERRIF_CH4_Pos)

#define DMAERRIF_CH4_(x)  (((x) << DMAERRIF_CH4_Pos) & DMAERRIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH5
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 5 error interrupt flag
  */
#define DMAERRIF_CH5_Pos  (5)
#define DMAERRIF_CH5_Msk  (0x1U << DMAERRIF_CH5_Pos)

#define DMAERRIF_CH5_NOT_OCCUR  ((0x0U) << DMAERRIF_CH5_Pos)
#define DMAERRIF_CH5_OCCUR      ((0x1U) << DMAERRIF_CH5_Pos)

#define DMAERRIF_CH5_(x)  (((x) << DMAERRIF_CH5_Pos) & DMAERRIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH6
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 6 error interrupt flag
  */
#define DMAERRIF_CH6_Pos  (6)
#define DMAERRIF_CH6_Msk  (0x1U << DMAERRIF_CH6_Pos)

#define DMAERRIF_CH6_NOT_OCCUR  ((0x0U) << DMAERRIF_CH6_Pos)
#define DMAERRIF_CH6_OCCUR      ((0x1U) << DMAERRIF_CH6_Pos)

#define DMAERRIF_CH6_(x)  (((x) << DMAERRIF_CH6_Pos) & DMAERRIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIF        CH7
  *  @access     DMAC->DMAERRIF
  *  @brief      Channel 7 error interrupt flag
  */
#define DMAERRIF_CH7_Pos  (7)
#define DMAERRIF_CH7_Msk  (0x1U << DMAERRIF_CH7_Pos)

#define DMAERRIF_CH7_NOT_OCCUR  ((0x0U) << DMAERRIF_CH7_Pos)
#define DMAERRIF_CH7_OCCUR      ((0x1U) << DMAERRIF_CH7_Pos)

#define DMAERRIF_CH7_(x)  (((x) << DMAERRIF_CH7_Pos) & DMAERRIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH0
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 0 transfer complete interrupt enable
  */
#define DMATCIE_CH0_Pos  (0)
#define DMATCIE_CH0_Msk  (0x1U << DMATCIE_CH0_Pos)

#define DMATCIE_CH0_DISABLE  ((0x0U) << DMATCIE_CH0_Pos)
#define DMATCIE_CH0_ENABLE   ((0x1U) << DMATCIE_CH0_Pos)

#define DMATCIE_CH0_(x)  (((x) << DMATCIE_CH0_Pos) & DMATCIE_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH1
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 1 transfer complete interrupt enable
  */
#define DMATCIE_CH1_Pos  (1)
#define DMATCIE_CH1_Msk  (0x1U << DMATCIE_CH1_Pos)

#define DMATCIE_CH1_DISABLE  ((0x0U) << DMATCIE_CH1_Pos)
#define DMATCIE_CH1_ENABLE   ((0x1U) << DMATCIE_CH1_Pos)

#define DMATCIE_CH1_(x)  (((x) << DMATCIE_CH1_Pos) & DMATCIE_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH2
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 2 transfer complete interrupt enable
  */
#define DMATCIE_CH2_Pos  (2)
#define DMATCIE_CH2_Msk  (0x1U << DMATCIE_CH2_Pos)

#define DMATCIE_CH2_DISABLE  ((0x0U) << DMATCIE_CH2_Pos)
#define DMATCIE_CH2_ENABLE   ((0x1U) << DMATCIE_CH2_Pos)

#define DMATCIE_CH2_(x)  (((x) << DMATCIE_CH2_Pos) & DMATCIE_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH3
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 3 transfer complete interrupt enable
  */
#define DMATCIE_CH3_Pos  (3)
#define DMATCIE_CH3_Msk  (0x1U << DMATCIE_CH3_Pos)

#define DMATCIE_CH3_DISABLE  ((0x0U) << DMATCIE_CH3_Pos)
#define DMATCIE_CH3_ENABLE   ((0x1U) << DMATCIE_CH3_Pos)

#define DMATCIE_CH3_(x)  (((x) << DMATCIE_CH3_Pos) & DMATCIE_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH4
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 4 transfer complete interrupt enable
  */
#define DMATCIE_CH4_Pos  (4)
#define DMATCIE_CH4_Msk  (0x1U << DMATCIE_CH4_Pos)

#define DMATCIE_CH4_DISABLE  ((0x0U) << DMATCIE_CH4_Pos)
#define DMATCIE_CH4_ENABLE   ((0x1U) << DMATCIE_CH4_Pos)

#define DMATCIE_CH4_(x)  (((x) << DMATCIE_CH4_Pos) & DMATCIE_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH5
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 5 transfer complete interrupt enable
  */
#define DMATCIE_CH5_Pos  (5)
#define DMATCIE_CH5_Msk  (0x1U << DMATCIE_CH5_Pos)

#define DMATCIE_CH5_DISABLE  ((0x0U) << DMATCIE_CH5_Pos)
#define DMATCIE_CH5_ENABLE   ((0x1U) << DMATCIE_CH5_Pos)

#define DMATCIE_CH5_(x)  (((x) << DMATCIE_CH5_Pos) & DMATCIE_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH6
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 6 transfer complete interrupt enable
  */
#define DMATCIE_CH6_Pos  (6)
#define DMATCIE_CH6_Msk  (0x1U << DMATCIE_CH6_Pos)

#define DMATCIE_CH6_DISABLE  ((0x0U) << DMATCIE_CH6_Pos)
#define DMATCIE_CH6_ENABLE   ((0x1U) << DMATCIE_CH6_Pos)

#define DMATCIE_CH6_(x)  (((x) << DMATCIE_CH6_Pos) & DMATCIE_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH7
  *  @access     DMAC->DMATCIE
  *  @brief      Channel 7 transfer complete interrupt enable
  */
#define DMATCIE_CH7_Pos  (7)
#define DMATCIE_CH7_Msk  (0x1U << DMATCIE_CH7_Pos)

#define DMATCIE_CH7_DISABLE  ((0x0U) << DMATCIE_CH7_Pos)
#define DMATCIE_CH7_ENABLE   ((0x1U) << DMATCIE_CH7_Pos)

#define DMATCIE_CH7_(x)  (((x) << DMATCIE_CH7_Pos) & DMATCIE_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH0WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH0 bit write enable
  */
#define DMATCIE_CH0WE_Pos  (8)
#define DMATCIE_CH0WE_Msk  (0x1U << DMATCIE_CH0WE_Pos)

#define DMATCIE_CH0WE_DISABLE  ((0x0U) << DMATCIE_CH0WE_Pos)
#define DMATCIE_CH0WE_ENABLE   ((0x1U) << DMATCIE_CH0WE_Pos)

#define DMATCIE_CH0WE_(x)  (((x) << DMATCIE_CH0WE_Pos) & DMATCIE_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH1WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH1 bit write enable
  */
#define DMATCIE_CH1WE_Pos  (9)
#define DMATCIE_CH1WE_Msk  (0x1U << DMATCIE_CH1WE_Pos)

#define DMATCIE_CH1WE_DISABLE  ((0x0U) << DMATCIE_CH1WE_Pos)
#define DMATCIE_CH1WE_ENABLE   ((0x1U) << DMATCIE_CH1WE_Pos)

#define DMATCIE_CH1WE_(x)  (((x) << DMATCIE_CH1WE_Pos) & DMATCIE_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH2WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH2 bit write enable
  */
#define DMATCIE_CH2WE_Pos  (10)
#define DMATCIE_CH2WE_Msk  (0x1U << DMATCIE_CH2WE_Pos)

#define DMATCIE_CH2WE_DISABLE  ((0x0U) << DMATCIE_CH2WE_Pos)
#define DMATCIE_CH2WE_ENABLE   ((0x1U) << DMATCIE_CH2WE_Pos)

#define DMATCIE_CH2WE_(x)  (((x) << DMATCIE_CH2WE_Pos) & DMATCIE_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH3WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH3 bit write enable
  */
#define DMATCIE_CH3WE_Pos  (11)
#define DMATCIE_CH3WE_Msk  (0x1U << DMATCIE_CH3WE_Pos)

#define DMATCIE_CH3WE_DISABLE  ((0x0U) << DMATCIE_CH3WE_Pos)
#define DMATCIE_CH3WE_ENABLE   ((0x1U) << DMATCIE_CH3WE_Pos)

#define DMATCIE_CH3WE_(x)  (((x) << DMATCIE_CH3WE_Pos) & DMATCIE_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH4WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH4 bit write enable
  */
#define DMATCIE_CH4WE_Pos  (12)
#define DMATCIE_CH4WE_Msk  (0x1U << DMATCIE_CH4WE_Pos)

#define DMATCIE_CH4WE_DISABLE  ((0x0U) << DMATCIE_CH4WE_Pos)
#define DMATCIE_CH4WE_ENABLE   ((0x1U) << DMATCIE_CH4WE_Pos)

#define DMATCIE_CH4WE_(x)  (((x) << DMATCIE_CH4WE_Pos) & DMATCIE_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH5WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH5 bit write enable
  */
#define DMATCIE_CH5WE_Pos  (13)
#define DMATCIE_CH5WE_Msk  (0x1U << DMATCIE_CH5WE_Pos)

#define DMATCIE_CH5WE_DISABLE  ((0x0U) << DMATCIE_CH5WE_Pos)
#define DMATCIE_CH5WE_ENABLE   ((0x1U) << DMATCIE_CH5WE_Pos)

#define DMATCIE_CH5WE_(x)  (((x) << DMATCIE_CH5WE_Pos) & DMATCIE_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH6WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH6 bit write enable
  */
#define DMATCIE_CH6WE_Pos  (14)
#define DMATCIE_CH6WE_Msk  (0x1U << DMATCIE_CH6WE_Pos)

#define DMATCIE_CH6WE_DISABLE  ((0x0U) << DMATCIE_CH6WE_Pos)
#define DMATCIE_CH6WE_ENABLE   ((0x1U) << DMATCIE_CH6WE_Pos)

#define DMATCIE_CH6WE_(x)  (((x) << DMATCIE_CH6WE_Pos) & DMATCIE_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIE         CH7WE
  *  @access     DMAC->DMATCIE
  *  @brief      CH7 bit write enable
  */
#define DMATCIE_CH7WE_Pos  (15)
#define DMATCIE_CH7WE_Msk  (0x1U << DMATCIE_CH7WE_Pos)

#define DMATCIE_CH7WE_DISABLE  ((0x0U) << DMATCIE_CH7WE_Pos)
#define DMATCIE_CH7WE_ENABLE   ((0x1U) << DMATCIE_CH7WE_Pos)

#define DMATCIE_CH7WE_(x)  (((x) << DMATCIE_CH7WE_Pos) & DMATCIE_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH0
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 0 transfer complete interrupt enable
  */
#define DMABTCIE_CH0_Pos  (0)
#define DMABTCIE_CH0_Msk  (0x1U << DMABTCIE_CH0_Pos)

#define DMABTCIE_CH0_DISABLE  ((0x0U) << DMABTCIE_CH0_Pos)
#define DMABTCIE_CH0_ENABLE   ((0x1U) << DMABTCIE_CH0_Pos)

#define DMABTCIE_CH0_(x)  (((x) << DMABTCIE_CH0_Pos) & DMABTCIE_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH1
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 1 transfer complete interrupt enable
  */
#define DMABTCIE_CH1_Pos  (1)
#define DMABTCIE_CH1_Msk  (0x1U << DMABTCIE_CH1_Pos)

#define DMABTCIE_CH1_DISABLE  ((0x0U) << DMABTCIE_CH1_Pos)
#define DMABTCIE_CH1_ENABLE   ((0x1U) << DMABTCIE_CH1_Pos)

#define DMABTCIE_CH1_(x)  (((x) << DMABTCIE_CH1_Pos) & DMABTCIE_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH2
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 2 transfer complete interrupt enable
  */
#define DMABTCIE_CH2_Pos  (2)
#define DMABTCIE_CH2_Msk  (0x1U << DMABTCIE_CH2_Pos)

#define DMABTCIE_CH2_DISABLE  ((0x0U) << DMABTCIE_CH2_Pos)
#define DMABTCIE_CH2_ENABLE   ((0x1U) << DMABTCIE_CH2_Pos)

#define DMABTCIE_CH2_(x)  (((x) << DMABTCIE_CH2_Pos) & DMABTCIE_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH3
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 3 transfer complete interrupt enable
  */
#define DMABTCIE_CH3_Pos  (3)
#define DMABTCIE_CH3_Msk  (0x1U << DMABTCIE_CH3_Pos)

#define DMABTCIE_CH3_DISABLE  ((0x0U) << DMABTCIE_CH3_Pos)
#define DMABTCIE_CH3_ENABLE   ((0x1U) << DMABTCIE_CH3_Pos)

#define DMABTCIE_CH3_(x)  (((x) << DMABTCIE_CH3_Pos) & DMABTCIE_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH4
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 4 transfer complete interrupt enable
  */
#define DMABTCIE_CH4_Pos  (4)
#define DMABTCIE_CH4_Msk  (0x1U << DMABTCIE_CH4_Pos)

#define DMABTCIE_CH4_DISABLE  ((0x0U) << DMABTCIE_CH4_Pos)
#define DMABTCIE_CH4_ENABLE   ((0x1U) << DMABTCIE_CH4_Pos)

#define DMABTCIE_CH4_(x)  (((x) << DMABTCIE_CH4_Pos) & DMABTCIE_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH5
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 5 transfer complete interrupt enable
  */
#define DMABTCIE_CH5_Pos  (5)
#define DMABTCIE_CH5_Msk  (0x1U << DMABTCIE_CH5_Pos)

#define DMABTCIE_CH5_DISABLE  ((0x0U) << DMABTCIE_CH5_Pos)
#define DMABTCIE_CH5_ENABLE   ((0x1U) << DMABTCIE_CH5_Pos)

#define DMABTCIE_CH5_(x)  (((x) << DMABTCIE_CH5_Pos) & DMABTCIE_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH6
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 6 transfer complete interrupt enable
  */
#define DMABTCIE_CH6_Pos  (6)
#define DMABTCIE_CH6_Msk  (0x1U << DMABTCIE_CH6_Pos)

#define DMABTCIE_CH6_DISABLE  ((0x0U) << DMABTCIE_CH6_Pos)
#define DMABTCIE_CH6_ENABLE   ((0x1U) << DMABTCIE_CH6_Pos)

#define DMABTCIE_CH6_(x)  (((x) << DMABTCIE_CH6_Pos) & DMABTCIE_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH7
  *  @access     DMAC->DMABTCIE
  *  @brief      Channel 7 transfer complete interrupt enable
  */
#define DMABTCIE_CH7_Pos  (7)
#define DMABTCIE_CH7_Msk  (0x1U << DMABTCIE_CH7_Pos)

#define DMABTCIE_CH7_DISABLE  ((0x0U) << DMABTCIE_CH7_Pos)
#define DMABTCIE_CH7_ENABLE   ((0x1U) << DMABTCIE_CH7_Pos)

#define DMABTCIE_CH7_(x)  (((x) << DMABTCIE_CH7_Pos) & DMABTCIE_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH0WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH0 bit write enable
  */
#define DMABTCIE_CH0WE_Pos  (8)
#define DMABTCIE_CH0WE_Msk  (0x1U << DMABTCIE_CH0WE_Pos)

#define DMABTCIE_CH0WE_DISABLE  ((0x0U) << DMABTCIE_CH0WE_Pos)
#define DMABTCIE_CH0WE_ENABLE   ((0x1U) << DMABTCIE_CH0WE_Pos)

#define DMABTCIE_CH0WE_(x)  (((x) << DMABTCIE_CH0WE_Pos) & DMABTCIE_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH1WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH1 bit write enable
  */
#define DMABTCIE_CH1WE_Pos  (9)
#define DMABTCIE_CH1WE_Msk  (0x1U << DMABTCIE_CH1WE_Pos)

#define DMABTCIE_CH1WE_DISABLE  ((0x0U) << DMABTCIE_CH1WE_Pos)
#define DMABTCIE_CH1WE_ENABLE   ((0x1U) << DMABTCIE_CH1WE_Pos)

#define DMABTCIE_CH1WE_(x)  (((x) << DMABTCIE_CH1WE_Pos) & DMABTCIE_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH2WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH2 bit write enable
  */
#define DMABTCIE_CH2WE_Pos  (10)
#define DMABTCIE_CH2WE_Msk  (0x1U << DMABTCIE_CH2WE_Pos)

#define DMABTCIE_CH2WE_DISABLE  ((0x0U) << DMABTCIE_CH2WE_Pos)
#define DMABTCIE_CH2WE_ENABLE   ((0x1U) << DMABTCIE_CH2WE_Pos)

#define DMABTCIE_CH2WE_(x)  (((x) << DMABTCIE_CH2WE_Pos) & DMABTCIE_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH3WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH3 bit write enable
  */
#define DMABTCIE_CH3WE_Pos  (11)
#define DMABTCIE_CH3WE_Msk  (0x1U << DMABTCIE_CH3WE_Pos)

#define DMABTCIE_CH3WE_DISABLE  ((0x0U) << DMABTCIE_CH3WE_Pos)
#define DMABTCIE_CH3WE_ENABLE   ((0x1U) << DMABTCIE_CH3WE_Pos)

#define DMABTCIE_CH3WE_(x)  (((x) << DMABTCIE_CH3WE_Pos) & DMABTCIE_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH4WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH4 bit write enable
  */
#define DMABTCIE_CH4WE_Pos  (12)
#define DMABTCIE_CH4WE_Msk  (0x1U << DMABTCIE_CH4WE_Pos)

#define DMABTCIE_CH4WE_DISABLE  ((0x0U) << DMABTCIE_CH4WE_Pos)
#define DMABTCIE_CH4WE_ENABLE   ((0x1U) << DMABTCIE_CH4WE_Pos)

#define DMABTCIE_CH4WE_(x)  (((x) << DMABTCIE_CH4WE_Pos) & DMABTCIE_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH5WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH5 bit write enable
  */
#define DMABTCIE_CH5WE_Pos  (13)
#define DMABTCIE_CH5WE_Msk  (0x1U << DMABTCIE_CH5WE_Pos)

#define DMABTCIE_CH5WE_DISABLE  ((0x0U) << DMABTCIE_CH5WE_Pos)
#define DMABTCIE_CH5WE_ENABLE   ((0x1U) << DMABTCIE_CH5WE_Pos)

#define DMABTCIE_CH5WE_(x)  (((x) << DMABTCIE_CH5WE_Pos) & DMABTCIE_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH6WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH6 bit write enable
  */
#define DMABTCIE_CH6WE_Pos  (14)
#define DMABTCIE_CH6WE_Msk  (0x1U << DMABTCIE_CH6WE_Pos)

#define DMABTCIE_CH6WE_DISABLE  ((0x0U) << DMABTCIE_CH6WE_Pos)
#define DMABTCIE_CH6WE_ENABLE   ((0x1U) << DMABTCIE_CH6WE_Pos)

#define DMABTCIE_CH6WE_(x)  (((x) << DMABTCIE_CH6WE_Pos) & DMABTCIE_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIE        CH7WE
  *  @access     DMAC->DMABTCIE
  *  @brief      CH7 bit write enable
  */
#define DMABTCIE_CH7WE_Pos  (15)
#define DMABTCIE_CH7WE_Msk  (0x1U << DMABTCIE_CH7WE_Pos)

#define DMABTCIE_CH7WE_DISABLE  ((0x0U) << DMABTCIE_CH7WE_Pos)
#define DMABTCIE_CH7WE_ENABLE   ((0x1U) << DMABTCIE_CH7WE_Pos)

#define DMABTCIE_CH7WE_(x)  (((x) << DMABTCIE_CH7WE_Pos) & DMABTCIE_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH0
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 0 transfer complete interrupt enable
  */
#define DMASTCIE_CH0_Pos  (0)
#define DMASTCIE_CH0_Msk  (0x1U << DMASTCIE_CH0_Pos)

#define DMASTCIE_CH0_DISABLE  ((0x0U) << DMASTCIE_CH0_Pos)
#define DMASTCIE_CH0_ENABLE   ((0x1U) << DMASTCIE_CH0_Pos)

#define DMASTCIE_CH0_(x)  (((x) << DMASTCIE_CH0_Pos) & DMASTCIE_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH1
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 1 transfer complete interrupt enable
  */
#define DMASTCIE_CH1_Pos  (1)
#define DMASTCIE_CH1_Msk  (0x1U << DMASTCIE_CH1_Pos)

#define DMASTCIE_CH1_DISABLE  ((0x0U) << DMASTCIE_CH1_Pos)
#define DMASTCIE_CH1_ENABLE   ((0x1U) << DMASTCIE_CH1_Pos)

#define DMASTCIE_CH1_(x)  (((x) << DMASTCIE_CH1_Pos) & DMASTCIE_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH2
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 2 transfer complete interrupt enable
  */
#define DMASTCIE_CH2_Pos  (2)
#define DMASTCIE_CH2_Msk  (0x1U << DMASTCIE_CH2_Pos)

#define DMASTCIE_CH2_DISABLE  ((0x0U) << DMASTCIE_CH2_Pos)
#define DMASTCIE_CH2_ENABLE   ((0x1U) << DMASTCIE_CH2_Pos)

#define DMASTCIE_CH2_(x)  (((x) << DMASTCIE_CH2_Pos) & DMASTCIE_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH3
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 3 transfer complete interrupt enable
  */
#define DMASTCIE_CH3_Pos  (3)
#define DMASTCIE_CH3_Msk  (0x1U << DMASTCIE_CH3_Pos)

#define DMASTCIE_CH3_DISABLE  ((0x0U) << DMASTCIE_CH3_Pos)
#define DMASTCIE_CH3_ENABLE   ((0x1U) << DMASTCIE_CH3_Pos)

#define DMASTCIE_CH3_(x)  (((x) << DMASTCIE_CH3_Pos) & DMASTCIE_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH4
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 4 transfer complete interrupt enable
  */
#define DMASTCIE_CH4_Pos  (4)
#define DMASTCIE_CH4_Msk  (0x1U << DMASTCIE_CH4_Pos)

#define DMASTCIE_CH4_DISABLE  ((0x0U) << DMASTCIE_CH4_Pos)
#define DMASTCIE_CH4_ENABLE   ((0x1U) << DMASTCIE_CH4_Pos)

#define DMASTCIE_CH4_(x)  (((x) << DMASTCIE_CH4_Pos) & DMASTCIE_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH5
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 5 transfer complete interrupt enable
  */
#define DMASTCIE_CH5_Pos  (5)
#define DMASTCIE_CH5_Msk  (0x1U << DMASTCIE_CH5_Pos)

#define DMASTCIE_CH5_DISABLE  ((0x0U) << DMASTCIE_CH5_Pos)
#define DMASTCIE_CH5_ENABLE   ((0x1U) << DMASTCIE_CH5_Pos)

#define DMASTCIE_CH5_(x)  (((x) << DMASTCIE_CH5_Pos) & DMASTCIE_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH6
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 6 transfer complete interrupt enable
  */
#define DMASTCIE_CH6_Pos  (6)
#define DMASTCIE_CH6_Msk  (0x1U << DMASTCIE_CH6_Pos)

#define DMASTCIE_CH6_DISABLE  ((0x0U) << DMASTCIE_CH6_Pos)
#define DMASTCIE_CH6_ENABLE   ((0x1U) << DMASTCIE_CH6_Pos)

#define DMASTCIE_CH6_(x)  (((x) << DMASTCIE_CH6_Pos) & DMASTCIE_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH7
  *  @access     DMAC->DMASTCIE
  *  @brief      Channel 7 transfer complete interrupt enable
  */
#define DMASTCIE_CH7_Pos  (7)
#define DMASTCIE_CH7_Msk  (0x1U << DMASTCIE_CH7_Pos)

#define DMASTCIE_CH7_DISABLE  ((0x0U) << DMASTCIE_CH7_Pos)
#define DMASTCIE_CH7_ENABLE   ((0x1U) << DMASTCIE_CH7_Pos)

#define DMASTCIE_CH7_(x)  (((x) << DMASTCIE_CH7_Pos) & DMASTCIE_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH0WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH0 bit write enable
  */
#define DMASTCIE_CH0WE_Pos  (8)
#define DMASTCIE_CH0WE_Msk  (0x1U << DMASTCIE_CH0WE_Pos)

#define DMASTCIE_CH0WE_DISABLE  ((0x0U) << DMASTCIE_CH0WE_Pos)
#define DMASTCIE_CH0WE_ENABLE   ((0x1U) << DMASTCIE_CH0WE_Pos)

#define DMASTCIE_CH0WE_(x)  (((x) << DMASTCIE_CH0WE_Pos) & DMASTCIE_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH1WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH1 bit write enable
  */
#define DMASTCIE_CH1WE_Pos  (9)
#define DMASTCIE_CH1WE_Msk  (0x1U << DMASTCIE_CH1WE_Pos)

#define DMASTCIE_CH1WE_DISABLE  ((0x0U) << DMASTCIE_CH1WE_Pos)
#define DMASTCIE_CH1WE_ENABLE   ((0x1U) << DMASTCIE_CH1WE_Pos)

#define DMASTCIE_CH1WE_(x)  (((x) << DMASTCIE_CH1WE_Pos) & DMASTCIE_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH2WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH2 bit write enable
  */
#define DMASTCIE_CH2WE_Pos  (10)
#define DMASTCIE_CH2WE_Msk  (0x1U << DMASTCIE_CH2WE_Pos)

#define DMASTCIE_CH2WE_DISABLE  ((0x0U) << DMASTCIE_CH2WE_Pos)
#define DMASTCIE_CH2WE_ENABLE   ((0x1U) << DMASTCIE_CH2WE_Pos)

#define DMASTCIE_CH2WE_(x)  (((x) << DMASTCIE_CH2WE_Pos) & DMASTCIE_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH3WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH3 bit write enable
  */
#define DMASTCIE_CH3WE_Pos  (11)
#define DMASTCIE_CH3WE_Msk  (0x1U << DMASTCIE_CH3WE_Pos)

#define DMASTCIE_CH3WE_DISABLE  ((0x0U) << DMASTCIE_CH3WE_Pos)
#define DMASTCIE_CH3WE_ENABLE   ((0x1U) << DMASTCIE_CH3WE_Pos)

#define DMASTCIE_CH3WE_(x)  (((x) << DMASTCIE_CH3WE_Pos) & DMASTCIE_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH4WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH4 bit write enable
  */
#define DMASTCIE_CH4WE_Pos  (12)
#define DMASTCIE_CH4WE_Msk  (0x1U << DMASTCIE_CH4WE_Pos)

#define DMASTCIE_CH4WE_DISABLE  ((0x0U) << DMASTCIE_CH4WE_Pos)
#define DMASTCIE_CH4WE_ENABLE   ((0x1U) << DMASTCIE_CH4WE_Pos)

#define DMASTCIE_CH4WE_(x)  (((x) << DMASTCIE_CH4WE_Pos) & DMASTCIE_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH5WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH5 bit write enable
  */
#define DMASTCIE_CH5WE_Pos  (13)
#define DMASTCIE_CH5WE_Msk  (0x1U << DMASTCIE_CH5WE_Pos)

#define DMASTCIE_CH5WE_DISABLE  ((0x0U) << DMASTCIE_CH5WE_Pos)
#define DMASTCIE_CH5WE_ENABLE   ((0x1U) << DMASTCIE_CH5WE_Pos)

#define DMASTCIE_CH5WE_(x)  (((x) << DMASTCIE_CH5WE_Pos) & DMASTCIE_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH6WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH6 bit write enable
  */
#define DMASTCIE_CH6WE_Pos  (14)
#define DMASTCIE_CH6WE_Msk  (0x1U << DMASTCIE_CH6WE_Pos)

#define DMASTCIE_CH6WE_DISABLE  ((0x0U) << DMASTCIE_CH6WE_Pos)
#define DMASTCIE_CH6WE_ENABLE   ((0x1U) << DMASTCIE_CH6WE_Pos)

#define DMASTCIE_CH6WE_(x)  (((x) << DMASTCIE_CH6WE_Pos) & DMASTCIE_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIE        CH7WE
  *  @access     DMAC->DMASTCIE
  *  @brief      CH7 bit write enable
  */
#define DMASTCIE_CH7WE_Pos  (15)
#define DMASTCIE_CH7WE_Msk  (0x1U << DMASTCIE_CH7WE_Pos)

#define DMASTCIE_CH7WE_DISABLE  ((0x0U) << DMASTCIE_CH7WE_Pos)
#define DMASTCIE_CH7WE_ENABLE   ((0x1U) << DMASTCIE_CH7WE_Pos)

#define DMASTCIE_CH7WE_(x)  (((x) << DMASTCIE_CH7WE_Pos) & DMASTCIE_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH0
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 0 transfer complete interrupt enable
  */
#define DMADTCIE_CH0_Pos  (0)
#define DMADTCIE_CH0_Msk  (0x1U << DMADTCIE_CH0_Pos)

#define DMADTCIE_CH0_DISABLE  ((0x0U) << DMADTCIE_CH0_Pos)
#define DMADTCIE_CH0_ENABLE   ((0x1U) << DMADTCIE_CH0_Pos)

#define DMADTCIE_CH0_(x)  (((x) << DMADTCIE_CH0_Pos) & DMADTCIE_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH1
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 1 transfer complete interrupt enable
  */
#define DMADTCIE_CH1_Pos  (1)
#define DMADTCIE_CH1_Msk  (0x1U << DMADTCIE_CH1_Pos)

#define DMADTCIE_CH1_DISABLE  ((0x0U) << DMADTCIE_CH1_Pos)
#define DMADTCIE_CH1_ENABLE   ((0x1U) << DMADTCIE_CH1_Pos)

#define DMADTCIE_CH1_(x)  (((x) << DMADTCIE_CH1_Pos) & DMADTCIE_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH2
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 2 transfer complete interrupt enable
  */
#define DMADTCIE_CH2_Pos  (2)
#define DMADTCIE_CH2_Msk  (0x1U << DMADTCIE_CH2_Pos)

#define DMADTCIE_CH2_DISABLE  ((0x0U) << DMADTCIE_CH2_Pos)
#define DMADTCIE_CH2_ENABLE   ((0x1U) << DMADTCIE_CH2_Pos)

#define DMADTCIE_CH2_(x)  (((x) << DMADTCIE_CH2_Pos) & DMADTCIE_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH3
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 3 transfer complete interrupt enable
  */
#define DMADTCIE_CH3_Pos  (3)
#define DMADTCIE_CH3_Msk  (0x1U << DMADTCIE_CH3_Pos)

#define DMADTCIE_CH3_DISABLE  ((0x0U) << DMADTCIE_CH3_Pos)
#define DMADTCIE_CH3_ENABLE   ((0x1U) << DMADTCIE_CH3_Pos)

#define DMADTCIE_CH3_(x)  (((x) << DMADTCIE_CH3_Pos) & DMADTCIE_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH4
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 4 transfer complete interrupt enable
  */
#define DMADTCIE_CH4_Pos  (4)
#define DMADTCIE_CH4_Msk  (0x1U << DMADTCIE_CH4_Pos)

#define DMADTCIE_CH4_DISABLE  ((0x0U) << DMADTCIE_CH4_Pos)
#define DMADTCIE_CH4_ENABLE   ((0x1U) << DMADTCIE_CH4_Pos)

#define DMADTCIE_CH4_(x)  (((x) << DMADTCIE_CH4_Pos) & DMADTCIE_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH5
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 5 transfer complete interrupt enable
  */
#define DMADTCIE_CH5_Pos  (5)
#define DMADTCIE_CH5_Msk  (0x1U << DMADTCIE_CH5_Pos)

#define DMADTCIE_CH5_DISABLE  ((0x0U) << DMADTCIE_CH5_Pos)
#define DMADTCIE_CH5_ENABLE   ((0x1U) << DMADTCIE_CH5_Pos)

#define DMADTCIE_CH5_(x)  (((x) << DMADTCIE_CH5_Pos) & DMADTCIE_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH6
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 6 transfer complete interrupt enable
  */
#define DMADTCIE_CH6_Pos  (6)
#define DMADTCIE_CH6_Msk  (0x1U << DMADTCIE_CH6_Pos)

#define DMADTCIE_CH6_DISABLE  ((0x0U) << DMADTCIE_CH6_Pos)
#define DMADTCIE_CH6_ENABLE   ((0x1U) << DMADTCIE_CH6_Pos)

#define DMADTCIE_CH6_(x)  (((x) << DMADTCIE_CH6_Pos) & DMADTCIE_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH7
  *  @access     DMAC->DMADTCIE
  *  @brief      Channel 7 transfer complete interrupt enable
  */
#define DMADTCIE_CH7_Pos  (7)
#define DMADTCIE_CH7_Msk  (0x1U << DMADTCIE_CH7_Pos)

#define DMADTCIE_CH7_DISABLE  ((0x0U) << DMADTCIE_CH7_Pos)
#define DMADTCIE_CH7_ENABLE   ((0x1U) << DMADTCIE_CH7_Pos)

#define DMADTCIE_CH7_(x)  (((x) << DMADTCIE_CH7_Pos) & DMADTCIE_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH0WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH0 bit write enable
  */
#define DMADTCIE_CH0WE_Pos  (8)
#define DMADTCIE_CH0WE_Msk  (0x1U << DMADTCIE_CH0WE_Pos)

#define DMADTCIE_CH0WE_DISABLE  ((0x0U) << DMADTCIE_CH0WE_Pos)
#define DMADTCIE_CH0WE_ENABLE   ((0x1U) << DMADTCIE_CH0WE_Pos)

#define DMADTCIE_CH0WE_(x)  (((x) << DMADTCIE_CH0WE_Pos) & DMADTCIE_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH1WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH1 bit write enable
  */
#define DMADTCIE_CH1WE_Pos  (9)
#define DMADTCIE_CH1WE_Msk  (0x1U << DMADTCIE_CH1WE_Pos)

#define DMADTCIE_CH1WE_DISABLE  ((0x0U) << DMADTCIE_CH1WE_Pos)
#define DMADTCIE_CH1WE_ENABLE   ((0x1U) << DMADTCIE_CH1WE_Pos)

#define DMADTCIE_CH1WE_(x)  (((x) << DMADTCIE_CH1WE_Pos) & DMADTCIE_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH2WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH2 bit write enable
  */
#define DMADTCIE_CH2WE_Pos  (10)
#define DMADTCIE_CH2WE_Msk  (0x1U << DMADTCIE_CH2WE_Pos)

#define DMADTCIE_CH2WE_DISABLE  ((0x0U) << DMADTCIE_CH2WE_Pos)
#define DMADTCIE_CH2WE_ENABLE   ((0x1U) << DMADTCIE_CH2WE_Pos)

#define DMADTCIE_CH2WE_(x)  (((x) << DMADTCIE_CH2WE_Pos) & DMADTCIE_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH3WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH3 bit write enable
  */
#define DMADTCIE_CH3WE_Pos  (11)
#define DMADTCIE_CH3WE_Msk  (0x1U << DMADTCIE_CH3WE_Pos)

#define DMADTCIE_CH3WE_DISABLE  ((0x0U) << DMADTCIE_CH3WE_Pos)
#define DMADTCIE_CH3WE_ENABLE   ((0x1U) << DMADTCIE_CH3WE_Pos)

#define DMADTCIE_CH3WE_(x)  (((x) << DMADTCIE_CH3WE_Pos) & DMADTCIE_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH4WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH4 bit write enable
  */
#define DMADTCIE_CH4WE_Pos  (12)
#define DMADTCIE_CH4WE_Msk  (0x1U << DMADTCIE_CH4WE_Pos)

#define DMADTCIE_CH4WE_DISABLE  ((0x0U) << DMADTCIE_CH4WE_Pos)
#define DMADTCIE_CH4WE_ENABLE   ((0x1U) << DMADTCIE_CH4WE_Pos)

#define DMADTCIE_CH4WE_(x)  (((x) << DMADTCIE_CH4WE_Pos) & DMADTCIE_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH5WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH5 bit write enable
  */
#define DMADTCIE_CH5WE_Pos  (13)
#define DMADTCIE_CH5WE_Msk  (0x1U << DMADTCIE_CH5WE_Pos)

#define DMADTCIE_CH5WE_DISABLE  ((0x0U) << DMADTCIE_CH5WE_Pos)
#define DMADTCIE_CH5WE_ENABLE   ((0x1U) << DMADTCIE_CH5WE_Pos)

#define DMADTCIE_CH5WE_(x)  (((x) << DMADTCIE_CH5WE_Pos) & DMADTCIE_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH6WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH6 bit write enable
  */
#define DMADTCIE_CH6WE_Pos  (14)
#define DMADTCIE_CH6WE_Msk  (0x1U << DMADTCIE_CH6WE_Pos)

#define DMADTCIE_CH6WE_DISABLE  ((0x0U) << DMADTCIE_CH6WE_Pos)
#define DMADTCIE_CH6WE_ENABLE   ((0x1U) << DMADTCIE_CH6WE_Pos)

#define DMADTCIE_CH6WE_(x)  (((x) << DMADTCIE_CH6WE_Pos) & DMADTCIE_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIE        CH7WE
  *  @access     DMAC->DMADTCIE
  *  @brief      CH7 bit write enable
  */
#define DMADTCIE_CH7WE_Pos  (15)
#define DMADTCIE_CH7WE_Msk  (0x1U << DMADTCIE_CH7WE_Pos)

#define DMADTCIE_CH7WE_DISABLE  ((0x0U) << DMADTCIE_CH7WE_Pos)
#define DMADTCIE_CH7WE_ENABLE   ((0x1U) << DMADTCIE_CH7WE_Pos)

#define DMADTCIE_CH7WE_(x)  (((x) << DMADTCIE_CH7WE_Pos) & DMADTCIE_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH0
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 0 error interrupt enable
  */
#define DMAERRIE_CH0_Pos  (0)
#define DMAERRIE_CH0_Msk  (0x1U << DMAERRIE_CH0_Pos)

#define DMAERRIE_CH0_DISABLE  ((0x0U) << DMAERRIE_CH0_Pos)
#define DMAERRIE_CH0_ENABLE   ((0x1U) << DMAERRIE_CH0_Pos)

#define DMAERRIE_CH0_(x)  (((x) << DMAERRIE_CH0_Pos) & DMAERRIE_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH1
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 1 error interrupt enable
  */
#define DMAERRIE_CH1_Pos  (1)
#define DMAERRIE_CH1_Msk  (0x1U << DMAERRIE_CH1_Pos)

#define DMAERRIE_CH1_DISABLE  ((0x0U) << DMAERRIE_CH1_Pos)
#define DMAERRIE_CH1_ENABLE   ((0x1U) << DMAERRIE_CH1_Pos)

#define DMAERRIE_CH1_(x)  (((x) << DMAERRIE_CH1_Pos) & DMAERRIE_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH2
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 2 error interrupt enable
  */
#define DMAERRIE_CH2_Pos  (2)
#define DMAERRIE_CH2_Msk  (0x1U << DMAERRIE_CH2_Pos)

#define DMAERRIE_CH2_DISABLE  ((0x0U) << DMAERRIE_CH2_Pos)
#define DMAERRIE_CH2_ENABLE   ((0x1U) << DMAERRIE_CH2_Pos)

#define DMAERRIE_CH2_(x)  (((x) << DMAERRIE_CH2_Pos) & DMAERRIE_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH3
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 3 error interrupt enable
  */
#define DMAERRIE_CH3_Pos  (3)
#define DMAERRIE_CH3_Msk  (0x1U << DMAERRIE_CH3_Pos)

#define DMAERRIE_CH3_DISABLE  ((0x0U) << DMAERRIE_CH3_Pos)
#define DMAERRIE_CH3_ENABLE   ((0x1U) << DMAERRIE_CH3_Pos)

#define DMAERRIE_CH3_(x)  (((x) << DMAERRIE_CH3_Pos) & DMAERRIE_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH4
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 4 error interrupt enable
  */
#define DMAERRIE_CH4_Pos  (4)
#define DMAERRIE_CH4_Msk  (0x1U << DMAERRIE_CH4_Pos)

#define DMAERRIE_CH4_DISABLE  ((0x0U) << DMAERRIE_CH4_Pos)
#define DMAERRIE_CH4_ENABLE   ((0x1U) << DMAERRIE_CH4_Pos)

#define DMAERRIE_CH4_(x)  (((x) << DMAERRIE_CH4_Pos) & DMAERRIE_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH5
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 5 error interrupt enable
  */
#define DMAERRIE_CH5_Pos  (5)
#define DMAERRIE_CH5_Msk  (0x1U << DMAERRIE_CH5_Pos)

#define DMAERRIE_CH5_DISABLE  ((0x0U) << DMAERRIE_CH5_Pos)
#define DMAERRIE_CH5_ENABLE   ((0x1U) << DMAERRIE_CH5_Pos)

#define DMAERRIE_CH5_(x)  (((x) << DMAERRIE_CH5_Pos) & DMAERRIE_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH6
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 6 error interrupt enable
  */
#define DMAERRIE_CH6_Pos  (6)
#define DMAERRIE_CH6_Msk  (0x1U << DMAERRIE_CH6_Pos)

#define DMAERRIE_CH6_DISABLE  ((0x0U) << DMAERRIE_CH6_Pos)
#define DMAERRIE_CH6_ENABLE   ((0x1U) << DMAERRIE_CH6_Pos)

#define DMAERRIE_CH6_(x)  (((x) << DMAERRIE_CH6_Pos) & DMAERRIE_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH7
  *  @access     DMAC->DMAERRIE
  *  @brief      Channel 7 error interrupt enable
  */
#define DMAERRIE_CH7_Pos  (7)
#define DMAERRIE_CH7_Msk  (0x1U << DMAERRIE_CH7_Pos)

#define DMAERRIE_CH7_DISABLE  ((0x0U) << DMAERRIE_CH7_Pos)
#define DMAERRIE_CH7_ENABLE   ((0x1U) << DMAERRIE_CH7_Pos)

#define DMAERRIE_CH7_(x)  (((x) << DMAERRIE_CH7_Pos) & DMAERRIE_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH0WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH0 bit write enable
  */
#define DMAERRIE_CH0WE_Pos  (8)
#define DMAERRIE_CH0WE_Msk  (0x1U << DMAERRIE_CH0WE_Pos)

#define DMAERRIE_CH0WE_DISABLE  ((0x0U) << DMAERRIE_CH0WE_Pos)
#define DMAERRIE_CH0WE_ENABLE   ((0x1U) << DMAERRIE_CH0WE_Pos)

#define DMAERRIE_CH0WE_(x)  (((x) << DMAERRIE_CH0WE_Pos) & DMAERRIE_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH1WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH1 bit write enable
  */
#define DMAERRIE_CH1WE_Pos  (9)
#define DMAERRIE_CH1WE_Msk  (0x1U << DMAERRIE_CH1WE_Pos)

#define DMAERRIE_CH1WE_DISABLE  ((0x0U) << DMAERRIE_CH1WE_Pos)
#define DMAERRIE_CH1WE_ENABLE   ((0x1U) << DMAERRIE_CH1WE_Pos)

#define DMAERRIE_CH1WE_(x)  (((x) << DMAERRIE_CH1WE_Pos) & DMAERRIE_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH2WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH2 bit write enable
  */
#define DMAERRIE_CH2WE_Pos  (10)
#define DMAERRIE_CH2WE_Msk  (0x1U << DMAERRIE_CH2WE_Pos)

#define DMAERRIE_CH2WE_DISABLE  ((0x0U) << DMAERRIE_CH2WE_Pos)
#define DMAERRIE_CH2WE_ENABLE   ((0x1U) << DMAERRIE_CH2WE_Pos)

#define DMAERRIE_CH2WE_(x)  (((x) << DMAERRIE_CH2WE_Pos) & DMAERRIE_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH3WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH3 bit write enable
  */
#define DMAERRIE_CH3WE_Pos  (11)
#define DMAERRIE_CH3WE_Msk  (0x1U << DMAERRIE_CH3WE_Pos)

#define DMAERRIE_CH3WE_DISABLE  ((0x0U) << DMAERRIE_CH3WE_Pos)
#define DMAERRIE_CH3WE_ENABLE   ((0x1U) << DMAERRIE_CH3WE_Pos)

#define DMAERRIE_CH3WE_(x)  (((x) << DMAERRIE_CH3WE_Pos) & DMAERRIE_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH4WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH4 bit write enable
  */
#define DMAERRIE_CH4WE_Pos  (12)
#define DMAERRIE_CH4WE_Msk  (0x1U << DMAERRIE_CH4WE_Pos)

#define DMAERRIE_CH4WE_DISABLE  ((0x0U) << DMAERRIE_CH4WE_Pos)
#define DMAERRIE_CH4WE_ENABLE   ((0x1U) << DMAERRIE_CH4WE_Pos)

#define DMAERRIE_CH4WE_(x)  (((x) << DMAERRIE_CH4WE_Pos) & DMAERRIE_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH5WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH5 bit write enable
  */
#define DMAERRIE_CH5WE_Pos  (13)
#define DMAERRIE_CH5WE_Msk  (0x1U << DMAERRIE_CH5WE_Pos)

#define DMAERRIE_CH5WE_DISABLE  ((0x0U) << DMAERRIE_CH5WE_Pos)
#define DMAERRIE_CH5WE_ENABLE   ((0x1U) << DMAERRIE_CH5WE_Pos)

#define DMAERRIE_CH5WE_(x)  (((x) << DMAERRIE_CH5WE_Pos) & DMAERRIE_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH6WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH6 bit write enable
  */
#define DMAERRIE_CH6WE_Pos  (14)
#define DMAERRIE_CH6WE_Msk  (0x1U << DMAERRIE_CH6WE_Pos)

#define DMAERRIE_CH6WE_DISABLE  ((0x0U) << DMAERRIE_CH6WE_Pos)
#define DMAERRIE_CH6WE_ENABLE   ((0x1U) << DMAERRIE_CH6WE_Pos)

#define DMAERRIE_CH6WE_(x)  (((x) << DMAERRIE_CH6WE_Pos) & DMAERRIE_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIE        CH7WE
  *  @access     DMAC->DMAERRIE
  *  @brief      CH7 bit write enable
  */
#define DMAERRIE_CH7WE_Pos  (15)
#define DMAERRIE_CH7WE_Msk  (0x1U << DMAERRIE_CH7WE_Pos)

#define DMAERRIE_CH7WE_DISABLE  ((0x0U) << DMAERRIE_CH7WE_Pos)
#define DMAERRIE_CH7WE_ENABLE   ((0x1U) << DMAERRIE_CH7WE_Pos)

#define DMAERRIE_CH7WE_(x)  (((x) << DMAERRIE_CH7WE_Pos) & DMAERRIE_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH0
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 0 transfer complete interrupt clear
  */
#define DMATCIC_CH0_Pos  (0)
#define DMATCIC_CH0_Msk  (0x1U << DMATCIC_CH0_Pos)

#define DMATCIC_CH0_NO_EFFECT  ((0x0U) << DMATCIC_CH0_Pos)
#define DMATCIC_CH0_CLEAR      ((0x1U) << DMATCIC_CH0_Pos)

#define DMATCIC_CH0_(x)  (((x) << DMATCIC_CH0_Pos) & DMATCIC_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH1
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 1 transfer complete interrupt clear
  */
#define DMATCIC_CH1_Pos  (1)
#define DMATCIC_CH1_Msk  (0x1U << DMATCIC_CH1_Pos)

#define DMATCIC_CH1_NO_EFFECT  ((0x0U) << DMATCIC_CH1_Pos)
#define DMATCIC_CH1_CLEAR      ((0x1U) << DMATCIC_CH1_Pos)

#define DMATCIC_CH1_(x)  (((x) << DMATCIC_CH1_Pos) & DMATCIC_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH2
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 2 transfer complete interrupt clear
  */
#define DMATCIC_CH2_Pos  (2)
#define DMATCIC_CH2_Msk  (0x1U << DMATCIC_CH2_Pos)

#define DMATCIC_CH2_NO_EFFECT  ((0x0U) << DMATCIC_CH2_Pos)
#define DMATCIC_CH2_CLEAR      ((0x1U) << DMATCIC_CH2_Pos)

#define DMATCIC_CH2_(x)  (((x) << DMATCIC_CH2_Pos) & DMATCIC_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH3
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 3 transfer complete interrupt clear
  */
#define DMATCIC_CH3_Pos  (3)
#define DMATCIC_CH3_Msk  (0x1U << DMATCIC_CH3_Pos)

#define DMATCIC_CH3_NO_EFFECT  ((0x0U) << DMATCIC_CH3_Pos)
#define DMATCIC_CH3_CLEAR      ((0x1U) << DMATCIC_CH3_Pos)

#define DMATCIC_CH3_(x)  (((x) << DMATCIC_CH3_Pos) & DMATCIC_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH4
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 4 transfer complete interrupt clear
  */
#define DMATCIC_CH4_Pos  (4)
#define DMATCIC_CH4_Msk  (0x1U << DMATCIC_CH4_Pos)

#define DMATCIC_CH4_NO_EFFECT  ((0x0U) << DMATCIC_CH4_Pos)
#define DMATCIC_CH4_CLEAR      ((0x1U) << DMATCIC_CH4_Pos)

#define DMATCIC_CH4_(x)  (((x) << DMATCIC_CH4_Pos) & DMATCIC_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH5
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 5 transfer complete interrupt clear
  */
#define DMATCIC_CH5_Pos  (5)
#define DMATCIC_CH5_Msk  (0x1U << DMATCIC_CH5_Pos)

#define DMATCIC_CH5_NO_EFFECT  ((0x0U) << DMATCIC_CH5_Pos)
#define DMATCIC_CH5_CLEAR      ((0x1U) << DMATCIC_CH5_Pos)

#define DMATCIC_CH5_(x)  (((x) << DMATCIC_CH5_Pos) & DMATCIC_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH6
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 6 transfer complete interrupt clear
  */
#define DMATCIC_CH6_Pos  (6)
#define DMATCIC_CH6_Msk  (0x1U << DMATCIC_CH6_Pos)

#define DMATCIC_CH6_NO_EFFECT  ((0x0U) << DMATCIC_CH6_Pos)
#define DMATCIC_CH6_CLEAR      ((0x1U) << DMATCIC_CH6_Pos)

#define DMATCIC_CH6_(x)  (((x) << DMATCIC_CH6_Pos) & DMATCIC_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMATCIC         CH7
  *  @access     DMAC->DMATCIC
  *  @brief      Channel 7 transfer complete interrupt clear
  */
#define DMATCIC_CH7_Pos  (7)
#define DMATCIC_CH7_Msk  (0x1U << DMATCIC_CH7_Pos)

#define DMATCIC_CH7_NO_EFFECT  ((0x0U) << DMATCIC_CH7_Pos)
#define DMATCIC_CH7_CLEAR      ((0x1U) << DMATCIC_CH7_Pos)

#define DMATCIC_CH7_(x)  (((x) << DMATCIC_CH7_Pos) & DMATCIC_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH0
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 0 transfer complete interrupt clear
  */
#define DMABTCIC_CH0_Pos  (0)
#define DMABTCIC_CH0_Msk  (0x1U << DMABTCIC_CH0_Pos)

#define DMABTCIC_CH0_NO_EFFECT  ((0x0U) << DMABTCIC_CH0_Pos)
#define DMABTCIC_CH0_CLEAR      ((0x1U) << DMABTCIC_CH0_Pos)

#define DMABTCIC_CH0_(x)  (((x) << DMABTCIC_CH0_Pos) & DMABTCIC_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH1
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 1 transfer complete interrupt clear
  */
#define DMABTCIC_CH1_Pos  (1)
#define DMABTCIC_CH1_Msk  (0x1U << DMABTCIC_CH1_Pos)

#define DMABTCIC_CH1_NO_EFFECT  ((0x0U) << DMABTCIC_CH1_Pos)
#define DMABTCIC_CH1_CLEAR      ((0x1U) << DMABTCIC_CH1_Pos)

#define DMABTCIC_CH1_(x)  (((x) << DMABTCIC_CH1_Pos) & DMABTCIC_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH2
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 2 transfer complete interrupt clear
  */
#define DMABTCIC_CH2_Pos  (2)
#define DMABTCIC_CH2_Msk  (0x1U << DMABTCIC_CH2_Pos)

#define DMABTCIC_CH2_NO_EFFECT  ((0x0U) << DMABTCIC_CH2_Pos)
#define DMABTCIC_CH2_CLEAR      ((0x1U) << DMABTCIC_CH2_Pos)

#define DMABTCIC_CH2_(x)  (((x) << DMABTCIC_CH2_Pos) & DMABTCIC_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH3
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 3 transfer complete interrupt clear
  */
#define DMABTCIC_CH3_Pos  (3)
#define DMABTCIC_CH3_Msk  (0x1U << DMABTCIC_CH3_Pos)

#define DMABTCIC_CH3_NO_EFFECT  ((0x0U) << DMABTCIC_CH3_Pos)
#define DMABTCIC_CH3_CLEAR      ((0x1U) << DMABTCIC_CH3_Pos)

#define DMABTCIC_CH3_(x)  (((x) << DMABTCIC_CH3_Pos) & DMABTCIC_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH4
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 4 transfer complete interrupt clear
  */
#define DMABTCIC_CH4_Pos  (4)
#define DMABTCIC_CH4_Msk  (0x1U << DMABTCIC_CH4_Pos)

#define DMABTCIC_CH4_NO_EFFECT  ((0x0U) << DMABTCIC_CH4_Pos)
#define DMABTCIC_CH4_CLEAR      ((0x1U) << DMABTCIC_CH4_Pos)

#define DMABTCIC_CH4_(x)  (((x) << DMABTCIC_CH4_Pos) & DMABTCIC_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH5
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 5 transfer complete interrupt clear
  */
#define DMABTCIC_CH5_Pos  (5)
#define DMABTCIC_CH5_Msk  (0x1U << DMABTCIC_CH5_Pos)

#define DMABTCIC_CH5_NO_EFFECT  ((0x0U) << DMABTCIC_CH5_Pos)
#define DMABTCIC_CH5_CLEAR      ((0x1U) << DMABTCIC_CH5_Pos)

#define DMABTCIC_CH5_(x)  (((x) << DMABTCIC_CH5_Pos) & DMABTCIC_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH6
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 6 transfer complete interrupt clear
  */
#define DMABTCIC_CH6_Pos  (6)
#define DMABTCIC_CH6_Msk  (0x1U << DMABTCIC_CH6_Pos)

#define DMABTCIC_CH6_NO_EFFECT  ((0x0U) << DMABTCIC_CH6_Pos)
#define DMABTCIC_CH6_CLEAR      ((0x1U) << DMABTCIC_CH6_Pos)

#define DMABTCIC_CH6_(x)  (((x) << DMABTCIC_CH6_Pos) & DMABTCIC_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMABTCIC        CH7
  *  @access     DMAC->DMABTCIC
  *  @brief      Channel 7 transfer complete interrupt clear
  */
#define DMABTCIC_CH7_Pos  (7)
#define DMABTCIC_CH7_Msk  (0x1U << DMABTCIC_CH7_Pos)

#define DMABTCIC_CH7_NO_EFFECT  ((0x0U) << DMABTCIC_CH7_Pos)
#define DMABTCIC_CH7_CLEAR      ((0x1U) << DMABTCIC_CH7_Pos)

#define DMABTCIC_CH7_(x)  (((x) << DMABTCIC_CH7_Pos) & DMABTCIC_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH0
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 0 transfer complete interrupt clear
  */
#define DMASTCIC_CH0_Pos  (0)
#define DMASTCIC_CH0_Msk  (0x1U << DMASTCIC_CH0_Pos)

#define DMASTCIC_CH0_NO_EFFECT  ((0x0U) << DMASTCIC_CH0_Pos)
#define DMASTCIC_CH0_CLEAR      ((0x1U) << DMASTCIC_CH0_Pos)

#define DMASTCIC_CH0_(x)  (((x) << DMASTCIC_CH0_Pos) & DMASTCIC_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH1
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 1 transfer complete interrupt clear
  */
#define DMASTCIC_CH1_Pos  (1)
#define DMASTCIC_CH1_Msk  (0x1U << DMASTCIC_CH1_Pos)

#define DMASTCIC_CH1_NO_EFFECT  ((0x0U) << DMASTCIC_CH1_Pos)
#define DMASTCIC_CH1_CLEAR      ((0x1U) << DMASTCIC_CH1_Pos)

#define DMASTCIC_CH1_(x)  (((x) << DMASTCIC_CH1_Pos) & DMASTCIC_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH2
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 2 transfer complete interrupt clear
  */
#define DMASTCIC_CH2_Pos  (2)
#define DMASTCIC_CH2_Msk  (0x1U << DMASTCIC_CH2_Pos)

#define DMASTCIC_CH2_NO_EFFECT  ((0x0U) << DMASTCIC_CH2_Pos)
#define DMASTCIC_CH2_CLEAR      ((0x1U) << DMASTCIC_CH2_Pos)

#define DMASTCIC_CH2_(x)  (((x) << DMASTCIC_CH2_Pos) & DMASTCIC_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH3
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 3 transfer complete interrupt clear
  */
#define DMASTCIC_CH3_Pos  (3)
#define DMASTCIC_CH3_Msk  (0x1U << DMASTCIC_CH3_Pos)

#define DMASTCIC_CH3_NO_EFFECT  ((0x0U) << DMASTCIC_CH3_Pos)
#define DMASTCIC_CH3_CLEAR      ((0x1U) << DMASTCIC_CH3_Pos)

#define DMASTCIC_CH3_(x)  (((x) << DMASTCIC_CH3_Pos) & DMASTCIC_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH4
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 4 transfer complete interrupt clear
  */
#define DMASTCIC_CH4_Pos  (4)
#define DMASTCIC_CH4_Msk  (0x1U << DMASTCIC_CH4_Pos)

#define DMASTCIC_CH4_NO_EFFECT  ((0x0U) << DMASTCIC_CH4_Pos)
#define DMASTCIC_CH4_CLEAR      ((0x1U) << DMASTCIC_CH4_Pos)

#define DMASTCIC_CH4_(x)  (((x) << DMASTCIC_CH4_Pos) & DMASTCIC_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH5
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 5 transfer complete interrupt clear
  */
#define DMASTCIC_CH5_Pos  (5)
#define DMASTCIC_CH5_Msk  (0x1U << DMASTCIC_CH5_Pos)

#define DMASTCIC_CH5_NO_EFFECT  ((0x0U) << DMASTCIC_CH5_Pos)
#define DMASTCIC_CH5_CLEAR      ((0x1U) << DMASTCIC_CH5_Pos)

#define DMASTCIC_CH5_(x)  (((x) << DMASTCIC_CH5_Pos) & DMASTCIC_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH6
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 6 transfer complete interrupt clear
  */
#define DMASTCIC_CH6_Pos  (6)
#define DMASTCIC_CH6_Msk  (0x1U << DMASTCIC_CH6_Pos)

#define DMASTCIC_CH6_NO_EFFECT  ((0x0U) << DMASTCIC_CH6_Pos)
#define DMASTCIC_CH6_CLEAR      ((0x1U) << DMASTCIC_CH6_Pos)

#define DMASTCIC_CH6_(x)  (((x) << DMASTCIC_CH6_Pos) & DMASTCIC_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASTCIC        CH7
  *  @access     DMAC->DMASTCIC
  *  @brief      Channel 7 transfer complete interrupt clear
  */
#define DMASTCIC_CH7_Pos  (7)
#define DMASTCIC_CH7_Msk  (0x1U << DMASTCIC_CH7_Pos)

#define DMASTCIC_CH7_NO_EFFECT  ((0x0U) << DMASTCIC_CH7_Pos)
#define DMASTCIC_CH7_CLEAR      ((0x1U) << DMASTCIC_CH7_Pos)

#define DMASTCIC_CH7_(x)  (((x) << DMASTCIC_CH7_Pos) & DMASTCIC_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH0
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 0 transfer complete interrupt clear
  */
#define DMADTCIC_CH0_Pos  (0)
#define DMADTCIC_CH0_Msk  (0x1U << DMADTCIC_CH0_Pos)

#define DMADTCIC_CH0_NO_EFFECT  ((0x0U) << DMADTCIC_CH0_Pos)
#define DMADTCIC_CH0_CLEAR      ((0x1U) << DMADTCIC_CH0_Pos)

#define DMADTCIC_CH0_(x)  (((x) << DMADTCIC_CH0_Pos) & DMADTCIC_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH1
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 1 transfer complete interrupt clear
  */
#define DMADTCIC_CH1_Pos  (1)
#define DMADTCIC_CH1_Msk  (0x1U << DMADTCIC_CH1_Pos)

#define DMADTCIC_CH1_NO_EFFECT  ((0x0U) << DMADTCIC_CH1_Pos)
#define DMADTCIC_CH1_CLEAR      ((0x1U) << DMADTCIC_CH1_Pos)

#define DMADTCIC_CH1_(x)  (((x) << DMADTCIC_CH1_Pos) & DMADTCIC_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH2
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 2 transfer complete interrupt clear
  */
#define DMADTCIC_CH2_Pos  (2)
#define DMADTCIC_CH2_Msk  (0x1U << DMADTCIC_CH2_Pos)

#define DMADTCIC_CH2_NO_EFFECT  ((0x0U) << DMADTCIC_CH2_Pos)
#define DMADTCIC_CH2_CLEAR      ((0x1U) << DMADTCIC_CH2_Pos)

#define DMADTCIC_CH2_(x)  (((x) << DMADTCIC_CH2_Pos) & DMADTCIC_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH3
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 3 transfer complete interrupt clear
  */
#define DMADTCIC_CH3_Pos  (3)
#define DMADTCIC_CH3_Msk  (0x1U << DMADTCIC_CH3_Pos)

#define DMADTCIC_CH3_NO_EFFECT  ((0x0U) << DMADTCIC_CH3_Pos)
#define DMADTCIC_CH3_CLEAR      ((0x1U) << DMADTCIC_CH3_Pos)

#define DMADTCIC_CH3_(x)  (((x) << DMADTCIC_CH3_Pos) & DMADTCIC_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH4
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 4 transfer complete interrupt clear
  */
#define DMADTCIC_CH4_Pos  (4)
#define DMADTCIC_CH4_Msk  (0x1U << DMADTCIC_CH4_Pos)

#define DMADTCIC_CH4_NO_EFFECT  ((0x0U) << DMADTCIC_CH4_Pos)
#define DMADTCIC_CH4_CLEAR      ((0x1U) << DMADTCIC_CH4_Pos)

#define DMADTCIC_CH4_(x)  (((x) << DMADTCIC_CH4_Pos) & DMADTCIC_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH5
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 5 transfer complete interrupt clear
  */
#define DMADTCIC_CH5_Pos  (5)
#define DMADTCIC_CH5_Msk  (0x1U << DMADTCIC_CH5_Pos)

#define DMADTCIC_CH5_NO_EFFECT  ((0x0U) << DMADTCIC_CH5_Pos)
#define DMADTCIC_CH5_CLEAR      ((0x1U) << DMADTCIC_CH5_Pos)

#define DMADTCIC_CH5_(x)  (((x) << DMADTCIC_CH5_Pos) & DMADTCIC_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH6
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 6 transfer complete interrupt clear
  */
#define DMADTCIC_CH6_Pos  (6)
#define DMADTCIC_CH6_Msk  (0x1U << DMADTCIC_CH6_Pos)

#define DMADTCIC_CH6_NO_EFFECT  ((0x0U) << DMADTCIC_CH6_Pos)
#define DMADTCIC_CH6_CLEAR      ((0x1U) << DMADTCIC_CH6_Pos)

#define DMADTCIC_CH6_(x)  (((x) << DMADTCIC_CH6_Pos) & DMADTCIC_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADTCIC        CH7
  *  @access     DMAC->DMADTCIC
  *  @brief      Channel 7 transfer complete interrupt clear
  */
#define DMADTCIC_CH7_Pos  (7)
#define DMADTCIC_CH7_Msk  (0x1U << DMADTCIC_CH7_Pos)

#define DMADTCIC_CH7_NO_EFFECT  ((0x0U) << DMADTCIC_CH7_Pos)
#define DMADTCIC_CH7_CLEAR      ((0x1U) << DMADTCIC_CH7_Pos)

#define DMADTCIC_CH7_(x)  (((x) << DMADTCIC_CH7_Pos) & DMADTCIC_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH0
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 0 error interrupt clear
  */
#define DMAERRIC_CH0_Pos  (0)
#define DMAERRIC_CH0_Msk  (0x1U << DMAERRIC_CH0_Pos)

#define DMAERRIC_CH0_NO_EFFECT  ((0x0U) << DMAERRIC_CH0_Pos)
#define DMAERRIC_CH0_CLEAR      ((0x1U) << DMAERRIC_CH0_Pos)

#define DMAERRIC_CH0_(x)  (((x) << DMAERRIC_CH0_Pos) & DMAERRIC_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH1
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 1 error interrupt clear
  */
#define DMAERRIC_CH1_Pos  (1)
#define DMAERRIC_CH1_Msk  (0x1U << DMAERRIC_CH1_Pos)

#define DMAERRIC_CH1_NO_EFFECT  ((0x0U) << DMAERRIC_CH1_Pos)
#define DMAERRIC_CH1_CLEAR      ((0x1U) << DMAERRIC_CH1_Pos)

#define DMAERRIC_CH1_(x)  (((x) << DMAERRIC_CH1_Pos) & DMAERRIC_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH2
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 2 error interrupt clear
  */
#define DMAERRIC_CH2_Pos  (2)
#define DMAERRIC_CH2_Msk  (0x1U << DMAERRIC_CH2_Pos)

#define DMAERRIC_CH2_NO_EFFECT  ((0x0U) << DMAERRIC_CH2_Pos)
#define DMAERRIC_CH2_CLEAR      ((0x1U) << DMAERRIC_CH2_Pos)

#define DMAERRIC_CH2_(x)  (((x) << DMAERRIC_CH2_Pos) & DMAERRIC_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH3
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 3 error interrupt clear
  */
#define DMAERRIC_CH3_Pos  (3)
#define DMAERRIC_CH3_Msk  (0x1U << DMAERRIC_CH3_Pos)

#define DMAERRIC_CH3_NO_EFFECT  ((0x0U) << DMAERRIC_CH3_Pos)
#define DMAERRIC_CH3_CLEAR      ((0x1U) << DMAERRIC_CH3_Pos)

#define DMAERRIC_CH3_(x)  (((x) << DMAERRIC_CH3_Pos) & DMAERRIC_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH4
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 4 error interrupt clear
  */
#define DMAERRIC_CH4_Pos  (4)
#define DMAERRIC_CH4_Msk  (0x1U << DMAERRIC_CH4_Pos)

#define DMAERRIC_CH4_NO_EFFECT  ((0x0U) << DMAERRIC_CH4_Pos)
#define DMAERRIC_CH4_CLEAR      ((0x1U) << DMAERRIC_CH4_Pos)

#define DMAERRIC_CH4_(x)  (((x) << DMAERRIC_CH4_Pos) & DMAERRIC_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH5
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 5 error interrupt clear
  */
#define DMAERRIC_CH5_Pos  (5)
#define DMAERRIC_CH5_Msk  (0x1U << DMAERRIC_CH5_Pos)

#define DMAERRIC_CH5_NO_EFFECT  ((0x0U) << DMAERRIC_CH5_Pos)
#define DMAERRIC_CH5_CLEAR      ((0x1U) << DMAERRIC_CH5_Pos)

#define DMAERRIC_CH5_(x)  (((x) << DMAERRIC_CH5_Pos) & DMAERRIC_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH6
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 6 error interrupt clear
  */
#define DMAERRIC_CH6_Pos  (6)
#define DMAERRIC_CH6_Msk  (0x1U << DMAERRIC_CH6_Pos)

#define DMAERRIC_CH6_NO_EFFECT  ((0x0U) << DMAERRIC_CH6_Pos)
#define DMAERRIC_CH6_CLEAR      ((0x1U) << DMAERRIC_CH6_Pos)

#define DMAERRIC_CH6_(x)  (((x) << DMAERRIC_CH6_Pos) & DMAERRIC_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAERRIC        CH7
  *  @access     DMAC->DMAERRIC
  *  @brief      Channel 7 error interrupt clear
  */
#define DMAERRIC_CH7_Pos  (7)
#define DMAERRIC_CH7_Msk  (0x1U << DMAERRIC_CH7_Pos)

#define DMAERRIC_CH7_NO_EFFECT  ((0x0U) << DMAERRIC_CH7_Pos)
#define DMAERRIC_CH7_CLEAR      ((0x1U) << DMAERRIC_CH7_Pos)

#define DMAERRIC_CH7_(x)  (((x) << DMAERRIC_CH7_Pos) & DMAERRIC_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAIF           TC
  *  @access     DMAC->DMAIF
  *  @brief      Global transfer complete interrupt flag
  *              This bit is the logic OR of DMATCIF bits
  */
#define DMAIF_TC_Pos  (0)
#define DMAIF_TC_Msk  (0x1U << DMAIF_TC_Pos)

#define DMAIF_TC_NOT_OCCUR  ((0x0U) << DMAIF_TC_Pos)
#define DMAIF_TC_OCCUR      ((0x1U) << DMAIF_TC_Pos)

#define DMAIF_TC_(x)  (((x) << DMAIF_TC_Pos) & DMAIF_TC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAIF           BC
  *  @access     DMAC->DMAIF
  *  @brief      Global block transfer complete interrupt flag
  *              This bit is the logic OR of DMATCIF bits
  */
#define DMAIF_BC_Pos  (1)
#define DMAIF_BC_Msk  (0x1U << DMAIF_BC_Pos)

#define DMAIF_BC_NOT_OCCUR  ((0x0U) << DMAIF_BC_Pos)
#define DMAIF_BC_OCCUR      ((0x1U) << DMAIF_BC_Pos)

#define DMAIF_BC_(x)  (((x) << DMAIF_BC_Pos) & DMAIF_BC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAIF           SC
  *  @access     DMAC->DMAIF
  *  @brief      Global source transfer complete interrupt flag
  *              This bit is the logic OR of DMATCIF bits
  */
#define DMAIF_SC_Pos  (2)
#define DMAIF_SC_Msk  (0x1U << DMAIF_SC_Pos)

#define DMAIF_SC_NOT_OCCUR  ((0x0U) << DMAIF_SC_Pos)
#define DMAIF_SC_OCCUR      ((0x1U) << DMAIF_SC_Pos)

#define DMAIF_SC_(x)  (((x) << DMAIF_SC_Pos) & DMAIF_SC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAIF           DC
  *  @access     DMAC->DMAIF
  *  @brief      Global destination transfer complete interrupt flag
  *              This bit is the logic OR of DMATCIF bits
  */
#define DMAIF_DC_Pos  (3)
#define DMAIF_DC_Msk  (0x1U << DMAIF_DC_Pos)

#define DMAIF_DC_NOT_OCCUR  ((0x0U) << DMAIF_DC_Pos)
#define DMAIF_DC_OCCUR      ((0x1U) << DMAIF_DC_Pos)

#define DMAIF_DC_(x)  (((x) << DMAIF_DC_Pos) & DMAIF_DC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAIF           ERROR
  *  @access     DMAC->DMAIF
  *  @brief      Global error interrupt flag.
  *              This bit is the logic OR of DMAERRIF bits
  */
#define DMAIF_ERROR_Pos  (4)
#define DMAIF_ERROR_Msk  (0x1U << DMAIF_ERROR_Pos)

#define DMAIF_ERROR_NOT_OCCUR  ((0x0U) << DMAIF_ERROR_Pos)
#define DMAIF_ERROR_OCCUR      ((0x1U) << DMAIF_ERROR_Pos)

#define DMAIF_ERROR_(x)  (((x) << DMAIF_ERROR_Pos) & DMAIF_ERROR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH0
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 0 enable.
  */
#define DMASSREQ_CH0_Pos  (0)
#define DMASSREQ_CH0_Msk  (0x1U << DMASSREQ_CH0_Pos)

#define DMASSREQ_CH0_DISABLE  ((0x0U) << DMASSREQ_CH0_Pos)
#define DMASSREQ_CH0_ENABLE   ((0x1U) << DMASSREQ_CH0_Pos)

#define DMASSREQ_CH0_(x)  (((x) << DMASSREQ_CH0_Pos) & DMASSREQ_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH1
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 1 enable.
  */
#define DMASSREQ_CH1_Pos  (1)
#define DMASSREQ_CH1_Msk  (0x1U << DMASSREQ_CH1_Pos)

#define DMASSREQ_CH1_DISABLE  ((0x0U) << DMASSREQ_CH1_Pos)
#define DMASSREQ_CH1_ENABLE   ((0x1U) << DMASSREQ_CH1_Pos)

#define DMASSREQ_CH1_(x)  (((x) << DMASSREQ_CH1_Pos) & DMASSREQ_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH2
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 2 enable.
  */
#define DMASSREQ_CH2_Pos  (2)
#define DMASSREQ_CH2_Msk  (0x1U << DMASSREQ_CH2_Pos)

#define DMASSREQ_CH2_DISABLE  ((0x0U) << DMASSREQ_CH2_Pos)
#define DMASSREQ_CH2_ENABLE   ((0x1U) << DMASSREQ_CH2_Pos)

#define DMASSREQ_CH2_(x)  (((x) << DMASSREQ_CH2_Pos) & DMASSREQ_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH3
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 3 enable.
  */
#define DMASSREQ_CH3_Pos  (3)
#define DMASSREQ_CH3_Msk  (0x1U << DMASSREQ_CH3_Pos)

#define DMASSREQ_CH3_DISABLE  ((0x0U) << DMASSREQ_CH3_Pos)
#define DMASSREQ_CH3_ENABLE   ((0x1U) << DMASSREQ_CH3_Pos)

#define DMASSREQ_CH3_(x)  (((x) << DMASSREQ_CH3_Pos) & DMASSREQ_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH4
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 4 enable.
  */
#define DMASSREQ_CH4_Pos  (4)
#define DMASSREQ_CH4_Msk  (0x1U << DMASSREQ_CH4_Pos)

#define DMASSREQ_CH4_DISABLE  ((0x0U) << DMASSREQ_CH4_Pos)
#define DMASSREQ_CH4_ENABLE   ((0x1U) << DMASSREQ_CH4_Pos)

#define DMASSREQ_CH4_(x)  (((x) << DMASSREQ_CH4_Pos) & DMASSREQ_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH5
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 5 enable.
  */
#define DMASSREQ_CH5_Pos  (5)
#define DMASSREQ_CH5_Msk  (0x1U << DMASSREQ_CH5_Pos)

#define DMASSREQ_CH5_DISABLE  ((0x0U) << DMASSREQ_CH5_Pos)
#define DMASSREQ_CH5_ENABLE   ((0x1U) << DMASSREQ_CH5_Pos)

#define DMASSREQ_CH5_(x)  (((x) << DMASSREQ_CH5_Pos) & DMASSREQ_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH6
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 6 enable.
  */
#define DMASSREQ_CH6_Pos  (6)
#define DMASSREQ_CH6_Msk  (0x1U << DMASSREQ_CH6_Pos)

#define DMASSREQ_CH6_DISABLE  ((0x0U) << DMASSREQ_CH6_Pos)
#define DMASSREQ_CH6_ENABLE   ((0x1U) << DMASSREQ_CH6_Pos)

#define DMASSREQ_CH6_(x)  (((x) << DMASSREQ_CH6_Pos) & DMASSREQ_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH7
  *  @access     DMAC->DMASSREQ
  *  @brief      Channel 7 enable.
  */
#define DMASSREQ_CH7_Pos  (7)
#define DMASSREQ_CH7_Msk  (0x1U << DMASSREQ_CH7_Pos)

#define DMASSREQ_CH7_DISABLE  ((0x0U) << DMASSREQ_CH7_Pos)
#define DMASSREQ_CH7_ENABLE   ((0x1U) << DMASSREQ_CH7_Pos)

#define DMASSREQ_CH7_(x)  (((x) << DMASSREQ_CH7_Pos) & DMASSREQ_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH0WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH0 bit write enable.
  */
#define DMASSREQ_CH0WE_Pos  (8)
#define DMASSREQ_CH0WE_Msk  (0x1U << DMASSREQ_CH0WE_Pos)

#define DMASSREQ_CH0WE_DISABLE  ((0x0U) << DMASSREQ_CH0WE_Pos)
#define DMASSREQ_CH0WE_ENABLE   ((0x1U) << DMASSREQ_CH0WE_Pos)

#define DMASSREQ_CH0WE_(x)  (((x) << DMASSREQ_CH0WE_Pos) & DMASSREQ_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH1WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH1 bit write enable.
  */
#define DMASSREQ_CH1WE_Pos  (9)
#define DMASSREQ_CH1WE_Msk  (0x1U << DMASSREQ_CH1WE_Pos)

#define DMASSREQ_CH1WE_DISABLE  ((0x0U) << DMASSREQ_CH1WE_Pos)
#define DMASSREQ_CH1WE_ENABLE   ((0x1U) << DMASSREQ_CH1WE_Pos)

#define DMASSREQ_CH1WE_(x)  (((x) << DMASSREQ_CH1WE_Pos) & DMASSREQ_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH2WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH2 bit write enable.
  */
#define DMASSREQ_CH2WE_Pos  (10)
#define DMASSREQ_CH2WE_Msk  (0x1U << DMASSREQ_CH2WE_Pos)

#define DMASSREQ_CH2WE_DISABLE  ((0x0U) << DMASSREQ_CH2WE_Pos)
#define DMASSREQ_CH2WE_ENABLE   ((0x1U) << DMASSREQ_CH2WE_Pos)

#define DMASSREQ_CH2WE_(x)  (((x) << DMASSREQ_CH2WE_Pos) & DMASSREQ_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH3WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH3 bit write enable.
  */
#define DMASSREQ_CH3WE_Pos  (11)
#define DMASSREQ_CH3WE_Msk  (0x1U << DMASSREQ_CH3WE_Pos)

#define DMASSREQ_CH3WE_DISABLE  ((0x0U) << DMASSREQ_CH3WE_Pos)
#define DMASSREQ_CH3WE_ENABLE   ((0x1U) << DMASSREQ_CH3WE_Pos)

#define DMASSREQ_CH3WE_(x)  (((x) << DMASSREQ_CH3WE_Pos) & DMASSREQ_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH4WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH4 bit write enable.
  */
#define DMASSREQ_CH4WE_Pos  (12)
#define DMASSREQ_CH4WE_Msk  (0x1U << DMASSREQ_CH4WE_Pos)

#define DMASSREQ_CH4WE_DISABLE  ((0x0U) << DMASSREQ_CH4WE_Pos)
#define DMASSREQ_CH4WE_ENABLE   ((0x1U) << DMASSREQ_CH4WE_Pos)

#define DMASSREQ_CH4WE_(x)  (((x) << DMASSREQ_CH4WE_Pos) & DMASSREQ_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH5WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH5 bit write enable.
  */
#define DMASSREQ_CH5WE_Pos  (13)
#define DMASSREQ_CH5WE_Msk  (0x1U << DMASSREQ_CH5WE_Pos)

#define DMASSREQ_CH5WE_DISABLE  ((0x0U) << DMASSREQ_CH5WE_Pos)
#define DMASSREQ_CH5WE_ENABLE   ((0x1U) << DMASSREQ_CH5WE_Pos)

#define DMASSREQ_CH5WE_(x)  (((x) << DMASSREQ_CH5WE_Pos) & DMASSREQ_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH6WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH6 bit write enable.
  */
#define DMASSREQ_CH6WE_Pos  (14)
#define DMASSREQ_CH6WE_Msk  (0x1U << DMASSREQ_CH6WE_Pos)

#define DMASSREQ_CH6WE_DISABLE  ((0x0U) << DMASSREQ_CH6WE_Pos)
#define DMASSREQ_CH6WE_ENABLE   ((0x1U) << DMASSREQ_CH6WE_Pos)

#define DMASSREQ_CH6WE_(x)  (((x) << DMASSREQ_CH6WE_Pos) & DMASSREQ_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSREQ        CH7WE
  *  @access     DMAC->DMASSREQ
  *  @brief      CH7 bit write enable.
  */
#define DMASSREQ_CH7WE_Pos  (15)
#define DMASSREQ_CH7WE_Msk  (0x1U << DMASSREQ_CH7WE_Pos)

#define DMASSREQ_CH7WE_DISABLE  ((0x0U) << DMASSREQ_CH7WE_Pos)
#define DMASSREQ_CH7WE_ENABLE   ((0x1U) << DMASSREQ_CH7WE_Pos)

#define DMASSREQ_CH7WE_(x)  (((x) << DMASSREQ_CH7WE_Pos) & DMASSREQ_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH0
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 0 enable.
  */
#define DMADSREQ_CH0_Pos  (0)
#define DMADSREQ_CH0_Msk  (0x1U << DMADSREQ_CH0_Pos)

#define DMADSREQ_CH0_DISABLE  ((0x0U) << DMADSREQ_CH0_Pos)
#define DMADSREQ_CH0_ENABLE   ((0x1U) << DMADSREQ_CH0_Pos)

#define DMADSREQ_CH0_(x)  (((x) << DMADSREQ_CH0_Pos) & DMADSREQ_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH1
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 1 enable.
  */
#define DMADSREQ_CH1_Pos  (1)
#define DMADSREQ_CH1_Msk  (0x1U << DMADSREQ_CH1_Pos)

#define DMADSREQ_CH1_DISABLE  ((0x0U) << DMADSREQ_CH1_Pos)
#define DMADSREQ_CH1_ENABLE   ((0x1U) << DMADSREQ_CH1_Pos)

#define DMADSREQ_CH1_(x)  (((x) << DMADSREQ_CH1_Pos) & DMADSREQ_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH2
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 2 enable.
  */
#define DMADSREQ_CH2_Pos  (2)
#define DMADSREQ_CH2_Msk  (0x1U << DMADSREQ_CH2_Pos)

#define DMADSREQ_CH2_DISABLE  ((0x0U) << DMADSREQ_CH2_Pos)
#define DMADSREQ_CH2_ENABLE   ((0x1U) << DMADSREQ_CH2_Pos)

#define DMADSREQ_CH2_(x)  (((x) << DMADSREQ_CH2_Pos) & DMADSREQ_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH3
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 3 enable.
  */
#define DMADSREQ_CH3_Pos  (3)
#define DMADSREQ_CH3_Msk  (0x1U << DMADSREQ_CH3_Pos)

#define DMADSREQ_CH3_DISABLE  ((0x0U) << DMADSREQ_CH3_Pos)
#define DMADSREQ_CH3_ENABLE   ((0x1U) << DMADSREQ_CH3_Pos)

#define DMADSREQ_CH3_(x)  (((x) << DMADSREQ_CH3_Pos) & DMADSREQ_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH4
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 4 enable.
  */
#define DMADSREQ_CH4_Pos  (4)
#define DMADSREQ_CH4_Msk  (0x1U << DMADSREQ_CH4_Pos)

#define DMADSREQ_CH4_DISABLE  ((0x0U) << DMADSREQ_CH4_Pos)
#define DMADSREQ_CH4_ENABLE   ((0x1U) << DMADSREQ_CH4_Pos)

#define DMADSREQ_CH4_(x)  (((x) << DMADSREQ_CH4_Pos) & DMADSREQ_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH5
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 5 enable.
  */
#define DMADSREQ_CH5_Pos  (5)
#define DMADSREQ_CH5_Msk  (0x1U << DMADSREQ_CH5_Pos)

#define DMADSREQ_CH5_DISABLE  ((0x0U) << DMADSREQ_CH5_Pos)
#define DMADSREQ_CH5_ENABLE   ((0x1U) << DMADSREQ_CH5_Pos)

#define DMADSREQ_CH5_(x)  (((x) << DMADSREQ_CH5_Pos) & DMADSREQ_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH6
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 6 enable.
  */
#define DMADSREQ_CH6_Pos  (6)
#define DMADSREQ_CH6_Msk  (0x1U << DMADSREQ_CH6_Pos)

#define DMADSREQ_CH6_DISABLE  ((0x0U) << DMADSREQ_CH6_Pos)
#define DMADSREQ_CH6_ENABLE   ((0x1U) << DMADSREQ_CH6_Pos)

#define DMADSREQ_CH6_(x)  (((x) << DMADSREQ_CH6_Pos) & DMADSREQ_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH7
  *  @access     DMAC->DMADSREQ
  *  @brief      Channel 7 enable.
  */
#define DMADSREQ_CH7_Pos  (7)
#define DMADSREQ_CH7_Msk  (0x1U << DMADSREQ_CH7_Pos)

#define DMADSREQ_CH7_DISABLE  ((0x0U) << DMADSREQ_CH7_Pos)
#define DMADSREQ_CH7_ENABLE   ((0x1U) << DMADSREQ_CH7_Pos)

#define DMADSREQ_CH7_(x)  (((x) << DMADSREQ_CH7_Pos) & DMADSREQ_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH0WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH0 bit write enable.
  */
#define DMADSREQ_CH0WE_Pos  (8)
#define DMADSREQ_CH0WE_Msk  (0x1U << DMADSREQ_CH0WE_Pos)

#define DMADSREQ_CH0WE_DISABLE  ((0x0U) << DMADSREQ_CH0WE_Pos)
#define DMADSREQ_CH0WE_ENABLE   ((0x1U) << DMADSREQ_CH0WE_Pos)

#define DMADSREQ_CH0WE_(x)  (((x) << DMADSREQ_CH0WE_Pos) & DMADSREQ_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH1WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH1 bit write enable.
  */
#define DMADSREQ_CH1WE_Pos  (9)
#define DMADSREQ_CH1WE_Msk  (0x1U << DMADSREQ_CH1WE_Pos)

#define DMADSREQ_CH1WE_DISABLE  ((0x0U) << DMADSREQ_CH1WE_Pos)
#define DMADSREQ_CH1WE_ENABLE   ((0x1U) << DMADSREQ_CH1WE_Pos)

#define DMADSREQ_CH1WE_(x)  (((x) << DMADSREQ_CH1WE_Pos) & DMADSREQ_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH2WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH2 bit write enable.
  */
#define DMADSREQ_CH2WE_Pos  (10)
#define DMADSREQ_CH2WE_Msk  (0x1U << DMADSREQ_CH2WE_Pos)

#define DMADSREQ_CH2WE_DISABLE  ((0x0U) << DMADSREQ_CH2WE_Pos)
#define DMADSREQ_CH2WE_ENABLE   ((0x1U) << DMADSREQ_CH2WE_Pos)

#define DMADSREQ_CH2WE_(x)  (((x) << DMADSREQ_CH2WE_Pos) & DMADSREQ_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH3WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH3 bit write enable.
  */
#define DMADSREQ_CH3WE_Pos  (11)
#define DMADSREQ_CH3WE_Msk  (0x1U << DMADSREQ_CH3WE_Pos)

#define DMADSREQ_CH3WE_DISABLE  ((0x0U) << DMADSREQ_CH3WE_Pos)
#define DMADSREQ_CH3WE_ENABLE   ((0x1U) << DMADSREQ_CH3WE_Pos)

#define DMADSREQ_CH3WE_(x)  (((x) << DMADSREQ_CH3WE_Pos) & DMADSREQ_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH4WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH4 bit write enable.
  */
#define DMADSREQ_CH4WE_Pos  (12)
#define DMADSREQ_CH4WE_Msk  (0x1U << DMADSREQ_CH4WE_Pos)

#define DMADSREQ_CH4WE_DISABLE  ((0x0U) << DMADSREQ_CH4WE_Pos)
#define DMADSREQ_CH4WE_ENABLE   ((0x1U) << DMADSREQ_CH4WE_Pos)

#define DMADSREQ_CH4WE_(x)  (((x) << DMADSREQ_CH4WE_Pos) & DMADSREQ_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH5WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH5 bit write enable.
  */
#define DMADSREQ_CH5WE_Pos  (13)
#define DMADSREQ_CH5WE_Msk  (0x1U << DMADSREQ_CH5WE_Pos)

#define DMADSREQ_CH5WE_DISABLE  ((0x0U) << DMADSREQ_CH5WE_Pos)
#define DMADSREQ_CH5WE_ENABLE   ((0x1U) << DMADSREQ_CH5WE_Pos)

#define DMADSREQ_CH5WE_(x)  (((x) << DMADSREQ_CH5WE_Pos) & DMADSREQ_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH6WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH6 bit write enable.
  */
#define DMADSREQ_CH6WE_Pos  (14)
#define DMADSREQ_CH6WE_Msk  (0x1U << DMADSREQ_CH6WE_Pos)

#define DMADSREQ_CH6WE_DISABLE  ((0x0U) << DMADSREQ_CH6WE_Pos)
#define DMADSREQ_CH6WE_ENABLE   ((0x1U) << DMADSREQ_CH6WE_Pos)

#define DMADSREQ_CH6WE_(x)  (((x) << DMADSREQ_CH6WE_Pos) & DMADSREQ_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSREQ        CH7WE
  *  @access     DMAC->DMADSREQ
  *  @brief      CH7 bit write enable.
  */
#define DMADSREQ_CH7WE_Pos  (15)
#define DMADSREQ_CH7WE_Msk  (0x1U << DMADSREQ_CH7WE_Pos)

#define DMADSREQ_CH7WE_DISABLE  ((0x0U) << DMADSREQ_CH7WE_Pos)
#define DMADSREQ_CH7WE_ENABLE   ((0x1U) << DMADSREQ_CH7WE_Pos)

#define DMADSREQ_CH7WE_(x)  (((x) << DMADSREQ_CH7WE_Pos) & DMADSREQ_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH0
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 0 enable.
  */
#define DMASSSREQ_CH0_Pos  (0)
#define DMASSSREQ_CH0_Msk  (0x1U << DMASSSREQ_CH0_Pos)

#define DMASSSREQ_CH0_DISABLE  ((0x0U) << DMASSSREQ_CH0_Pos)
#define DMASSSREQ_CH0_ENABLE   ((0x1U) << DMASSSREQ_CH0_Pos)

#define DMASSSREQ_CH0_(x)  (((x) << DMASSSREQ_CH0_Pos) & DMASSSREQ_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH1
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 1 enable.
  */
#define DMASSSREQ_CH1_Pos  (1)
#define DMASSSREQ_CH1_Msk  (0x1U << DMASSSREQ_CH1_Pos)

#define DMASSSREQ_CH1_DISABLE  ((0x0U) << DMASSSREQ_CH1_Pos)
#define DMASSSREQ_CH1_ENABLE   ((0x1U) << DMASSSREQ_CH1_Pos)

#define DMASSSREQ_CH1_(x)  (((x) << DMASSSREQ_CH1_Pos) & DMASSSREQ_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH2
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 2 enable.
  */
#define DMASSSREQ_CH2_Pos  (2)
#define DMASSSREQ_CH2_Msk  (0x1U << DMASSSREQ_CH2_Pos)

#define DMASSSREQ_CH2_DISABLE  ((0x0U) << DMASSSREQ_CH2_Pos)
#define DMASSSREQ_CH2_ENABLE   ((0x1U) << DMASSSREQ_CH2_Pos)

#define DMASSSREQ_CH2_(x)  (((x) << DMASSSREQ_CH2_Pos) & DMASSSREQ_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH3
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 3 enable.
  */
#define DMASSSREQ_CH3_Pos  (3)
#define DMASSSREQ_CH3_Msk  (0x1U << DMASSSREQ_CH3_Pos)

#define DMASSSREQ_CH3_DISABLE  ((0x0U) << DMASSSREQ_CH3_Pos)
#define DMASSSREQ_CH3_ENABLE   ((0x1U) << DMASSSREQ_CH3_Pos)

#define DMASSSREQ_CH3_(x)  (((x) << DMASSSREQ_CH3_Pos) & DMASSSREQ_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH4
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 4 enable.
  */
#define DMASSSREQ_CH4_Pos  (4)
#define DMASSSREQ_CH4_Msk  (0x1U << DMASSSREQ_CH4_Pos)

#define DMASSSREQ_CH4_DISABLE  ((0x0U) << DMASSSREQ_CH4_Pos)
#define DMASSSREQ_CH4_ENABLE   ((0x1U) << DMASSSREQ_CH4_Pos)

#define DMASSSREQ_CH4_(x)  (((x) << DMASSSREQ_CH4_Pos) & DMASSSREQ_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH5
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 5 enable.
  */
#define DMASSSREQ_CH5_Pos  (5)
#define DMASSSREQ_CH5_Msk  (0x1U << DMASSSREQ_CH5_Pos)

#define DMASSSREQ_CH5_DISABLE  ((0x0U) << DMASSSREQ_CH5_Pos)
#define DMASSSREQ_CH5_ENABLE   ((0x1U) << DMASSSREQ_CH5_Pos)

#define DMASSSREQ_CH5_(x)  (((x) << DMASSSREQ_CH5_Pos) & DMASSSREQ_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH6
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 6 enable.
  */
#define DMASSSREQ_CH6_Pos  (6)
#define DMASSSREQ_CH6_Msk  (0x1U << DMASSSREQ_CH6_Pos)

#define DMASSSREQ_CH6_DISABLE  ((0x0U) << DMASSSREQ_CH6_Pos)
#define DMASSSREQ_CH6_ENABLE   ((0x1U) << DMASSSREQ_CH6_Pos)

#define DMASSSREQ_CH6_(x)  (((x) << DMASSSREQ_CH6_Pos) & DMASSSREQ_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH7
  *  @access     DMAC->DMASSSREQ
  *  @brief      Channel 7 enable.
  */
#define DMASSSREQ_CH7_Pos  (7)
#define DMASSSREQ_CH7_Msk  (0x1U << DMASSSREQ_CH7_Pos)

#define DMASSSREQ_CH7_DISABLE  ((0x0U) << DMASSSREQ_CH7_Pos)
#define DMASSSREQ_CH7_ENABLE   ((0x1U) << DMASSSREQ_CH7_Pos)

#define DMASSSREQ_CH7_(x)  (((x) << DMASSSREQ_CH7_Pos) & DMASSSREQ_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH0WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH0 bit write enable.
  */
#define DMASSSREQ_CH0WE_Pos  (8)
#define DMASSSREQ_CH0WE_Msk  (0x1U << DMASSSREQ_CH0WE_Pos)

#define DMASSSREQ_CH0WE_DISABLE  ((0x0U) << DMASSSREQ_CH0WE_Pos)
#define DMASSSREQ_CH0WE_ENABLE   ((0x1U) << DMASSSREQ_CH0WE_Pos)

#define DMASSSREQ_CH0WE_(x)  (((x) << DMASSSREQ_CH0WE_Pos) & DMASSSREQ_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH1WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH1 bit write enable.
  */
#define DMASSSREQ_CH1WE_Pos  (9)
#define DMASSSREQ_CH1WE_Msk  (0x1U << DMASSSREQ_CH1WE_Pos)

#define DMASSSREQ_CH1WE_DISABLE  ((0x0U) << DMASSSREQ_CH1WE_Pos)
#define DMASSSREQ_CH1WE_ENABLE   ((0x1U) << DMASSSREQ_CH1WE_Pos)

#define DMASSSREQ_CH1WE_(x)  (((x) << DMASSSREQ_CH1WE_Pos) & DMASSSREQ_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH2WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH2 bit write enable.
  */
#define DMASSSREQ_CH2WE_Pos  (10)
#define DMASSSREQ_CH2WE_Msk  (0x1U << DMASSSREQ_CH2WE_Pos)

#define DMASSSREQ_CH2WE_DISABLE  ((0x0U) << DMASSSREQ_CH2WE_Pos)
#define DMASSSREQ_CH2WE_ENABLE   ((0x1U) << DMASSSREQ_CH2WE_Pos)

#define DMASSSREQ_CH2WE_(x)  (((x) << DMASSSREQ_CH2WE_Pos) & DMASSSREQ_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH3WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH3 bit write enable.
  */
#define DMASSSREQ_CH3WE_Pos  (11)
#define DMASSSREQ_CH3WE_Msk  (0x1U << DMASSSREQ_CH3WE_Pos)

#define DMASSSREQ_CH3WE_DISABLE  ((0x0U) << DMASSSREQ_CH3WE_Pos)
#define DMASSSREQ_CH3WE_ENABLE   ((0x1U) << DMASSSREQ_CH3WE_Pos)

#define DMASSSREQ_CH3WE_(x)  (((x) << DMASSSREQ_CH3WE_Pos) & DMASSSREQ_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH4WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH4 bit write enable.
  */
#define DMASSSREQ_CH4WE_Pos  (12)
#define DMASSSREQ_CH4WE_Msk  (0x1U << DMASSSREQ_CH4WE_Pos)

#define DMASSSREQ_CH4WE_DISABLE  ((0x0U) << DMASSSREQ_CH4WE_Pos)
#define DMASSSREQ_CH4WE_ENABLE   ((0x1U) << DMASSSREQ_CH4WE_Pos)

#define DMASSSREQ_CH4WE_(x)  (((x) << DMASSSREQ_CH4WE_Pos) & DMASSSREQ_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH5WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH5 bit write enable.
  */
#define DMASSSREQ_CH5WE_Pos  (13)
#define DMASSSREQ_CH5WE_Msk  (0x1U << DMASSSREQ_CH5WE_Pos)

#define DMASSSREQ_CH5WE_DISABLE  ((0x0U) << DMASSSREQ_CH5WE_Pos)
#define DMASSSREQ_CH5WE_ENABLE   ((0x1U) << DMASSSREQ_CH5WE_Pos)

#define DMASSSREQ_CH5WE_(x)  (((x) << DMASSSREQ_CH5WE_Pos) & DMASSSREQ_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH6WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH6 bit write enable.
  */
#define DMASSSREQ_CH6WE_Pos  (14)
#define DMASSSREQ_CH6WE_Msk  (0x1U << DMASSSREQ_CH6WE_Pos)

#define DMASSSREQ_CH6WE_DISABLE  ((0x0U) << DMASSSREQ_CH6WE_Pos)
#define DMASSSREQ_CH6WE_ENABLE   ((0x1U) << DMASSSREQ_CH6WE_Pos)

#define DMASSSREQ_CH6WE_(x)  (((x) << DMASSSREQ_CH6WE_Pos) & DMASSSREQ_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSSREQ       CH7WE
  *  @access     DMAC->DMASSSREQ
  *  @brief      CH7 bit write enable.
  */
#define DMASSSREQ_CH7WE_Pos  (15)
#define DMASSSREQ_CH7WE_Msk  (0x1U << DMASSSREQ_CH7WE_Pos)

#define DMASSSREQ_CH7WE_DISABLE  ((0x0U) << DMASSSREQ_CH7WE_Pos)
#define DMASSSREQ_CH7WE_ENABLE   ((0x1U) << DMASSSREQ_CH7WE_Pos)

#define DMASSSREQ_CH7WE_(x)  (((x) << DMASSSREQ_CH7WE_Pos) & DMASSSREQ_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH0
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 0 enable.
  */
#define DMADSSREQ_CH0_Pos  (0)
#define DMADSSREQ_CH0_Msk  (0x1U << DMADSSREQ_CH0_Pos)

#define DMADSSREQ_CH0_DISABLE  ((0x0U) << DMADSSREQ_CH0_Pos)
#define DMADSSREQ_CH0_ENABLE   ((0x1U) << DMADSSREQ_CH0_Pos)

#define DMADSSREQ_CH0_(x)  (((x) << DMADSSREQ_CH0_Pos) & DMADSSREQ_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH1
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 1 enable.
  */
#define DMADSSREQ_CH1_Pos  (1)
#define DMADSSREQ_CH1_Msk  (0x1U << DMADSSREQ_CH1_Pos)

#define DMADSSREQ_CH1_DISABLE  ((0x0U) << DMADSSREQ_CH1_Pos)
#define DMADSSREQ_CH1_ENABLE   ((0x1U) << DMADSSREQ_CH1_Pos)

#define DMADSSREQ_CH1_(x)  (((x) << DMADSSREQ_CH1_Pos) & DMADSSREQ_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH2
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 2 enable.
  */
#define DMADSSREQ_CH2_Pos  (2)
#define DMADSSREQ_CH2_Msk  (0x1U << DMADSSREQ_CH2_Pos)

#define DMADSSREQ_CH2_DISABLE  ((0x0U) << DMADSSREQ_CH2_Pos)
#define DMADSSREQ_CH2_ENABLE   ((0x1U) << DMADSSREQ_CH2_Pos)

#define DMADSSREQ_CH2_(x)  (((x) << DMADSSREQ_CH2_Pos) & DMADSSREQ_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH3
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 3 enable.
  */
#define DMADSSREQ_CH3_Pos  (3)
#define DMADSSREQ_CH3_Msk  (0x1U << DMADSSREQ_CH3_Pos)

#define DMADSSREQ_CH3_DISABLE  ((0x0U) << DMADSSREQ_CH3_Pos)
#define DMADSSREQ_CH3_ENABLE   ((0x1U) << DMADSSREQ_CH3_Pos)

#define DMADSSREQ_CH3_(x)  (((x) << DMADSSREQ_CH3_Pos) & DMADSSREQ_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH4
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 4 enable.
  */
#define DMADSSREQ_CH4_Pos  (4)
#define DMADSSREQ_CH4_Msk  (0x1U << DMADSSREQ_CH4_Pos)

#define DMADSSREQ_CH4_DISABLE  ((0x0U) << DMADSSREQ_CH4_Pos)
#define DMADSSREQ_CH4_ENABLE   ((0x1U) << DMADSSREQ_CH4_Pos)

#define DMADSSREQ_CH4_(x)  (((x) << DMADSSREQ_CH4_Pos) & DMADSSREQ_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH5
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 5 enable.
  */
#define DMADSSREQ_CH5_Pos  (5)
#define DMADSSREQ_CH5_Msk  (0x1U << DMADSSREQ_CH5_Pos)

#define DMADSSREQ_CH5_DISABLE  ((0x0U) << DMADSSREQ_CH5_Pos)
#define DMADSSREQ_CH5_ENABLE   ((0x1U) << DMADSSREQ_CH5_Pos)

#define DMADSSREQ_CH5_(x)  (((x) << DMADSSREQ_CH5_Pos) & DMADSSREQ_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH6
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 6 enable.
  */
#define DMADSSREQ_CH6_Pos  (6)
#define DMADSSREQ_CH6_Msk  (0x1U << DMADSSREQ_CH6_Pos)

#define DMADSSREQ_CH6_DISABLE  ((0x0U) << DMADSSREQ_CH6_Pos)
#define DMADSSREQ_CH6_ENABLE   ((0x1U) << DMADSSREQ_CH6_Pos)

#define DMADSSREQ_CH6_(x)  (((x) << DMADSSREQ_CH6_Pos) & DMADSSREQ_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH7
  *  @access     DMAC->DMADSSREQ
  *  @brief      Channel 7 enable.
  */
#define DMADSSREQ_CH7_Pos  (7)
#define DMADSSREQ_CH7_Msk  (0x1U << DMADSSREQ_CH7_Pos)

#define DMADSSREQ_CH7_DISABLE  ((0x0U) << DMADSSREQ_CH7_Pos)
#define DMADSSREQ_CH7_ENABLE   ((0x1U) << DMADSSREQ_CH7_Pos)

#define DMADSSREQ_CH7_(x)  (((x) << DMADSSREQ_CH7_Pos) & DMADSSREQ_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH0WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH0 bit write enable.
  */
#define DMADSSREQ_CH0WE_Pos  (8)
#define DMADSSREQ_CH0WE_Msk  (0x1U << DMADSSREQ_CH0WE_Pos)

#define DMADSSREQ_CH0WE_DISABLE  ((0x0U) << DMADSSREQ_CH0WE_Pos)
#define DMADSSREQ_CH0WE_ENABLE   ((0x1U) << DMADSSREQ_CH0WE_Pos)

#define DMADSSREQ_CH0WE_(x)  (((x) << DMADSSREQ_CH0WE_Pos) & DMADSSREQ_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH1WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH1 bit write enable.
  */
#define DMADSSREQ_CH1WE_Pos  (9)
#define DMADSSREQ_CH1WE_Msk  (0x1U << DMADSSREQ_CH1WE_Pos)

#define DMADSSREQ_CH1WE_DISABLE  ((0x0U) << DMADSSREQ_CH1WE_Pos)
#define DMADSSREQ_CH1WE_ENABLE   ((0x1U) << DMADSSREQ_CH1WE_Pos)

#define DMADSSREQ_CH1WE_(x)  (((x) << DMADSSREQ_CH1WE_Pos) & DMADSSREQ_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH2WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH2 bit write enable.
  */
#define DMADSSREQ_CH2WE_Pos  (10)
#define DMADSSREQ_CH2WE_Msk  (0x1U << DMADSSREQ_CH2WE_Pos)

#define DMADSSREQ_CH2WE_DISABLE  ((0x0U) << DMADSSREQ_CH2WE_Pos)
#define DMADSSREQ_CH2WE_ENABLE   ((0x1U) << DMADSSREQ_CH2WE_Pos)

#define DMADSSREQ_CH2WE_(x)  (((x) << DMADSSREQ_CH2WE_Pos) & DMADSSREQ_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH3WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH3 bit write enable.
  */
#define DMADSSREQ_CH3WE_Pos  (11)
#define DMADSSREQ_CH3WE_Msk  (0x1U << DMADSSREQ_CH3WE_Pos)

#define DMADSSREQ_CH3WE_DISABLE  ((0x0U) << DMADSSREQ_CH3WE_Pos)
#define DMADSSREQ_CH3WE_ENABLE   ((0x1U) << DMADSSREQ_CH3WE_Pos)

#define DMADSSREQ_CH3WE_(x)  (((x) << DMADSSREQ_CH3WE_Pos) & DMADSSREQ_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH4WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH4 bit write enable.
  */
#define DMADSSREQ_CH4WE_Pos  (12)
#define DMADSSREQ_CH4WE_Msk  (0x1U << DMADSSREQ_CH4WE_Pos)

#define DMADSSREQ_CH4WE_DISABLE  ((0x0U) << DMADSSREQ_CH4WE_Pos)
#define DMADSSREQ_CH4WE_ENABLE   ((0x1U) << DMADSSREQ_CH4WE_Pos)

#define DMADSSREQ_CH4WE_(x)  (((x) << DMADSSREQ_CH4WE_Pos) & DMADSSREQ_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH5WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH5 bit write enable.
  */
#define DMADSSREQ_CH5WE_Pos  (13)
#define DMADSSREQ_CH5WE_Msk  (0x1U << DMADSSREQ_CH5WE_Pos)

#define DMADSSREQ_CH5WE_DISABLE  ((0x0U) << DMADSSREQ_CH5WE_Pos)
#define DMADSSREQ_CH5WE_ENABLE   ((0x1U) << DMADSSREQ_CH5WE_Pos)

#define DMADSSREQ_CH5WE_(x)  (((x) << DMADSSREQ_CH5WE_Pos) & DMADSSREQ_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH6WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH6 bit write enable.
  */
#define DMADSSREQ_CH6WE_Pos  (14)
#define DMADSSREQ_CH6WE_Msk  (0x1U << DMADSSREQ_CH6WE_Pos)

#define DMADSSREQ_CH6WE_DISABLE  ((0x0U) << DMADSSREQ_CH6WE_Pos)
#define DMADSSREQ_CH6WE_ENABLE   ((0x1U) << DMADSSREQ_CH6WE_Pos)

#define DMADSSREQ_CH6WE_(x)  (((x) << DMADSSREQ_CH6WE_Pos) & DMADSSREQ_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSSREQ       CH7WE
  *  @access     DMAC->DMADSSREQ
  *  @brief      CH7 bit write enable.
  */
#define DMADSSREQ_CH7WE_Pos  (15)
#define DMADSSREQ_CH7WE_Msk  (0x1U << DMADSSREQ_CH7WE_Pos)

#define DMADSSREQ_CH7WE_DISABLE  ((0x0U) << DMADSSREQ_CH7WE_Pos)
#define DMADSSREQ_CH7WE_ENABLE   ((0x1U) << DMADSSREQ_CH7WE_Pos)

#define DMADSSREQ_CH7WE_(x)  (((x) << DMADSSREQ_CH7WE_Pos) & DMADSSREQ_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH0
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 0 enable.
  */
#define DMASSLREQ_CH0_Pos  (0)
#define DMASSLREQ_CH0_Msk  (0x1U << DMASSLREQ_CH0_Pos)

#define DMASSLREQ_CH0_DISABLE  ((0x0U) << DMASSLREQ_CH0_Pos)
#define DMASSLREQ_CH0_ENABLE   ((0x1U) << DMASSLREQ_CH0_Pos)

#define DMASSLREQ_CH0_(x)  (((x) << DMASSLREQ_CH0_Pos) & DMASSLREQ_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH1
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 1 enable.
  */
#define DMASSLREQ_CH1_Pos  (1)
#define DMASSLREQ_CH1_Msk  (0x1U << DMASSLREQ_CH1_Pos)

#define DMASSLREQ_CH1_DISABLE  ((0x0U) << DMASSLREQ_CH1_Pos)
#define DMASSLREQ_CH1_ENABLE   ((0x1U) << DMASSLREQ_CH1_Pos)

#define DMASSLREQ_CH1_(x)  (((x) << DMASSLREQ_CH1_Pos) & DMASSLREQ_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH2
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 2 enable.
  */
#define DMASSLREQ_CH2_Pos  (2)
#define DMASSLREQ_CH2_Msk  (0x1U << DMASSLREQ_CH2_Pos)

#define DMASSLREQ_CH2_DISABLE  ((0x0U) << DMASSLREQ_CH2_Pos)
#define DMASSLREQ_CH2_ENABLE   ((0x1U) << DMASSLREQ_CH2_Pos)

#define DMASSLREQ_CH2_(x)  (((x) << DMASSLREQ_CH2_Pos) & DMASSLREQ_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH3
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 3 enable.
  */
#define DMASSLREQ_CH3_Pos  (3)
#define DMASSLREQ_CH3_Msk  (0x1U << DMASSLREQ_CH3_Pos)

#define DMASSLREQ_CH3_DISABLE  ((0x0U) << DMASSLREQ_CH3_Pos)
#define DMASSLREQ_CH3_ENABLE   ((0x1U) << DMASSLREQ_CH3_Pos)

#define DMASSLREQ_CH3_(x)  (((x) << DMASSLREQ_CH3_Pos) & DMASSLREQ_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH4
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 4 enable.
  */
#define DMASSLREQ_CH4_Pos  (4)
#define DMASSLREQ_CH4_Msk  (0x1U << DMASSLREQ_CH4_Pos)

#define DMASSLREQ_CH4_DISABLE  ((0x0U) << DMASSLREQ_CH4_Pos)
#define DMASSLREQ_CH4_ENABLE   ((0x1U) << DMASSLREQ_CH4_Pos)

#define DMASSLREQ_CH4_(x)  (((x) << DMASSLREQ_CH4_Pos) & DMASSLREQ_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH5
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 5 enable.
  */
#define DMASSLREQ_CH5_Pos  (5)
#define DMASSLREQ_CH5_Msk  (0x1U << DMASSLREQ_CH5_Pos)

#define DMASSLREQ_CH5_DISABLE  ((0x0U) << DMASSLREQ_CH5_Pos)
#define DMASSLREQ_CH5_ENABLE   ((0x1U) << DMASSLREQ_CH5_Pos)

#define DMASSLREQ_CH5_(x)  (((x) << DMASSLREQ_CH5_Pos) & DMASSLREQ_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH6
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 6 enable.
  */
#define DMASSLREQ_CH6_Pos  (6)
#define DMASSLREQ_CH6_Msk  (0x1U << DMASSLREQ_CH6_Pos)

#define DMASSLREQ_CH6_DISABLE  ((0x0U) << DMASSLREQ_CH6_Pos)
#define DMASSLREQ_CH6_ENABLE   ((0x1U) << DMASSLREQ_CH6_Pos)

#define DMASSLREQ_CH6_(x)  (((x) << DMASSLREQ_CH6_Pos) & DMASSLREQ_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH7
  *  @access     DMAC->DMASSLREQ
  *  @brief      Channel 7 enable.
  */
#define DMASSLREQ_CH7_Pos  (7)
#define DMASSLREQ_CH7_Msk  (0x1U << DMASSLREQ_CH7_Pos)

#define DMASSLREQ_CH7_DISABLE  ((0x0U) << DMASSLREQ_CH7_Pos)
#define DMASSLREQ_CH7_ENABLE   ((0x1U) << DMASSLREQ_CH7_Pos)

#define DMASSLREQ_CH7_(x)  (((x) << DMASSLREQ_CH7_Pos) & DMASSLREQ_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH0WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH0 bit write enable.
  */
#define DMASSLREQ_CH0WE_Pos  (8)
#define DMASSLREQ_CH0WE_Msk  (0x1U << DMASSLREQ_CH0WE_Pos)

#define DMASSLREQ_CH0WE_DISABLE  ((0x0U) << DMASSLREQ_CH0WE_Pos)
#define DMASSLREQ_CH0WE_ENABLE   ((0x1U) << DMASSLREQ_CH0WE_Pos)

#define DMASSLREQ_CH0WE_(x)  (((x) << DMASSLREQ_CH0WE_Pos) & DMASSLREQ_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH1WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH1 bit write enable.
  */
#define DMASSLREQ_CH1WE_Pos  (9)
#define DMASSLREQ_CH1WE_Msk  (0x1U << DMASSLREQ_CH1WE_Pos)

#define DMASSLREQ_CH1WE_DISABLE  ((0x0U) << DMASSLREQ_CH1WE_Pos)
#define DMASSLREQ_CH1WE_ENABLE   ((0x1U) << DMASSLREQ_CH1WE_Pos)

#define DMASSLREQ_CH1WE_(x)  (((x) << DMASSLREQ_CH1WE_Pos) & DMASSLREQ_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH2WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH2 bit write enable.
  */
#define DMASSLREQ_CH2WE_Pos  (10)
#define DMASSLREQ_CH2WE_Msk  (0x1U << DMASSLREQ_CH2WE_Pos)

#define DMASSLREQ_CH2WE_DISABLE  ((0x0U) << DMASSLREQ_CH2WE_Pos)
#define DMASSLREQ_CH2WE_ENABLE   ((0x1U) << DMASSLREQ_CH2WE_Pos)

#define DMASSLREQ_CH2WE_(x)  (((x) << DMASSLREQ_CH2WE_Pos) & DMASSLREQ_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH3WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH3 bit write enable.
  */
#define DMASSLREQ_CH3WE_Pos  (11)
#define DMASSLREQ_CH3WE_Msk  (0x1U << DMASSLREQ_CH3WE_Pos)

#define DMASSLREQ_CH3WE_DISABLE  ((0x0U) << DMASSLREQ_CH3WE_Pos)
#define DMASSLREQ_CH3WE_ENABLE   ((0x1U) << DMASSLREQ_CH3WE_Pos)

#define DMASSLREQ_CH3WE_(x)  (((x) << DMASSLREQ_CH3WE_Pos) & DMASSLREQ_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH4WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH4 bit write enable.
  */
#define DMASSLREQ_CH4WE_Pos  (12)
#define DMASSLREQ_CH4WE_Msk  (0x1U << DMASSLREQ_CH4WE_Pos)

#define DMASSLREQ_CH4WE_DISABLE  ((0x0U) << DMASSLREQ_CH4WE_Pos)
#define DMASSLREQ_CH4WE_ENABLE   ((0x1U) << DMASSLREQ_CH4WE_Pos)

#define DMASSLREQ_CH4WE_(x)  (((x) << DMASSLREQ_CH4WE_Pos) & DMASSLREQ_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH5WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH5 bit write enable.
  */
#define DMASSLREQ_CH5WE_Pos  (13)
#define DMASSLREQ_CH5WE_Msk  (0x1U << DMASSLREQ_CH5WE_Pos)

#define DMASSLREQ_CH5WE_DISABLE  ((0x0U) << DMASSLREQ_CH5WE_Pos)
#define DMASSLREQ_CH5WE_ENABLE   ((0x1U) << DMASSLREQ_CH5WE_Pos)

#define DMASSLREQ_CH5WE_(x)  (((x) << DMASSLREQ_CH5WE_Pos) & DMASSLREQ_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH6WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH6 bit write enable.
  */
#define DMASSLREQ_CH6WE_Pos  (14)
#define DMASSLREQ_CH6WE_Msk  (0x1U << DMASSLREQ_CH6WE_Pos)

#define DMASSLREQ_CH6WE_DISABLE  ((0x0U) << DMASSLREQ_CH6WE_Pos)
#define DMASSLREQ_CH6WE_ENABLE   ((0x1U) << DMASSLREQ_CH6WE_Pos)

#define DMASSLREQ_CH6WE_(x)  (((x) << DMASSLREQ_CH6WE_Pos) & DMASSLREQ_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMASSLREQ       CH7WE
  *  @access     DMAC->DMASSLREQ
  *  @brief      CH7 bit write enable.
  */
#define DMASSLREQ_CH7WE_Pos  (15)
#define DMASSLREQ_CH7WE_Msk  (0x1U << DMASSLREQ_CH7WE_Pos)

#define DMASSLREQ_CH7WE_DISABLE  ((0x0U) << DMASSLREQ_CH7WE_Pos)
#define DMASSLREQ_CH7WE_ENABLE   ((0x1U) << DMASSLREQ_CH7WE_Pos)

#define DMASSLREQ_CH7WE_(x)  (((x) << DMASSLREQ_CH7WE_Pos) & DMASSLREQ_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH0
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 0 enable.
  */
#define DMADSLREQ_CH0_Pos  (0)
#define DMADSLREQ_CH0_Msk  (0x1U << DMADSLREQ_CH0_Pos)

#define DMADSLREQ_CH0_DISABLE  ((0x0U) << DMADSLREQ_CH0_Pos)
#define DMADSLREQ_CH0_ENABLE   ((0x1U) << DMADSLREQ_CH0_Pos)

#define DMADSLREQ_CH0_(x)  (((x) << DMADSLREQ_CH0_Pos) & DMADSLREQ_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH1
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 1 enable.
  */
#define DMADSLREQ_CH1_Pos  (1)
#define DMADSLREQ_CH1_Msk  (0x1U << DMADSLREQ_CH1_Pos)

#define DMADSLREQ_CH1_DISABLE  ((0x0U) << DMADSLREQ_CH1_Pos)
#define DMADSLREQ_CH1_ENABLE   ((0x1U) << DMADSLREQ_CH1_Pos)

#define DMADSLREQ_CH1_(x)  (((x) << DMADSLREQ_CH1_Pos) & DMADSLREQ_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH2
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 2 enable.
  */
#define DMADSLREQ_CH2_Pos  (2)
#define DMADSLREQ_CH2_Msk  (0x1U << DMADSLREQ_CH2_Pos)

#define DMADSLREQ_CH2_DISABLE  ((0x0U) << DMADSLREQ_CH2_Pos)
#define DMADSLREQ_CH2_ENABLE   ((0x1U) << DMADSLREQ_CH2_Pos)

#define DMADSLREQ_CH2_(x)  (((x) << DMADSLREQ_CH2_Pos) & DMADSLREQ_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH3
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 3 enable.
  */
#define DMADSLREQ_CH3_Pos  (3)
#define DMADSLREQ_CH3_Msk  (0x1U << DMADSLREQ_CH3_Pos)

#define DMADSLREQ_CH3_DISABLE  ((0x0U) << DMADSLREQ_CH3_Pos)
#define DMADSLREQ_CH3_ENABLE   ((0x1U) << DMADSLREQ_CH3_Pos)

#define DMADSLREQ_CH3_(x)  (((x) << DMADSLREQ_CH3_Pos) & DMADSLREQ_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH4
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 4 enable.
  */
#define DMADSLREQ_CH4_Pos  (4)
#define DMADSLREQ_CH4_Msk  (0x1U << DMADSLREQ_CH4_Pos)

#define DMADSLREQ_CH4_DISABLE  ((0x0U) << DMADSLREQ_CH4_Pos)
#define DMADSLREQ_CH4_ENABLE   ((0x1U) << DMADSLREQ_CH4_Pos)

#define DMADSLREQ_CH4_(x)  (((x) << DMADSLREQ_CH4_Pos) & DMADSLREQ_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH5
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 5 enable.
  */
#define DMADSLREQ_CH5_Pos  (5)
#define DMADSLREQ_CH5_Msk  (0x1U << DMADSLREQ_CH5_Pos)

#define DMADSLREQ_CH5_DISABLE  ((0x0U) << DMADSLREQ_CH5_Pos)
#define DMADSLREQ_CH5_ENABLE   ((0x1U) << DMADSLREQ_CH5_Pos)

#define DMADSLREQ_CH5_(x)  (((x) << DMADSLREQ_CH5_Pos) & DMADSLREQ_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH6
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 6 enable.
  */
#define DMADSLREQ_CH6_Pos  (6)
#define DMADSLREQ_CH6_Msk  (0x1U << DMADSLREQ_CH6_Pos)

#define DMADSLREQ_CH6_DISABLE  ((0x0U) << DMADSLREQ_CH6_Pos)
#define DMADSLREQ_CH6_ENABLE   ((0x1U) << DMADSLREQ_CH6_Pos)

#define DMADSLREQ_CH6_(x)  (((x) << DMADSLREQ_CH6_Pos) & DMADSLREQ_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH7
  *  @access     DMAC->DMADSLREQ
  *  @brief      Channel 7 enable.
  */
#define DMADSLREQ_CH7_Pos  (7)
#define DMADSLREQ_CH7_Msk  (0x1U << DMADSLREQ_CH7_Pos)

#define DMADSLREQ_CH7_DISABLE  ((0x0U) << DMADSLREQ_CH7_Pos)
#define DMADSLREQ_CH7_ENABLE   ((0x1U) << DMADSLREQ_CH7_Pos)

#define DMADSLREQ_CH7_(x)  (((x) << DMADSLREQ_CH7_Pos) & DMADSLREQ_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH0WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH0 bit write enable.
  */
#define DMADSLREQ_CH0WE_Pos  (8)
#define DMADSLREQ_CH0WE_Msk  (0x1U << DMADSLREQ_CH0WE_Pos)

#define DMADSLREQ_CH0WE_DISABLE  ((0x0U) << DMADSLREQ_CH0WE_Pos)
#define DMADSLREQ_CH0WE_ENABLE   ((0x1U) << DMADSLREQ_CH0WE_Pos)

#define DMADSLREQ_CH0WE_(x)  (((x) << DMADSLREQ_CH0WE_Pos) & DMADSLREQ_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH1WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH1 bit write enable.
  */
#define DMADSLREQ_CH1WE_Pos  (9)
#define DMADSLREQ_CH1WE_Msk  (0x1U << DMADSLREQ_CH1WE_Pos)

#define DMADSLREQ_CH1WE_DISABLE  ((0x0U) << DMADSLREQ_CH1WE_Pos)
#define DMADSLREQ_CH1WE_ENABLE   ((0x1U) << DMADSLREQ_CH1WE_Pos)

#define DMADSLREQ_CH1WE_(x)  (((x) << DMADSLREQ_CH1WE_Pos) & DMADSLREQ_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH2WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH2 bit write enable.
  */
#define DMADSLREQ_CH2WE_Pos  (10)
#define DMADSLREQ_CH2WE_Msk  (0x1U << DMADSLREQ_CH2WE_Pos)

#define DMADSLREQ_CH2WE_DISABLE  ((0x0U) << DMADSLREQ_CH2WE_Pos)
#define DMADSLREQ_CH2WE_ENABLE   ((0x1U) << DMADSLREQ_CH2WE_Pos)

#define DMADSLREQ_CH2WE_(x)  (((x) << DMADSLREQ_CH2WE_Pos) & DMADSLREQ_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH3WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH3 bit write enable.
  */
#define DMADSLREQ_CH3WE_Pos  (11)
#define DMADSLREQ_CH3WE_Msk  (0x1U << DMADSLREQ_CH3WE_Pos)

#define DMADSLREQ_CH3WE_DISABLE  ((0x0U) << DMADSLREQ_CH3WE_Pos)
#define DMADSLREQ_CH3WE_ENABLE   ((0x1U) << DMADSLREQ_CH3WE_Pos)

#define DMADSLREQ_CH3WE_(x)  (((x) << DMADSLREQ_CH3WE_Pos) & DMADSLREQ_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH4WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH4 bit write enable.
  */
#define DMADSLREQ_CH4WE_Pos  (12)
#define DMADSLREQ_CH4WE_Msk  (0x1U << DMADSLREQ_CH4WE_Pos)

#define DMADSLREQ_CH4WE_DISABLE  ((0x0U) << DMADSLREQ_CH4WE_Pos)
#define DMADSLREQ_CH4WE_ENABLE   ((0x1U) << DMADSLREQ_CH4WE_Pos)

#define DMADSLREQ_CH4WE_(x)  (((x) << DMADSLREQ_CH4WE_Pos) & DMADSLREQ_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH5WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH5 bit write enable.
  */
#define DMADSLREQ_CH5WE_Pos  (13)
#define DMADSLREQ_CH5WE_Msk  (0x1U << DMADSLREQ_CH5WE_Pos)

#define DMADSLREQ_CH5WE_DISABLE  ((0x0U) << DMADSLREQ_CH5WE_Pos)
#define DMADSLREQ_CH5WE_ENABLE   ((0x1U) << DMADSLREQ_CH5WE_Pos)

#define DMADSLREQ_CH5WE_(x)  (((x) << DMADSLREQ_CH5WE_Pos) & DMADSLREQ_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH6WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH6 bit write enable.
  */
#define DMADSLREQ_CH6WE_Pos  (14)
#define DMADSLREQ_CH6WE_Msk  (0x1U << DMADSLREQ_CH6WE_Pos)

#define DMADSLREQ_CH6WE_DISABLE  ((0x0U) << DMADSLREQ_CH6WE_Pos)
#define DMADSLREQ_CH6WE_ENABLE   ((0x1U) << DMADSLREQ_CH6WE_Pos)

#define DMADSLREQ_CH6WE_(x)  (((x) << DMADSLREQ_CH6WE_Pos) & DMADSLREQ_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMADSLREQ       CH7WE
  *  @access     DMAC->DMADSLREQ
  *  @brief      CH7 bit write enable.
  */
#define DMADSLREQ_CH7WE_Pos  (15)
#define DMADSLREQ_CH7WE_Msk  (0x1U << DMADSLREQ_CH7WE_Pos)

#define DMADSLREQ_CH7WE_DISABLE  ((0x0U) << DMADSLREQ_CH7WE_Pos)
#define DMADSLREQ_CH7WE_ENABLE   ((0x1U) << DMADSLREQ_CH7WE_Pos)

#define DMADSLREQ_CH7WE_(x)  (((x) << DMADSLREQ_CH7WE_Pos) & DMADSLREQ_CH7WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMAEN           EN
  *  @access     DMAC->DMAEN
  *  @brief      DMA enable, If the global channel enable bit is cleared while any channel is
  *              still active,  then DMAEN.EN still returns 1 to indicate that there are channels
  *              still active until hardware has terminated all activity on all channels, at
  *              which point the DMAEN.EN bit returns 0.
  */
#define DMAEN_EN_Pos  (0)
#define DMAEN_EN_Msk  (0x1U << DMAEN_EN_Pos)

#define DMAEN_EN_DISABLE  ((0x0U) << DMAEN_EN_Pos)
#define DMAEN_EN_ENABLE   ((0x1U) << DMAEN_EN_Pos)

#define DMAEN_EN_(x)  (((x) << DMAEN_EN_Pos) & DMAEN_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH0
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 0 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH0_Pos  (0)
#define DMACHEN_CH0_Msk  (0x1U << DMACHEN_CH0_Pos)

#define DMACHEN_CH0_DISABLE  ((0x0U) << DMACHEN_CH0_Pos)
#define DMACHEN_CH0_ENABLE   ((0x1U) << DMACHEN_CH0_Pos)

#define DMACHEN_CH0_(x)  (((x) << DMACHEN_CH0_Pos) & DMACHEN_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH1
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 1 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH1_Pos  (1)
#define DMACHEN_CH1_Msk  (0x1U << DMACHEN_CH1_Pos)

#define DMACHEN_CH1_DISABLE  ((0x0U) << DMACHEN_CH1_Pos)
#define DMACHEN_CH1_ENABLE   ((0x1U) << DMACHEN_CH1_Pos)

#define DMACHEN_CH1_(x)  (((x) << DMACHEN_CH1_Pos) & DMACHEN_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH2
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 2 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH2_Pos  (2)
#define DMACHEN_CH2_Msk  (0x1U << DMACHEN_CH2_Pos)

#define DMACHEN_CH2_DISABLE  ((0x0U) << DMACHEN_CH2_Pos)
#define DMACHEN_CH2_ENABLE   ((0x1U) << DMACHEN_CH2_Pos)

#define DMACHEN_CH2_(x)  (((x) << DMACHEN_CH2_Pos) & DMACHEN_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH3
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 3 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH3_Pos  (3)
#define DMACHEN_CH3_Msk  (0x1U << DMACHEN_CH3_Pos)

#define DMACHEN_CH3_DISABLE  ((0x0U) << DMACHEN_CH3_Pos)
#define DMACHEN_CH3_ENABLE   ((0x1U) << DMACHEN_CH3_Pos)

#define DMACHEN_CH3_(x)  (((x) << DMACHEN_CH3_Pos) & DMACHEN_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH4
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 4 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH4_Pos  (4)
#define DMACHEN_CH4_Msk  (0x1U << DMACHEN_CH4_Pos)

#define DMACHEN_CH4_DISABLE  ((0x0U) << DMACHEN_CH4_Pos)
#define DMACHEN_CH4_ENABLE   ((0x1U) << DMACHEN_CH4_Pos)

#define DMACHEN_CH4_(x)  (((x) << DMACHEN_CH4_Pos) & DMACHEN_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH5
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 5 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH5_Pos  (5)
#define DMACHEN_CH5_Msk  (0x1U << DMACHEN_CH5_Pos)

#define DMACHEN_CH5_DISABLE  ((0x0U) << DMACHEN_CH5_Pos)
#define DMACHEN_CH5_ENABLE   ((0x1U) << DMACHEN_CH5_Pos)

#define DMACHEN_CH5_(x)  (((x) << DMACHEN_CH5_Pos) & DMACHEN_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH6
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 6 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH6_Pos  (6)
#define DMACHEN_CH6_Msk  (0x1U << DMACHEN_CH6_Pos)

#define DMACHEN_CH6_DISABLE  ((0x0U) << DMACHEN_CH6_Pos)
#define DMACHEN_CH6_ENABLE   ((0x1U) << DMACHEN_CH6_Pos)

#define DMACHEN_CH6_(x)  (((x) << DMACHEN_CH6_Pos) & DMACHEN_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH7
  *  @access     DMAC->DMACHEN
  *  @brief      Channel 7 enable, automatically cleared if DMA transfer finished.
  */
#define DMACHEN_CH7_Pos  (7)
#define DMACHEN_CH7_Msk  (0x1U << DMACHEN_CH7_Pos)

#define DMACHEN_CH7_DISABLE  ((0x0U) << DMACHEN_CH7_Pos)
#define DMACHEN_CH7_ENABLE   ((0x1U) << DMACHEN_CH7_Pos)

#define DMACHEN_CH7_(x)  (((x) << DMACHEN_CH7_Pos) & DMACHEN_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH0WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH0 bit write enable
  */
#define DMACHEN_CH0WE_Pos  (8)
#define DMACHEN_CH0WE_Msk  (0x1U << DMACHEN_CH0WE_Pos)

#define DMACHEN_CH0WE_DISABLE  ((0x0U) << DMACHEN_CH0WE_Pos)
#define DMACHEN_CH0WE_ENABLE   ((0x1U) << DMACHEN_CH0WE_Pos)

#define DMACHEN_CH0WE_(x)  (((x) << DMACHEN_CH0WE_Pos) & DMACHEN_CH0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH1WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH1 bit write enable
  */
#define DMACHEN_CH1WE_Pos  (9)
#define DMACHEN_CH1WE_Msk  (0x1U << DMACHEN_CH1WE_Pos)

#define DMACHEN_CH1WE_DISABLE  ((0x0U) << DMACHEN_CH1WE_Pos)
#define DMACHEN_CH1WE_ENABLE   ((0x1U) << DMACHEN_CH1WE_Pos)

#define DMACHEN_CH1WE_(x)  (((x) << DMACHEN_CH1WE_Pos) & DMACHEN_CH1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH2WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH2 bit write enable
  */
#define DMACHEN_CH2WE_Pos  (10)
#define DMACHEN_CH2WE_Msk  (0x1U << DMACHEN_CH2WE_Pos)

#define DMACHEN_CH2WE_DISABLE  ((0x0U) << DMACHEN_CH2WE_Pos)
#define DMACHEN_CH2WE_ENABLE   ((0x1U) << DMACHEN_CH2WE_Pos)

#define DMACHEN_CH2WE_(x)  (((x) << DMACHEN_CH2WE_Pos) & DMACHEN_CH2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH3WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH3 bit write enable
  */
#define DMACHEN_CH3WE_Pos  (11)
#define DMACHEN_CH3WE_Msk  (0x1U << DMACHEN_CH3WE_Pos)

#define DMACHEN_CH3WE_DISABLE  ((0x0U) << DMACHEN_CH3WE_Pos)
#define DMACHEN_CH3WE_ENABLE   ((0x1U) << DMACHEN_CH3WE_Pos)

#define DMACHEN_CH3WE_(x)  (((x) << DMACHEN_CH3WE_Pos) & DMACHEN_CH3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH4WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH4 bit write enable
  */
#define DMACHEN_CH4WE_Pos  (12)
#define DMACHEN_CH4WE_Msk  (0x1U << DMACHEN_CH4WE_Pos)

#define DMACHEN_CH4WE_DISABLE  ((0x0U) << DMACHEN_CH4WE_Pos)
#define DMACHEN_CH4WE_ENABLE   ((0x1U) << DMACHEN_CH4WE_Pos)

#define DMACHEN_CH4WE_(x)  (((x) << DMACHEN_CH4WE_Pos) & DMACHEN_CH4WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH5WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH5 bit write enable
  */
#define DMACHEN_CH5WE_Pos  (13)
#define DMACHEN_CH5WE_Msk  (0x1U << DMACHEN_CH5WE_Pos)

#define DMACHEN_CH5WE_DISABLE  ((0x0U) << DMACHEN_CH5WE_Pos)
#define DMACHEN_CH5WE_ENABLE   ((0x1U) << DMACHEN_CH5WE_Pos)

#define DMACHEN_CH5WE_(x)  (((x) << DMACHEN_CH5WE_Pos) & DMACHEN_CH5WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH6WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH6 bit write enable
  */
#define DMACHEN_CH6WE_Pos  (14)
#define DMACHEN_CH6WE_Msk  (0x1U << DMACHEN_CH6WE_Pos)

#define DMACHEN_CH6WE_DISABLE  ((0x0U) << DMACHEN_CH6WE_Pos)
#define DMACHEN_CH6WE_ENABLE   ((0x1U) << DMACHEN_CH6WE_Pos)

#define DMACHEN_CH6WE_(x)  (((x) << DMACHEN_CH6WE_Pos) & DMACHEN_CH6WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMAC            DMACHEN         CH7WE
  *  @access     DMAC->DMACHEN
  *  @brief      CH7 bit write enable
  */
#define DMACHEN_CH7WE_Pos  (15)
#define DMACHEN_CH7WE_Msk  (0x1U << DMACHEN_CH7WE_Pos)

#define DMACHEN_CH7WE_DISABLE  ((0x0U) << DMACHEN_CH7WE_Pos)
#define DMACHEN_CH7WE_ENABLE   ((0x1U) << DMACHEN_CH7WE_Pos)

#define DMACHEN_CH7WE_(x)  (((x) << DMACHEN_CH7WE_Pos) & DMACHEN_CH7WE_Msk)


/******************************************************************************/
/*                                                                            */
/*      DMACH:                                                                */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHSA         ADDR
  *  @access     DMACHx->DMACHSA
  *  @brief      Current source address of DMA transfer.
  *              This register must be written with a 32-bit aligned address.
  *              It is updated after each source transfer according to DMACHCTL0.SINC
  */
#define DMACHSA_ADDR_Pos  (0)
#define DMACHSA_ADDR_Msk  (0xFFFFFFFFU << DMACHSA_ADDR_Pos)

#define DMACHSA_ADDR_(x)  (((x) << DMACHSA_ADDR_Pos) & DMACHSA_ADDR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHDA         ADDR
  *  @access     DMACHx->DMACHDA
  *  @brief      Current Destination address of DMA transfer.
  *              This register must be written with a 32-bit aligned address.
  *              It is updated after each source transfer according to DMACHCTL0.DINC
  */
#define DMACHDA_ADDR_Pos  (0)
#define DMACHDA_ADDR_Msk  (0xFFFFFFFFU << DMACHDA_ADDR_Pos)

#define DMACHDA_ADDR_(x)  (((x) << DMACHDA_ADDR_Pos) & DMACHDA_ADDR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       IE
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Interrupt enable
  *              This bit does not affect the raw interrupt flag generation
  */
#define DMACHCTL0_IE_Pos  (0)
#define DMACHCTL0_IE_Msk  (0x1U << DMACHCTL0_IE_Pos)

#define DMACHCTL0_IE_DISABLE  ((0x0U) << DMACHCTL0_IE_Pos)
#define DMACHCTL0_IE_ENABLE   ((0x1U) << DMACHCTL0_IE_Pos)

#define DMACHCTL0_IE_(x)  (((x) << DMACHCTL0_IE_Pos) & DMACHCTL0_IE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       DWIDTH
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Destination transfer width.
  *              It should not exceed AHB bus HDATA width (32-bits).
  *              For a non-memory peripheral, typically the peripheral (destination) FIFO width.
  */
#define DMACHCTL0_DWIDTH_Pos  (1)
#define DMACHCTL0_DWIDTH_Msk  (0x7U << DMACHCTL0_DWIDTH_Pos)

#define DMACHCTL0_DWIDTH_U8    ((0x000U) << DMACHCTL0_DWIDTH_Pos)
#define DMACHCTL0_DWIDTH_U16   ((0x001U) << DMACHCTL0_DWIDTH_Pos)
#define DMACHCTL0_DWIDTH_U32   ((0x002U) << DMACHCTL0_DWIDTH_Pos)
#define DMACHCTL0_DWIDTH_U64   ((0x003U) << DMACHCTL0_DWIDTH_Pos)
#define DMACHCTL0_DWIDTH_U128  ((0x004U) << DMACHCTL0_DWIDTH_Pos)
#define DMACHCTL0_DWIDTH_U256  ((0x005U) << DMACHCTL0_DWIDTH_Pos)

#define DMACHCTL0_DWIDTH_(x)  (((x) << DMACHCTL0_DWIDTH_Pos) & DMACHCTL0_DWIDTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       SWIDTH
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Source transfer width.
  *              It should not exceed AHB bus HDATA width (32-bits).
  *              For a non-memory peripheral, typically the peripheral (source) FIFO width.
  */
#define DMACHCTL0_SWIDTH_Pos  (4)
#define DMACHCTL0_SWIDTH_Msk  (0x7U << DMACHCTL0_SWIDTH_Pos)

#define DMACHCTL0_SWIDTH_U8    ((0x000U) << DMACHCTL0_SWIDTH_Pos)
#define DMACHCTL0_SWIDTH_U16   ((0x001U) << DMACHCTL0_SWIDTH_Pos)
#define DMACHCTL0_SWIDTH_U32   ((0x002U) << DMACHCTL0_SWIDTH_Pos)
#define DMACHCTL0_SWIDTH_U64   ((0x003U) << DMACHCTL0_SWIDTH_Pos)
#define DMACHCTL0_SWIDTH_U128  ((0x004U) << DMACHCTL0_SWIDTH_Pos)
#define DMACHCTL0_SWIDTH_U256  ((0x005U) << DMACHCTL0_SWIDTH_Pos)

#define DMACHCTL0_SWIDTH_(x)  (((x) << DMACHCTL0_SWIDTH_Pos) & DMACHCTL0_SWIDTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       DINC
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Destination address increment after each transfer.
  *              Incrementing or decrementing is done for alignment to the next DWIDTH boundary.
  */
#define DMACHCTL0_DINC_Pos  (7)
#define DMACHCTL0_DINC_Msk  (0x3U << DMACHCTL0_DINC_Pos)

#define DMACHCTL0_DINC_INCREASE   ((0x00U) << DMACHCTL0_DINC_Pos)
#define DMACHCTL0_DINC_DECREASE   ((0x01U) << DMACHCTL0_DINC_Pos)
#define DMACHCTL0_DINC_NO_CHANGE  ((0x02U) << DMACHCTL0_DINC_Pos)

#define DMACHCTL0_DINC_(x)  (((x) << DMACHCTL0_DINC_Pos) & DMACHCTL0_DINC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       SINC
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Source address increment after each transfer.
  *              Incrementing or decrementing is done for alignment to the next SWIDTH boundary.
  */
#define DMACHCTL0_SINC_Pos  (9)
#define DMACHCTL0_SINC_Msk  (0x3U << DMACHCTL0_SINC_Pos)

#define DMACHCTL0_SINC_INCREASE   ((0x00U) << DMACHCTL0_SINC_Pos)
#define DMACHCTL0_SINC_DECREASE   ((0x01U) << DMACHCTL0_SINC_Pos)
#define DMACHCTL0_SINC_NO_CHANGE  ((0x02U) << DMACHCTL0_SINC_Pos)

#define DMACHCTL0_SINC_(x)  (((x) << DMACHCTL0_SINC_Pos) & DMACHCTL0_SINC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       DSIZE
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Destination burst transaction length.
  *              Number of data items, each of width DWIDTH, to be written to the destination
  *              every time a destination burst transaction request is made from the
  *              corresponding handshaking interface.
  *              Note: This value is not related to the AHB master HBURST signal.
  */
#define DMACHCTL0_DSIZE_Pos  (11)
#define DMACHCTL0_DSIZE_Msk  (0x7U << DMACHCTL0_DSIZE_Pos)

#define DMACHCTL0_DSIZE_1_WORD    ((0x000U) << DMACHCTL0_DSIZE_Pos)
#define DMACHCTL0_DSIZE_4_WORD    ((0x001U) << DMACHCTL0_DSIZE_Pos)
#define DMACHCTL0_DSIZE_8_WORD    ((0x002U) << DMACHCTL0_DSIZE_Pos)
#define DMACHCTL0_DSIZE_16_WORD   ((0x003U) << DMACHCTL0_DSIZE_Pos)
#define DMACHCTL0_DSIZE_32_WORD   ((0x004U) << DMACHCTL0_DSIZE_Pos)
#define DMACHCTL0_DSIZE_64_WORD   ((0x005U) << DMACHCTL0_DSIZE_Pos)
#define DMACHCTL0_DSIZE_128_WORD  ((0x006U) << DMACHCTL0_DSIZE_Pos)
#define DMACHCTL0_DSIZE_256_WORD  ((0x007U) << DMACHCTL0_DSIZE_Pos)

#define DMACHCTL0_DSIZE_(x)  (((x) << DMACHCTL0_DSIZE_Pos) & DMACHCTL0_DSIZE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       SSIZE
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Source burst transaction length.
  *              Number of data items, each of width SWIDTH, to be read from the source every
  *              time a source burst transaction request is made the corresponding handshaking
  *              interface.
  *              Note: This value is not related to the AHB master HBURST signal.
  */
#define DMACHCTL0_SSIZE_Pos  (14)
#define DMACHCTL0_SSIZE_Msk  (0x7U << DMACHCTL0_SSIZE_Pos)

#define DMACHCTL0_SSIZE_1_WORD    ((0x000U) << DMACHCTL0_SSIZE_Pos)
#define DMACHCTL0_SSIZE_4_WORD    ((0x001U) << DMACHCTL0_SSIZE_Pos)
#define DMACHCTL0_SSIZE_8_WORD    ((0x002U) << DMACHCTL0_SSIZE_Pos)
#define DMACHCTL0_SSIZE_16_WORD   ((0x003U) << DMACHCTL0_SSIZE_Pos)
#define DMACHCTL0_SSIZE_32_WORD   ((0x004U) << DMACHCTL0_SSIZE_Pos)
#define DMACHCTL0_SSIZE_64_WORD   ((0x005U) << DMACHCTL0_SSIZE_Pos)
#define DMACHCTL0_SSIZE_128_WORD  ((0x006U) << DMACHCTL0_SSIZE_Pos)
#define DMACHCTL0_SSIZE_256_WORD  ((0x007U) << DMACHCTL0_SSIZE_Pos)

#define DMACHCTL0_SSIZE_(x)  (((x) << DMACHCTL0_SSIZE_Pos) & DMACHCTL0_SSIZE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL0       TT
  *  @access     DMACHx->DMACHCTL0
  *  @brief      Transfer type.
  *              For multi-block transfers using linked list operation, TT must be
  *              constant for all blocks of this multi-block transfer.
  */
#define DMACHCTL0_TT_Pos  (20)
#define DMACHCTL0_TT_Msk  (0x7U << DMACHCTL0_TT_Pos)

#define DMACHCTL0_TT_MEM_TO_MEM      ((0x000U) << DMACHCTL0_TT_Pos)
#define DMACHCTL0_TT_MEM_TO_PER      ((0x001U) << DMACHCTL0_TT_Pos)
#define DMACHCTL0_TT_PER_TO_MEM      ((0x002U) << DMACHCTL0_TT_Pos)
#define DMACHCTL0_TT_PER_TO_PER      ((0x003U) << DMACHCTL0_TT_Pos)
#define DMACHCTL0_TT_PER_TO_MEM_SFC  ((0x004U) << DMACHCTL0_TT_Pos)
#define DMACHCTL0_TT_PER_TO_PER_SFC  ((0x005U) << DMACHCTL0_TT_Pos)
#define DMACHCTL0_TT_MEM_TO_PER_DFC  ((0x006U) << DMACHCTL0_TT_Pos)
#define DMACHCTL0_TT_PER_TO_PER_DFC  ((0x007U) << DMACHCTL0_TT_Pos)

#define DMACHCTL0_TT_(x)  (((x) << DMACHCTL0_TT_Pos) & DMACHCTL0_TT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCTL1       BLKTS
  *  @access     DMACHx->DMACHCTL1
  *  @brief      Block transfer size.
  *              Which is the total number of single transactions to perform for every block
  *              transfer; a single transaction is mapped to a single AMBA beat.
  *              The width of the single transaction is determined by DMACHCTL0.SWIDTH.
  *              This field must be written before the channel is enabled in order to indicate
  *              the block size.
  */
#define DMACHCTL1_BLKTS_Pos  (0)
#define DMACHCTL1_BLKTS_Msk  (0xFFFU << DMACHCTL1_BLKTS_Pos)

#define DMACHCTL1_BLKTS_(x)  (((x) << DMACHCTL1_BLKTS_Pos) & DMACHCTL1_BLKTS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       PRIORITY
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Channel priority.
  *              This field must be written as a value within 0 to 7 while 0 is the lowest
  *              priority
  */
#define DMACHCFG0_PRIORITY_Pos  (5)
#define DMACHCFG0_PRIORITY_Msk  (0x7U << DMACHCFG0_PRIORITY_Pos)

#define DMACHCFG0_PRIORITY_8TH_PRIORITY  ((0x000U) << DMACHCFG0_PRIORITY_Pos)
#define DMACHCFG0_PRIORITY_7TH_PRIORITY  ((0x001U) << DMACHCFG0_PRIORITY_Pos)
#define DMACHCFG0_PRIORITY_6TH_PRIORITY  ((0x002U) << DMACHCFG0_PRIORITY_Pos)
#define DMACHCFG0_PRIORITY_5TH_PRIORITY  ((0x003U) << DMACHCFG0_PRIORITY_Pos)
#define DMACHCFG0_PRIORITY_4TH_PRIORITY  ((0x004U) << DMACHCFG0_PRIORITY_Pos)
#define DMACHCFG0_PRIORITY_3RD_PRIORITY  ((0x005U) << DMACHCFG0_PRIORITY_Pos)
#define DMACHCFG0_PRIORITY_2ND_PRIORITY  ((0x006U) << DMACHCFG0_PRIORITY_Pos)
#define DMACHCFG0_PRIORITY_1ST_PRIORITY  ((0x007U) << DMACHCFG0_PRIORITY_Pos)

#define DMACHCFG0_PRIORITY_(x)  (((x) << DMACHCFG0_PRIORITY_Pos) & DMACHCFG0_PRIORITY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       SUSPEND
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Channel suspend.
  *              Suspends all DMA data transfers from the source until this bit is cleared. There
  *              is no guarantee that the current transaction will complete. Can also be used in
  *              conjunction with FIFODAV bit to cleanly disable a channel without losing any
  *              data.
  */
#define DMACHCFG0_SUSPEND_Pos  (8)
#define DMACHCFG0_SUSPEND_Msk  (0x1U << DMACHCFG0_SUSPEND_Pos)

#define DMACHCFG0_SUSPEND_DISABLE  ((0x0U) << DMACHCFG0_SUSPEND_Pos)
#define DMACHCFG0_SUSPEND_ENABLE   ((0x1U) << DMACHCFG0_SUSPEND_Pos)

#define DMACHCFG0_SUSPEND_(x)  (((x) << DMACHCFG0_SUSPEND_Pos) & DMACHCFG0_SUSPEND_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       FIFOEMPTY
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Indicates if there is data left in the channel FIFO.
  *              Can be used in conjunction with SUSPEND bit to cleanly disable a channel.
  */
#define DMACHCFG0_FIFOEMPTY_Pos  (9)
#define DMACHCFG0_FIFOEMPTY_Msk  (0x1U << DMACHCFG0_FIFOEMPTY_Pos)

#define DMACHCFG0_FIFOEMPTY_NOT_EMPTY  ((0x0U) << DMACHCFG0_FIFOEMPTY_Pos)
#define DMACHCFG0_FIFOEMPTY_EMPTY      ((0x1U) << DMACHCFG0_FIFOEMPTY_Pos)

#define DMACHCFG0_FIFOEMPTY_(x)  (((x) << DMACHCFG0_FIFOEMPTY_Pos) & DMACHCFG0_FIFOEMPTY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       DSWHS
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Destination software handshaking select.
  *              This bit is ignored if the destination is memory
  */
#define DMACHCFG0_DSWHS_Pos  (10)
#define DMACHCFG0_DSWHS_Msk  (0x1U << DMACHCFG0_DSWHS_Pos)

#define DMACHCFG0_DSWHS_HARDWARE  ((0x0U) << DMACHCFG0_DSWHS_Pos)
#define DMACHCFG0_DSWHS_SOFTWARE  ((0x1U) << DMACHCFG0_DSWHS_Pos)

#define DMACHCFG0_DSWHS_(x)  (((x) << DMACHCFG0_DSWHS_Pos) & DMACHCFG0_DSWHS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       SSWHS
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Source software handshaking select.
  *              This bit is ignored if the source is memory
  */
#define DMACHCFG0_SSWHS_Pos  (11)
#define DMACHCFG0_SSWHS_Msk  (0x1U << DMACHCFG0_SSWHS_Pos)

#define DMACHCFG0_SSWHS_HARDWARE  ((0x0U) << DMACHCFG0_SSWHS_Pos)
#define DMACHCFG0_SSWHS_SOFTWARE  ((0x1U) << DMACHCFG0_SSWHS_Pos)

#define DMACHCFG0_SSWHS_(x)  (((x) << DMACHCFG0_SSWHS_Pos) & DMACHCFG0_SSWHS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       DHSPOL
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Destination handshaking interface polarity.
  */
#define DMACHCFG0_DHSPOL_Pos  (18)
#define DMACHCFG0_DHSPOL_Msk  (0x1U << DMACHCFG0_DHSPOL_Pos)

#define DMACHCFG0_DHSPOL_ACTIVE_LOW   ((0x0U) << DMACHCFG0_DHSPOL_Pos)
#define DMACHCFG0_DHSPOL_ACTIVE_HIGH  ((0x1U) << DMACHCFG0_DHSPOL_Pos)

#define DMACHCFG0_DHSPOL_(x)  (((x) << DMACHCFG0_DHSPOL_Pos) & DMACHCFG0_DHSPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       SHSPOL
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Source handshaking interface polarity.
  */
#define DMACHCFG0_SHSPOL_Pos  (19)
#define DMACHCFG0_SHSPOL_Msk  (0x1U << DMACHCFG0_SHSPOL_Pos)

#define DMACHCFG0_SHSPOL_ACTIVE_LOW   ((0x0U) << DMACHCFG0_SHSPOL_Pos)
#define DMACHCFG0_SHSPOL_ACTIVE_HIGH  ((0x1U) << DMACHCFG0_SHSPOL_Pos)

#define DMACHCFG0_SHSPOL_(x)  (((x) << DMACHCFG0_SHSPOL_Pos) & DMACHCFG0_SHSPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       SRLD
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Automatic source reload.
  *              The DMACHSA register can be automatically reloaded from its initial value at the
  *              end of every block for multi-block transfers. A new block transfer is then
  *              initiated.
  */
#define DMACHCFG0_SRLD_Pos  (30)
#define DMACHCFG0_SRLD_Msk  (0x1U << DMACHCFG0_SRLD_Pos)

#define DMACHCFG0_SRLD_DISABLE  ((0x0U) << DMACHCFG0_SRLD_Pos)
#define DMACHCFG0_SRLD_ENABLE   ((0x1U) << DMACHCFG0_SRLD_Pos)

#define DMACHCFG0_SRLD_(x)  (((x) << DMACHCFG0_SRLD_Pos) & DMACHCFG0_SRLD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG0       DRLD
  *  @access     DMACHx->DMACHCFG0
  *  @brief      Automatic destination reload.
  *              The DMACHDA register can be automatically reloaded from its initial value at the
  *              end of every block for multi-block transfers. A new block transfer is then
  *              initiated.
  */
#define DMACHCFG0_DRLD_Pos  (31)
#define DMACHCFG0_DRLD_Msk  (0x1U << DMACHCFG0_DRLD_Pos)

#define DMACHCFG0_DRLD_DISABLE  ((0x0U) << DMACHCFG0_DRLD_Pos)
#define DMACHCFG0_DRLD_ENABLE   ((0x1U) << DMACHCFG0_DRLD_Pos)

#define DMACHCFG0_DRLD_(x)  (((x) << DMACHCFG0_DRLD_Pos) & DMACHCFG0_DRLD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG1       FIFOTH
  *  @access     DMACHx->DMACHCFG1
  *  @brief      FIFO threshold to determine how much space or data needs to be available in the
  *              FIFO before a burst transaction request is serviced.
  */
#define DMACHCFG1_FIFOTH_Pos  (1)
#define DMACHCFG1_FIFOTH_Msk  (0x1U << DMACHCFG1_FIFOTH_Pos)

#define DMACHCFG1_FIFOTH_SINGLE_ENTRY  ((0x0U) << DMACHCFG1_FIFOTH_Pos)
#define DMACHCFG1_FIFOTH_HALF_DEPTH    ((0x1U) << DMACHCFG1_FIFOTH_Pos)

#define DMACHCFG1_FIFOTH_(x)  (((x) << DMACHCFG1_FIFOTH_Pos) & DMACHCFG1_FIFOTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG1       SPER
  *  @access     DMACHx->DMACHCFG1
  *  @brief      Source peripheral that communicated through hardware handshaking interface.
  *              This field is ignored if DMACHCFG0.SSWHS=1.
  */
#define DMACHCFG1_SPER_Pos  (7)
#define DMACHCFG1_SPER_Msk  (0xFU << DMACHCFG1_SPER_Pos)

#define DMACHCFG1_SPER_SPER_0   ((0x0000U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_1   ((0x0001U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_2   ((0x0002U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_3   ((0x0003U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_4   ((0x0004U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_5   ((0x0005U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_6   ((0x0006U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_7   ((0x0007U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_8   ((0x0008U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_9   ((0x0009U) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_10  ((0x000AU) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_11  ((0x000BU) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_12  ((0x000CU) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_13  ((0x000DU) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_14  ((0x000EU) << DMACHCFG1_SPER_Pos)
#define DMACHCFG1_SPER_SPER_15  ((0x000FU) << DMACHCFG1_SPER_Pos)

#define DMACHCFG1_SPER_(x)  (((x) << DMACHCFG1_SPER_Pos) & DMACHCFG1_SPER_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              DMACHx          DMACHCFG1       DPER
  *  @access     DMACHx->DMACHCFG1
  *  @brief      Destination peripheral that communicated through hardware handshaking interface.
  *              This field is ignored if DMACHCFG0.DSWHS=1.
  */
#define DMACHCFG1_DPER_Pos  (11)
#define DMACHCFG1_DPER_Msk  (0xFU << DMACHCFG1_DPER_Pos)

#define DMACHCFG1_DPER_DPER_0   ((0x0000U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_1   ((0x0001U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_2   ((0x0002U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_3   ((0x0003U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_4   ((0x0004U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_5   ((0x0005U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_6   ((0x0006U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_7   ((0x0007U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_8   ((0x0008U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_9   ((0x0009U) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_10  ((0x000AU) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_11  ((0x000BU) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_12  ((0x000CU) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_13  ((0x000DU) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_14  ((0x000EU) << DMACHCFG1_DPER_Pos)
#define DMACHCFG1_DPER_DPER_15  ((0x000FU) << DMACHCFG1_DPER_Pos)

#define DMACHCFG1_DPER_(x)  (((x) << DMACHCFG1_DPER_Pos) & DMACHCFG1_DPER_Msk)


/******************************************************************************/
/*                                                                            */
/*      PWM:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       TBPRD
  *  @access     PWMx->SHADOWSTS
  *  @brief      TBPRD shadow status
  */
#define SHADOWSTS_TBPRD_Pos  (0)
#define SHADOWSTS_TBPRD_Msk  (0x1U << SHADOWSTS_TBPRD_Pos)

#define SHADOWSTS_TBPRD_EMPTY  ((0x0U) << SHADOWSTS_TBPRD_Pos)
#define SHADOWSTS_TBPRD_FULL   ((0x1U) << SHADOWSTS_TBPRD_Pos)

#define SHADOWSTS_TBPRD_(x)  (((x) << SHADOWSTS_TBPRD_Pos) & SHADOWSTS_TBPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       CMPA
  *  @access     PWMx->SHADOWSTS
  *  @brief      CMPA shadow status
  */
#define SHADOWSTS_CMPA_Pos  (1)
#define SHADOWSTS_CMPA_Msk  (0x1U << SHADOWSTS_CMPA_Pos)

#define SHADOWSTS_CMPA_EMPTY  ((0x0U) << SHADOWSTS_CMPA_Pos)
#define SHADOWSTS_CMPA_FULL   ((0x1U) << SHADOWSTS_CMPA_Pos)

#define SHADOWSTS_CMPA_(x)  (((x) << SHADOWSTS_CMPA_Pos) & SHADOWSTS_CMPA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       CMPB
  *  @access     PWMx->SHADOWSTS
  *  @brief      CMPB shadow status
  */
#define SHADOWSTS_CMPB_Pos  (2)
#define SHADOWSTS_CMPB_Msk  (0x1U << SHADOWSTS_CMPB_Pos)

#define SHADOWSTS_CMPB_EMPTY  ((0x0U) << SHADOWSTS_CMPB_Pos)
#define SHADOWSTS_CMPB_FULL   ((0x1U) << SHADOWSTS_CMPB_Pos)

#define SHADOWSTS_CMPB_(x)  (((x) << SHADOWSTS_CMPB_Pos) & SHADOWSTS_CMPB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       CMPC
  *  @access     PWMx->SHADOWSTS
  *  @brief      CMPC shadow status
  */
#define SHADOWSTS_CMPC_Pos  (3)
#define SHADOWSTS_CMPC_Msk  (0x1U << SHADOWSTS_CMPC_Pos)

#define SHADOWSTS_CMPC_EMPTY  ((0x0U) << SHADOWSTS_CMPC_Pos)
#define SHADOWSTS_CMPC_FULL   ((0x1U) << SHADOWSTS_CMPC_Pos)

#define SHADOWSTS_CMPC_(x)  (((x) << SHADOWSTS_CMPC_Pos) & SHADOWSTS_CMPC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       CMPD
  *  @access     PWMx->SHADOWSTS
  *  @brief      CMPD shadow status
  */
#define SHADOWSTS_CMPD_Pos  (4)
#define SHADOWSTS_CMPD_Msk  (0x1U << SHADOWSTS_CMPD_Pos)

#define SHADOWSTS_CMPD_EMPTY  ((0x0U) << SHADOWSTS_CMPD_Pos)
#define SHADOWSTS_CMPD_FULL   ((0x1U) << SHADOWSTS_CMPD_Pos)

#define SHADOWSTS_CMPD_(x)  (((x) << SHADOWSTS_CMPD_Pos) & SHADOWSTS_CMPD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       AQCTLA
  *  @access     PWMx->SHADOWSTS
  *  @brief      AQCTLA shadow status
  */
#define SHADOWSTS_AQCTLA_Pos  (5)
#define SHADOWSTS_AQCTLA_Msk  (0x1U << SHADOWSTS_AQCTLA_Pos)

#define SHADOWSTS_AQCTLA_EMPTY  ((0x0U) << SHADOWSTS_AQCTLA_Pos)
#define SHADOWSTS_AQCTLA_FULL   ((0x1U) << SHADOWSTS_AQCTLA_Pos)

#define SHADOWSTS_AQCTLA_(x)  (((x) << SHADOWSTS_AQCTLA_Pos) & SHADOWSTS_AQCTLA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       AQCTLB
  *  @access     PWMx->SHADOWSTS
  *  @brief      AQCTLB shadow status
  */
#define SHADOWSTS_AQCTLB_Pos  (6)
#define SHADOWSTS_AQCTLB_Msk  (0x1U << SHADOWSTS_AQCTLB_Pos)

#define SHADOWSTS_AQCTLB_EMPTY  ((0x0U) << SHADOWSTS_AQCTLB_Pos)
#define SHADOWSTS_AQCTLB_FULL   ((0x1U) << SHADOWSTS_AQCTLB_Pos)

#define SHADOWSTS_AQCTLB_(x)  (((x) << SHADOWSTS_AQCTLB_Pos) & SHADOWSTS_AQCTLB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       AQCSFRC
  *  @access     PWMx->SHADOWSTS
  *  @brief      AQCSFRC shadow status
  */
#define SHADOWSTS_AQCSFRC_Pos  (7)
#define SHADOWSTS_AQCSFRC_Msk  (0x1U << SHADOWSTS_AQCSFRC_Pos)

#define SHADOWSTS_AQCSFRC_EMPTY  ((0x0U) << SHADOWSTS_AQCSFRC_Pos)
#define SHADOWSTS_AQCSFRC_FULL   ((0x1U) << SHADOWSTS_AQCSFRC_Pos)

#define SHADOWSTS_AQCSFRC_(x)  (((x) << SHADOWSTS_AQCSFRC_Pos) & SHADOWSTS_AQCSFRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       DBCTL
  *  @access     PWMx->SHADOWSTS
  *  @brief      DBCTL shadow status
  */
#define SHADOWSTS_DBCTL_Pos  (8)
#define SHADOWSTS_DBCTL_Msk  (0x1U << SHADOWSTS_DBCTL_Pos)

#define SHADOWSTS_DBCTL_EMPTY  ((0x0U) << SHADOWSTS_DBCTL_Pos)
#define SHADOWSTS_DBCTL_FULL   ((0x1U) << SHADOWSTS_DBCTL_Pos)

#define SHADOWSTS_DBCTL_(x)  (((x) << SHADOWSTS_DBCTL_Pos) & SHADOWSTS_DBCTL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       DBRED
  *  @access     PWMx->SHADOWSTS
  *  @brief      DBRED shadow status
  */
#define SHADOWSTS_DBRED_Pos  (9)
#define SHADOWSTS_DBRED_Msk  (0x1U << SHADOWSTS_DBRED_Pos)

#define SHADOWSTS_DBRED_EMPTY  ((0x0U) << SHADOWSTS_DBRED_Pos)
#define SHADOWSTS_DBRED_FULL   ((0x1U) << SHADOWSTS_DBRED_Pos)

#define SHADOWSTS_DBRED_(x)  (((x) << SHADOWSTS_DBRED_Pos) & SHADOWSTS_DBRED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            SHADOWSTS       DBFED
  *  @access     PWMx->SHADOWSTS
  *  @brief      DBFED shadow status
  */
#define SHADOWSTS_DBFED_Pos  (10)
#define SHADOWSTS_DBFED_Msk  (0x1U << SHADOWSTS_DBFED_Pos)

#define SHADOWSTS_DBFED_EMPTY  ((0x0U) << SHADOWSTS_DBFED_Pos)
#define SHADOWSTS_DBFED_FULL   ((0x1U) << SHADOWSTS_DBFED_Pos)

#define SHADOWSTS_DBFED_(x)  (((x) << SHADOWSTS_DBFED_Pos) & SHADOWSTS_DBFED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDCTL0         GLDEN
  *  @access     PWMx->GLDCTL0
  *  @brief      Global shadow to active load enable
  */
#define GLDCTL0_GLDEN_Pos  (0)
#define GLDCTL0_GLDEN_Msk  (0x1U << GLDCTL0_GLDEN_Pos)

#define GLDCTL0_GLDEN_DISABLE  ((0x0U) << GLDCTL0_GLDEN_Pos)
#define GLDCTL0_GLDEN_ENABLE   ((0x1U) << GLDCTL0_GLDEN_Pos)

#define GLDCTL0_GLDEN_(x)  (((x) << GLDCTL0_GLDEN_Pos) & GLDCTL0_GLDEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDCTL0         GLDLOAD
  *  @access     PWMx->GLDCTL0
  *  @brief      Global shadow to active load mode
  */
#define GLDCTL0_GLDLOAD_Pos  (1)
#define GLDCTL0_GLDLOAD_Msk  (0x7U << GLDCTL0_GLDLOAD_Pos)

#define GLDCTL0_GLDLOAD_LOAD_ON_ZERO              ((0x000U) << GLDCTL0_GLDLOAD_Pos)
#define GLDCTL0_GLDLOAD_LOAD_ON_PERIOD            ((0x001U) << GLDCTL0_GLDLOAD_Pos)
#define GLDCTL0_GLDLOAD_LOAD_ON_ZERO_PERIOD       ((0x002U) << GLDCTL0_GLDLOAD_Pos)
#define GLDCTL0_GLDLOAD_LOAD_ON_SYNC              ((0x003U) << GLDCTL0_GLDLOAD_Pos)
#define GLDCTL0_GLDLOAD_LOAD_ON_SYNC_ZERO         ((0x004U) << GLDCTL0_GLDLOAD_Pos)
#define GLDCTL0_GLDLOAD_LOAD_ON_SYNC_PERIOD       ((0x005U) << GLDCTL0_GLDLOAD_Pos)
#define GLDCTL0_GLDLOAD_LOAD_ON_SYNC_ZERO_PERIOD  ((0x006U) << GLDCTL0_GLDLOAD_Pos)
#define GLDCTL0_GLDLOAD_LOAD_ON_FORCE             ((0x007U) << GLDCTL0_GLDLOAD_Pos)

#define GLDCTL0_GLDLOAD_(x)  (((x) << GLDCTL0_GLDLOAD_Pos) & GLDCTL0_GLDLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDCTL0         GLDPRD
  *  @access     PWMx->GLDCTL0
  *  @brief      Global shadow to active load strobe period
  *              No global load pulse will be generated if GLDPRD=0. Otherwise, the global load
  *              pulse is generated when new event comes upon GLDCNT=GLDPRD-1. In other words,
  *              the load pulse is generated every GLDPRD events.
  *              It has no effect if OSTMODE=1
  */
#define GLDCTL0_GLDPRD_Pos  (4)
#define GLDCTL0_GLDPRD_Msk  (0xFU << GLDCTL0_GLDPRD_Pos)

#define GLDCTL0_GLDPRD_(x)  (((x) << GLDCTL0_GLDPRD_Pos) & GLDCTL0_GLDPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDCTL0         GLDCNT
  *  @access     PWMx->GLDCTL0
  *  @brief      Global shadow to active load strobe counter
  *              It indicates how many selected global load events have occurred
  */
#define GLDCTL0_GLDCNT_Pos  (8)
#define GLDCTL0_GLDCNT_Msk  (0xFU << GLDCTL0_GLDCNT_Pos)

#define GLDCTL0_GLDCNT_(x)  (((x) << GLDCTL0_GLDCNT_Pos) & GLDCTL0_GLDCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDCTL0         OSTMODE
  *  @access     PWMx->GLDCTL0
  *  @brief      One-shot global load mode
  */
#define GLDCTL0_OSTMODE_Pos  (12)
#define GLDCTL0_OSTMODE_Msk  (0x1U << GLDCTL0_OSTMODE_Pos)

#define GLDCTL0_OSTMODE_CONTINUOUS_MODE  ((0x0U) << GLDCTL0_OSTMODE_Pos)
#define GLDCTL0_OSTMODE_ONE_SHOT_MODE    ((0x1U) << GLDCTL0_OSTMODE_Pos)

#define GLDCTL0_OSTMODE_(x)  (((x) << GLDCTL0_OSTMODE_Pos) & GLDCTL0_OSTMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDCTL1         OSTLOAD
  *  @access     PWMx->GLDCTL1
  *  @brief      Start the one-shot load pending
  */
#define GLDCTL1_OSTLOAD_Pos  (0)
#define GLDCTL1_OSTLOAD_Msk  (0x1U << GLDCTL1_OSTLOAD_Pos)

#define GLDCTL1_OSTLOAD_NO_EFFECT  ((0x0U) << GLDCTL1_OSTLOAD_Pos)
#define GLDCTL1_OSTLOAD_PENDING    ((0x1U) << GLDCTL1_OSTLOAD_Pos)

#define GLDCTL1_OSTLOAD_(x)  (((x) << GLDCTL1_OSTLOAD_Pos) & GLDCTL1_OSTLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDCTL1         FRCLOAD
  *  @access     PWMx->GLDCTL1
  *  @brief      Global force shadow to active load
  */
#define GLDCTL1_FRCLOAD_Pos  (1)
#define GLDCTL1_FRCLOAD_Msk  (0x1U << GLDCTL1_FRCLOAD_Pos)

#define GLDCTL1_FRCLOAD_NO_EFFECT  ((0x0U) << GLDCTL1_FRCLOAD_Pos)
#define GLDCTL1_FRCLOAD_FORCE      ((0x1U) << GLDCTL1_FRCLOAD_Pos)

#define GLDCTL1_FRCLOAD_(x)  (((x) << GLDCTL1_FRCLOAD_Pos) & GLDCTL1_FRCLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          TBPRD
  *  @access     PWMx->GLDSEL
  *  @brief      TBPRD global shadow to active load select
  */
#define GLDSEL_TBPRD_Pos  (0)
#define GLDSEL_TBPRD_Msk  (0x1U << GLDSEL_TBPRD_Pos)

#define GLDSEL_TBPRD_LOCAL   ((0x0U) << GLDSEL_TBPRD_Pos)
#define GLDSEL_TBPRD_GLOBAL  ((0x1U) << GLDSEL_TBPRD_Pos)

#define GLDSEL_TBPRD_(x)  (((x) << GLDSEL_TBPRD_Pos) & GLDSEL_TBPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          CMPA
  *  @access     PWMx->GLDSEL
  *  @brief      CMPA global shadow to active load select
  */
#define GLDSEL_CMPA_Pos  (1)
#define GLDSEL_CMPA_Msk  (0x1U << GLDSEL_CMPA_Pos)

#define GLDSEL_CMPA_LOCAL   ((0x0U) << GLDSEL_CMPA_Pos)
#define GLDSEL_CMPA_GLOBAL  ((0x1U) << GLDSEL_CMPA_Pos)

#define GLDSEL_CMPA_(x)  (((x) << GLDSEL_CMPA_Pos) & GLDSEL_CMPA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          CMPB
  *  @access     PWMx->GLDSEL
  *  @brief      CMPB global shadow to active load select
  */
#define GLDSEL_CMPB_Pos  (2)
#define GLDSEL_CMPB_Msk  (0x1U << GLDSEL_CMPB_Pos)

#define GLDSEL_CMPB_LOCAL   ((0x0U) << GLDSEL_CMPB_Pos)
#define GLDSEL_CMPB_GLOBAL  ((0x1U) << GLDSEL_CMPB_Pos)

#define GLDSEL_CMPB_(x)  (((x) << GLDSEL_CMPB_Pos) & GLDSEL_CMPB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          CMPC
  *  @access     PWMx->GLDSEL
  *  @brief      CMPC global shadow to active load select
  */
#define GLDSEL_CMPC_Pos  (3)
#define GLDSEL_CMPC_Msk  (0x1U << GLDSEL_CMPC_Pos)

#define GLDSEL_CMPC_LOCAL   ((0x0U) << GLDSEL_CMPC_Pos)
#define GLDSEL_CMPC_GLOBAL  ((0x1U) << GLDSEL_CMPC_Pos)

#define GLDSEL_CMPC_(x)  (((x) << GLDSEL_CMPC_Pos) & GLDSEL_CMPC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          CMPD
  *  @access     PWMx->GLDSEL
  *  @brief      CMPD global shadow to active load select
  */
#define GLDSEL_CMPD_Pos  (4)
#define GLDSEL_CMPD_Msk  (0x1U << GLDSEL_CMPD_Pos)

#define GLDSEL_CMPD_LOCAL   ((0x0U) << GLDSEL_CMPD_Pos)
#define GLDSEL_CMPD_GLOBAL  ((0x1U) << GLDSEL_CMPD_Pos)

#define GLDSEL_CMPD_(x)  (((x) << GLDSEL_CMPD_Pos) & GLDSEL_CMPD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          AQCTLA
  *  @access     PWMx->GLDSEL
  *  @brief      AQCTLA global shadow to active load select
  */
#define GLDSEL_AQCTLA_Pos  (5)
#define GLDSEL_AQCTLA_Msk  (0x1U << GLDSEL_AQCTLA_Pos)

#define GLDSEL_AQCTLA_LOCAL   ((0x0U) << GLDSEL_AQCTLA_Pos)
#define GLDSEL_AQCTLA_GLOBAL  ((0x1U) << GLDSEL_AQCTLA_Pos)

#define GLDSEL_AQCTLA_(x)  (((x) << GLDSEL_AQCTLA_Pos) & GLDSEL_AQCTLA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          AQCTLB
  *  @access     PWMx->GLDSEL
  *  @brief      AQCTLB global shadow to active load select
  */
#define GLDSEL_AQCTLB_Pos  (6)
#define GLDSEL_AQCTLB_Msk  (0x1U << GLDSEL_AQCTLB_Pos)

#define GLDSEL_AQCTLB_LOCAL   ((0x0U) << GLDSEL_AQCTLB_Pos)
#define GLDSEL_AQCTLB_GLOBAL  ((0x1U) << GLDSEL_AQCTLB_Pos)

#define GLDSEL_AQCTLB_(x)  (((x) << GLDSEL_AQCTLB_Pos) & GLDSEL_AQCTLB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          AQCSFRC
  *  @access     PWMx->GLDSEL
  *  @brief      AQCSFRC global shadow to active load select
  */
#define GLDSEL_AQCSFRC_Pos  (7)
#define GLDSEL_AQCSFRC_Msk  (0x1U << GLDSEL_AQCSFRC_Pos)

#define GLDSEL_AQCSFRC_LOCAL   ((0x0U) << GLDSEL_AQCSFRC_Pos)
#define GLDSEL_AQCSFRC_GLOBAL  ((0x1U) << GLDSEL_AQCSFRC_Pos)

#define GLDSEL_AQCSFRC_(x)  (((x) << GLDSEL_AQCSFRC_Pos) & GLDSEL_AQCSFRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          DBCTL
  *  @access     PWMx->GLDSEL
  *  @brief      DBCTL global shadow to active load select
  */
#define GLDSEL_DBCTL_Pos  (8)
#define GLDSEL_DBCTL_Msk  (0x1U << GLDSEL_DBCTL_Pos)

#define GLDSEL_DBCTL_LOCAL   ((0x0U) << GLDSEL_DBCTL_Pos)
#define GLDSEL_DBCTL_GLOBAL  ((0x1U) << GLDSEL_DBCTL_Pos)

#define GLDSEL_DBCTL_(x)  (((x) << GLDSEL_DBCTL_Pos) & GLDSEL_DBCTL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          DBRED
  *  @access     PWMx->GLDSEL
  *  @brief      DBRED global shadow to active load select
  */
#define GLDSEL_DBRED_Pos  (9)
#define GLDSEL_DBRED_Msk  (0x1U << GLDSEL_DBRED_Pos)

#define GLDSEL_DBRED_LOCAL   ((0x0U) << GLDSEL_DBRED_Pos)
#define GLDSEL_DBRED_GLOBAL  ((0x1U) << GLDSEL_DBRED_Pos)

#define GLDSEL_DBRED_(x)  (((x) << GLDSEL_DBRED_Pos) & GLDSEL_DBRED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            GLDSEL          DBFED
  *  @access     PWMx->GLDSEL
  *  @brief      DBFED global shadow to active load select
  */
#define GLDSEL_DBFED_Pos  (10)
#define GLDSEL_DBFED_Msk  (0x1U << GLDSEL_DBFED_Pos)

#define GLDSEL_DBFED_LOCAL   ((0x0U) << GLDSEL_DBFED_Pos)
#define GLDSEL_DBFED_GLOBAL  ((0x1U) << GLDSEL_DBFED_Pos)

#define GLDSEL_DBFED_(x)  (((x) << GLDSEL_DBFED_Pos) & GLDSEL_DBFED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         TBPRD
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the TBPRD of PWM selected by PWMLINK[TBPRD] results in simultaneous
  *              write to TBPRD of current PWM module
  */
#define PWMLINK_TBPRD_Pos  (0)
#define PWMLINK_TBPRD_Msk  (0xFU << PWMLINK_TBPRD_Pos)

#define PWMLINK_TBPRD_LINK_PWM0  ((0x0000U) << PWMLINK_TBPRD_Pos)
#define PWMLINK_TBPRD_LINK_PWM1  ((0x0001U) << PWMLINK_TBPRD_Pos)
#define PWMLINK_TBPRD_LINK_PWM2  ((0x0002U) << PWMLINK_TBPRD_Pos)
#define PWMLINK_TBPRD_LINK_PWM3  ((0x0003U) << PWMLINK_TBPRD_Pos)
#define PWMLINK_TBPRD_LINK_NONE  ((0x000FU) << PWMLINK_TBPRD_Pos)

#define PWMLINK_TBPRD_(x)  (((x) << PWMLINK_TBPRD_Pos) & PWMLINK_TBPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         CMPA
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the CMPA of PWM selected by PWMLINK[CMPA] results in simultaneous write
  *              to CMPA of current PWM module
  */
#define PWMLINK_CMPA_Pos  (4)
#define PWMLINK_CMPA_Msk  (0xFU << PWMLINK_CMPA_Pos)

#define PWMLINK_CMPA_LINK_PWM0  ((0x0000U) << PWMLINK_CMPA_Pos)
#define PWMLINK_CMPA_LINK_PWM1  ((0x0001U) << PWMLINK_CMPA_Pos)
#define PWMLINK_CMPA_LINK_PWM2  ((0x0002U) << PWMLINK_CMPA_Pos)
#define PWMLINK_CMPA_LINK_PWM3  ((0x0003U) << PWMLINK_CMPA_Pos)
#define PWMLINK_CMPA_LINK_NONE  ((0x000FU) << PWMLINK_CMPA_Pos)

#define PWMLINK_CMPA_(x)  (((x) << PWMLINK_CMPA_Pos) & PWMLINK_CMPA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         CMPB
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the CMPB of PWM selected by PWMLINK[CMPB] results in simultaneous write
  *              to CMPB of current PWM module
  */
#define PWMLINK_CMPB_Pos  (8)
#define PWMLINK_CMPB_Msk  (0xFU << PWMLINK_CMPB_Pos)

#define PWMLINK_CMPB_LINK_PWM0  ((0x0000U) << PWMLINK_CMPB_Pos)
#define PWMLINK_CMPB_LINK_PWM1  ((0x0001U) << PWMLINK_CMPB_Pos)
#define PWMLINK_CMPB_LINK_PWM2  ((0x0002U) << PWMLINK_CMPB_Pos)
#define PWMLINK_CMPB_LINK_PWM3  ((0x0003U) << PWMLINK_CMPB_Pos)
#define PWMLINK_CMPB_LINK_NONE  ((0x000FU) << PWMLINK_CMPB_Pos)

#define PWMLINK_CMPB_(x)  (((x) << PWMLINK_CMPB_Pos) & PWMLINK_CMPB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         CMPC
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the CMPC of PWM selected by PWMLINK[CMPC] results in simultaneous write
  *              to CMPC of current PWM module
  */
#define PWMLINK_CMPC_Pos  (12)
#define PWMLINK_CMPC_Msk  (0xFU << PWMLINK_CMPC_Pos)

#define PWMLINK_CMPC_LINK_PWM0  ((0x0000U) << PWMLINK_CMPC_Pos)
#define PWMLINK_CMPC_LINK_PWM1  ((0x0001U) << PWMLINK_CMPC_Pos)
#define PWMLINK_CMPC_LINK_PWM2  ((0x0002U) << PWMLINK_CMPC_Pos)
#define PWMLINK_CMPC_LINK_PWM3  ((0x0003U) << PWMLINK_CMPC_Pos)
#define PWMLINK_CMPC_LINK_NONE  ((0x000FU) << PWMLINK_CMPC_Pos)

#define PWMLINK_CMPC_(x)  (((x) << PWMLINK_CMPC_Pos) & PWMLINK_CMPC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         CMPD
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the CMPD of PWM selected by PWMLINK[CMPD] results in simultaneous write
  *              to CMPD of current PWM module
  */
#define PWMLINK_CMPD_Pos  (16)
#define PWMLINK_CMPD_Msk  (0xFU << PWMLINK_CMPD_Pos)

#define PWMLINK_CMPD_LINK_PWM0  ((0x0000U) << PWMLINK_CMPD_Pos)
#define PWMLINK_CMPD_LINK_PWM1  ((0x0001U) << PWMLINK_CMPD_Pos)
#define PWMLINK_CMPD_LINK_PWM2  ((0x0002U) << PWMLINK_CMPD_Pos)
#define PWMLINK_CMPD_LINK_PWM3  ((0x0003U) << PWMLINK_CMPD_Pos)
#define PWMLINK_CMPD_LINK_NONE  ((0x000FU) << PWMLINK_CMPD_Pos)

#define PWMLINK_CMPD_(x)  (((x) << PWMLINK_CMPD_Pos) & PWMLINK_CMPD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         DBRED
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the DBRED of PWM selected by PWMLINK[DBRED] results in simultaneous
  *              write to DBRED of current PWM module
  */
#define PWMLINK_DBRED_Pos  (20)
#define PWMLINK_DBRED_Msk  (0xFU << PWMLINK_DBRED_Pos)

#define PWMLINK_DBRED_LINK_PWM0  ((0x0000U) << PWMLINK_DBRED_Pos)
#define PWMLINK_DBRED_LINK_PWM1  ((0x0001U) << PWMLINK_DBRED_Pos)
#define PWMLINK_DBRED_LINK_PWM2  ((0x0002U) << PWMLINK_DBRED_Pos)
#define PWMLINK_DBRED_LINK_PWM3  ((0x0003U) << PWMLINK_DBRED_Pos)
#define PWMLINK_DBRED_LINK_NONE  ((0x000FU) << PWMLINK_DBRED_Pos)

#define PWMLINK_DBRED_(x)  (((x) << PWMLINK_DBRED_Pos) & PWMLINK_DBRED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         DBFED
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the DBFED of PWM selected by PWMLINK[DBFED] results in simultaneous
  *              write to DBFED of current PWM module
  */
#define PWMLINK_DBFED_Pos  (24)
#define PWMLINK_DBFED_Msk  (0xFU << PWMLINK_DBFED_Pos)

#define PWMLINK_DBFED_LINK_PWM0  ((0x0000U) << PWMLINK_DBFED_Pos)
#define PWMLINK_DBFED_LINK_PWM1  ((0x0001U) << PWMLINK_DBFED_Pos)
#define PWMLINK_DBFED_LINK_PWM2  ((0x0002U) << PWMLINK_DBFED_Pos)
#define PWMLINK_DBFED_LINK_PWM3  ((0x0003U) << PWMLINK_DBFED_Pos)
#define PWMLINK_DBFED_LINK_NONE  ((0x000FU) << PWMLINK_DBFED_Pos)

#define PWMLINK_DBFED_(x)  (((x) << PWMLINK_DBFED_Pos) & PWMLINK_DBFED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMLINK         GLDCTL1
  *  @access     PWMx->PWMLINK
  *  @brief      Write to the GLDCTL1 of PWM selected by PWMLINK[GLDCTL1] results in simultaneous
  *              write to GLDCTL1 of current PWM module
  */
#define PWMLINK_GLDCTL1_Pos  (28)
#define PWMLINK_GLDCTL1_Msk  (0xFU << PWMLINK_GLDCTL1_Pos)

#define PWMLINK_GLDCTL1_LINK_PWM0  ((0x0000U) << PWMLINK_GLDCTL1_Pos)
#define PWMLINK_GLDCTL1_LINK_PWM1  ((0x0001U) << PWMLINK_GLDCTL1_Pos)
#define PWMLINK_GLDCTL1_LINK_PWM2  ((0x0002U) << PWMLINK_GLDCTL1_Pos)
#define PWMLINK_GLDCTL1_LINK_PWM3  ((0x0003U) << PWMLINK_GLDCTL1_Pos)
#define PWMLINK_GLDCTL1_LINK_NONE  ((0x000FU) << PWMLINK_GLDCTL1_Pos)

#define PWMLINK_GLDCTL1_(x)  (((x) << PWMLINK_GLDCTL1_Pos) & PWMLINK_GLDCTL1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           CNTRUN
  *  @access     PWMx->TBCTL
  *  @brief      Counter run/stop control
  */
#define TBCTL_CNTRUN_Pos  (0)
#define TBCTL_CNTRUN_Msk  (0x1U << TBCTL_CNTRUN_Pos)

#define TBCTL_CNTRUN_COUNT_STOP  ((0x0U) << TBCTL_CNTRUN_Pos)
#define TBCTL_CNTRUN_COUNT_RUN   ((0x1U) << TBCTL_CNTRUN_Pos)

#define TBCTL_CNTRUN_(x)  (((x) << TBCTL_CNTRUN_Pos) & TBCTL_CNTRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           CNTMODE
  *  @access     PWMx->TBCTL
  *  @brief      Counter mode
  */
#define TBCTL_CNTMODE_Pos  (1)
#define TBCTL_CNTMODE_Msk  (0x3U << TBCTL_CNTMODE_Pos)

#define TBCTL_CNTMODE_COUNT_DOWN     ((0x00U) << TBCTL_CNTMODE_Pos)
#define TBCTL_CNTMODE_COUNT_UP       ((0x01U) << TBCTL_CNTMODE_Pos)
#define TBCTL_CNTMODE_COUNT_UP_DOWN  ((0x02U) << TBCTL_CNTMODE_Pos)
#define TBCTL_CNTMODE_COUNT_FREEZE   ((0x03U) << TBCTL_CNTMODE_Pos)

#define TBCTL_CNTMODE_(x)  (((x) << TBCTL_CNTMODE_Pos) & TBCTL_CNTMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           PHSEN
  *  @access     PWMx->TBCTL
  *  @brief      Phase register enable
  */
#define TBCTL_PHSEN_Pos  (3)
#define TBCTL_PHSEN_Msk  (0x1U << TBCTL_PHSEN_Pos)

#define TBCTL_PHSEN_DISABLE  ((0x0U) << TBCTL_PHSEN_Pos)
#define TBCTL_PHSEN_ENABLE   ((0x1U) << TBCTL_PHSEN_Pos)

#define TBCTL_PHSEN_(x)  (((x) << TBCTL_PHSEN_Pos) & TBCTL_PHSEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           PHSDIR
  *  @access     PWMx->TBCTL
  *  @brief      Phase direction
  *              It is valid only when TBCNT is in up-down-count mode (CNTMODE=10)
  */
#define TBCTL_PHSDIR_Pos  (4)
#define TBCTL_PHSDIR_Msk  (0x1U << TBCTL_PHSDIR_Pos)

#define TBCTL_PHSDIR_COUNT_DOWN_AFTER_SYNC  ((0x0U) << TBCTL_PHSDIR_Pos)
#define TBCTL_PHSDIR_COUNT_UP_AFTER_SYNC    ((0x1U) << TBCTL_PHSDIR_Pos)

#define TBCTL_PHSDIR_(x)  (((x) << TBCTL_PHSDIR_Pos) & TBCTL_PHSDIR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           TBPRDLOAD
  *  @access     PWMx->TBCTL
  *  @brief      TBPRD active value load mode
  *              It has no effect when TBCTL[TBPRDLOCK]=1
  */
#define TBCTL_TBPRDLOAD_Pos  (5)
#define TBCTL_TBPRDLOAD_Msk  (0x3U << TBCTL_TBPRDLOAD_Pos)

#define TBCTL_TBPRDLOAD_LOAD_ON_ZERO       ((0x00U) << TBCTL_TBPRDLOAD_Pos)
#define TBCTL_TBPRDLOAD_LOAD_ON_SYNC       ((0x01U) << TBCTL_TBPRDLOAD_Pos)
#define TBCTL_TBPRDLOAD_LOAD_ON_SYNC_ZERO  ((0x02U) << TBCTL_TBPRDLOAD_Pos)
#define TBCTL_TBPRDLOAD_LOAD_IMMEDIATE     ((0x03U) << TBCTL_TBPRDLOAD_Pos)

#define TBCTL_TBPRDLOAD_(x)  (((x) << TBCTL_TBPRDLOAD_Pos) & TBCTL_TBPRDLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           TBPRDLOCK
  *  @access     PWMx->TBCTL
  *  @brief      TBPRD active value lock
  */
#define TBCTL_TBPRDLOCK_Pos  (7)
#define TBCTL_TBPRDLOCK_Msk  (0x1U << TBCTL_TBPRDLOCK_Pos)

#define TBCTL_TBPRDLOCK_UNLOCK  ((0x0U) << TBCTL_TBPRDLOCK_Pos)
#define TBCTL_TBPRDLOCK_LOCK    ((0x1U) << TBCTL_TBPRDLOCK_Pos)

#define TBCTL_TBPRDLOCK_(x)  (((x) << TBCTL_TBPRDLOCK_Pos) & TBCTL_TBPRDLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           SYNCOSEL
  *  @access     PWMx->TBCTL
  *  @brief      Synchronization output select
  */
#define TBCTL_SYNCOSEL_Pos  (8)
#define TBCTL_SYNCOSEL_Msk  (0x7U << TBCTL_SYNCOSEL_Pos)

#define TBCTL_SYNCOSEL_SYNCI_AND_FRCSYNC  ((0x000U) << TBCTL_SYNCOSEL_Pos)
#define TBCTL_SYNCOSEL_TBCNT_EQU_ZERO     ((0x001U) << TBCTL_SYNCOSEL_Pos)
#define TBCTL_SYNCOSEL_TBCNT_EQU_TBPRD    ((0x002U) << TBCTL_SYNCOSEL_Pos)
#define TBCTL_SYNCOSEL_TBCNT_EQU_CMPA     ((0x003U) << TBCTL_SYNCOSEL_Pos)
#define TBCTL_SYNCOSEL_TBCNT_EQU_CMPB     ((0x004U) << TBCTL_SYNCOSEL_Pos)
#define TBCTL_SYNCOSEL_TBCNT_EQU_CMPC     ((0x005U) << TBCTL_SYNCOSEL_Pos)
#define TBCTL_SYNCOSEL_TBCNT_EQU_CMPD     ((0x006U) << TBCTL_SYNCOSEL_Pos)
#define TBCTL_SYNCOSEL_DISABLE            ((0x007U) << TBCTL_SYNCOSEL_Pos)

#define TBCTL_SYNCOSEL_(x)  (((x) << TBCTL_SYNCOSEL_Pos) & TBCTL_SYNCOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           FRCSYNC
  *  @access     PWMx->TBCTL
  *  @brief      Software forced synchronization
  *              This event is ORed with SYNCI input and is valid only when SYNCOSEL=000
  */
#define TBCTL_FRCSYNC_Pos  (11)
#define TBCTL_FRCSYNC_Msk  (0x1U << TBCTL_FRCSYNC_Pos)

#define TBCTL_FRCSYNC_NO_EFFECT  ((0x0U) << TBCTL_FRCSYNC_Pos)
#define TBCTL_FRCSYNC_FORCE      ((0x1U) << TBCTL_FRCSYNC_Pos)

#define TBCTL_FRCSYNC_(x)  (((x) << TBCTL_FRCSYNC_Pos) & TBCTL_FRCSYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           TBDIV
  *  @access     PWMx->TBCTL
  *  @brief      TBCLK dividing ratio from pre-divider output.
  *              Overall dividing ratio is 2^TBPDIV * (TBDIV+1)
  */
#define TBCTL_TBDIV_Pos  (12)
#define TBCTL_TBDIV_Msk  (0x7U << TBCTL_TBDIV_Pos)

#define TBCTL_TBDIV_1  ((0x000U) << TBCTL_TBDIV_Pos)
#define TBCTL_TBDIV_2  ((0x001U) << TBCTL_TBDIV_Pos)
#define TBCTL_TBDIV_3  ((0x002U) << TBCTL_TBDIV_Pos)
#define TBCTL_TBDIV_4  ((0x003U) << TBCTL_TBDIV_Pos)
#define TBCTL_TBDIV_5  ((0x004U) << TBCTL_TBDIV_Pos)
#define TBCTL_TBDIV_6  ((0x005U) << TBCTL_TBDIV_Pos)
#define TBCTL_TBDIV_7  ((0x006U) << TBCTL_TBDIV_Pos)
#define TBCTL_TBDIV_8  ((0x007U) << TBCTL_TBDIV_Pos)

#define TBCTL_TBDIV_(x)  (((x) << TBCTL_TBDIV_Pos) & TBCTL_TBDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           TBPDIV
  *  @access     PWMx->TBCTL
  *  @brief      TBCLK pre-dividing ratio from PWM clock input.
  *              Overall dividing ratio is 2^TBPDIV * (TBDIV+1)
  */
#define TBCTL_TBPDIV_Pos  (15)
#define TBCTL_TBPDIV_Msk  (0x7U << TBCTL_TBPDIV_Pos)

#define TBCTL_TBPDIV_1    ((0x000U) << TBCTL_TBPDIV_Pos)
#define TBCTL_TBPDIV_2    ((0x001U) << TBCTL_TBPDIV_Pos)
#define TBCTL_TBPDIV_4    ((0x002U) << TBCTL_TBPDIV_Pos)
#define TBCTL_TBPDIV_8    ((0x003U) << TBCTL_TBPDIV_Pos)
#define TBCTL_TBPDIV_16   ((0x004U) << TBCTL_TBPDIV_Pos)
#define TBCTL_TBPDIV_32   ((0x005U) << TBCTL_TBPDIV_Pos)
#define TBCTL_TBPDIV_64   ((0x006U) << TBCTL_TBPDIV_Pos)
#define TBCTL_TBPDIV_128  ((0x007U) << TBCTL_TBPDIV_Pos)

#define TBCTL_TBPDIV_(x)  (((x) << TBCTL_TBPDIV_Pos) & TBCTL_TBPDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCTL           DBGRUN
  *  @access     PWMx->TBCTL
  *  @brief      PWM counter behaviour when CPU is halted
  *              Note: Debug operation and CPU fault exceptions both can cause CPU halted.
  */
#define TBCTL_DBGRUN_Pos  (18)
#define TBCTL_DBGRUN_Msk  (0x3U << TBCTL_DBGRUN_Pos)

#define TBCTL_DBGRUN_STOP_AFTER_COUNTING  ((0x00U) << TBCTL_DBGRUN_Pos)
#define TBCTL_DBGRUN_STOP_AFTER_CYCLE     ((0x01U) << TBCTL_DBGRUN_Pos)
#define TBCTL_DBGRUN_KEEP_RUN             ((0x02U) << TBCTL_DBGRUN_Pos)

#define TBCTL_DBGRUN_(x)  (((x) << TBCTL_DBGRUN_Pos) & TBCTL_DBGRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBPRD           VAL
  *  @access     PWMx->TBPRD
  *  @brief      Time-base counter period
  */
#define TBPRD_VAL_Pos  (0)
#define TBPRD_VAL_Msk  (0xFFFFU << TBPRD_VAL_Pos)

#define TBPRD_VAL_(x)  (((x) << TBPRD_VAL_Pos) & TBPRD_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBPRDA          VAL
  *  @access     PWMx->TBPRDA
  *  @brief      Time-base counter active period
  *              When TBCTL[PRDLOAD]=0x3, write to TBPRD directly affects this register.
  *              Otherwise, the value is loaded from TBPRD upon the events defined in
  *              TBCTL[PRDLOAD].
  */
#define TBPRDA_VAL_Pos  (0)
#define TBPRDA_VAL_Msk  (0xFFFFU << TBPRDA_VAL_Pos)

#define TBPRDA_VAL_(x)  (((x) << TBPRDA_VAL_Pos) & TBPRDA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBPHS           VAL
  *  @access     PWMx->TBPHS
  *  @brief      Time-base counter phase when synchronization event occurs
  *              TBCTL[PHSEN]=0: The synchronization event is ignored and TBCNT keeps its value.
  *              TBCTL[PHSEN]=1: Time-base counter (TBCNT) will be loaded with TBPHS when
  *              synchronization event occurs.
  */
#define TBPHS_VAL_Pos  (0)
#define TBPHS_VAL_Msk  (0xFFFFU << TBPHS_VAL_Pos)

#define TBPHS_VAL_(x)  (((x) << TBPHS_VAL_Pos) & TBPHS_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBCNT           VAL
  *  @access     PWMx->TBCNT
  *  @brief      Current value of the time-base counter
  */
#define TBCNT_VAL_Pos  (0)
#define TBCNT_VAL_Msk  (0xFFFFU << TBCNT_VAL_Pos)


#define TBCNT_VAL_(x)  (((x) << TBCNT_VAL_Pos) & TBCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           SYNCI
  *  @access     PWMx->TBFLG
  *  @brief      Input synchronization latched status
  */
#define TBFLG_SYNCI_Pos  (0)
#define TBFLG_SYNCI_Msk  (0x1U << TBFLG_SYNCI_Pos)

#define TBFLG_SYNCI_NO_EVENT     ((0x0U) << TBFLG_SYNCI_Pos)
#define TBFLG_SYNCI_EVENT_OCCUR  ((0x1U) << TBFLG_SYNCI_Pos)

#define TBFLG_SYNCI_(x)  (((x) << TBFLG_SYNCI_Pos) & TBFLG_SYNCI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTMAX
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter reaching max latched status
  */
#define TBFLG_CNTMAX_Pos  (1)
#define TBFLG_CNTMAX_Msk  (0x1U << TBFLG_CNTMAX_Pos)

#define TBFLG_CNTMAX_NOT_REACHED  ((0x0U) << TBFLG_CNTMAX_Pos)
#define TBFLG_CNTMAX_REACHED      ((0x1U) << TBFLG_CNTMAX_Pos)

#define TBFLG_CNTMAX_(x)  (((x) << TBFLG_CNTMAX_Pos) & TBFLG_CNTMAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTZRO
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter reaching zero latched status
  */
#define TBFLG_CNTZRO_Pos  (2)
#define TBFLG_CNTZRO_Msk  (0x1U << TBFLG_CNTZRO_Pos)

#define TBFLG_CNTZRO_NOT_REACHED  ((0x0U) << TBFLG_CNTZRO_Pos)
#define TBFLG_CNTZRO_REACHED      ((0x1U) << TBFLG_CNTZRO_Pos)

#define TBFLG_CNTZRO_(x)  (((x) << TBFLG_CNTZRO_Pos) & TBFLG_CNTZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTPRD
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter reaching period latched status
  */
#define TBFLG_CNTPRD_Pos  (3)
#define TBFLG_CNTPRD_Msk  (0x1U << TBFLG_CNTPRD_Pos)

#define TBFLG_CNTPRD_NOT_REACHED  ((0x0U) << TBFLG_CNTPRD_Pos)
#define TBFLG_CNTPRD_REACHED      ((0x1U) << TBFLG_CNTPRD_Pos)

#define TBFLG_CNTPRD_(x)  (((x) << TBFLG_CNTPRD_Pos) & TBFLG_CNTPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTCMPA
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter reaching CMPA latched status
  */
#define TBFLG_CNTCMPA_Pos  (4)
#define TBFLG_CNTCMPA_Msk  (0x1U << TBFLG_CNTCMPA_Pos)

#define TBFLG_CNTCMPA_NOT_REACHED  ((0x0U) << TBFLG_CNTCMPA_Pos)
#define TBFLG_CNTCMPA_REACHED      ((0x1U) << TBFLG_CNTCMPA_Pos)

#define TBFLG_CNTCMPA_(x)  (((x) << TBFLG_CNTCMPA_Pos) & TBFLG_CNTCMPA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTCMPB
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter reaching CMPB latched status
  */
#define TBFLG_CNTCMPB_Pos  (5)
#define TBFLG_CNTCMPB_Msk  (0x1U << TBFLG_CNTCMPB_Pos)

#define TBFLG_CNTCMPB_NOT_REACHED  ((0x0U) << TBFLG_CNTCMPB_Pos)
#define TBFLG_CNTCMPB_REACHED      ((0x1U) << TBFLG_CNTCMPB_Pos)

#define TBFLG_CNTCMPB_(x)  (((x) << TBFLG_CNTCMPB_Pos) & TBFLG_CNTCMPB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTCMPC
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter reaching CMPC latched status
  */
#define TBFLG_CNTCMPC_Pos  (6)
#define TBFLG_CNTCMPC_Msk  (0x1U << TBFLG_CNTCMPC_Pos)

#define TBFLG_CNTCMPC_NOT_REACHED  ((0x0U) << TBFLG_CNTCMPC_Pos)
#define TBFLG_CNTCMPC_REACHED      ((0x1U) << TBFLG_CNTCMPC_Pos)

#define TBFLG_CNTCMPC_(x)  (((x) << TBFLG_CNTCMPC_Pos) & TBFLG_CNTCMPC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTCMPD
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter reaching CMPD latched status
  */
#define TBFLG_CNTCMPD_Pos  (7)
#define TBFLG_CNTCMPD_Msk  (0x1U << TBFLG_CNTCMPD_Pos)

#define TBFLG_CNTCMPD_NOT_REACHED  ((0x0U) << TBFLG_CNTCMPD_Pos)
#define TBFLG_CNTCMPD_REACHED      ((0x1U) << TBFLG_CNTCMPD_Pos)

#define TBFLG_CNTCMPD_(x)  (((x) << TBFLG_CNTCMPD_Pos) & TBFLG_CNTCMPD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLG           CNTDIR
  *  @access     PWMx->TBFLG
  *  @brief      Time-base counter direction status
  */
#define TBFLG_CNTDIR_Pos  (8)
#define TBFLG_CNTDIR_Msk  (0x1U << TBFLG_CNTDIR_Pos)

#define TBFLG_CNTDIR_COUNTING_DOWN  ((0x0U) << TBFLG_CNTDIR_Pos)
#define TBFLG_CNTDIR_COUNTING_UP    ((0x1U) << TBFLG_CNTDIR_Pos)

#define TBFLG_CNTDIR_(x)  (((x) << TBFLG_CNTDIR_Pos) & TBFLG_CNTDIR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        SYNCI
  *  @access     PWMx->TBFLGCLR
  *  @brief      Input synchronization latched status clear
  */
#define TBFLGCLR_SYNCI_Pos  (0)
#define TBFLGCLR_SYNCI_Msk  (0x1U << TBFLGCLR_SYNCI_Pos)

#define TBFLGCLR_SYNCI_NO_EFFECT  ((0x0U) << TBFLGCLR_SYNCI_Pos)
#define TBFLGCLR_SYNCI_CLEAR      ((0x1U) << TBFLGCLR_SYNCI_Pos)

#define TBFLGCLR_SYNCI_(x)  (((x) << TBFLGCLR_SYNCI_Pos) & TBFLGCLR_SYNCI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        CNTMAX
  *  @access     PWMx->TBFLGCLR
  *  @brief      Time-base counter reaching max latched status clear
  */
#define TBFLGCLR_CNTMAX_Pos  (1)
#define TBFLGCLR_CNTMAX_Msk  (0x1U << TBFLGCLR_CNTMAX_Pos)

#define TBFLGCLR_CNTMAX_NO_EFFECT  ((0x0U) << TBFLGCLR_CNTMAX_Pos)
#define TBFLGCLR_CNTMAX_CLEAR      ((0x1U) << TBFLGCLR_CNTMAX_Pos)

#define TBFLGCLR_CNTMAX_(x)  (((x) << TBFLGCLR_CNTMAX_Pos) & TBFLGCLR_CNTMAX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        CNTZRO
  *  @access     PWMx->TBFLGCLR
  *  @brief      Time-base counter reaching zero latched status clear
  */
#define TBFLGCLR_CNTZRO_Pos  (2)
#define TBFLGCLR_CNTZRO_Msk  (0x1U << TBFLGCLR_CNTZRO_Pos)

#define TBFLGCLR_CNTZRO_NO_EFFECT  ((0x0U) << TBFLGCLR_CNTZRO_Pos)
#define TBFLGCLR_CNTZRO_CLEAR      ((0x1U) << TBFLGCLR_CNTZRO_Pos)

#define TBFLGCLR_CNTZRO_(x)  (((x) << TBFLGCLR_CNTZRO_Pos) & TBFLGCLR_CNTZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        CNTPRD
  *  @access     PWMx->TBFLGCLR
  *  @brief      Time-base counter reaching period latched status clear
  */
#define TBFLGCLR_CNTPRD_Pos  (3)
#define TBFLGCLR_CNTPRD_Msk  (0x1U << TBFLGCLR_CNTPRD_Pos)

#define TBFLGCLR_CNTPRD_NO_EFFECT  ((0x0U) << TBFLGCLR_CNTPRD_Pos)
#define TBFLGCLR_CNTPRD_CLEAR      ((0x1U) << TBFLGCLR_CNTPRD_Pos)

#define TBFLGCLR_CNTPRD_(x)  (((x) << TBFLGCLR_CNTPRD_Pos) & TBFLGCLR_CNTPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        CNTCMPA
  *  @access     PWMx->TBFLGCLR
  *  @brief      Time-base counter reaching CMPA latched status clear
  */
#define TBFLGCLR_CNTCMPA_Pos  (4)
#define TBFLGCLR_CNTCMPA_Msk  (0x1U << TBFLGCLR_CNTCMPA_Pos)

#define TBFLGCLR_CNTCMPA_NO_EFFECT  ((0x0U) << TBFLGCLR_CNTCMPA_Pos)
#define TBFLGCLR_CNTCMPA_CLEAR      ((0x1U) << TBFLGCLR_CNTCMPA_Pos)

#define TBFLGCLR_CNTCMPA_(x)  (((x) << TBFLGCLR_CNTCMPA_Pos) & TBFLGCLR_CNTCMPA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        CNTCMPB
  *  @access     PWMx->TBFLGCLR
  *  @brief      Time-base counter reaching CMPB latched status clear
  */
#define TBFLGCLR_CNTCMPB_Pos  (5)
#define TBFLGCLR_CNTCMPB_Msk  (0x1U << TBFLGCLR_CNTCMPB_Pos)

#define TBFLGCLR_CNTCMPB_NO_EFFECT  ((0x0U) << TBFLGCLR_CNTCMPB_Pos)
#define TBFLGCLR_CNTCMPB_CLEAR      ((0x1U) << TBFLGCLR_CNTCMPB_Pos)

#define TBFLGCLR_CNTCMPB_(x)  (((x) << TBFLGCLR_CNTCMPB_Pos) & TBFLGCLR_CNTCMPB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        CNTCMPC
  *  @access     PWMx->TBFLGCLR
  *  @brief      Time-base counter reaching CMPC latched status clear
  */
#define TBFLGCLR_CNTCMPC_Pos  (6)
#define TBFLGCLR_CNTCMPC_Msk  (0x1U << TBFLGCLR_CNTCMPC_Pos)

#define TBFLGCLR_CNTCMPC_NO_EFFECT  ((0x0U) << TBFLGCLR_CNTCMPC_Pos)
#define TBFLGCLR_CNTCMPC_CLEAR      ((0x1U) << TBFLGCLR_CNTCMPC_Pos)

#define TBFLGCLR_CNTCMPC_(x)  (((x) << TBFLGCLR_CNTCMPC_Pos) & TBFLGCLR_CNTCMPC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TBFLGCLR        CNTCMPD
  *  @access     PWMx->TBFLGCLR
  *  @brief      Time-base counter reaching CMPD latched status clear
  */
#define TBFLGCLR_CNTCMPD_Pos  (7)
#define TBFLGCLR_CNTCMPD_Msk  (0x1U << TBFLGCLR_CNTCMPD_Pos)

#define TBFLGCLR_CNTCMPD_NO_EFFECT  ((0x0U) << TBFLGCLR_CNTCMPD_Pos)
#define TBFLGCLR_CNTCMPD_CLEAR      ((0x1U) << TBFLGCLR_CNTCMPD_Pos)

#define TBFLGCLR_CNTCMPD_(x)  (((x) << TBFLGCLR_CNTCMPD_Pos) & TBFLGCLR_CNTCMPD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPALOAD
  *  @access     PWMx->CMPCTL
  *  @brief      CMPA active value load mode
  *              It has no effect when CMPATL[CMPALOCK]=1
  */
#define CMPCTL_CMPALOAD_Pos  (0)
#define CMPCTL_CMPALOAD_Msk  (0x7U << CMPCTL_CMPALOAD_Pos)

#define CMPCTL_CMPALOAD_LOAD_ON_ZERO              ((0x000U) << CMPCTL_CMPALOAD_Pos)
#define CMPCTL_CMPALOAD_LOAD_ON_PERIOD            ((0x001U) << CMPCTL_CMPALOAD_Pos)
#define CMPCTL_CMPALOAD_LOAD_ON_ZERO_PERIOD       ((0x002U) << CMPCTL_CMPALOAD_Pos)
#define CMPCTL_CMPALOAD_LOAD_ON_SYNC              ((0x003U) << CMPCTL_CMPALOAD_Pos)
#define CMPCTL_CMPALOAD_LOAD_ON_SYNC_ZERO         ((0x004U) << CMPCTL_CMPALOAD_Pos)
#define CMPCTL_CMPALOAD_LOAD_ON_SYNC_PERIOD       ((0x005U) << CMPCTL_CMPALOAD_Pos)
#define CMPCTL_CMPALOAD_LOAD_ON_SYNC_ZERO_PERIOD  ((0x006U) << CMPCTL_CMPALOAD_Pos)
#define CMPCTL_CMPALOAD_LOAD_IMMEDIATE            ((0x007U) << CMPCTL_CMPALOAD_Pos)

#define CMPCTL_CMPALOAD_(x)  (((x) << CMPCTL_CMPALOAD_Pos) & CMPCTL_CMPALOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPALOCK
  *  @access     PWMx->CMPCTL
  *  @brief      CMPA active value lock
  */
#define CMPCTL_CMPALOCK_Pos  (3)
#define CMPCTL_CMPALOCK_Msk  (0x1U << CMPCTL_CMPALOCK_Pos)

#define CMPCTL_CMPALOCK_UNLOCK  ((0x0U) << CMPCTL_CMPALOCK_Pos)
#define CMPCTL_CMPALOCK_LOCK    ((0x1U) << CMPCTL_CMPALOCK_Pos)

#define CMPCTL_CMPALOCK_(x)  (((x) << CMPCTL_CMPALOCK_Pos) & CMPCTL_CMPALOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPBLOAD
  *  @access     PWMx->CMPCTL
  *  @brief      CMPB active value load mode
  *              It has no effect when CMPBTL[CMPBLOCK]=1
  */
#define CMPCTL_CMPBLOAD_Pos  (4)
#define CMPCTL_CMPBLOAD_Msk  (0x7U << CMPCTL_CMPBLOAD_Pos)

#define CMPCTL_CMPBLOAD_LOAD_ON_ZERO              ((0x000U) << CMPCTL_CMPBLOAD_Pos)
#define CMPCTL_CMPBLOAD_LOAD_ON_PERIOD            ((0x001U) << CMPCTL_CMPBLOAD_Pos)
#define CMPCTL_CMPBLOAD_LOAD_ON_ZERO_PERIOD       ((0x002U) << CMPCTL_CMPBLOAD_Pos)
#define CMPCTL_CMPBLOAD_LOAD_ON_SYNC              ((0x003U) << CMPCTL_CMPBLOAD_Pos)
#define CMPCTL_CMPBLOAD_LOAD_ON_SYNC_ZERO         ((0x004U) << CMPCTL_CMPBLOAD_Pos)
#define CMPCTL_CMPBLOAD_LOAD_ON_SYNC_PERIOD       ((0x005U) << CMPCTL_CMPBLOAD_Pos)
#define CMPCTL_CMPBLOAD_LOAD_ON_SYNC_ZERO_PERIOD  ((0x006U) << CMPCTL_CMPBLOAD_Pos)
#define CMPCTL_CMPBLOAD_LOAD_IMMEDIATE            ((0x007U) << CMPCTL_CMPBLOAD_Pos)

#define CMPCTL_CMPBLOAD_(x)  (((x) << CMPCTL_CMPBLOAD_Pos) & CMPCTL_CMPBLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPBLOCK
  *  @access     PWMx->CMPCTL
  *  @brief      CMPB active value lock
  */
#define CMPCTL_CMPBLOCK_Pos  (7)
#define CMPCTL_CMPBLOCK_Msk  (0x1U << CMPCTL_CMPBLOCK_Pos)

#define CMPCTL_CMPBLOCK_UNLOCK  ((0x0U) << CMPCTL_CMPBLOCK_Pos)
#define CMPCTL_CMPBLOCK_LOCK    ((0x1U) << CMPCTL_CMPBLOCK_Pos)

#define CMPCTL_CMPBLOCK_(x)  (((x) << CMPCTL_CMPBLOCK_Pos) & CMPCTL_CMPBLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPCLOAD
  *  @access     PWMx->CMPCTL
  *  @brief      CMPC active value load mode
  *              It has no effect when CMPCTL[CMPCLOCK]=1
  */
#define CMPCTL_CMPCLOAD_Pos  (8)
#define CMPCTL_CMPCLOAD_Msk  (0x7U << CMPCTL_CMPCLOAD_Pos)

#define CMPCTL_CMPCLOAD_LOAD_ON_ZERO              ((0x000U) << CMPCTL_CMPCLOAD_Pos)
#define CMPCTL_CMPCLOAD_LOAD_ON_PERIOD            ((0x001U) << CMPCTL_CMPCLOAD_Pos)
#define CMPCTL_CMPCLOAD_LOAD_ON_ZERO_PERIOD       ((0x002U) << CMPCTL_CMPCLOAD_Pos)
#define CMPCTL_CMPCLOAD_LOAD_ON_SYNC              ((0x003U) << CMPCTL_CMPCLOAD_Pos)
#define CMPCTL_CMPCLOAD_LOAD_ON_SYNC_ZERO         ((0x004U) << CMPCTL_CMPCLOAD_Pos)
#define CMPCTL_CMPCLOAD_LOAD_ON_SYNC_PERIOD       ((0x005U) << CMPCTL_CMPCLOAD_Pos)
#define CMPCTL_CMPCLOAD_LOAD_ON_SYNC_ZERO_PERIOD  ((0x006U) << CMPCTL_CMPCLOAD_Pos)
#define CMPCTL_CMPCLOAD_LOAD_IMMEDIATE            ((0x007U) << CMPCTL_CMPCLOAD_Pos)

#define CMPCTL_CMPCLOAD_(x)  (((x) << CMPCTL_CMPCLOAD_Pos) & CMPCTL_CMPCLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPCLOCK
  *  @access     PWMx->CMPCTL
  *  @brief      CMPC active value lock
  */
#define CMPCTL_CMPCLOCK_Pos  (11)
#define CMPCTL_CMPCLOCK_Msk  (0x1U << CMPCTL_CMPCLOCK_Pos)

#define CMPCTL_CMPCLOCK_UNLOCK  ((0x0U) << CMPCTL_CMPCLOCK_Pos)
#define CMPCTL_CMPCLOCK_LOCK    ((0x1U) << CMPCTL_CMPCLOCK_Pos)

#define CMPCTL_CMPCLOCK_(x)  (((x) << CMPCTL_CMPCLOCK_Pos) & CMPCTL_CMPCLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPDLOAD
  *  @access     PWMx->CMPCTL
  *  @brief      CMPD active value load mode
  *              It has no effect when CMPCTL[CMPDLOCK]=1
  */
#define CMPCTL_CMPDLOAD_Pos  (12)
#define CMPCTL_CMPDLOAD_Msk  (0x7U << CMPCTL_CMPDLOAD_Pos)

#define CMPCTL_CMPDLOAD_LOAD_ON_ZERO              ((0x000U) << CMPCTL_CMPDLOAD_Pos)
#define CMPCTL_CMPDLOAD_LOAD_ON_PERIOD            ((0x001U) << CMPCTL_CMPDLOAD_Pos)
#define CMPCTL_CMPDLOAD_LOAD_ON_ZERO_PERIOD       ((0x002U) << CMPCTL_CMPDLOAD_Pos)
#define CMPCTL_CMPDLOAD_LOAD_ON_SYNC              ((0x003U) << CMPCTL_CMPDLOAD_Pos)
#define CMPCTL_CMPDLOAD_LOAD_ON_SYNC_ZERO         ((0x004U) << CMPCTL_CMPDLOAD_Pos)
#define CMPCTL_CMPDLOAD_LOAD_ON_SYNC_PERIOD       ((0x005U) << CMPCTL_CMPDLOAD_Pos)
#define CMPCTL_CMPDLOAD_LOAD_ON_SYNC_ZERO_PERIOD  ((0x006U) << CMPCTL_CMPDLOAD_Pos)
#define CMPCTL_CMPDLOAD_LOAD_IMMEDIATE            ((0x007U) << CMPCTL_CMPDLOAD_Pos)

#define CMPCTL_CMPDLOAD_(x)  (((x) << CMPCTL_CMPDLOAD_Pos) & CMPCTL_CMPDLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCTL          CMPDLOCK
  *  @access     PWMx->CMPCTL
  *  @brief      CMPD active value lock
  */
#define CMPCTL_CMPDLOCK_Pos  (15)
#define CMPCTL_CMPDLOCK_Msk  (0x1U << CMPCTL_CMPDLOCK_Pos)

#define CMPCTL_CMPDLOCK_UNLOCK  ((0x0U) << CMPCTL_CMPDLOCK_Pos)
#define CMPCTL_CMPDLOCK_LOCK    ((0x1U) << CMPCTL_CMPDLOCK_Pos)

#define CMPCTL_CMPDLOCK_(x)  (((x) << CMPCTL_CMPDLOCK_Pos) & CMPCTL_CMPDLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPA            VAL
  *  @access     PWMx->CMPA
  *  @brief      Comparator A threshold
  */
#define CMPA_VAL_Pos  (0)
#define CMPA_VAL_Msk  (0xFFFFU << CMPA_VAL_Pos)

#define CMPA_VAL_(x)  (((x) << CMPA_VAL_Pos) & CMPA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPAA           VAL
  *  @access     PWMx->CMPAA
  *  @brief      Comparator A threshold active value
  *              A TBCNT=CMPA event will be generated while TBCNT is equal to the threshold value
  */
#define CMPAA_VAL_Pos  (0)
#define CMPAA_VAL_Msk  (0xFFFFU << CMPAA_VAL_Pos)

#define CMPAA_VAL_(x)  (((x) << CMPAA_VAL_Pos) & CMPAA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPB            VAL
  *  @access     PWMx->CMPB
  *  @brief      Comparator B threshold
  */
#define CMPB_VAL_Pos  (0)
#define CMPB_VAL_Msk  (0xFFFFU << CMPB_VAL_Pos)

#define CMPB_VAL_(x)  (((x) << CMPB_VAL_Pos) & CMPB_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPBA           VAL
  *  @access     PWMx->CMPBA
  *  @brief      Comparator B threshold active value
  *              A TBCNT=CMPB event will be generated while TBCNT is equal to the threshold value
  */
#define CMPBA_VAL_Pos  (0)
#define CMPBA_VAL_Msk  (0xFFFFU << CMPBA_VAL_Pos)

#define CMPBA_VAL_(x)  (((x) << CMPBA_VAL_Pos) & CMPBA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPC            VAL
  *  @access     PWMx->CMPC
  *  @brief      Comparator C threshold
  */
#define CMPC_VAL_Pos  (0)
#define CMPC_VAL_Msk  (0xFFFFU << CMPC_VAL_Pos)

#define CMPC_VAL_(x)  (((x) << CMPC_VAL_Pos) & CMPC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPCA           VAL
  *  @access     PWMx->CMPCA
  *  @brief      Comparator C threshold active value
  *              A TBCNT=CMPC event will be generated while TBCNT is equal to the threshold value
  */
#define CMPCA_VAL_Pos  (0)
#define CMPCA_VAL_Msk  (0xFFFFU << CMPCA_VAL_Pos)

#define CMPCA_VAL_(x)  (((x) << CMPCA_VAL_Pos) & CMPCA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPD            VAL
  *  @access     PWMx->CMPD
  *  @brief      Comparator D threshold
  */
#define CMPD_VAL_Pos  (0)
#define CMPD_VAL_Msk  (0xFFFFU << CMPD_VAL_Pos)

#define CMPD_VAL_(x)  (((x) << CMPD_VAL_Pos) & CMPD_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            CMPDA           VAL
  *  @access     PWMx->CMPDA
  *  @brief      Comparator D threshold active value
  *              A TBCNT=CMPD event will be generated while TBCNT is equal to the threshold value
  */
#define CMPDA_VAL_Pos  (0)
#define CMPDA_VAL_Msk  (0xFFFFU << CMPDA_VAL_Pos)

#define CMPDA_VAL_(x)  (((x) << CMPDA_VAL_Pos) & CMPDA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTL           AQCTLALOAD
  *  @access     PWMx->AQCTL
  *  @brief      AQCTLA active value load mode
  *              It has no effect when AQCTL[AQCTLALOCK]=1
  */
#define AQCTL_AQCTLALOAD_Pos  (0)
#define AQCTL_AQCTLALOAD_Msk  (0x7U << AQCTL_AQCTLALOAD_Pos)

#define AQCTL_AQCTLALOAD_LOAD_ON_ZERO              ((0x000U) << AQCTL_AQCTLALOAD_Pos)
#define AQCTL_AQCTLALOAD_LOAD_ON_PERIOD            ((0x001U) << AQCTL_AQCTLALOAD_Pos)
#define AQCTL_AQCTLALOAD_LOAD_ON_ZERO_PERIOD       ((0x002U) << AQCTL_AQCTLALOAD_Pos)
#define AQCTL_AQCTLALOAD_LOAD_ON_SYNC              ((0x003U) << AQCTL_AQCTLALOAD_Pos)
#define AQCTL_AQCTLALOAD_LOAD_ON_SYNC_ZERO         ((0x004U) << AQCTL_AQCTLALOAD_Pos)
#define AQCTL_AQCTLALOAD_LOAD_ON_SYNC_PERIOD       ((0x005U) << AQCTL_AQCTLALOAD_Pos)
#define AQCTL_AQCTLALOAD_LOAD_ON_SYNC_ZERO_PERIOD  ((0x006U) << AQCTL_AQCTLALOAD_Pos)
#define AQCTL_AQCTLALOAD_LOAD_IMMEDIATE            ((0x007U) << AQCTL_AQCTLALOAD_Pos)

#define AQCTL_AQCTLALOAD_(x)  (((x) << AQCTL_AQCTLALOAD_Pos) & AQCTL_AQCTLALOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTL           AQCTLALOCK
  *  @access     PWMx->AQCTL
  *  @brief      AQCTLA active value lock
  */
#define AQCTL_AQCTLALOCK_Pos  (3)
#define AQCTL_AQCTLALOCK_Msk  (0x1U << AQCTL_AQCTLALOCK_Pos)

#define AQCTL_AQCTLALOCK_UNLOCK  ((0x0U) << AQCTL_AQCTLALOCK_Pos)
#define AQCTL_AQCTLALOCK_LOCK    ((0x1U) << AQCTL_AQCTLALOCK_Pos)

#define AQCTL_AQCTLALOCK_(x)  (((x) << AQCTL_AQCTLALOCK_Pos) & AQCTL_AQCTLALOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTL           AQCTLBLOAD
  *  @access     PWMx->AQCTL
  *  @brief      AQCTLB active value load mode
  *              It has no effect when AQCTL[AQCTLBLOCK]=1
  */
#define AQCTL_AQCTLBLOAD_Pos  (4)
#define AQCTL_AQCTLBLOAD_Msk  (0x7U << AQCTL_AQCTLBLOAD_Pos)

#define AQCTL_AQCTLBLOAD_LOAD_ON_ZERO              ((0x000U) << AQCTL_AQCTLBLOAD_Pos)
#define AQCTL_AQCTLBLOAD_LOAD_ON_PERIOD            ((0x001U) << AQCTL_AQCTLBLOAD_Pos)
#define AQCTL_AQCTLBLOAD_LOAD_ON_ZERO_PERIOD       ((0x002U) << AQCTL_AQCTLBLOAD_Pos)
#define AQCTL_AQCTLBLOAD_LOAD_ON_SYNC              ((0x003U) << AQCTL_AQCTLBLOAD_Pos)
#define AQCTL_AQCTLBLOAD_LOAD_ON_SYNC_ZERO         ((0x004U) << AQCTL_AQCTLBLOAD_Pos)
#define AQCTL_AQCTLBLOAD_LOAD_ON_SYNC_PERIOD       ((0x005U) << AQCTL_AQCTLBLOAD_Pos)
#define AQCTL_AQCTLBLOAD_LOAD_ON_SYNC_ZERO_PERIOD  ((0x006U) << AQCTL_AQCTLBLOAD_Pos)
#define AQCTL_AQCTLBLOAD_LOAD_IMMEDIATE            ((0x007U) << AQCTL_AQCTLBLOAD_Pos)

#define AQCTL_AQCTLBLOAD_(x)  (((x) << AQCTL_AQCTLBLOAD_Pos) & AQCTL_AQCTLBLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTL           AQCTLBLOCK
  *  @access     PWMx->AQCTL
  *  @brief      AQCTLB active value lock
  */
#define AQCTL_AQCTLBLOCK_Pos  (7)
#define AQCTL_AQCTLBLOCK_Msk  (0x1U << AQCTL_AQCTLBLOCK_Pos)

#define AQCTL_AQCTLBLOCK_UNLOCK  ((0x0U) << AQCTL_AQCTLBLOCK_Pos)
#define AQCTL_AQCTLBLOCK_LOCK    ((0x1U) << AQCTL_AQCTLBLOCK_Pos)

#define AQCTL_AQCTLBLOCK_(x)  (((x) << AQCTL_AQCTLBLOCK_Pos) & AQCTL_AQCTLBLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTL           T0SEL
  *  @access     PWMx->AQCTL
  *  @brief      T0 event source select
  */
#define AQCTL_T0SEL_Pos  (8)
#define AQCTL_T0SEL_Msk  (0xFU << AQCTL_T0SEL_Pos)

#define AQCTL_T0SEL_DCAEVT0  ((0x0000U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_DCAEVT1  ((0x0001U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_DCBEVT0  ((0x0002U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_DCBEVT1  ((0x0003U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_TZ0      ((0x0004U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_TZ1      ((0x0005U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_TZ2      ((0x0006U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_TZ3      ((0x0007U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_TZ4      ((0x0008U) << AQCTL_T0SEL_Pos)
#define AQCTL_T0SEL_SYNCI    ((0x0009U) << AQCTL_T0SEL_Pos)

#define AQCTL_T0SEL_(x)  (((x) << AQCTL_T0SEL_Pos) & AQCTL_T0SEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTL           T1SEL
  *  @access     PWMx->AQCTL
  *  @brief      T1 event source select
  */
#define AQCTL_T1SEL_Pos  (12)
#define AQCTL_T1SEL_Msk  (0xFU << AQCTL_T1SEL_Pos)

#define AQCTL_T1SEL_DCAEVT0  ((0x0000U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_DCAEVT1  ((0x0001U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_DCBEVT0  ((0x0002U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_DCBEVT1  ((0x0003U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_TZ0      ((0x0004U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_TZ1      ((0x0005U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_TZ2      ((0x0006U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_TZ3      ((0x0007U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_TZ4      ((0x0008U) << AQCTL_T1SEL_Pos)
#define AQCTL_T1SEL_SYNCI    ((0x0009U) << AQCTL_T1SEL_Pos)

#define AQCTL_T1SEL_(x)  (((x) << AQCTL_T1SEL_Pos) & AQCTL_T1SEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          ZRO
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when TBCNT=Zero
  */
#define AQCTLA_ZRO_Pos  (0)
#define AQCTLA_ZRO_Msk  (0x3U << AQCTLA_ZRO_Pos)

#define AQCTLA_ZRO_DO_NOTHING  ((0x00U) << AQCTLA_ZRO_Pos)
#define AQCTLA_ZRO_SET_LOW     ((0x01U) << AQCTLA_ZRO_Pos)
#define AQCTLA_ZRO_SET_HIGH    ((0x02U) << AQCTLA_ZRO_Pos)
#define AQCTLA_ZRO_TOGGLE      ((0x03U) << AQCTLA_ZRO_Pos)

#define AQCTLA_ZRO_(x)  (((x) << AQCTLA_ZRO_Pos) & AQCTLA_ZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          PRD
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when TBCNT=TBPRD
  */
#define AQCTLA_PRD_Pos  (2)
#define AQCTLA_PRD_Msk  (0x3U << AQCTLA_PRD_Pos)

#define AQCTLA_PRD_DO_NOTHING  ((0x00U) << AQCTLA_PRD_Pos)
#define AQCTLA_PRD_SET_LOW     ((0x01U) << AQCTLA_PRD_Pos)
#define AQCTLA_PRD_SET_HIGH    ((0x02U) << AQCTLA_PRD_Pos)
#define AQCTLA_PRD_TOGGLE      ((0x03U) << AQCTLA_PRD_Pos)

#define AQCTLA_PRD_(x)  (((x) << AQCTLA_PRD_Pos) & AQCTLA_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          CAU
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when TBCNT=CMPA and TBCNT is counting up
  */
#define AQCTLA_CAU_Pos  (4)
#define AQCTLA_CAU_Msk  (0x3U << AQCTLA_CAU_Pos)

#define AQCTLA_CAU_DO_NOTHING  ((0x00U) << AQCTLA_CAU_Pos)
#define AQCTLA_CAU_SET_LOW     ((0x01U) << AQCTLA_CAU_Pos)
#define AQCTLA_CAU_SET_HIGH    ((0x02U) << AQCTLA_CAU_Pos)
#define AQCTLA_CAU_TOGGLE      ((0x03U) << AQCTLA_CAU_Pos)

#define AQCTLA_CAU_(x)  (((x) << AQCTLA_CAU_Pos) & AQCTLA_CAU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          CAD
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when TBCNT=CMPA and TBCNT is counting down
  */
#define AQCTLA_CAD_Pos  (6)
#define AQCTLA_CAD_Msk  (0x3U << AQCTLA_CAD_Pos)

#define AQCTLA_CAD_DO_NOTHING  ((0x00U) << AQCTLA_CAD_Pos)
#define AQCTLA_CAD_SET_LOW     ((0x01U) << AQCTLA_CAD_Pos)
#define AQCTLA_CAD_SET_HIGH    ((0x02U) << AQCTLA_CAD_Pos)
#define AQCTLA_CAD_TOGGLE      ((0x03U) << AQCTLA_CAD_Pos)

#define AQCTLA_CAD_(x)  (((x) << AQCTLA_CAD_Pos) & AQCTLA_CAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          CBU
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when TBCNT=CMPB and TBCNT is counting up
  */
#define AQCTLA_CBU_Pos  (8)
#define AQCTLA_CBU_Msk  (0x3U << AQCTLA_CBU_Pos)

#define AQCTLA_CBU_DO_NOTHING  ((0x00U) << AQCTLA_CBU_Pos)
#define AQCTLA_CBU_SET_LOW     ((0x01U) << AQCTLA_CBU_Pos)
#define AQCTLA_CBU_SET_HIGH    ((0x02U) << AQCTLA_CBU_Pos)
#define AQCTLA_CBU_TOGGLE      ((0x03U) << AQCTLA_CBU_Pos)

#define AQCTLA_CBU_(x)  (((x) << AQCTLA_CBU_Pos) & AQCTLA_CBU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          CBD
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when TBCNT=CMPB and TBCNT is counting down
  */
#define AQCTLA_CBD_Pos  (10)
#define AQCTLA_CBD_Msk  (0x3U << AQCTLA_CBD_Pos)

#define AQCTLA_CBD_DO_NOTHING  ((0x00U) << AQCTLA_CBD_Pos)
#define AQCTLA_CBD_SET_LOW     ((0x01U) << AQCTLA_CBD_Pos)
#define AQCTLA_CBD_SET_HIGH    ((0x02U) << AQCTLA_CBD_Pos)
#define AQCTLA_CBD_TOGGLE      ((0x03U) << AQCTLA_CBD_Pos)

#define AQCTLA_CBD_(x)  (((x) << AQCTLA_CBD_Pos) & AQCTLA_CBD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          T0U
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when T0 event and TBCNT is counting up
  */
#define AQCTLA_T0U_Pos  (12)
#define AQCTLA_T0U_Msk  (0x3U << AQCTLA_T0U_Pos)

#define AQCTLA_T0U_DO_NOTHING  ((0x00U) << AQCTLA_T0U_Pos)
#define AQCTLA_T0U_SET_LOW     ((0x01U) << AQCTLA_T0U_Pos)
#define AQCTLA_T0U_SET_HIGH    ((0x02U) << AQCTLA_T0U_Pos)
#define AQCTLA_T0U_TOGGLE      ((0x03U) << AQCTLA_T0U_Pos)

#define AQCTLA_T0U_(x)  (((x) << AQCTLA_T0U_Pos) & AQCTLA_T0U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          T0D
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when T0 event and TBCNT is counting down
  */
#define AQCTLA_T0D_Pos  (14)
#define AQCTLA_T0D_Msk  (0x3U << AQCTLA_T0D_Pos)

#define AQCTLA_T0D_DO_NOTHING  ((0x00U) << AQCTLA_T0D_Pos)
#define AQCTLA_T0D_SET_LOW     ((0x01U) << AQCTLA_T0D_Pos)
#define AQCTLA_T0D_SET_HIGH    ((0x02U) << AQCTLA_T0D_Pos)
#define AQCTLA_T0D_TOGGLE      ((0x03U) << AQCTLA_T0D_Pos)

#define AQCTLA_T0D_(x)  (((x) << AQCTLA_T0D_Pos) & AQCTLA_T0D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          T1U
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when T1 event and TBCNT is counting up
  */
#define AQCTLA_T1U_Pos  (16)
#define AQCTLA_T1U_Msk  (0x3U << AQCTLA_T1U_Pos)

#define AQCTLA_T1U_DO_NOTHING  ((0x00U) << AQCTLA_T1U_Pos)
#define AQCTLA_T1U_SET_LOW     ((0x01U) << AQCTLA_T1U_Pos)
#define AQCTLA_T1U_SET_HIGH    ((0x02U) << AQCTLA_T1U_Pos)
#define AQCTLA_T1U_TOGGLE      ((0x03U) << AQCTLA_T1U_Pos)

#define AQCTLA_T1U_(x)  (((x) << AQCTLA_T1U_Pos) & AQCTLA_T1U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLA          T1D
  *  @access     PWMx->AQCTLA
  *  @brief      Action on output A when T1 event and TBCNT is counting down
  */
#define AQCTLA_T1D_Pos  (18)
#define AQCTLA_T1D_Msk  (0x3U << AQCTLA_T1D_Pos)

#define AQCTLA_T1D_DO_NOTHING  ((0x00U) << AQCTLA_T1D_Pos)
#define AQCTLA_T1D_SET_LOW     ((0x01U) << AQCTLA_T1D_Pos)
#define AQCTLA_T1D_SET_HIGH    ((0x02U) << AQCTLA_T1D_Pos)
#define AQCTLA_T1D_TOGGLE      ((0x03U) << AQCTLA_T1D_Pos)

#define AQCTLA_T1D_(x)  (((x) << AQCTLA_T1D_Pos) & AQCTLA_T1D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         ZRO
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when TBCNT=Zero
  */
#define AQCTLAA_ZRO_Pos  (0)
#define AQCTLAA_ZRO_Msk  (0x3U << AQCTLAA_ZRO_Pos)

#define AQCTLAA_ZRO_DO_NOTHING  ((0x00U) << AQCTLAA_ZRO_Pos)
#define AQCTLAA_ZRO_SET_LOW     ((0x01U) << AQCTLAA_ZRO_Pos)
#define AQCTLAA_ZRO_SET_HIGH    ((0x02U) << AQCTLAA_ZRO_Pos)
#define AQCTLAA_ZRO_TOGGLE      ((0x03U) << AQCTLAA_ZRO_Pos)

#define AQCTLAA_ZRO_(x)  (((x) << AQCTLAA_ZRO_Pos) & AQCTLAA_ZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         PRD
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when TBCNT=TBPRD
  */
#define AQCTLAA_PRD_Pos  (2)
#define AQCTLAA_PRD_Msk  (0x3U << AQCTLAA_PRD_Pos)

#define AQCTLAA_PRD_DO_NOTHING  ((0x00U) << AQCTLAA_PRD_Pos)
#define AQCTLAA_PRD_SET_LOW     ((0x01U) << AQCTLAA_PRD_Pos)
#define AQCTLAA_PRD_SET_HIGH    ((0x02U) << AQCTLAA_PRD_Pos)
#define AQCTLAA_PRD_TOGGLE      ((0x03U) << AQCTLAA_PRD_Pos)

#define AQCTLAA_PRD_(x)  (((x) << AQCTLAA_PRD_Pos) & AQCTLAA_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         CAU
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when TBCNT=CMPA and TBCNT is counting up
  */
#define AQCTLAA_CAU_Pos  (4)
#define AQCTLAA_CAU_Msk  (0x3U << AQCTLAA_CAU_Pos)

#define AQCTLAA_CAU_DO_NOTHING  ((0x00U) << AQCTLAA_CAU_Pos)
#define AQCTLAA_CAU_SET_LOW     ((0x01U) << AQCTLAA_CAU_Pos)
#define AQCTLAA_CAU_SET_HIGH    ((0x02U) << AQCTLAA_CAU_Pos)
#define AQCTLAA_CAU_TOGGLE      ((0x03U) << AQCTLAA_CAU_Pos)

#define AQCTLAA_CAU_(x)  (((x) << AQCTLAA_CAU_Pos) & AQCTLAA_CAU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         CAD
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when TBCNT=CMPA and TBCNT is counting down
  */
#define AQCTLAA_CAD_Pos  (6)
#define AQCTLAA_CAD_Msk  (0x3U << AQCTLAA_CAD_Pos)

#define AQCTLAA_CAD_DO_NOTHING  ((0x00U) << AQCTLAA_CAD_Pos)
#define AQCTLAA_CAD_SET_LOW     ((0x01U) << AQCTLAA_CAD_Pos)
#define AQCTLAA_CAD_SET_HIGH    ((0x02U) << AQCTLAA_CAD_Pos)
#define AQCTLAA_CAD_TOGGLE      ((0x03U) << AQCTLAA_CAD_Pos)

#define AQCTLAA_CAD_(x)  (((x) << AQCTLAA_CAD_Pos) & AQCTLAA_CAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         CBU
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when TBCNT=CMPB and TBCNT is counting up
  */
#define AQCTLAA_CBU_Pos  (8)
#define AQCTLAA_CBU_Msk  (0x3U << AQCTLAA_CBU_Pos)

#define AQCTLAA_CBU_DO_NOTHING  ((0x00U) << AQCTLAA_CBU_Pos)
#define AQCTLAA_CBU_SET_LOW     ((0x01U) << AQCTLAA_CBU_Pos)
#define AQCTLAA_CBU_SET_HIGH    ((0x02U) << AQCTLAA_CBU_Pos)
#define AQCTLAA_CBU_TOGGLE      ((0x03U) << AQCTLAA_CBU_Pos)

#define AQCTLAA_CBU_(x)  (((x) << AQCTLAA_CBU_Pos) & AQCTLAA_CBU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         CBD
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when TBCNT=CMPB and TBCNT is counting down
  */
#define AQCTLAA_CBD_Pos  (10)
#define AQCTLAA_CBD_Msk  (0x3U << AQCTLAA_CBD_Pos)

#define AQCTLAA_CBD_DO_NOTHING  ((0x00U) << AQCTLAA_CBD_Pos)
#define AQCTLAA_CBD_SET_LOW     ((0x01U) << AQCTLAA_CBD_Pos)
#define AQCTLAA_CBD_SET_HIGH    ((0x02U) << AQCTLAA_CBD_Pos)
#define AQCTLAA_CBD_TOGGLE      ((0x03U) << AQCTLAA_CBD_Pos)

#define AQCTLAA_CBD_(x)  (((x) << AQCTLAA_CBD_Pos) & AQCTLAA_CBD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         T0U
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when T0 event and TBCNT is counting up
  */
#define AQCTLAA_T0U_Pos  (12)
#define AQCTLAA_T0U_Msk  (0x3U << AQCTLAA_T0U_Pos)

#define AQCTLAA_T0U_DO_NOTHING  ((0x00U) << AQCTLAA_T0U_Pos)
#define AQCTLAA_T0U_SET_LOW     ((0x01U) << AQCTLAA_T0U_Pos)
#define AQCTLAA_T0U_SET_HIGH    ((0x02U) << AQCTLAA_T0U_Pos)
#define AQCTLAA_T0U_TOGGLE      ((0x03U) << AQCTLAA_T0U_Pos)

#define AQCTLAA_T0U_(x)  (((x) << AQCTLAA_T0U_Pos) & AQCTLAA_T0U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         T0D
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when T0 event and TBCNT is counting down
  */
#define AQCTLAA_T0D_Pos  (14)
#define AQCTLAA_T0D_Msk  (0x3U << AQCTLAA_T0D_Pos)

#define AQCTLAA_T0D_DO_NOTHING  ((0x00U) << AQCTLAA_T0D_Pos)
#define AQCTLAA_T0D_SET_LOW     ((0x01U) << AQCTLAA_T0D_Pos)
#define AQCTLAA_T0D_SET_HIGH    ((0x02U) << AQCTLAA_T0D_Pos)
#define AQCTLAA_T0D_TOGGLE      ((0x03U) << AQCTLAA_T0D_Pos)

#define AQCTLAA_T0D_(x)  (((x) << AQCTLAA_T0D_Pos) & AQCTLAA_T0D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         T1U
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when T1 event and TBCNT is counting up
  */
#define AQCTLAA_T1U_Pos  (16)
#define AQCTLAA_T1U_Msk  (0x3U << AQCTLAA_T1U_Pos)

#define AQCTLAA_T1U_DO_NOTHING  ((0x00U) << AQCTLAA_T1U_Pos)
#define AQCTLAA_T1U_SET_LOW     ((0x01U) << AQCTLAA_T1U_Pos)
#define AQCTLAA_T1U_SET_HIGH    ((0x02U) << AQCTLAA_T1U_Pos)
#define AQCTLAA_T1U_TOGGLE      ((0x03U) << AQCTLAA_T1U_Pos)

#define AQCTLAA_T1U_(x)  (((x) << AQCTLAA_T1U_Pos) & AQCTLAA_T1U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLAA         T1D
  *  @access     PWMx->AQCTLAA
  *  @brief      Action on output A when T1 event and TBCNT is counting down
  */
#define AQCTLAA_T1D_Pos  (18)
#define AQCTLAA_T1D_Msk  (0x3U << AQCTLAA_T1D_Pos)

#define AQCTLAA_T1D_DO_NOTHING  ((0x00U) << AQCTLAA_T1D_Pos)
#define AQCTLAA_T1D_SET_LOW     ((0x01U) << AQCTLAA_T1D_Pos)
#define AQCTLAA_T1D_SET_HIGH    ((0x02U) << AQCTLAA_T1D_Pos)
#define AQCTLAA_T1D_TOGGLE      ((0x03U) << AQCTLAA_T1D_Pos)

#define AQCTLAA_T1D_(x)  (((x) << AQCTLAA_T1D_Pos) & AQCTLAA_T1D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          ZRO
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when TBCNT=Zero
  */
#define AQCTLB_ZRO_Pos  (0)
#define AQCTLB_ZRO_Msk  (0x3U << AQCTLB_ZRO_Pos)

#define AQCTLB_ZRO_DO_NOTHING  ((0x00U) << AQCTLB_ZRO_Pos)
#define AQCTLB_ZRO_SET_LOW     ((0x01U) << AQCTLB_ZRO_Pos)
#define AQCTLB_ZRO_SET_HIGH    ((0x02U) << AQCTLB_ZRO_Pos)
#define AQCTLB_ZRO_TOGGLE      ((0x03U) << AQCTLB_ZRO_Pos)

#define AQCTLB_ZRO_(x)  (((x) << AQCTLB_ZRO_Pos) & AQCTLB_ZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          PRD
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when TBCNT=TBPRD
  */
#define AQCTLB_PRD_Pos  (2)
#define AQCTLB_PRD_Msk  (0x3U << AQCTLB_PRD_Pos)

#define AQCTLB_PRD_DO_NOTHING  ((0x00U) << AQCTLB_PRD_Pos)
#define AQCTLB_PRD_SET_LOW     ((0x01U) << AQCTLB_PRD_Pos)
#define AQCTLB_PRD_SET_HIGH    ((0x02U) << AQCTLB_PRD_Pos)
#define AQCTLB_PRD_TOGGLE      ((0x03U) << AQCTLB_PRD_Pos)

#define AQCTLB_PRD_(x)  (((x) << AQCTLB_PRD_Pos) & AQCTLB_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          CAU
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when TBCNT=CMPA and TBCNT is counting up
  */
#define AQCTLB_CAU_Pos  (4)
#define AQCTLB_CAU_Msk  (0x3U << AQCTLB_CAU_Pos)

#define AQCTLB_CAU_DO_NOTHING  ((0x00U) << AQCTLB_CAU_Pos)
#define AQCTLB_CAU_SET_LOW     ((0x01U) << AQCTLB_CAU_Pos)
#define AQCTLB_CAU_SET_HIGH    ((0x02U) << AQCTLB_CAU_Pos)
#define AQCTLB_CAU_TOGGLE      ((0x03U) << AQCTLB_CAU_Pos)

#define AQCTLB_CAU_(x)  (((x) << AQCTLB_CAU_Pos) & AQCTLB_CAU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          CAD
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when TBCNT=CMPA and TBCNT is counting down
  */
#define AQCTLB_CAD_Pos  (6)
#define AQCTLB_CAD_Msk  (0x3U << AQCTLB_CAD_Pos)

#define AQCTLB_CAD_DO_NOTHING  ((0x00U) << AQCTLB_CAD_Pos)
#define AQCTLB_CAD_SET_LOW     ((0x01U) << AQCTLB_CAD_Pos)
#define AQCTLB_CAD_SET_HIGH    ((0x02U) << AQCTLB_CAD_Pos)
#define AQCTLB_CAD_TOGGLE      ((0x03U) << AQCTLB_CAD_Pos)

#define AQCTLB_CAD_(x)  (((x) << AQCTLB_CAD_Pos) & AQCTLB_CAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          CBU
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when TBCNT=CMPB and TBCNT is counting up
  */
#define AQCTLB_CBU_Pos  (8)
#define AQCTLB_CBU_Msk  (0x3U << AQCTLB_CBU_Pos)

#define AQCTLB_CBU_DO_NOTHING  ((0x00U) << AQCTLB_CBU_Pos)
#define AQCTLB_CBU_SET_LOW     ((0x01U) << AQCTLB_CBU_Pos)
#define AQCTLB_CBU_SET_HIGH    ((0x02U) << AQCTLB_CBU_Pos)
#define AQCTLB_CBU_TOGGLE      ((0x03U) << AQCTLB_CBU_Pos)

#define AQCTLB_CBU_(x)  (((x) << AQCTLB_CBU_Pos) & AQCTLB_CBU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          CBD
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when TBCNT=CMPA and TBCNT is counting down
  */
#define AQCTLB_CBD_Pos  (10)
#define AQCTLB_CBD_Msk  (0x3U << AQCTLB_CBD_Pos)

#define AQCTLB_CBD_DO_NOTHING  ((0x00U) << AQCTLB_CBD_Pos)
#define AQCTLB_CBD_SET_LOW     ((0x01U) << AQCTLB_CBD_Pos)
#define AQCTLB_CBD_SET_HIGH    ((0x02U) << AQCTLB_CBD_Pos)
#define AQCTLB_CBD_TOGGLE      ((0x03U) << AQCTLB_CBD_Pos)

#define AQCTLB_CBD_(x)  (((x) << AQCTLB_CBD_Pos) & AQCTLB_CBD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          T0U
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when T0 event and TBCNT is counting up
  */
#define AQCTLB_T0U_Pos  (12)
#define AQCTLB_T0U_Msk  (0x3U << AQCTLB_T0U_Pos)

#define AQCTLB_T0U_DO_NOTHING  ((0x00U) << AQCTLB_T0U_Pos)
#define AQCTLB_T0U_SET_LOW     ((0x01U) << AQCTLB_T0U_Pos)
#define AQCTLB_T0U_SET_HIGH    ((0x02U) << AQCTLB_T0U_Pos)
#define AQCTLB_T0U_TOGGLE      ((0x03U) << AQCTLB_T0U_Pos)

#define AQCTLB_T0U_(x)  (((x) << AQCTLB_T0U_Pos) & AQCTLB_T0U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          T0D
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when T0 event and TBCNT is counting down
  */
#define AQCTLB_T0D_Pos  (14)
#define AQCTLB_T0D_Msk  (0x3U << AQCTLB_T0D_Pos)

#define AQCTLB_T0D_DO_NOTHING  ((0x00U) << AQCTLB_T0D_Pos)
#define AQCTLB_T0D_SET_LOW     ((0x01U) << AQCTLB_T0D_Pos)
#define AQCTLB_T0D_SET_HIGH    ((0x02U) << AQCTLB_T0D_Pos)
#define AQCTLB_T0D_TOGGLE      ((0x03U) << AQCTLB_T0D_Pos)

#define AQCTLB_T0D_(x)  (((x) << AQCTLB_T0D_Pos) & AQCTLB_T0D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          T1U
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when T1 event and TBCNT is counting up
  */
#define AQCTLB_T1U_Pos  (16)
#define AQCTLB_T1U_Msk  (0x3U << AQCTLB_T1U_Pos)

#define AQCTLB_T1U_DO_NOTHING  ((0x00U) << AQCTLB_T1U_Pos)
#define AQCTLB_T1U_SET_LOW     ((0x01U) << AQCTLB_T1U_Pos)
#define AQCTLB_T1U_SET_HIGH    ((0x02U) << AQCTLB_T1U_Pos)
#define AQCTLB_T1U_TOGGLE      ((0x03U) << AQCTLB_T1U_Pos)

#define AQCTLB_T1U_(x)  (((x) << AQCTLB_T1U_Pos) & AQCTLB_T1U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLB          T1D
  *  @access     PWMx->AQCTLB
  *  @brief      Action on output B when T1 event and TBCNT is counting down
  */
#define AQCTLB_T1D_Pos  (18)
#define AQCTLB_T1D_Msk  (0x3U << AQCTLB_T1D_Pos)

#define AQCTLB_T1D_DO_NOTHING  ((0x00U) << AQCTLB_T1D_Pos)
#define AQCTLB_T1D_SET_LOW     ((0x01U) << AQCTLB_T1D_Pos)
#define AQCTLB_T1D_SET_HIGH    ((0x02U) << AQCTLB_T1D_Pos)
#define AQCTLB_T1D_TOGGLE      ((0x03U) << AQCTLB_T1D_Pos)

#define AQCTLB_T1D_(x)  (((x) << AQCTLB_T1D_Pos) & AQCTLB_T1D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         ZRO
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when TBCNT=Zero
  */
#define AQCTLBA_ZRO_Pos  (0)
#define AQCTLBA_ZRO_Msk  (0x3U << AQCTLBA_ZRO_Pos)

#define AQCTLBA_ZRO_DO_NOTHING  ((0x00U) << AQCTLBA_ZRO_Pos)
#define AQCTLBA_ZRO_SET_LOW     ((0x01U) << AQCTLBA_ZRO_Pos)
#define AQCTLBA_ZRO_SET_HIGH    ((0x02U) << AQCTLBA_ZRO_Pos)
#define AQCTLBA_ZRO_TOGGLE      ((0x03U) << AQCTLBA_ZRO_Pos)

#define AQCTLBA_ZRO_(x)  (((x) << AQCTLBA_ZRO_Pos) & AQCTLBA_ZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         PRD
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when TBCNT=TBPRD
  */
#define AQCTLBA_PRD_Pos  (2)
#define AQCTLBA_PRD_Msk  (0x3U << AQCTLBA_PRD_Pos)

#define AQCTLBA_PRD_DO_NOTHING  ((0x00U) << AQCTLBA_PRD_Pos)
#define AQCTLBA_PRD_SET_LOW     ((0x01U) << AQCTLBA_PRD_Pos)
#define AQCTLBA_PRD_SET_HIGH    ((0x02U) << AQCTLBA_PRD_Pos)
#define AQCTLBA_PRD_TOGGLE      ((0x03U) << AQCTLBA_PRD_Pos)

#define AQCTLBA_PRD_(x)  (((x) << AQCTLBA_PRD_Pos) & AQCTLBA_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         CAU
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when TBCNT=CMPA and TBCNT is counting up
  */
#define AQCTLBA_CAU_Pos  (4)
#define AQCTLBA_CAU_Msk  (0x3U << AQCTLBA_CAU_Pos)

#define AQCTLBA_CAU_DO_NOTHING  ((0x00U) << AQCTLBA_CAU_Pos)
#define AQCTLBA_CAU_SET_LOW     ((0x01U) << AQCTLBA_CAU_Pos)
#define AQCTLBA_CAU_SET_HIGH    ((0x02U) << AQCTLBA_CAU_Pos)
#define AQCTLBA_CAU_TOGGLE      ((0x03U) << AQCTLBA_CAU_Pos)

#define AQCTLBA_CAU_(x)  (((x) << AQCTLBA_CAU_Pos) & AQCTLBA_CAU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         CAD
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when TBCNT=CMPA and TBCNT is counting down
  */
#define AQCTLBA_CAD_Pos  (6)
#define AQCTLBA_CAD_Msk  (0x3U << AQCTLBA_CAD_Pos)

#define AQCTLBA_CAD_DO_NOTHING  ((0x00U) << AQCTLBA_CAD_Pos)
#define AQCTLBA_CAD_SET_LOW     ((0x01U) << AQCTLBA_CAD_Pos)
#define AQCTLBA_CAD_SET_HIGH    ((0x02U) << AQCTLBA_CAD_Pos)
#define AQCTLBA_CAD_TOGGLE      ((0x03U) << AQCTLBA_CAD_Pos)

#define AQCTLBA_CAD_(x)  (((x) << AQCTLBA_CAD_Pos) & AQCTLBA_CAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         CBU
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when TBCNT=CMPB and TBCNT is counting up
  */
#define AQCTLBA_CBU_Pos  (8)
#define AQCTLBA_CBU_Msk  (0x3U << AQCTLBA_CBU_Pos)

#define AQCTLBA_CBU_DO_NOTHING  ((0x00U) << AQCTLBA_CBU_Pos)
#define AQCTLBA_CBU_SET_LOW     ((0x01U) << AQCTLBA_CBU_Pos)
#define AQCTLBA_CBU_SET_HIGH    ((0x02U) << AQCTLBA_CBU_Pos)
#define AQCTLBA_CBU_TOGGLE      ((0x03U) << AQCTLBA_CBU_Pos)

#define AQCTLBA_CBU_(x)  (((x) << AQCTLBA_CBU_Pos) & AQCTLBA_CBU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         CBD
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when TBCNT=CMPA and TBCNT is counting down
  */
#define AQCTLBA_CBD_Pos  (10)
#define AQCTLBA_CBD_Msk  (0x3U << AQCTLBA_CBD_Pos)

#define AQCTLBA_CBD_DO_NOTHING  ((0x00U) << AQCTLBA_CBD_Pos)
#define AQCTLBA_CBD_SET_LOW     ((0x01U) << AQCTLBA_CBD_Pos)
#define AQCTLBA_CBD_SET_HIGH    ((0x02U) << AQCTLBA_CBD_Pos)
#define AQCTLBA_CBD_TOGGLE      ((0x03U) << AQCTLBA_CBD_Pos)

#define AQCTLBA_CBD_(x)  (((x) << AQCTLBA_CBD_Pos) & AQCTLBA_CBD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         T0U
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when T0 event and TBCNT is counting up
  */
#define AQCTLBA_T0U_Pos  (12)
#define AQCTLBA_T0U_Msk  (0x3U << AQCTLBA_T0U_Pos)

#define AQCTLBA_T0U_DO_NOTHING  ((0x00U) << AQCTLBA_T0U_Pos)
#define AQCTLBA_T0U_SET_LOW     ((0x01U) << AQCTLBA_T0U_Pos)
#define AQCTLBA_T0U_SET_HIGH    ((0x02U) << AQCTLBA_T0U_Pos)
#define AQCTLBA_T0U_TOGGLE      ((0x03U) << AQCTLBA_T0U_Pos)

#define AQCTLBA_T0U_(x)  (((x) << AQCTLBA_T0U_Pos) & AQCTLBA_T0U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         T0D
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when T0 event and TBCNT is counting down
  */
#define AQCTLBA_T0D_Pos  (14)
#define AQCTLBA_T0D_Msk  (0x3U << AQCTLBA_T0D_Pos)

#define AQCTLBA_T0D_DO_NOTHING  ((0x00U) << AQCTLBA_T0D_Pos)
#define AQCTLBA_T0D_SET_LOW     ((0x01U) << AQCTLBA_T0D_Pos)
#define AQCTLBA_T0D_SET_HIGH    ((0x02U) << AQCTLBA_T0D_Pos)
#define AQCTLBA_T0D_TOGGLE      ((0x03U) << AQCTLBA_T0D_Pos)

#define AQCTLBA_T0D_(x)  (((x) << AQCTLBA_T0D_Pos) & AQCTLBA_T0D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         T1U
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when T1 event and TBCNT is counting up
  */
#define AQCTLBA_T1U_Pos  (16)
#define AQCTLBA_T1U_Msk  (0x3U << AQCTLBA_T1U_Pos)

#define AQCTLBA_T1U_DO_NOTHING  ((0x00U) << AQCTLBA_T1U_Pos)
#define AQCTLBA_T1U_SET_LOW     ((0x01U) << AQCTLBA_T1U_Pos)
#define AQCTLBA_T1U_SET_HIGH    ((0x02U) << AQCTLBA_T1U_Pos)
#define AQCTLBA_T1U_TOGGLE      ((0x03U) << AQCTLBA_T1U_Pos)

#define AQCTLBA_T1U_(x)  (((x) << AQCTLBA_T1U_Pos) & AQCTLBA_T1U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCTLBA         T1D
  *  @access     PWMx->AQCTLBA
  *  @brief      Action on output B when T1 event and TBCNT is counting down
  */
#define AQCTLBA_T1D_Pos  (18)
#define AQCTLBA_T1D_Msk  (0x3U << AQCTLBA_T1D_Pos)

#define AQCTLBA_T1D_DO_NOTHING  ((0x00U) << AQCTLBA_T1D_Pos)
#define AQCTLBA_T1D_SET_LOW     ((0x01U) << AQCTLBA_T1D_Pos)
#define AQCTLBA_T1D_SET_HIGH    ((0x02U) << AQCTLBA_T1D_Pos)
#define AQCTLBA_T1D_TOGGLE      ((0x03U) << AQCTLBA_T1D_Pos)

#define AQCTLBA_T1D_(x)  (((x) << AQCTLBA_T1D_Pos) & AQCTLBA_T1D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQSFRC          ACTSFA
  *  @access     PWMx->AQSFRC
  *  @brief      Action when one-time software force A is invoked
  */
#define AQSFRC_ACTSFA_Pos  (0)
#define AQSFRC_ACTSFA_Msk  (0x3U << AQSFRC_ACTSFA_Pos)

#define AQSFRC_ACTSFA_DO_NOTHING  ((0x00U) << AQSFRC_ACTSFA_Pos)
#define AQSFRC_ACTSFA_SET_LOW     ((0x01U) << AQSFRC_ACTSFA_Pos)
#define AQSFRC_ACTSFA_SET_HIGH    ((0x02U) << AQSFRC_ACTSFA_Pos)
#define AQSFRC_ACTSFA_TOGGLE      ((0x03U) << AQSFRC_ACTSFA_Pos)

#define AQSFRC_ACTSFA_(x)  (((x) << AQSFRC_ACTSFA_Pos) & AQSFRC_ACTSFA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQSFRC          ACTSFB
  *  @access     PWMx->AQSFRC
  *  @brief      Action when one-time software force B is invoked
  */
#define AQSFRC_ACTSFB_Pos  (2)
#define AQSFRC_ACTSFB_Msk  (0x3U << AQSFRC_ACTSFB_Pos)

#define AQSFRC_ACTSFB_DO_NOTHING  ((0x00U) << AQSFRC_ACTSFB_Pos)
#define AQSFRC_ACTSFB_SET_LOW     ((0x01U) << AQSFRC_ACTSFB_Pos)
#define AQSFRC_ACTSFB_SET_HIGH    ((0x02U) << AQSFRC_ACTSFB_Pos)
#define AQSFRC_ACTSFB_TOGGLE      ((0x03U) << AQSFRC_ACTSFB_Pos)

#define AQSFRC_ACTSFB_(x)  (((x) << AQSFRC_ACTSFB_Pos) & AQSFRC_ACTSFB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQSFRC          CSFLOAD
  *  @access     PWMx->AQSFRC
  *  @brief      Options to load continuous software force register (AQCSFRC) active value from
  *              shadow register
  */
#define AQSFRC_CSFLOAD_Pos  (4)
#define AQSFRC_CSFLOAD_Msk  (0x3U << AQSFRC_CSFLOAD_Pos)

#define AQSFRC_CSFLOAD_LOAD_ON_ZERO         ((0x00U) << AQSFRC_CSFLOAD_Pos)
#define AQSFRC_CSFLOAD_LOAD_ON_PERIOD       ((0x01U) << AQSFRC_CSFLOAD_Pos)
#define AQSFRC_CSFLOAD_LOAD_ON_ZERO_PERIOD  ((0x02U) << AQSFRC_CSFLOAD_Pos)
#define AQSFRC_CSFLOAD_LOAD_IMMEDIATE       ((0x03U) << AQSFRC_CSFLOAD_Pos)

#define AQSFRC_CSFLOAD_(x)  (((x) << AQSFRC_CSFLOAD_Pos) & AQSFRC_CSFLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQSFRC          OTSFRC
  *  @access     PWMx->AQSFRC
  *  @brief      One-time software forced event on output
  */
#define AQSFRC_OTSFRC_Pos  (8)
#define AQSFRC_OTSFRC_Msk  (0x3U << AQSFRC_OTSFRC_Pos)

#define AQSFRC_OTSFRC_NO_EFFECT      ((0x00U) << AQSFRC_OTSFRC_Pos)
#define AQSFRC_OTSFRC_FORCE_A        ((0x01U) << AQSFRC_OTSFRC_Pos)
#define AQSFRC_OTSFRC_FORCE_B        ((0x02U) << AQSFRC_OTSFRC_Pos)
#define AQSFRC_OTSFRC_FORCE_A_AND_B  ((0x03U) << AQSFRC_OTSFRC_Pos)

#define AQSFRC_OTSFRC_(x)  (((x) << AQSFRC_OTSFRC_Pos) & AQSFRC_OTSFRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCSFRC         CSFA
  *  @access     PWMx->AQCSFRC
  *  @brief      Continuous software force on output A
  */
#define AQCSFRC_CSFA_Pos  (0)
#define AQCSFRC_CSFA_Msk  (0x3U << AQCSFRC_CSFA_Pos)

#define AQCSFRC_CSFA_DISABLE                ((0x00U) << AQCSFRC_CSFA_Pos)
#define AQCSFRC_CSFA_FORCE_CONTINUOUS_LOW   ((0x01U) << AQCSFRC_CSFA_Pos)
#define AQCSFRC_CSFA_FORCE_CONTINUOUS_HIGH  ((0x02U) << AQCSFRC_CSFA_Pos)
#define AQCSFRC_CSFA_NO_EFFECT              ((0x03U) << AQCSFRC_CSFA_Pos)

#define AQCSFRC_CSFA_(x)  (((x) << AQCSFRC_CSFA_Pos) & AQCSFRC_CSFA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCSFRC         CSFB
  *  @access     PWMx->AQCSFRC
  *  @brief      Continuous software force on output B
  */
#define AQCSFRC_CSFB_Pos  (8)
#define AQCSFRC_CSFB_Msk  (0x3U << AQCSFRC_CSFB_Pos)

#define AQCSFRC_CSFB_DISABLE                ((0x00U) << AQCSFRC_CSFB_Pos)
#define AQCSFRC_CSFB_FORCE_CONTINUOUS_LOW   ((0x01U) << AQCSFRC_CSFB_Pos)
#define AQCSFRC_CSFB_FORCE_CONTINUOUS_HIGH  ((0x02U) << AQCSFRC_CSFB_Pos)
#define AQCSFRC_CSFB_NO_EFFECT              ((0x03U) << AQCSFRC_CSFB_Pos)

#define AQCSFRC_CSFB_(x)  (((x) << AQCSFRC_CSFB_Pos) & AQCSFRC_CSFB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCSFRCA        CSFA
  *  @access     PWMx->AQCSFRCA
  *  @brief      Continuous software force on output A
  */
#define AQCSFRCA_CSFA_Pos  (0)
#define AQCSFRCA_CSFA_Msk  (0x3U << AQCSFRCA_CSFA_Pos)

#define AQCSFRCA_CSFA_DISABLE                ((0x00U) << AQCSFRCA_CSFA_Pos)
#define AQCSFRCA_CSFA_FORCE_CONTINUOUS_LOW   ((0x01U) << AQCSFRCA_CSFA_Pos)
#define AQCSFRCA_CSFA_FORCE_CONTINUOUS_HIGH  ((0x02U) << AQCSFRCA_CSFA_Pos)
#define AQCSFRCA_CSFA_NO_EFFECT              ((0x03U) << AQCSFRCA_CSFA_Pos)

#define AQCSFRCA_CSFA_(x)  (((x) << AQCSFRCA_CSFA_Pos) & AQCSFRCA_CSFA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            AQCSFRCA        CSFB
  *  @access     PWMx->AQCSFRCA
  *  @brief      Continuous software force on output B
  */
#define AQCSFRCA_CSFB_Pos  (8)
#define AQCSFRCA_CSFB_Msk  (0x3U << AQCSFRCA_CSFB_Pos)

#define AQCSFRCA_CSFB_DISABLE                ((0x00U) << AQCSFRCA_CSFB_Pos)
#define AQCSFRCA_CSFB_FORCE_CONTINUOUS_LOW   ((0x01U) << AQCSFRCA_CSFB_Pos)
#define AQCSFRCA_CSFB_FORCE_CONTINUOUS_HIGH  ((0x02U) << AQCSFRCA_CSFB_Pos)
#define AQCSFRCA_CSFB_NO_EFFECT              ((0x03U) << AQCSFRCA_CSFB_Pos)

#define AQCSFRCA_CSFB_(x)  (((x) << AQCSFRCA_CSFB_Pos) & AQCSFRCA_CSFB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           REDEN
  *  @access     PWMx->DBCTL
  *  @brief      Rising-edge delay enable
  */
#define DBCTL_REDEN_Pos  (0)
#define DBCTL_REDEN_Msk  (0x1U << DBCTL_REDEN_Pos)

#define DBCTL_REDEN_DISABLE  ((0x0U) << DBCTL_REDEN_Pos)
#define DBCTL_REDEN_ENABLE   ((0x1U) << DBCTL_REDEN_Pos)

#define DBCTL_REDEN_(x)  (((x) << DBCTL_REDEN_Pos) & DBCTL_REDEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           FEDEN
  *  @access     PWMx->DBCTL
  *  @brief      Falling-edge delay enable
  */
#define DBCTL_FEDEN_Pos  (1)
#define DBCTL_FEDEN_Msk  (0x1U << DBCTL_FEDEN_Pos)

#define DBCTL_FEDEN_DISABLE  ((0x0U) << DBCTL_FEDEN_Pos)
#define DBCTL_FEDEN_ENABLE   ((0x1U) << DBCTL_FEDEN_Pos)

#define DBCTL_FEDEN_(x)  (((x) << DBCTL_FEDEN_Pos) & DBCTL_FEDEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           REDSRC
  *  @access     PWMx->DBCTL
  *  @brief      Rising-edge delay source
  */
#define DBCTL_REDSRC_Pos  (2)
#define DBCTL_REDSRC_Msk  (0x1U << DBCTL_REDSRC_Pos)

#define DBCTL_REDSRC_FROM_A  ((0x0U) << DBCTL_REDSRC_Pos)
#define DBCTL_REDSRC_FROM_B  ((0x1U) << DBCTL_REDSRC_Pos)

#define DBCTL_REDSRC_(x)  (((x) << DBCTL_REDSRC_Pos) & DBCTL_REDSRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           FEDSRC
  *  @access     PWMx->DBCTL
  *  @brief      Falling-edge delay source
  */
#define DBCTL_FEDSRC_Pos  (3)
#define DBCTL_FEDSRC_Msk  (0x1U << DBCTL_FEDSRC_Pos)

#define DBCTL_FEDSRC_FROM_A  ((0x0U) << DBCTL_FEDSRC_Pos)
#define DBCTL_FEDSRC_FROM_B  ((0x1U) << DBCTL_FEDSRC_Pos)

#define DBCTL_FEDSRC_(x)  (((x) << DBCTL_FEDSRC_Pos) & DBCTL_FEDSRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           REDPOL
  *  @access     PWMx->DBCTL
  *  @brief      Rising-edge delay output polarity
  */
#define DBCTL_REDPOL_Pos  (4)
#define DBCTL_REDPOL_Msk  (0x1U << DBCTL_REDPOL_Pos)

#define DBCTL_REDPOL_ACTIVE_LOW   ((0x0U) << DBCTL_REDPOL_Pos)
#define DBCTL_REDPOL_ACTIVE_HIGH  ((0x1U) << DBCTL_REDPOL_Pos)

#define DBCTL_REDPOL_(x)  (((x) << DBCTL_REDPOL_Pos) & DBCTL_REDPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           FEDPOL
  *  @access     PWMx->DBCTL
  *  @brief      Falling-edge delay output polarity
  */
#define DBCTL_FEDPOL_Pos  (5)
#define DBCTL_FEDPOL_Msk  (0x1U << DBCTL_FEDPOL_Pos)

#define DBCTL_FEDPOL_ACTIVE_LOW   ((0x0U) << DBCTL_FEDPOL_Pos)
#define DBCTL_FEDPOL_ACTIVE_HIGH  ((0x1U) << DBCTL_FEDPOL_Pos)

#define DBCTL_FEDPOL_(x)  (((x) << DBCTL_FEDPOL_Pos) & DBCTL_FEDPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           OUTASRC
  *  @access     PWMx->DBCTL
  *  @brief      Output A source
  */
#define DBCTL_OUTASRC_Pos  (6)
#define DBCTL_OUTASRC_Msk  (0x1U << DBCTL_OUTASRC_Pos)

#define DBCTL_OUTASRC_FALLING_EDGE  ((0x0U) << DBCTL_OUTASRC_Pos)
#define DBCTL_OUTASRC_RISING_EDGE   ((0x1U) << DBCTL_OUTASRC_Pos)

#define DBCTL_OUTASRC_(x)  (((x) << DBCTL_OUTASRC_Pos) & DBCTL_OUTASRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           OUTBSRC
  *  @access     PWMx->DBCTL
  *  @brief      Output B source
  */
#define DBCTL_OUTBSRC_Pos  (7)
#define DBCTL_OUTBSRC_Msk  (0x1U << DBCTL_OUTBSRC_Pos)

#define DBCTL_OUTBSRC_FALLING_EDGE  ((0x0U) << DBCTL_OUTBSRC_Pos)
#define DBCTL_OUTBSRC_RISING_EDGE   ((0x1U) << DBCTL_OUTBSRC_Pos)

#define DBCTL_OUTBSRC_(x)  (((x) << DBCTL_OUTBSRC_Pos) & DBCTL_OUTBSRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           DUALEDGE
  *  @access     PWMx->DBCTL
  *  @brief      Dual-edge delay mode
  */
#define DBCTL_DUALEDGE_Pos  (8)
#define DBCTL_DUALEDGE_Msk  (0x1U << DBCTL_DUALEDGE_Pos)

#define DBCTL_DUALEDGE_DISABLE  ((0x0U) << DBCTL_DUALEDGE_Pos)
#define DBCTL_DUALEDGE_ENABLE   ((0x1U) << DBCTL_DUALEDGE_Pos)

#define DBCTL_DUALEDGE_(x)  (((x) << DBCTL_DUALEDGE_Pos) & DBCTL_DUALEDGE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           HALFCYCLE
  *  @access     PWMx->DBCTL
  *  @brief      Half cycle clocking enable
  */
#define DBCTL_HALFCYCLE_Pos  (9)
#define DBCTL_HALFCYCLE_Msk  (0x1U << DBCTL_HALFCYCLE_Pos)

#define DBCTL_HALFCYCLE_DISABLE  ((0x0U) << DBCTL_HALFCYCLE_Pos)
#define DBCTL_HALFCYCLE_ENABLE   ((0x1U) << DBCTL_HALFCYCLE_Pos)

#define DBCTL_HALFCYCLE_(x)  (((x) << DBCTL_HALFCYCLE_Pos) & DBCTL_HALFCYCLE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           CTLWE
  *  @access     PWMx->DBCTL
  *  @brief      10 LSBs of the dead-band control write enable
  *              In order to write the 10 LSBs, this bit need to be write 1 simultaneously
  */
#define DBCTL_CTLWE_Pos  (10)
#define DBCTL_CTLWE_Msk  (0x1U << DBCTL_CTLWE_Pos)

#define DBCTL_CTLWE_NO_EFFECT  ((0x0U) << DBCTL_CTLWE_Pos)
#define DBCTL_CTLWE_ENABLE     ((0x1U) << DBCTL_CTLWE_Pos)

#define DBCTL_CTLWE_(x)  (((x) << DBCTL_CTLWE_Pos) & DBCTL_CTLWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           DBCTLLOAD
  *  @access     PWMx->DBCTL
  *  @brief      DBCTL[9:0] active value load mode
  *              It has no effect when DBCTL[DBCTLLOCK]=1
  */
#define DBCTL_DBCTLLOAD_Pos  (16)
#define DBCTL_DBCTLLOAD_Msk  (0x3U << DBCTL_DBCTLLOAD_Pos)

#define DBCTL_DBCTLLOAD_LOAD_ON_ZERO         ((0x00U) << DBCTL_DBCTLLOAD_Pos)
#define DBCTL_DBCTLLOAD_LOAD_ON_PERIOD       ((0x01U) << DBCTL_DBCTLLOAD_Pos)
#define DBCTL_DBCTLLOAD_LOAD_ON_ZERO_PERIOD  ((0x02U) << DBCTL_DBCTLLOAD_Pos)
#define DBCTL_DBCTLLOAD_LOAD_IMMEDIATE       ((0x03U) << DBCTL_DBCTLLOAD_Pos)

#define DBCTL_DBCTLLOAD_(x)  (((x) << DBCTL_DBCTLLOAD_Pos) & DBCTL_DBCTLLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           DBCTLLOCK
  *  @access     PWMx->DBCTL
  *  @brief      DBCTL[9:0] active value lock
  */
#define DBCTL_DBCTLLOCK_Pos  (18)
#define DBCTL_DBCTLLOCK_Msk  (0x1U << DBCTL_DBCTLLOCK_Pos)

#define DBCTL_DBCTLLOCK_UNLOCK  ((0x0U) << DBCTL_DBCTLLOCK_Pos)
#define DBCTL_DBCTLLOCK_LOCK    ((0x1U) << DBCTL_DBCTLLOCK_Pos)

#define DBCTL_DBCTLLOCK_(x)  (((x) << DBCTL_DBCTLLOCK_Pos) & DBCTL_DBCTLLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           DBREDLOAD
  *  @access     PWMx->DBCTL
  *  @brief      DBRED active value load mode
  *              It has no effect when DBCTL[DBFEDLOCK]=1
  */
#define DBCTL_DBREDLOAD_Pos  (20)
#define DBCTL_DBREDLOAD_Msk  (0x3U << DBCTL_DBREDLOAD_Pos)

#define DBCTL_DBREDLOAD_LOAD_ON_ZERO         ((0x00U) << DBCTL_DBREDLOAD_Pos)
#define DBCTL_DBREDLOAD_LOAD_ON_PERIOD       ((0x01U) << DBCTL_DBREDLOAD_Pos)
#define DBCTL_DBREDLOAD_LOAD_ON_ZERO_PERIOD  ((0x02U) << DBCTL_DBREDLOAD_Pos)
#define DBCTL_DBREDLOAD_LOAD_IMMEDIATE       ((0x03U) << DBCTL_DBREDLOAD_Pos)

#define DBCTL_DBREDLOAD_(x)  (((x) << DBCTL_DBREDLOAD_Pos) & DBCTL_DBREDLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           DBREDLOCK
  *  @access     PWMx->DBCTL
  *  @brief      DBRED active value lock
  */
#define DBCTL_DBREDLOCK_Pos  (22)
#define DBCTL_DBREDLOCK_Msk  (0x1U << DBCTL_DBREDLOCK_Pos)

#define DBCTL_DBREDLOCK_UNLOCK  ((0x0U) << DBCTL_DBREDLOCK_Pos)
#define DBCTL_DBREDLOCK_LOCK    ((0x1U) << DBCTL_DBREDLOCK_Pos)

#define DBCTL_DBREDLOCK_(x)  (((x) << DBCTL_DBREDLOCK_Pos) & DBCTL_DBREDLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           DBFEDLOAD
  *  @access     PWMx->DBCTL
  *  @brief      DBFED active value load mode
  *              It has no effect when DBCTL[DBFEDLOCK]=1
  */
#define DBCTL_DBFEDLOAD_Pos  (24)
#define DBCTL_DBFEDLOAD_Msk  (0x3U << DBCTL_DBFEDLOAD_Pos)

#define DBCTL_DBFEDLOAD_LOAD_ON_ZERO         ((0x00U) << DBCTL_DBFEDLOAD_Pos)
#define DBCTL_DBFEDLOAD_LOAD_ON_PERIOD       ((0x01U) << DBCTL_DBFEDLOAD_Pos)
#define DBCTL_DBFEDLOAD_LOAD_ON_ZERO_PERIOD  ((0x02U) << DBCTL_DBFEDLOAD_Pos)
#define DBCTL_DBFEDLOAD_LOAD_IMMEDIATE       ((0x03U) << DBCTL_DBFEDLOAD_Pos)

#define DBCTL_DBFEDLOAD_(x)  (((x) << DBCTL_DBFEDLOAD_Pos) & DBCTL_DBFEDLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTL           DBFEDLOCK
  *  @access     PWMx->DBCTL
  *  @brief      DBFED active value lock
  */
#define DBCTL_DBFEDLOCK_Pos  (26)
#define DBCTL_DBFEDLOCK_Msk  (0x1U << DBCTL_DBFEDLOCK_Pos)

#define DBCTL_DBFEDLOCK_UNLOCK  ((0x0U) << DBCTL_DBFEDLOCK_Pos)
#define DBCTL_DBFEDLOCK_LOCK    ((0x1U) << DBCTL_DBFEDLOCK_Pos)

#define DBCTL_DBFEDLOCK_(x)  (((x) << DBCTL_DBFEDLOCK_Pos) & DBCTL_DBFEDLOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          REDEN
  *  @access     PWMx->DBCTLA
  *  @brief      Rising-edge delay enable
  */
#define DBCTLA_REDEN_Pos  (0)
#define DBCTLA_REDEN_Msk  (0x1U << DBCTLA_REDEN_Pos)

#define DBCTLA_REDEN_DISABLE  ((0x0U) << DBCTLA_REDEN_Pos)
#define DBCTLA_REDEN_ENABLE   ((0x1U) << DBCTLA_REDEN_Pos)

#define DBCTLA_REDEN_(x)  (((x) << DBCTLA_REDEN_Pos) & DBCTLA_REDEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          FEDEN
  *  @access     PWMx->DBCTLA
  *  @brief      Falling-edge delay enable
  */
#define DBCTLA_FEDEN_Pos  (1)
#define DBCTLA_FEDEN_Msk  (0x1U << DBCTLA_FEDEN_Pos)

#define DBCTLA_FEDEN_DISABLE  ((0x0U) << DBCTLA_FEDEN_Pos)
#define DBCTLA_FEDEN_ENABLE   ((0x1U) << DBCTLA_FEDEN_Pos)

#define DBCTLA_FEDEN_(x)  (((x) << DBCTLA_FEDEN_Pos) & DBCTLA_FEDEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          REDSRC
  *  @access     PWMx->DBCTLA
  *  @brief      Rising-edge delay source
  */
#define DBCTLA_REDSRC_Pos  (2)
#define DBCTLA_REDSRC_Msk  (0x1U << DBCTLA_REDSRC_Pos)

#define DBCTLA_REDSRC_FROM_A  ((0x0U) << DBCTLA_REDSRC_Pos)
#define DBCTLA_REDSRC_FROM_B  ((0x1U) << DBCTLA_REDSRC_Pos)

#define DBCTLA_REDSRC_(x)  (((x) << DBCTLA_REDSRC_Pos) & DBCTLA_REDSRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          FEDSRC
  *  @access     PWMx->DBCTLA
  *  @brief      Falling-edge delay source
  */
#define DBCTLA_FEDSRC_Pos  (3)
#define DBCTLA_FEDSRC_Msk  (0x1U << DBCTLA_FEDSRC_Pos)

#define DBCTLA_FEDSRC_FROM_A  ((0x0U) << DBCTLA_FEDSRC_Pos)
#define DBCTLA_FEDSRC_FROM_B  ((0x1U) << DBCTLA_FEDSRC_Pos)

#define DBCTLA_FEDSRC_(x)  (((x) << DBCTLA_FEDSRC_Pos) & DBCTLA_FEDSRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          REDPOL
  *  @access     PWMx->DBCTLA
  *  @brief      Rising-edge delay output polarity
  */
#define DBCTLA_REDPOL_Pos  (4)
#define DBCTLA_REDPOL_Msk  (0x1U << DBCTLA_REDPOL_Pos)

#define DBCTLA_REDPOL_ACTIVE_LOW   ((0x0U) << DBCTLA_REDPOL_Pos)
#define DBCTLA_REDPOL_ACTIVE_HIGH  ((0x1U) << DBCTLA_REDPOL_Pos)

#define DBCTLA_REDPOL_(x)  (((x) << DBCTLA_REDPOL_Pos) & DBCTLA_REDPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          FEDPOL
  *  @access     PWMx->DBCTLA
  *  @brief      Falling-edge delay output polarity
  */
#define DBCTLA_FEDPOL_Pos  (5)
#define DBCTLA_FEDPOL_Msk  (0x1U << DBCTLA_FEDPOL_Pos)

#define DBCTLA_FEDPOL_ACTIVE_LOW   ((0x0U) << DBCTLA_FEDPOL_Pos)
#define DBCTLA_FEDPOL_ACTIVE_HIGH  ((0x1U) << DBCTLA_FEDPOL_Pos)

#define DBCTLA_FEDPOL_(x)  (((x) << DBCTLA_FEDPOL_Pos) & DBCTLA_FEDPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          OUTASRC
  *  @access     PWMx->DBCTLA
  *  @brief      Output A source
  */
#define DBCTLA_OUTASRC_Pos  (6)
#define DBCTLA_OUTASRC_Msk  (0x1U << DBCTLA_OUTASRC_Pos)

#define DBCTLA_OUTASRC_FALLING_EDGE  ((0x0U) << DBCTLA_OUTASRC_Pos)
#define DBCTLA_OUTASRC_RISING_EDGE   ((0x1U) << DBCTLA_OUTASRC_Pos)

#define DBCTLA_OUTASRC_(x)  (((x) << DBCTLA_OUTASRC_Pos) & DBCTLA_OUTASRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          OUTBSRC
  *  @access     PWMx->DBCTLA
  *  @brief      Output B source
  */
#define DBCTLA_OUTBSRC_Pos  (7)
#define DBCTLA_OUTBSRC_Msk  (0x1U << DBCTLA_OUTBSRC_Pos)

#define DBCTLA_OUTBSRC_FALLING_EDGE  ((0x0U) << DBCTLA_OUTBSRC_Pos)
#define DBCTLA_OUTBSRC_RISING_EDGE   ((0x1U) << DBCTLA_OUTBSRC_Pos)

#define DBCTLA_OUTBSRC_(x)  (((x) << DBCTLA_OUTBSRC_Pos) & DBCTLA_OUTBSRC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          DUALEDGE
  *  @access     PWMx->DBCTLA
  *  @brief      Dual-edge delay mode
  */
#define DBCTLA_DUALEDGE_Pos  (8)
#define DBCTLA_DUALEDGE_Msk  (0x1U << DBCTLA_DUALEDGE_Pos)

#define DBCTLA_DUALEDGE_DISABLE  ((0x0U) << DBCTLA_DUALEDGE_Pos)
#define DBCTLA_DUALEDGE_ENABLE   ((0x1U) << DBCTLA_DUALEDGE_Pos)

#define DBCTLA_DUALEDGE_(x)  (((x) << DBCTLA_DUALEDGE_Pos) & DBCTLA_DUALEDGE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBCTLA          HALFCYCLE
  *  @access     PWMx->DBCTLA
  *  @brief      Half cycle clocking enable
  */
#define DBCTLA_HALFCYCLE_Pos  (9)
#define DBCTLA_HALFCYCLE_Msk  (0x1U << DBCTLA_HALFCYCLE_Pos)

#define DBCTLA_HALFCYCLE_DISABLE  ((0x0U) << DBCTLA_HALFCYCLE_Pos)
#define DBCTLA_HALFCYCLE_ENABLE   ((0x1U) << DBCTLA_HALFCYCLE_Pos)

#define DBCTLA_HALFCYCLE_(x)  (((x) << DBCTLA_HALFCYCLE_Pos) & DBCTLA_HALFCYCLE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBRED           VAL
  *  @access     PWMx->DBRED
  *  @brief      Rising-edge delay
  */
#define DBRED_VAL_Pos  (0)
#define DBRED_VAL_Msk  (0xFFFFU << DBRED_VAL_Pos)

#define DBRED_VAL_(x)  (((x) << DBRED_VAL_Pos) & DBRED_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBREDA          VAL
  *  @access     PWMx->DBREDA
  *  @brief      Rising-edge delay
  */
#define DBREDA_VAL_Pos  (0)
#define DBREDA_VAL_Msk  (0xFFFFU << DBREDA_VAL_Pos)

#define DBREDA_VAL_(x)  (((x) << DBREDA_VAL_Pos) & DBREDA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBFED           VAL
  *  @access     PWMx->DBFED
  *  @brief      Falling-edge delay
  */
#define DBFED_VAL_Pos  (0)
#define DBFED_VAL_Msk  (0xFFFFU << DBFED_VAL_Pos)

#define DBFED_VAL_(x)  (((x) << DBFED_VAL_Pos) & DBFED_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DBFEDA          VAL
  *  @access     PWMx->DBFEDA
  *  @brief      Falling-edge delay
  */
#define DBFEDA_VAL_Pos  (0)
#define DBFEDA_VAL_Msk  (0xFFFFU << DBFEDA_VAL_Pos)

#define DBFEDA_VAL_(x)  (((x) << DBFEDA_VAL_Pos) & DBFEDA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           OSTOUT
  *  @access     PWMx->TZSEL
  *  @brief      One-shot trip-zone output select
  */
#define TZSEL_OSTOUT_Pos  (0)
#define TZSEL_OSTOUT_Msk  (0x3U << TZSEL_OSTOUT_Pos)

#define TZSEL_OSTOUT_DISABLE         ((0x00U) << TZSEL_OSTOUT_Pos)
#define TZSEL_OSTOUT_ASYNC           ((0x01U) << TZSEL_OSTOUT_Pos)
#define TZSEL_OSTOUT_LATCH           ((0x02U) << TZSEL_OSTOUT_Pos)
#define TZSEL_OSTOUT_ASYNC_OR_LATCH  ((0x03U) << TZSEL_OSTOUT_Pos)

#define TZSEL_OSTOUT_(x)  (((x) << TZSEL_OSTOUT_Pos) & TZSEL_OSTOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ0OST
  *  @access     PWMx->TZSEL
  *  @brief      TZ0 as a one-shot trip source (ORed)
  */
#define TZSEL_TZ0OST_Pos  (2)
#define TZSEL_TZ0OST_Msk  (0x1U << TZSEL_TZ0OST_Pos)

#define TZSEL_TZ0OST_DISABLE  ((0x0U) << TZSEL_TZ0OST_Pos)
#define TZSEL_TZ0OST_ENABLE   ((0x1U) << TZSEL_TZ0OST_Pos)

#define TZSEL_TZ0OST_(x)  (((x) << TZSEL_TZ0OST_Pos) & TZSEL_TZ0OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ1OST
  *  @access     PWMx->TZSEL
  *  @brief      TZ1 as a one-shot trip source (ORed)
  */
#define TZSEL_TZ1OST_Pos  (3)
#define TZSEL_TZ1OST_Msk  (0x1U << TZSEL_TZ1OST_Pos)

#define TZSEL_TZ1OST_DISABLE  ((0x0U) << TZSEL_TZ1OST_Pos)
#define TZSEL_TZ1OST_ENABLE   ((0x1U) << TZSEL_TZ1OST_Pos)

#define TZSEL_TZ1OST_(x)  (((x) << TZSEL_TZ1OST_Pos) & TZSEL_TZ1OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ2OST
  *  @access     PWMx->TZSEL
  *  @brief      TZ2 as a one-shot trip source (ORed)
  */
#define TZSEL_TZ2OST_Pos  (4)
#define TZSEL_TZ2OST_Msk  (0x1U << TZSEL_TZ2OST_Pos)

#define TZSEL_TZ2OST_DISABLE  ((0x0U) << TZSEL_TZ2OST_Pos)
#define TZSEL_TZ2OST_ENABLE   ((0x1U) << TZSEL_TZ2OST_Pos)

#define TZSEL_TZ2OST_(x)  (((x) << TZSEL_TZ2OST_Pos) & TZSEL_TZ2OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ3OST
  *  @access     PWMx->TZSEL
  *  @brief      TZ3 as a one-shot trip source (ORed)
  */
#define TZSEL_TZ3OST_Pos  (5)
#define TZSEL_TZ3OST_Msk  (0x1U << TZSEL_TZ3OST_Pos)

#define TZSEL_TZ3OST_DISABLE  ((0x0U) << TZSEL_TZ3OST_Pos)
#define TZSEL_TZ3OST_ENABLE   ((0x1U) << TZSEL_TZ3OST_Pos)

#define TZSEL_TZ3OST_(x)  (((x) << TZSEL_TZ3OST_Pos) & TZSEL_TZ3OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ4OST
  *  @access     PWMx->TZSEL
  *  @brief      TZ4 as a one-shot trip source (ORed)
  */
#define TZSEL_TZ4OST_Pos  (6)
#define TZSEL_TZ4OST_Msk  (0x1U << TZSEL_TZ4OST_Pos)

#define TZSEL_TZ4OST_DISABLE  ((0x0U) << TZSEL_TZ4OST_Pos)
#define TZSEL_TZ4OST_ENABLE   ((0x1U) << TZSEL_TZ4OST_Pos)

#define TZSEL_TZ4OST_(x)  (((x) << TZSEL_TZ4OST_Pos) & TZSEL_TZ4OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           CLKERROST
  *  @access     PWMx->TZSEL
  *  @brief      Clock error as a one-shot trip source (ORed)
  */
#define TZSEL_CLKERROST_Pos  (7)
#define TZSEL_CLKERROST_Msk  (0x1U << TZSEL_CLKERROST_Pos)

#define TZSEL_CLKERROST_DISABLE  ((0x0U) << TZSEL_CLKERROST_Pos)
#define TZSEL_CLKERROST_ENABLE   ((0x1U) << TZSEL_CLKERROST_Pos)

#define TZSEL_CLKERROST_(x)  (((x) << TZSEL_CLKERROST_Pos) & TZSEL_CLKERROST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           DCAEVT0
  *  @access     PWMx->TZSEL
  *  @brief      Digital compare A event 0 as a one-shot trip source (ORed)
  */
#define TZSEL_DCAEVT0_Pos  (8)
#define TZSEL_DCAEVT0_Msk  (0x1U << TZSEL_DCAEVT0_Pos)

#define TZSEL_DCAEVT0_DISABLE  ((0x0U) << TZSEL_DCAEVT0_Pos)
#define TZSEL_DCAEVT0_ENABLE   ((0x1U) << TZSEL_DCAEVT0_Pos)

#define TZSEL_DCAEVT0_(x)  (((x) << TZSEL_DCAEVT0_Pos) & TZSEL_DCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           DCBEVT0
  *  @access     PWMx->TZSEL
  *  @brief      Digital compare B event 0 as a one-shot trip source (ORed)
  */
#define TZSEL_DCBEVT0_Pos  (9)
#define TZSEL_DCBEVT0_Msk  (0x1U << TZSEL_DCBEVT0_Pos)

#define TZSEL_DCBEVT0_DISABLE  ((0x0U) << TZSEL_DCBEVT0_Pos)
#define TZSEL_DCBEVT0_ENABLE   ((0x1U) << TZSEL_DCBEVT0_Pos)

#define TZSEL_DCBEVT0_(x)  (((x) << TZSEL_DCBEVT0_Pos) & TZSEL_DCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           DBGOST
  *  @access     PWMx->TZSEL
  *  @brief      JTAG debug as a one-shot trip source (ORed)
  */
#define TZSEL_DBGOST_Pos  (10)
#define TZSEL_DBGOST_Msk  (0x1U << TZSEL_DBGOST_Pos)

#define TZSEL_DBGOST_DISABLE  ((0x0U) << TZSEL_DBGOST_Pos)
#define TZSEL_DBGOST_ENABLE   ((0x1U) << TZSEL_DBGOST_Pos)

#define TZSEL_DBGOST_(x)  (((x) << TZSEL_DBGOST_Pos) & TZSEL_DBGOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           OSTWE
  *  @access     PWMx->TZSEL
  *  @brief      One-shot trip-zone event select control bits write enable
  */
#define TZSEL_OSTWE_Pos  (15)
#define TZSEL_OSTWE_Msk  (0x1U << TZSEL_OSTWE_Pos)

#define TZSEL_OSTWE_NO_EFFECT  ((0x0U) << TZSEL_OSTWE_Pos)
#define TZSEL_OSTWE_ENABLE     ((0x1U) << TZSEL_OSTWE_Pos)

#define TZSEL_OSTWE_(x)  (((x) << TZSEL_OSTWE_Pos) & TZSEL_OSTWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           CBCOUT
  *  @access     PWMx->TZSEL
  *  @brief      Cycle-by-cycle trip-zone output select
  */
#define TZSEL_CBCOUT_Pos  (16)
#define TZSEL_CBCOUT_Msk  (0x3U << TZSEL_CBCOUT_Pos)

#define TZSEL_CBCOUT_DISABLE         ((0x00U) << TZSEL_CBCOUT_Pos)
#define TZSEL_CBCOUT_ASYNC           ((0x01U) << TZSEL_CBCOUT_Pos)
#define TZSEL_CBCOUT_LATCH           ((0x02U) << TZSEL_CBCOUT_Pos)
#define TZSEL_CBCOUT_ASYNC_OR_LATCH  ((0x03U) << TZSEL_CBCOUT_Pos)

#define TZSEL_CBCOUT_(x)  (((x) << TZSEL_CBCOUT_Pos) & TZSEL_CBCOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ0CBC
  *  @access     PWMx->TZSEL
  *  @brief      TZ0 as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_TZ0CBC_Pos  (18)
#define TZSEL_TZ0CBC_Msk  (0x1U << TZSEL_TZ0CBC_Pos)

#define TZSEL_TZ0CBC_DISABLE  ((0x0U) << TZSEL_TZ0CBC_Pos)
#define TZSEL_TZ0CBC_ENABLE   ((0x1U) << TZSEL_TZ0CBC_Pos)

#define TZSEL_TZ0CBC_(x)  (((x) << TZSEL_TZ0CBC_Pos) & TZSEL_TZ0CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ1CBC
  *  @access     PWMx->TZSEL
  *  @brief      TZ1 as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_TZ1CBC_Pos  (19)
#define TZSEL_TZ1CBC_Msk  (0x1U << TZSEL_TZ1CBC_Pos)

#define TZSEL_TZ1CBC_DISABLE  ((0x0U) << TZSEL_TZ1CBC_Pos)
#define TZSEL_TZ1CBC_ENABLE   ((0x1U) << TZSEL_TZ1CBC_Pos)

#define TZSEL_TZ1CBC_(x)  (((x) << TZSEL_TZ1CBC_Pos) & TZSEL_TZ1CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ2CBC
  *  @access     PWMx->TZSEL
  *  @brief      TZ2 as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_TZ2CBC_Pos  (20)
#define TZSEL_TZ2CBC_Msk  (0x1U << TZSEL_TZ2CBC_Pos)

#define TZSEL_TZ2CBC_DISABLE  ((0x0U) << TZSEL_TZ2CBC_Pos)
#define TZSEL_TZ2CBC_ENABLE   ((0x1U) << TZSEL_TZ2CBC_Pos)

#define TZSEL_TZ2CBC_(x)  (((x) << TZSEL_TZ2CBC_Pos) & TZSEL_TZ2CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ3CBC
  *  @access     PWMx->TZSEL
  *  @brief      TZ3 as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_TZ3CBC_Pos  (21)
#define TZSEL_TZ3CBC_Msk  (0x1U << TZSEL_TZ3CBC_Pos)

#define TZSEL_TZ3CBC_DISABLE  ((0x0U) << TZSEL_TZ3CBC_Pos)
#define TZSEL_TZ3CBC_ENABLE   ((0x1U) << TZSEL_TZ3CBC_Pos)

#define TZSEL_TZ3CBC_(x)  (((x) << TZSEL_TZ3CBC_Pos) & TZSEL_TZ3CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           TZ4CBC
  *  @access     PWMx->TZSEL
  *  @brief      TZ4 as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_TZ4CBC_Pos  (22)
#define TZSEL_TZ4CBC_Msk  (0x1U << TZSEL_TZ4CBC_Pos)

#define TZSEL_TZ4CBC_DISABLE  ((0x0U) << TZSEL_TZ4CBC_Pos)
#define TZSEL_TZ4CBC_ENABLE   ((0x1U) << TZSEL_TZ4CBC_Pos)

#define TZSEL_TZ4CBC_(x)  (((x) << TZSEL_TZ4CBC_Pos) & TZSEL_TZ4CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           CLKERRCBC
  *  @access     PWMx->TZSEL
  *  @brief      Clock error as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_CLKERRCBC_Pos  (23)
#define TZSEL_CLKERRCBC_Msk  (0x1U << TZSEL_CLKERRCBC_Pos)

#define TZSEL_CLKERRCBC_DISABLE  ((0x0U) << TZSEL_CLKERRCBC_Pos)
#define TZSEL_CLKERRCBC_ENABLE   ((0x1U) << TZSEL_CLKERRCBC_Pos)

#define TZSEL_CLKERRCBC_(x)  (((x) << TZSEL_CLKERRCBC_Pos) & TZSEL_CLKERRCBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           DCAEVT1
  *  @access     PWMx->TZSEL
  *  @brief      Digital compare A event 1 as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_DCAEVT1_Pos  (24)
#define TZSEL_DCAEVT1_Msk  (0x1U << TZSEL_DCAEVT1_Pos)

#define TZSEL_DCAEVT1_DISABLE  ((0x0U) << TZSEL_DCAEVT1_Pos)
#define TZSEL_DCAEVT1_ENABLE   ((0x1U) << TZSEL_DCAEVT1_Pos)

#define TZSEL_DCAEVT1_(x)  (((x) << TZSEL_DCAEVT1_Pos) & TZSEL_DCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           DCBEVT1
  *  @access     PWMx->TZSEL
  *  @brief      Digital compare B event 1 as a cycle-by-cycle trip source (ORed)
  */
#define TZSEL_DCBEVT1_Pos  (25)
#define TZSEL_DCBEVT1_Msk  (0x1U << TZSEL_DCBEVT1_Pos)

#define TZSEL_DCBEVT1_DISABLE  ((0x0U) << TZSEL_DCBEVT1_Pos)
#define TZSEL_DCBEVT1_ENABLE   ((0x1U) << TZSEL_DCBEVT1_Pos)

#define TZSEL_DCBEVT1_(x)  (((x) << TZSEL_DCBEVT1_Pos) & TZSEL_DCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           DBGCBC
  *  @access     PWMx->TZSEL
  *  @brief      JTAG debug as cycle-by-cycle trip source (ORed)
  */
#define TZSEL_DBGCBC_Pos  (26)
#define TZSEL_DBGCBC_Msk  (0x1U << TZSEL_DBGCBC_Pos)

#define TZSEL_DBGCBC_DISABLE  ((0x0U) << TZSEL_DBGCBC_Pos)
#define TZSEL_DBGCBC_ENABLE   ((0x1U) << TZSEL_DBGCBC_Pos)

#define TZSEL_DBGCBC_(x)  (((x) << TZSEL_DBGCBC_Pos) & TZSEL_DBGCBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZSEL           CBCWE
  *  @access     PWMx->TZSEL
  *  @brief      Cycle-by-cycle trip-zone event select control bits write enable
  */
#define TZSEL_CBCWE_Pos  (31)
#define TZSEL_CBCWE_Msk  (0x1U << TZSEL_CBCWE_Pos)

#define TZSEL_CBCWE_NO_EFFECT  ((0x0U) << TZSEL_CBCWE_Pos)
#define TZSEL_CBCWE_ENABLE     ((0x1U) << TZSEL_CBCWE_Pos)

#define TZSEL_CBCWE_(x)  (((x) << TZSEL_CBCWE_Pos) & TZSEL_CBCWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ0OST
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ0 one-shot trip event flag
  */
#define TZFLG_TZ0OST_Pos  (0)
#define TZFLG_TZ0OST_Msk  (0x1U << TZFLG_TZ0OST_Pos)

#define TZFLG_TZ0OST_NOT_OCCUR  ((0x0U) << TZFLG_TZ0OST_Pos)
#define TZFLG_TZ0OST_OCCUR      ((0x1U) << TZFLG_TZ0OST_Pos)

#define TZFLG_TZ0OST_(x)  (((x) << TZFLG_TZ0OST_Pos) & TZFLG_TZ0OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ1OST
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ1 one-shot trip event flag
  */
#define TZFLG_TZ1OST_Pos  (1)
#define TZFLG_TZ1OST_Msk  (0x1U << TZFLG_TZ1OST_Pos)

#define TZFLG_TZ1OST_NOT_OCCUR  ((0x0U) << TZFLG_TZ1OST_Pos)
#define TZFLG_TZ1OST_OCCUR      ((0x1U) << TZFLG_TZ1OST_Pos)

#define TZFLG_TZ1OST_(x)  (((x) << TZFLG_TZ1OST_Pos) & TZFLG_TZ1OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ2OST
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ2 one-shot trip event flag
  */
#define TZFLG_TZ2OST_Pos  (2)
#define TZFLG_TZ2OST_Msk  (0x1U << TZFLG_TZ2OST_Pos)

#define TZFLG_TZ2OST_NOT_OCCUR  ((0x0U) << TZFLG_TZ2OST_Pos)
#define TZFLG_TZ2OST_OCCUR      ((0x1U) << TZFLG_TZ2OST_Pos)

#define TZFLG_TZ2OST_(x)  (((x) << TZFLG_TZ2OST_Pos) & TZFLG_TZ2OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ3OST
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ3 one-shot trip event flag
  */
#define TZFLG_TZ3OST_Pos  (3)
#define TZFLG_TZ3OST_Msk  (0x1U << TZFLG_TZ3OST_Pos)

#define TZFLG_TZ3OST_NOT_OCCUR  ((0x0U) << TZFLG_TZ3OST_Pos)
#define TZFLG_TZ3OST_OCCUR      ((0x1U) << TZFLG_TZ3OST_Pos)

#define TZFLG_TZ3OST_(x)  (((x) << TZFLG_TZ3OST_Pos) & TZFLG_TZ3OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ4OST
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ4 one-shot trip event flag
  */
#define TZFLG_TZ4OST_Pos  (4)
#define TZFLG_TZ4OST_Msk  (0x1U << TZFLG_TZ4OST_Pos)

#define TZFLG_TZ4OST_NOT_OCCUR  ((0x0U) << TZFLG_TZ4OST_Pos)
#define TZFLG_TZ4OST_OCCUR      ((0x1U) << TZFLG_TZ4OST_Pos)

#define TZFLG_TZ4OST_(x)  (((x) << TZFLG_TZ4OST_Pos) & TZFLG_TZ4OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           CLKERROST
  *  @access     PWMx->TZFLG
  *  @brief      Latched clock error one-shot trip event flag
  */
#define TZFLG_CLKERROST_Pos  (5)
#define TZFLG_CLKERROST_Msk  (0x1U << TZFLG_CLKERROST_Pos)

#define TZFLG_CLKERROST_NOT_OCCUR  ((0x0U) << TZFLG_CLKERROST_Pos)
#define TZFLG_CLKERROST_OCCUR      ((0x1U) << TZFLG_CLKERROST_Pos)

#define TZFLG_CLKERROST_(x)  (((x) << TZFLG_CLKERROST_Pos) & TZFLG_CLKERROST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           DCAEVT0
  *  @access     PWMx->TZFLG
  *  @brief      Latched digital compare A event 0 one-shot trip flag
  */
#define TZFLG_DCAEVT0_Pos  (6)
#define TZFLG_DCAEVT0_Msk  (0x1U << TZFLG_DCAEVT0_Pos)

#define TZFLG_DCAEVT0_NOT_OCCUR  ((0x0U) << TZFLG_DCAEVT0_Pos)
#define TZFLG_DCAEVT0_OCCUR      ((0x1U) << TZFLG_DCAEVT0_Pos)

#define TZFLG_DCAEVT0_(x)  (((x) << TZFLG_DCAEVT0_Pos) & TZFLG_DCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           DCBEVT0
  *  @access     PWMx->TZFLG
  *  @brief      Latched digital compare B event 0 one-shot trip flag
  */
#define TZFLG_DCBEVT0_Pos  (7)
#define TZFLG_DCBEVT0_Msk  (0x1U << TZFLG_DCBEVT0_Pos)

#define TZFLG_DCBEVT0_NOT_OCCUR  ((0x0U) << TZFLG_DCBEVT0_Pos)
#define TZFLG_DCBEVT0_OCCUR      ((0x1U) << TZFLG_DCBEVT0_Pos)

#define TZFLG_DCBEVT0_(x)  (((x) << TZFLG_DCBEVT0_Pos) & TZFLG_DCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           DBGOST
  *  @access     PWMx->TZFLG
  *  @brief      Latched JTAG debug one-shot trip event flag
  */
#define TZFLG_DBGOST_Pos  (8)
#define TZFLG_DBGOST_Msk  (0x1U << TZFLG_DBGOST_Pos)

#define TZFLG_DBGOST_NOT_OCCUR  ((0x0U) << TZFLG_DBGOST_Pos)
#define TZFLG_DBGOST_OCCUR      ((0x1U) << TZFLG_DBGOST_Pos)

#define TZFLG_DBGOST_(x)  (((x) << TZFLG_DBGOST_Pos) & TZFLG_DBGOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ0CBC
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ0 cycle-by-cycle trip event flag
  */
#define TZFLG_TZ0CBC_Pos  (9)
#define TZFLG_TZ0CBC_Msk  (0x1U << TZFLG_TZ0CBC_Pos)

#define TZFLG_TZ0CBC_NOT_OCCUR  ((0x0U) << TZFLG_TZ0CBC_Pos)
#define TZFLG_TZ0CBC_OCCUR      ((0x1U) << TZFLG_TZ0CBC_Pos)

#define TZFLG_TZ0CBC_(x)  (((x) << TZFLG_TZ0CBC_Pos) & TZFLG_TZ0CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ1CBC
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ1 cycle-by-cycle trip event flag
  */
#define TZFLG_TZ1CBC_Pos  (10)
#define TZFLG_TZ1CBC_Msk  (0x1U << TZFLG_TZ1CBC_Pos)

#define TZFLG_TZ1CBC_NOT_OCCUR  ((0x0U) << TZFLG_TZ1CBC_Pos)
#define TZFLG_TZ1CBC_OCCUR      ((0x1U) << TZFLG_TZ1CBC_Pos)

#define TZFLG_TZ1CBC_(x)  (((x) << TZFLG_TZ1CBC_Pos) & TZFLG_TZ1CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ2CBC
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ2 cycle-by-cycle trip event flag
  */
#define TZFLG_TZ2CBC_Pos  (11)
#define TZFLG_TZ2CBC_Msk  (0x1U << TZFLG_TZ2CBC_Pos)

#define TZFLG_TZ2CBC_NOT_OCCUR  ((0x0U) << TZFLG_TZ2CBC_Pos)
#define TZFLG_TZ2CBC_OCCUR      ((0x1U) << TZFLG_TZ2CBC_Pos)

#define TZFLG_TZ2CBC_(x)  (((x) << TZFLG_TZ2CBC_Pos) & TZFLG_TZ2CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ3CBC
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ3 cycle-by-cycle trip event flag
  */
#define TZFLG_TZ3CBC_Pos  (12)
#define TZFLG_TZ3CBC_Msk  (0x1U << TZFLG_TZ3CBC_Pos)

#define TZFLG_TZ3CBC_NOT_OCCUR  ((0x0U) << TZFLG_TZ3CBC_Pos)
#define TZFLG_TZ3CBC_OCCUR      ((0x1U) << TZFLG_TZ3CBC_Pos)

#define TZFLG_TZ3CBC_(x)  (((x) << TZFLG_TZ3CBC_Pos) & TZFLG_TZ3CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           TZ4CBC
  *  @access     PWMx->TZFLG
  *  @brief      Latched TZ4 cycle-by-cycle trip event flag
  */
#define TZFLG_TZ4CBC_Pos  (13)
#define TZFLG_TZ4CBC_Msk  (0x1U << TZFLG_TZ4CBC_Pos)

#define TZFLG_TZ4CBC_NOT_OCCUR  ((0x0U) << TZFLG_TZ4CBC_Pos)
#define TZFLG_TZ4CBC_OCCUR      ((0x1U) << TZFLG_TZ4CBC_Pos)

#define TZFLG_TZ4CBC_(x)  (((x) << TZFLG_TZ4CBC_Pos) & TZFLG_TZ4CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           CLKERRCBC
  *  @access     PWMx->TZFLG
  *  @brief      Latched clock error cycle-by-cycle trip event flag
  */
#define TZFLG_CLKERRCBC_Pos  (14)
#define TZFLG_CLKERRCBC_Msk  (0x1U << TZFLG_CLKERRCBC_Pos)

#define TZFLG_CLKERRCBC_NOT_OCCUR  ((0x0U) << TZFLG_CLKERRCBC_Pos)
#define TZFLG_CLKERRCBC_OCCUR      ((0x1U) << TZFLG_CLKERRCBC_Pos)

#define TZFLG_CLKERRCBC_(x)  (((x) << TZFLG_CLKERRCBC_Pos) & TZFLG_CLKERRCBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           DCAEVT1
  *  @access     PWMx->TZFLG
  *  @brief      Latched digital compare A event 1 cycle-by-cycle trip flag
  */
#define TZFLG_DCAEVT1_Pos  (15)
#define TZFLG_DCAEVT1_Msk  (0x1U << TZFLG_DCAEVT1_Pos)

#define TZFLG_DCAEVT1_NOT_OCCUR  ((0x0U) << TZFLG_DCAEVT1_Pos)
#define TZFLG_DCAEVT1_OCCUR      ((0x1U) << TZFLG_DCAEVT1_Pos)

#define TZFLG_DCAEVT1_(x)  (((x) << TZFLG_DCAEVT1_Pos) & TZFLG_DCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           DCBEVT1
  *  @access     PWMx->TZFLG
  *  @brief      Latched digital compare B event 1 cycle-by-cycle trip flag
  */
#define TZFLG_DCBEVT1_Pos  (16)
#define TZFLG_DCBEVT1_Msk  (0x1U << TZFLG_DCBEVT1_Pos)

#define TZFLG_DCBEVT1_NOT_OCCUR  ((0x0U) << TZFLG_DCBEVT1_Pos)
#define TZFLG_DCBEVT1_OCCUR      ((0x1U) << TZFLG_DCBEVT1_Pos)

#define TZFLG_DCBEVT1_(x)  (((x) << TZFLG_DCBEVT1_Pos) & TZFLG_DCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLG           DBGCBC
  *  @access     PWMx->TZFLG
  *  @brief      Latched JTAG debug cycle-by-cycle trip event flag
  */
#define TZFLG_DBGCBC_Pos  (17)
#define TZFLG_DBGCBC_Msk  (0x1U << TZFLG_DBGCBC_Pos)

#define TZFLG_DBGCBC_NOT_OCCUR  ((0x0U) << TZFLG_DBGCBC_Pos)
#define TZFLG_DBGCBC_OCCUR      ((0x1U) << TZFLG_DBGCBC_Pos)

#define TZFLG_DBGCBC_(x)  (((x) << TZFLG_DBGCBC_Pos) & TZFLG_DBGCBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ0OST
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ0 one-shot trip event flag clear
  */
#define TZFLGCLR_TZ0OST_Pos  (0)
#define TZFLGCLR_TZ0OST_Msk  (0x1U << TZFLGCLR_TZ0OST_Pos)

#define TZFLGCLR_TZ0OST_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ0OST_Pos)
#define TZFLGCLR_TZ0OST_CLEAR      ((0x1U) << TZFLGCLR_TZ0OST_Pos)

#define TZFLGCLR_TZ0OST_(x)  (((x) << TZFLGCLR_TZ0OST_Pos) & TZFLGCLR_TZ0OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ1OST
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ1 one-shot trip event flag clear
  */
#define TZFLGCLR_TZ1OST_Pos  (1)
#define TZFLGCLR_TZ1OST_Msk  (0x1U << TZFLGCLR_TZ1OST_Pos)

#define TZFLGCLR_TZ1OST_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ1OST_Pos)
#define TZFLGCLR_TZ1OST_CLEAR      ((0x1U) << TZFLGCLR_TZ1OST_Pos)

#define TZFLGCLR_TZ1OST_(x)  (((x) << TZFLGCLR_TZ1OST_Pos) & TZFLGCLR_TZ1OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ2OST
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ2 one-shot trip event flag clear
  */
#define TZFLGCLR_TZ2OST_Pos  (2)
#define TZFLGCLR_TZ2OST_Msk  (0x1U << TZFLGCLR_TZ2OST_Pos)

#define TZFLGCLR_TZ2OST_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ2OST_Pos)
#define TZFLGCLR_TZ2OST_CLEAR      ((0x1U) << TZFLGCLR_TZ2OST_Pos)

#define TZFLGCLR_TZ2OST_(x)  (((x) << TZFLGCLR_TZ2OST_Pos) & TZFLGCLR_TZ2OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ3OST
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ3 one-shot trip event flag clear
  */
#define TZFLGCLR_TZ3OST_Pos  (3)
#define TZFLGCLR_TZ3OST_Msk  (0x1U << TZFLGCLR_TZ3OST_Pos)

#define TZFLGCLR_TZ3OST_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ3OST_Pos)
#define TZFLGCLR_TZ3OST_CLEAR      ((0x1U) << TZFLGCLR_TZ3OST_Pos)

#define TZFLGCLR_TZ3OST_(x)  (((x) << TZFLGCLR_TZ3OST_Pos) & TZFLGCLR_TZ3OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ4OST
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ4 one-shot trip event flag clear
  */
#define TZFLGCLR_TZ4OST_Pos  (4)
#define TZFLGCLR_TZ4OST_Msk  (0x1U << TZFLGCLR_TZ4OST_Pos)

#define TZFLGCLR_TZ4OST_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ4OST_Pos)
#define TZFLGCLR_TZ4OST_CLEAR      ((0x1U) << TZFLGCLR_TZ4OST_Pos)

#define TZFLGCLR_TZ4OST_(x)  (((x) << TZFLGCLR_TZ4OST_Pos) & TZFLGCLR_TZ4OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        CLKERROST
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched clock error one-shot trip event flag clear
  */
#define TZFLGCLR_CLKERROST_Pos  (5)
#define TZFLGCLR_CLKERROST_Msk  (0x1U << TZFLGCLR_CLKERROST_Pos)

#define TZFLGCLR_CLKERROST_NO_EFFECT  ((0x0U) << TZFLGCLR_CLKERROST_Pos)
#define TZFLGCLR_CLKERROST_CLEAR      ((0x1U) << TZFLGCLR_CLKERROST_Pos)

#define TZFLGCLR_CLKERROST_(x)  (((x) << TZFLGCLR_CLKERROST_Pos) & TZFLGCLR_CLKERROST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        DCAEVT0
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched digital output A event 0 one-shot trip flag clear
  */
#define TZFLGCLR_DCAEVT0_Pos  (6)
#define TZFLGCLR_DCAEVT0_Msk  (0x1U << TZFLGCLR_DCAEVT0_Pos)

#define TZFLGCLR_DCAEVT0_NO_EFFECT  ((0x0U) << TZFLGCLR_DCAEVT0_Pos)
#define TZFLGCLR_DCAEVT0_CLEAR      ((0x1U) << TZFLGCLR_DCAEVT0_Pos)

#define TZFLGCLR_DCAEVT0_(x)  (((x) << TZFLGCLR_DCAEVT0_Pos) & TZFLGCLR_DCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        DCBEVT0
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched digital output B event 0 one-shot trip flag clear
  */
#define TZFLGCLR_DCBEVT0_Pos  (7)
#define TZFLGCLR_DCBEVT0_Msk  (0x1U << TZFLGCLR_DCBEVT0_Pos)

#define TZFLGCLR_DCBEVT0_NO_EFFECT  ((0x0U) << TZFLGCLR_DCBEVT0_Pos)
#define TZFLGCLR_DCBEVT0_CLEAR      ((0x1U) << TZFLGCLR_DCBEVT0_Pos)

#define TZFLGCLR_DCBEVT0_(x)  (((x) << TZFLGCLR_DCBEVT0_Pos) & TZFLGCLR_DCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        DBGOST
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched JTAG debug one-shot trip event flag clear
  */
#define TZFLGCLR_DBGOST_Pos  (8)
#define TZFLGCLR_DBGOST_Msk  (0x1U << TZFLGCLR_DBGOST_Pos)

#define TZFLGCLR_DBGOST_NO_EFFECT  ((0x0U) << TZFLGCLR_DBGOST_Pos)
#define TZFLGCLR_DBGOST_CLEAR      ((0x1U) << TZFLGCLR_DBGOST_Pos)

#define TZFLGCLR_DBGOST_(x)  (((x) << TZFLGCLR_DBGOST_Pos) & TZFLGCLR_DBGOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ0CBC
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ0 cycle-by-cycle trip event flag clear
  */
#define TZFLGCLR_TZ0CBC_Pos  (9)
#define TZFLGCLR_TZ0CBC_Msk  (0x1U << TZFLGCLR_TZ0CBC_Pos)

#define TZFLGCLR_TZ0CBC_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ0CBC_Pos)
#define TZFLGCLR_TZ0CBC_CLEAR      ((0x1U) << TZFLGCLR_TZ0CBC_Pos)

#define TZFLGCLR_TZ0CBC_(x)  (((x) << TZFLGCLR_TZ0CBC_Pos) & TZFLGCLR_TZ0CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ1CBC
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ1 cycle-by-cycle trip event flag clear
  */
#define TZFLGCLR_TZ1CBC_Pos  (10)
#define TZFLGCLR_TZ1CBC_Msk  (0x1U << TZFLGCLR_TZ1CBC_Pos)

#define TZFLGCLR_TZ1CBC_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ1CBC_Pos)
#define TZFLGCLR_TZ1CBC_CLEAR      ((0x1U) << TZFLGCLR_TZ1CBC_Pos)

#define TZFLGCLR_TZ1CBC_(x)  (((x) << TZFLGCLR_TZ1CBC_Pos) & TZFLGCLR_TZ1CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ2CBC
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ2 cycle-by-cycle trip event flag clear
  */
#define TZFLGCLR_TZ2CBC_Pos  (11)
#define TZFLGCLR_TZ2CBC_Msk  (0x1U << TZFLGCLR_TZ2CBC_Pos)

#define TZFLGCLR_TZ2CBC_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ2CBC_Pos)
#define TZFLGCLR_TZ2CBC_CLEAR      ((0x1U) << TZFLGCLR_TZ2CBC_Pos)

#define TZFLGCLR_TZ2CBC_(x)  (((x) << TZFLGCLR_TZ2CBC_Pos) & TZFLGCLR_TZ2CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ3CBC
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ3 cycle-by-cycle trip event flag clear
  */
#define TZFLGCLR_TZ3CBC_Pos  (12)
#define TZFLGCLR_TZ3CBC_Msk  (0x1U << TZFLGCLR_TZ3CBC_Pos)

#define TZFLGCLR_TZ3CBC_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ3CBC_Pos)
#define TZFLGCLR_TZ3CBC_CLEAR      ((0x1U) << TZFLGCLR_TZ3CBC_Pos)

#define TZFLGCLR_TZ3CBC_(x)  (((x) << TZFLGCLR_TZ3CBC_Pos) & TZFLGCLR_TZ3CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        TZ4CBC
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched TZ4 cycle-by-cycle trip event flag clear
  */
#define TZFLGCLR_TZ4CBC_Pos  (13)
#define TZFLGCLR_TZ4CBC_Msk  (0x1U << TZFLGCLR_TZ4CBC_Pos)

#define TZFLGCLR_TZ4CBC_NO_EFFECT  ((0x0U) << TZFLGCLR_TZ4CBC_Pos)
#define TZFLGCLR_TZ4CBC_CLEAR      ((0x1U) << TZFLGCLR_TZ4CBC_Pos)

#define TZFLGCLR_TZ4CBC_(x)  (((x) << TZFLGCLR_TZ4CBC_Pos) & TZFLGCLR_TZ4CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        CLKERRCBC
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched clock error cycle-by-cycle trip event flag clear
  */
#define TZFLGCLR_CLKERRCBC_Pos  (14)
#define TZFLGCLR_CLKERRCBC_Msk  (0x1U << TZFLGCLR_CLKERRCBC_Pos)

#define TZFLGCLR_CLKERRCBC_NO_EFFECT  ((0x0U) << TZFLGCLR_CLKERRCBC_Pos)
#define TZFLGCLR_CLKERRCBC_CLEAR      ((0x1U) << TZFLGCLR_CLKERRCBC_Pos)

#define TZFLGCLR_CLKERRCBC_(x)  (((x) << TZFLGCLR_CLKERRCBC_Pos) & TZFLGCLR_CLKERRCBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        DCAEVT1
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched digital compare A event 1 cycle-by-cycle trip flag clear
  */
#define TZFLGCLR_DCAEVT1_Pos  (15)
#define TZFLGCLR_DCAEVT1_Msk  (0x1U << TZFLGCLR_DCAEVT1_Pos)

#define TZFLGCLR_DCAEVT1_NO_EFFECT  ((0x0U) << TZFLGCLR_DCAEVT1_Pos)
#define TZFLGCLR_DCAEVT1_CLEAR      ((0x1U) << TZFLGCLR_DCAEVT1_Pos)

#define TZFLGCLR_DCAEVT1_(x)  (((x) << TZFLGCLR_DCAEVT1_Pos) & TZFLGCLR_DCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        DCBEVT1
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched digital compare B event 1 cycle-by-cycle trip flag clear
  */
#define TZFLGCLR_DCBEVT1_Pos  (16)
#define TZFLGCLR_DCBEVT1_Msk  (0x1U << TZFLGCLR_DCBEVT1_Pos)

#define TZFLGCLR_DCBEVT1_NO_EFFECT  ((0x0U) << TZFLGCLR_DCBEVT1_Pos)
#define TZFLGCLR_DCBEVT1_CLEAR      ((0x1U) << TZFLGCLR_DCBEVT1_Pos)

#define TZFLGCLR_DCBEVT1_(x)  (((x) << TZFLGCLR_DCBEVT1_Pos) & TZFLGCLR_DCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFLGCLR        DBGCBC
  *  @access     PWMx->TZFLGCLR
  *  @brief      Latched JTAG debug cycle-by-cycle trip event flag clear
  */
#define TZFLGCLR_DBGCBC_Pos  (17)
#define TZFLGCLR_DBGCBC_Msk  (0x1U << TZFLGCLR_DBGCBC_Pos)

#define TZFLGCLR_DBGCBC_NO_EFFECT  ((0x0U) << TZFLGCLR_DBGCBC_Pos)
#define TZFLGCLR_DBGCBC_CLEAR      ((0x1U) << TZFLGCLR_DBGCBC_Pos)

#define TZFLGCLR_DBGCBC_(x)  (((x) << TZFLGCLR_DBGCBC_Pos) & TZFLGCLR_DBGCBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZDCSEL         RAWDCAEVT0
  *  @access     PWMx->TZDCSEL
  *  @brief      Raw digital compare A event 0 option
  */
#define TZDCSEL_RAWDCAEVT0_Pos  (0)
#define TZDCSEL_RAWDCAEVT0_Msk  (0x7U << TZDCSEL_RAWDCAEVT0_Pos)

#define TZDCSEL_RAWDCAEVT0_DISABLE              ((0x000U) << TZDCSEL_RAWDCAEVT0_Pos)
#define TZDCSEL_RAWDCAEVT0_DCAH_X_DCAL_LOW      ((0x001U) << TZDCSEL_RAWDCAEVT0_Pos)
#define TZDCSEL_RAWDCAEVT0_DCAH_X_DCAL_HIGH     ((0x002U) << TZDCSEL_RAWDCAEVT0_Pos)
#define TZDCSEL_RAWDCAEVT0_DCAH_LOW_DCAL_X      ((0x003U) << TZDCSEL_RAWDCAEVT0_Pos)
#define TZDCSEL_RAWDCAEVT0_DCAH_HIGH_DCAL_X     ((0x004U) << TZDCSEL_RAWDCAEVT0_Pos)
#define TZDCSEL_RAWDCAEVT0_DCAH_HIGH_DCAL_LOW   ((0x005U) << TZDCSEL_RAWDCAEVT0_Pos)
#define TZDCSEL_RAWDCAEVT0_DCAH_LOW_DCAL_HIGH   ((0x006U) << TZDCSEL_RAWDCAEVT0_Pos)
#define TZDCSEL_RAWDCAEVT0_DCAH_HIGH_DCAL_HIGH  ((0x007U) << TZDCSEL_RAWDCAEVT0_Pos)

#define TZDCSEL_RAWDCAEVT0_(x)  (((x) << TZDCSEL_RAWDCAEVT0_Pos) & TZDCSEL_RAWDCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZDCSEL         RAWDCAEVT1
  *  @access     PWMx->TZDCSEL
  *  @brief      Raw digital compare A event 1 option
  */
#define TZDCSEL_RAWDCAEVT1_Pos  (3)
#define TZDCSEL_RAWDCAEVT1_Msk  (0x7U << TZDCSEL_RAWDCAEVT1_Pos)

#define TZDCSEL_RAWDCAEVT1_DISABLE              ((0x000U) << TZDCSEL_RAWDCAEVT1_Pos)
#define TZDCSEL_RAWDCAEVT1_DCAH_X_DCAL_LOW      ((0x001U) << TZDCSEL_RAWDCAEVT1_Pos)
#define TZDCSEL_RAWDCAEVT1_DCAH_X_DCAL_HIGH     ((0x002U) << TZDCSEL_RAWDCAEVT1_Pos)
#define TZDCSEL_RAWDCAEVT1_DCAH_LOW_DCAL_X      ((0x003U) << TZDCSEL_RAWDCAEVT1_Pos)
#define TZDCSEL_RAWDCAEVT1_DCAH_HIGH_DCAL_X     ((0x004U) << TZDCSEL_RAWDCAEVT1_Pos)
#define TZDCSEL_RAWDCAEVT1_DCAH_HIGH_DCAL_LOW   ((0x005U) << TZDCSEL_RAWDCAEVT1_Pos)
#define TZDCSEL_RAWDCAEVT1_DCAH_LOW_DCAL_HIGH   ((0x006U) << TZDCSEL_RAWDCAEVT1_Pos)
#define TZDCSEL_RAWDCAEVT1_DCAH_HIGH_DCAL_HIGH  ((0x007U) << TZDCSEL_RAWDCAEVT1_Pos)

#define TZDCSEL_RAWDCAEVT1_(x)  (((x) << TZDCSEL_RAWDCAEVT1_Pos) & TZDCSEL_RAWDCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZDCSEL         RAWDCBEVT0
  *  @access     PWMx->TZDCSEL
  *  @brief      Raw digital compare B event 0 option
  */
#define TZDCSEL_RAWDCBEVT0_Pos  (6)
#define TZDCSEL_RAWDCBEVT0_Msk  (0x7U << TZDCSEL_RAWDCBEVT0_Pos)

#define TZDCSEL_RAWDCBEVT0_DISABLE              ((0x000U) << TZDCSEL_RAWDCBEVT0_Pos)
#define TZDCSEL_RAWDCBEVT0_DCBH_X_DCBL_LOW      ((0x001U) << TZDCSEL_RAWDCBEVT0_Pos)
#define TZDCSEL_RAWDCBEVT0_DCBH_X_DCBL_HIGH     ((0x002U) << TZDCSEL_RAWDCBEVT0_Pos)
#define TZDCSEL_RAWDCBEVT0_DCBH_LOW_DCBL_X      ((0x003U) << TZDCSEL_RAWDCBEVT0_Pos)
#define TZDCSEL_RAWDCBEVT0_DCBH_HIGH_DCBL_X     ((0x004U) << TZDCSEL_RAWDCBEVT0_Pos)
#define TZDCSEL_RAWDCBEVT0_DCBH_HIGH_DCBL_LOW   ((0x005U) << TZDCSEL_RAWDCBEVT0_Pos)
#define TZDCSEL_RAWDCBEVT0_DCBH_LOW_DCBL_HIGH   ((0x006U) << TZDCSEL_RAWDCBEVT0_Pos)
#define TZDCSEL_RAWDCBEVT0_DCBH_HIGH_DCBL_HIGH  ((0x007U) << TZDCSEL_RAWDCBEVT0_Pos)

#define TZDCSEL_RAWDCBEVT0_(x)  (((x) << TZDCSEL_RAWDCBEVT0_Pos) & TZDCSEL_RAWDCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZDCSEL         RAWDCBEVT1
  *  @access     PWMx->TZDCSEL
  *  @brief      Raw digital compare B event 1 option
  */
#define TZDCSEL_RAWDCBEVT1_Pos  (9)
#define TZDCSEL_RAWDCBEVT1_Msk  (0x7U << TZDCSEL_RAWDCBEVT1_Pos)

#define TZDCSEL_RAWDCBEVT1_DISABLE              ((0x000U) << TZDCSEL_RAWDCBEVT1_Pos)
#define TZDCSEL_RAWDCBEVT1_DCBH_X_DCBL_LOW      ((0x001U) << TZDCSEL_RAWDCBEVT1_Pos)
#define TZDCSEL_RAWDCBEVT1_DCBH_X_DCBL_HIGH     ((0x002U) << TZDCSEL_RAWDCBEVT1_Pos)
#define TZDCSEL_RAWDCBEVT1_DCBH_LOW_DCBL_X      ((0x003U) << TZDCSEL_RAWDCBEVT1_Pos)
#define TZDCSEL_RAWDCBEVT1_DCBH_HIGH_DCBL_X     ((0x004U) << TZDCSEL_RAWDCBEVT1_Pos)
#define TZDCSEL_RAWDCBEVT1_DCBH_HIGH_DCBL_LOW   ((0x005U) << TZDCSEL_RAWDCBEVT1_Pos)
#define TZDCSEL_RAWDCBEVT1_DCBH_LOW_DCBL_HIGH   ((0x006U) << TZDCSEL_RAWDCBEVT1_Pos)
#define TZDCSEL_RAWDCBEVT1_DCBH_HIGH_DCBL_HIGH  ((0x007U) << TZDCSEL_RAWDCBEVT1_Pos)

#define TZDCSEL_RAWDCBEVT1_(x)  (((x) << TZDCSEL_RAWDCBEVT1_Pos) & TZDCSEL_RAWDCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZACTL          TZU
  *  @access     PWMx->TZACTL
  *  @brief      Action on output A when a trip event occurs and TBCNT is counting up
  */
#define TZACTL_TZU_Pos  (0)
#define TZACTL_TZU_Msk  (0x7U << TZACTL_TZU_Pos)

#define TZACTL_TZU_TRI_STATE   ((0x000U) << TZACTL_TZU_Pos)
#define TZACTL_TZU_SET_LOW     ((0x001U) << TZACTL_TZU_Pos)
#define TZACTL_TZU_SET_HIGH    ((0x002U) << TZACTL_TZU_Pos)
#define TZACTL_TZU_TOGGLE      ((0x003U) << TZACTL_TZU_Pos)
#define TZACTL_TZU_DO_NOTHING  ((0x007U) << TZACTL_TZU_Pos)

#define TZACTL_TZU_(x)  (((x) << TZACTL_TZU_Pos) & TZACTL_TZU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZACTL          TZD
  *  @access     PWMx->TZACTL
  *  @brief      Action on output A when a trip event occurs and TBCNT is counting down
  */
#define TZACTL_TZD_Pos  (3)
#define TZACTL_TZD_Msk  (0x7U << TZACTL_TZD_Pos)

#define TZACTL_TZD_TRI_STATE   ((0x000U) << TZACTL_TZD_Pos)
#define TZACTL_TZD_SET_LOW     ((0x001U) << TZACTL_TZD_Pos)
#define TZACTL_TZD_SET_HIGH    ((0x002U) << TZACTL_TZD_Pos)
#define TZACTL_TZD_TOGGLE      ((0x003U) << TZACTL_TZD_Pos)
#define TZACTL_TZD_DO_NOTHING  ((0x007U) << TZACTL_TZD_Pos)

#define TZACTL_TZD_(x)  (((x) << TZACTL_TZD_Pos) & TZACTL_TZD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZACTL          DCAEVT0U
  *  @access     PWMx->TZACTL
  *  @brief      Action on output A when a digital compare A event 0 occurs and TBCNT is counting
  *              up
  */
#define TZACTL_DCAEVT0U_Pos  (6)
#define TZACTL_DCAEVT0U_Msk  (0x7U << TZACTL_DCAEVT0U_Pos)

#define TZACTL_DCAEVT0U_TRI_STATE   ((0x000U) << TZACTL_DCAEVT0U_Pos)
#define TZACTL_DCAEVT0U_SET_LOW     ((0x001U) << TZACTL_DCAEVT0U_Pos)
#define TZACTL_DCAEVT0U_SET_HIGH    ((0x002U) << TZACTL_DCAEVT0U_Pos)
#define TZACTL_DCAEVT0U_TOGGLE      ((0x003U) << TZACTL_DCAEVT0U_Pos)
#define TZACTL_DCAEVT0U_DO_NOTHING  ((0x007U) << TZACTL_DCAEVT0U_Pos)

#define TZACTL_DCAEVT0U_(x)  (((x) << TZACTL_DCAEVT0U_Pos) & TZACTL_DCAEVT0U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZACTL          DCAEVT0D
  *  @access     PWMx->TZACTL
  *  @brief      Action on output A when a digital compare A event 0 occurs and TBCNT is counting
  *              down
  */
#define TZACTL_DCAEVT0D_Pos  (9)
#define TZACTL_DCAEVT0D_Msk  (0x7U << TZACTL_DCAEVT0D_Pos)

#define TZACTL_DCAEVT0D_TRI_STATE   ((0x000U) << TZACTL_DCAEVT0D_Pos)
#define TZACTL_DCAEVT0D_SET_LOW     ((0x001U) << TZACTL_DCAEVT0D_Pos)
#define TZACTL_DCAEVT0D_SET_HIGH    ((0x002U) << TZACTL_DCAEVT0D_Pos)
#define TZACTL_DCAEVT0D_TOGGLE      ((0x003U) << TZACTL_DCAEVT0D_Pos)
#define TZACTL_DCAEVT0D_DO_NOTHING  ((0x007U) << TZACTL_DCAEVT0D_Pos)

#define TZACTL_DCAEVT0D_(x)  (((x) << TZACTL_DCAEVT0D_Pos) & TZACTL_DCAEVT0D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZACTL          DCAEVT1U
  *  @access     PWMx->TZACTL
  *  @brief      Action on output A when a digital compare A event 1 occurs and TBCNT is counting
  *              up
  */
#define TZACTL_DCAEVT1U_Pos  (12)
#define TZACTL_DCAEVT1U_Msk  (0x7U << TZACTL_DCAEVT1U_Pos)

#define TZACTL_DCAEVT1U_TRI_STATE   ((0x000U) << TZACTL_DCAEVT1U_Pos)
#define TZACTL_DCAEVT1U_SET_LOW     ((0x001U) << TZACTL_DCAEVT1U_Pos)
#define TZACTL_DCAEVT1U_SET_HIGH    ((0x002U) << TZACTL_DCAEVT1U_Pos)
#define TZACTL_DCAEVT1U_TOGGLE      ((0x003U) << TZACTL_DCAEVT1U_Pos)
#define TZACTL_DCAEVT1U_DO_NOTHING  ((0x007U) << TZACTL_DCAEVT1U_Pos)

#define TZACTL_DCAEVT1U_(x)  (((x) << TZACTL_DCAEVT1U_Pos) & TZACTL_DCAEVT1U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZACTL          DCAEVT1D
  *  @access     PWMx->TZACTL
  *  @brief      Action on output A when a digital compare A event 1 occurs and TBCNT is counting
  *              down
  */
#define TZACTL_DCAEVT1D_Pos  (15)
#define TZACTL_DCAEVT1D_Msk  (0x7U << TZACTL_DCAEVT1D_Pos)

#define TZACTL_DCAEVT1D_TRI_STATE   ((0x000U) << TZACTL_DCAEVT1D_Pos)
#define TZACTL_DCAEVT1D_SET_LOW     ((0x001U) << TZACTL_DCAEVT1D_Pos)
#define TZACTL_DCAEVT1D_SET_HIGH    ((0x002U) << TZACTL_DCAEVT1D_Pos)
#define TZACTL_DCAEVT1D_TOGGLE      ((0x003U) << TZACTL_DCAEVT1D_Pos)
#define TZACTL_DCAEVT1D_DO_NOTHING  ((0x007U) << TZACTL_DCAEVT1D_Pos)

#define TZACTL_DCAEVT1D_(x)  (((x) << TZACTL_DCAEVT1D_Pos) & TZACTL_DCAEVT1D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZBCTL          TZU
  *  @access     PWMx->TZBCTL
  *  @brief      Action on output B when a trip event occurs and TBCNT is counting up
  */
#define TZBCTL_TZU_Pos  (0)
#define TZBCTL_TZU_Msk  (0x7U << TZBCTL_TZU_Pos)

#define TZBCTL_TZU_TRI_STATE   ((0x000U) << TZBCTL_TZU_Pos)
#define TZBCTL_TZU_SET_LOW     ((0x001U) << TZBCTL_TZU_Pos)
#define TZBCTL_TZU_SET_HIGH    ((0x002U) << TZBCTL_TZU_Pos)
#define TZBCTL_TZU_TOGGLE      ((0x003U) << TZBCTL_TZU_Pos)
#define TZBCTL_TZU_DO_NOTHING  ((0x007U) << TZBCTL_TZU_Pos)

#define TZBCTL_TZU_(x)  (((x) << TZBCTL_TZU_Pos) & TZBCTL_TZU_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZBCTL          TZD
  *  @access     PWMx->TZBCTL
  *  @brief      Action on output B when a trip event occurs and TBCNT is counting down
  */
#define TZBCTL_TZD_Pos  (3)
#define TZBCTL_TZD_Msk  (0x7U << TZBCTL_TZD_Pos)

#define TZBCTL_TZD_TRI_STATE   ((0x000U) << TZBCTL_TZD_Pos)
#define TZBCTL_TZD_SET_LOW     ((0x001U) << TZBCTL_TZD_Pos)
#define TZBCTL_TZD_SET_HIGH    ((0x002U) << TZBCTL_TZD_Pos)
#define TZBCTL_TZD_TOGGLE      ((0x003U) << TZBCTL_TZD_Pos)
#define TZBCTL_TZD_DO_NOTHING  ((0x007U) << TZBCTL_TZD_Pos)

#define TZBCTL_TZD_(x)  (((x) << TZBCTL_TZD_Pos) & TZBCTL_TZD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZBCTL          DCBEVT0U
  *  @access     PWMx->TZBCTL
  *  @brief      Action on output B when a digital compare B event 0 occurs and TBCNT is counting
  *              up
  */
#define TZBCTL_DCBEVT0U_Pos  (6)
#define TZBCTL_DCBEVT0U_Msk  (0x7U << TZBCTL_DCBEVT0U_Pos)

#define TZBCTL_DCBEVT0U_TRI_STATE   ((0x000U) << TZBCTL_DCBEVT0U_Pos)
#define TZBCTL_DCBEVT0U_SET_LOW     ((0x001U) << TZBCTL_DCBEVT0U_Pos)
#define TZBCTL_DCBEVT0U_SET_HIGH    ((0x002U) << TZBCTL_DCBEVT0U_Pos)
#define TZBCTL_DCBEVT0U_TOGGLE      ((0x003U) << TZBCTL_DCBEVT0U_Pos)
#define TZBCTL_DCBEVT0U_DO_NOTHING  ((0x007U) << TZBCTL_DCBEVT0U_Pos)

#define TZBCTL_DCBEVT0U_(x)  (((x) << TZBCTL_DCBEVT0U_Pos) & TZBCTL_DCBEVT0U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZBCTL          DCBEVT0D
  *  @access     PWMx->TZBCTL
  *  @brief      Action on output B when a digital compare B event 0 occurs and TBCNT is counting
  *              down
  */
#define TZBCTL_DCBEVT0D_Pos  (9)
#define TZBCTL_DCBEVT0D_Msk  (0x7U << TZBCTL_DCBEVT0D_Pos)

#define TZBCTL_DCBEVT0D_TRI_STATE   ((0x000U) << TZBCTL_DCBEVT0D_Pos)
#define TZBCTL_DCBEVT0D_SET_LOW     ((0x001U) << TZBCTL_DCBEVT0D_Pos)
#define TZBCTL_DCBEVT0D_SET_HIGH    ((0x002U) << TZBCTL_DCBEVT0D_Pos)
#define TZBCTL_DCBEVT0D_TOGGLE      ((0x003U) << TZBCTL_DCBEVT0D_Pos)
#define TZBCTL_DCBEVT0D_DO_NOTHING  ((0x007U) << TZBCTL_DCBEVT0D_Pos)

#define TZBCTL_DCBEVT0D_(x)  (((x) << TZBCTL_DCBEVT0D_Pos) & TZBCTL_DCBEVT0D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZBCTL          DCBEVT1U
  *  @access     PWMx->TZBCTL
  *  @brief      Action on output B when a digital compare B event 1 occurs and TBCNT is counting
  *              up
  */
#define TZBCTL_DCBEVT1U_Pos  (12)
#define TZBCTL_DCBEVT1U_Msk  (0x7U << TZBCTL_DCBEVT1U_Pos)

#define TZBCTL_DCBEVT1U_TRI_STATE   ((0x000U) << TZBCTL_DCBEVT1U_Pos)
#define TZBCTL_DCBEVT1U_SET_LOW     ((0x001U) << TZBCTL_DCBEVT1U_Pos)
#define TZBCTL_DCBEVT1U_SET_HIGH    ((0x002U) << TZBCTL_DCBEVT1U_Pos)
#define TZBCTL_DCBEVT1U_TOGGLE      ((0x003U) << TZBCTL_DCBEVT1U_Pos)
#define TZBCTL_DCBEVT1U_DO_NOTHING  ((0x007U) << TZBCTL_DCBEVT1U_Pos)

#define TZBCTL_DCBEVT1U_(x)  (((x) << TZBCTL_DCBEVT1U_Pos) & TZBCTL_DCBEVT1U_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZBCTL          DCBEVT1D
  *  @access     PWMx->TZBCTL
  *  @brief      Action on output B when a digital compare B event 1 occurs and TBCNT is counting
  *              down
  */
#define TZBCTL_DCBEVT1D_Pos  (15)
#define TZBCTL_DCBEVT1D_Msk  (0x7U << TZBCTL_DCBEVT1D_Pos)

#define TZBCTL_DCBEVT1D_TRI_STATE   ((0x000U) << TZBCTL_DCBEVT1D_Pos)
#define TZBCTL_DCBEVT1D_SET_HIGH    ((0x001U) << TZBCTL_DCBEVT1D_Pos)
#define TZBCTL_DCBEVT1D_SET_LOW     ((0x002U) << TZBCTL_DCBEVT1D_Pos)
#define TZBCTL_DCBEVT1D_TOGGLE      ((0x003U) << TZBCTL_DCBEVT1D_Pos)
#define TZBCTL_DCBEVT1D_DO_NOTHING  ((0x007U) << TZBCTL_DCBEVT1D_Pos)

#define TZBCTL_DCBEVT1D_(x)  (((x) << TZBCTL_DCBEVT1D_Pos) & TZBCTL_DCBEVT1D_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            OST
  *  @access     PWMx->TZIF
  *  @brief      One-shot trip event interrupt flag
  *              This bit is always 0 if TZIE.OST=0
  */
#define TZIF_OST_Pos  (0)
#define TZIF_OST_Msk  (0x1U << TZIF_OST_Pos)

#define TZIF_OST_NOT_OCCUR  ((0x0U) << TZIF_OST_Pos)
#define TZIF_OST_OCCUR      ((0x1U) << TZIF_OST_Pos)

#define TZIF_OST_(x)  (((x) << TZIF_OST_Pos) & TZIF_OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            CBC
  *  @access     PWMx->TZIF
  *  @brief      Cycle-by-cycle trip event interrupt flag
  *              This bit is always 0 if TZIE.CBC=0
  */
#define TZIF_CBC_Pos  (1)
#define TZIF_CBC_Msk  (0x1U << TZIF_CBC_Pos)

#define TZIF_CBC_NOT_OCCUR  ((0x0U) << TZIF_CBC_Pos)
#define TZIF_CBC_OCCUR      ((0x1U) << TZIF_CBC_Pos)

#define TZIF_CBC_(x)  (((x) << TZIF_CBC_Pos) & TZIF_CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCAEVT0
  *  @access     PWMx->TZIF
  *  @brief      Digital compare A event 0 interrupt flag
  *              This bit is always 0 if TZIE.DCAEVT0=0
  */
#define TZIF_DCAEVT0_Pos  (2)
#define TZIF_DCAEVT0_Msk  (0x1U << TZIF_DCAEVT0_Pos)

#define TZIF_DCAEVT0_NOT_OCCUR  ((0x0U) << TZIF_DCAEVT0_Pos)
#define TZIF_DCAEVT0_OCCUR      ((0x1U) << TZIF_DCAEVT0_Pos)

#define TZIF_DCAEVT0_(x)  (((x) << TZIF_DCAEVT0_Pos) & TZIF_DCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCAEVT1
  *  @access     PWMx->TZIF
  *  @brief      Digital compare A event 1 interrupt flag
  *              This bit is always 0 if TZIE.DCAEVT1=0
  */
#define TZIF_DCAEVT1_Pos  (3)
#define TZIF_DCAEVT1_Msk  (0x1U << TZIF_DCAEVT1_Pos)

#define TZIF_DCAEVT1_NOT_OCCUR  ((0x0U) << TZIF_DCAEVT1_Pos)
#define TZIF_DCAEVT1_OCCUR      ((0x1U) << TZIF_DCAEVT1_Pos)

#define TZIF_DCAEVT1_(x)  (((x) << TZIF_DCAEVT1_Pos) & TZIF_DCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCBEVT0
  *  @access     PWMx->TZIF
  *  @brief      Digital compare B event 0 interrupt flag
  *              This bit is always 0 if TZIE.DCAEVT1=0
  */
#define TZIF_DCBEVT0_Pos  (4)
#define TZIF_DCBEVT0_Msk  (0x1U << TZIF_DCBEVT0_Pos)

#define TZIF_DCBEVT0_NOT_OCCUR  ((0x0U) << TZIF_DCBEVT0_Pos)
#define TZIF_DCBEVT0_OCCUR      ((0x1U) << TZIF_DCBEVT0_Pos)

#define TZIF_DCBEVT0_(x)  (((x) << TZIF_DCBEVT0_Pos) & TZIF_DCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCBEVT1
  *  @access     PWMx->TZIF
  *  @brief      Digital compare B event 1 interrupt flag
  *              This bit is always 0 if TZIE.DCBEVT1=0
  */
#define TZIF_DCBEVT1_Pos  (5)
#define TZIF_DCBEVT1_Msk  (0x1U << TZIF_DCBEVT1_Pos)

#define TZIF_DCBEVT1_NOT_OCCUR  ((0x0U) << TZIF_DCBEVT1_Pos)
#define TZIF_DCBEVT1_OCCUR      ((0x1U) << TZIF_DCBEVT1_Pos)

#define TZIF_DCBEVT1_(x)  (((x) << TZIF_DCBEVT1_Pos) & TZIF_DCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            INT
  *  @access     PWMx->TZIF
  *  @brief      Global trip interrupt flag
  */
#define TZIF_INT_Pos  (6)
#define TZIF_INT_Msk  (0x1U << TZIF_INT_Pos)

#define TZIF_INT_NOT_OCCUR  ((0x0U) << TZIF_INT_Pos)
#define TZIF_INT_OCCUR      ((0x1U) << TZIF_INT_Pos)

#define TZIF_INT_(x)  (((x) << TZIF_INT_Pos) & TZIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            OSTRAW
  *  @access     PWMx->TZIF
  *  @brief      One-shot trip event raw interrupt flag
  */
#define TZIF_OSTRAW_Pos  (16)
#define TZIF_OSTRAW_Msk  (0x1U << TZIF_OSTRAW_Pos)

#define TZIF_OSTRAW_NOT_OCCUR  ((0x0U) << TZIF_OSTRAW_Pos)
#define TZIF_OSTRAW_OCCUR      ((0x1U) << TZIF_OSTRAW_Pos)

#define TZIF_OSTRAW_(x)  (((x) << TZIF_OSTRAW_Pos) & TZIF_OSTRAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            CBCRAW
  *  @access     PWMx->TZIF
  *  @brief      Cycle-by-cycle trip event raw interrupt flag
  */
#define TZIF_CBCRAW_Pos  (17)
#define TZIF_CBCRAW_Msk  (0x1U << TZIF_CBCRAW_Pos)

#define TZIF_CBCRAW_NOT_OCCUR  ((0x0U) << TZIF_CBCRAW_Pos)
#define TZIF_CBCRAW_OCCUR      ((0x1U) << TZIF_CBCRAW_Pos)

#define TZIF_CBCRAW_(x)  (((x) << TZIF_CBCRAW_Pos) & TZIF_CBCRAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCAEVT0RAW
  *  @access     PWMx->TZIF
  *  @brief      Digital compare A event 0 raw interrupt flag
  */
#define TZIF_DCAEVT0RAW_Pos  (18)
#define TZIF_DCAEVT0RAW_Msk  (0x1U << TZIF_DCAEVT0RAW_Pos)

#define TZIF_DCAEVT0RAW_NOT_OCCUR  ((0x0U) << TZIF_DCAEVT0RAW_Pos)
#define TZIF_DCAEVT0RAW_OCCUR      ((0x1U) << TZIF_DCAEVT0RAW_Pos)

#define TZIF_DCAEVT0RAW_(x)  (((x) << TZIF_DCAEVT0RAW_Pos) & TZIF_DCAEVT0RAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCAEVT1RAW
  *  @access     PWMx->TZIF
  *  @brief      Digital compare A event 1 raw interrupt flag
  */
#define TZIF_DCAEVT1RAW_Pos  (19)
#define TZIF_DCAEVT1RAW_Msk  (0x1U << TZIF_DCAEVT1RAW_Pos)

#define TZIF_DCAEVT1RAW_NOT_OCCUR  ((0x0U) << TZIF_DCAEVT1RAW_Pos)
#define TZIF_DCAEVT1RAW_OCCUR      ((0x1U) << TZIF_DCAEVT1RAW_Pos)

#define TZIF_DCAEVT1RAW_(x)  (((x) << TZIF_DCAEVT1RAW_Pos) & TZIF_DCAEVT1RAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCBEVT0RAW
  *  @access     PWMx->TZIF
  *  @brief      Digital compare B event 0 raw interrupt flag
  */
#define TZIF_DCBEVT0RAW_Pos  (20)
#define TZIF_DCBEVT0RAW_Msk  (0x1U << TZIF_DCBEVT0RAW_Pos)

#define TZIF_DCBEVT0RAW_NOT_OCCUR  ((0x0U) << TZIF_DCBEVT0RAW_Pos)
#define TZIF_DCBEVT0RAW_OCCUR      ((0x1U) << TZIF_DCBEVT0RAW_Pos)

#define TZIF_DCBEVT0RAW_(x)  (((x) << TZIF_DCBEVT0RAW_Pos) & TZIF_DCBEVT0RAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIF            DCBEVT1RAW
  *  @access     PWMx->TZIF
  *  @brief      Digital compare B event 1 raw interrupt flag
  */
#define TZIF_DCBEVT1RAW_Pos  (21)
#define TZIF_DCBEVT1RAW_Msk  (0x1U << TZIF_DCBEVT1RAW_Pos)

#define TZIF_DCBEVT1RAW_NOT_OCCUR  ((0x0U) << TZIF_DCBEVT1RAW_Pos)
#define TZIF_DCBEVT1RAW_OCCUR      ((0x1U) << TZIF_DCBEVT1RAW_Pos)

#define TZIF_DCBEVT1RAW_(x)  (((x) << TZIF_DCBEVT1RAW_Pos) & TZIF_DCBEVT1RAW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            OST
  *  @access     PWMx->TZIC
  *  @brief      Clear one-shot trip status flag
  */
#define TZIC_OST_Pos  (0)
#define TZIC_OST_Msk  (0x1U << TZIC_OST_Pos)

#define TZIC_OST_NO_EFFECT  ((0x0U) << TZIC_OST_Pos)
#define TZIC_OST_CLEAR      ((0x1U) << TZIC_OST_Pos)

#define TZIC_OST_(x)  (((x) << TZIC_OST_Pos) & TZIC_OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            CBC
  *  @access     PWMx->TZIC
  *  @brief      Clear cycle-by-cycle trip status flag
  */
#define TZIC_CBC_Pos  (1)
#define TZIC_CBC_Msk  (0x1U << TZIC_CBC_Pos)

#define TZIC_CBC_NO_EFFECT  ((0x0U) << TZIC_CBC_Pos)
#define TZIC_CBC_CLEAR      ((0x1U) << TZIC_CBC_Pos)

#define TZIC_CBC_(x)  (((x) << TZIC_CBC_Pos) & TZIC_CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            DCAEVT0
  *  @access     PWMx->TZIC
  *  @brief      Clear digital compare A event 0 status flag
  */
#define TZIC_DCAEVT0_Pos  (2)
#define TZIC_DCAEVT0_Msk  (0x1U << TZIC_DCAEVT0_Pos)

#define TZIC_DCAEVT0_NO_EFFECT  ((0x0U) << TZIC_DCAEVT0_Pos)
#define TZIC_DCAEVT0_CLEAR      ((0x1U) << TZIC_DCAEVT0_Pos)

#define TZIC_DCAEVT0_(x)  (((x) << TZIC_DCAEVT0_Pos) & TZIC_DCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            DCAEVT1
  *  @access     PWMx->TZIC
  *  @brief      Clear digital compare A event 1 status flag
  */
#define TZIC_DCAEVT1_Pos  (3)
#define TZIC_DCAEVT1_Msk  (0x1U << TZIC_DCAEVT1_Pos)

#define TZIC_DCAEVT1_NO_EFFECT  ((0x0U) << TZIC_DCAEVT1_Pos)
#define TZIC_DCAEVT1_CLEAR      ((0x1U) << TZIC_DCAEVT1_Pos)

#define TZIC_DCAEVT1_(x)  (((x) << TZIC_DCAEVT1_Pos) & TZIC_DCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            DCBEVT0
  *  @access     PWMx->TZIC
  *  @brief      Clear digital compare B event 0 status flag
  */
#define TZIC_DCBEVT0_Pos  (4)
#define TZIC_DCBEVT0_Msk  (0x1U << TZIC_DCBEVT0_Pos)

#define TZIC_DCBEVT0_NO_EFFECT  ((0x0U) << TZIC_DCBEVT0_Pos)
#define TZIC_DCBEVT0_CLEAR      ((0x1U) << TZIC_DCBEVT0_Pos)

#define TZIC_DCBEVT0_(x)  (((x) << TZIC_DCBEVT0_Pos) & TZIC_DCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            DCBEVT1
  *  @access     PWMx->TZIC
  *  @brief      Clear digital compare B event 1 status flag
  */
#define TZIC_DCBEVT1_Pos  (5)
#define TZIC_DCBEVT1_Msk  (0x1U << TZIC_DCBEVT1_Pos)

#define TZIC_DCBEVT1_NO_EFFECT  ((0x0U) << TZIC_DCBEVT1_Pos)
#define TZIC_DCBEVT1_CLEAR      ((0x1U) << TZIC_DCBEVT1_Pos)

#define TZIC_DCBEVT1_(x)  (((x) << TZIC_DCBEVT1_Pos) & TZIC_DCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            INT
  *  @access     PWMx->TZIC
  *  @brief      Clear global interrupt status flag
  */
#define TZIC_INT_Pos  (6)
#define TZIC_INT_Msk  (0x1U << TZIC_INT_Pos)

#define TZIC_INT_NO_EFFECT  ((0x0U) << TZIC_INT_Pos)
#define TZIC_INT_CLEAR      ((0x1U) << TZIC_INT_Pos)

#define TZIC_INT_(x)  (((x) << TZIC_INT_Pos) & TZIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            CBCCLRMODE
  *  @access     PWMx->TZIC
  *  @brief      Latched CBC trip status clear mode.
  *              This bit is writable only when CBCCLRMODEWE bit is 1 and PWMREGKEY=0x1acce551
  */
#define TZIC_CBCCLRMODE_Pos  (29)
#define TZIC_CBCCLRMODE_Msk  (0x3U << TZIC_CBCCLRMODE_Pos)

#define TZIC_CBCCLRMODE_CLEAR_ON_ZERO         ((0x00U) << TZIC_CBCCLRMODE_Pos)
#define TZIC_CBCCLRMODE_CLEAR_ON_PERIOD       ((0x01U) << TZIC_CBCCLRMODE_Pos)
#define TZIC_CBCCLRMODE_CLEAR_ON_ZERO_PERIOD  ((0x02U) << TZIC_CBCCLRMODE_Pos)
#define TZIC_CBCCLRMODE_CLEAR_DISABLE         ((0x03U) << TZIC_CBCCLRMODE_Pos)

#define TZIC_CBCCLRMODE_(x)  (((x) << TZIC_CBCCLRMODE_Pos) & TZIC_CBCCLRMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIC            CBCCLRMODEWE
  *  @access     PWMx->TZIC
  *  @brief      Latched CBC trip status clear mode write enable
  */
#define TZIC_CBCCLRMODEWE_Pos  (31)
#define TZIC_CBCCLRMODEWE_Msk  (0x1U << TZIC_CBCCLRMODEWE_Pos)

#define TZIC_CBCCLRMODEWE_NO_EFFECT  ((0x0U) << TZIC_CBCCLRMODEWE_Pos)
#define TZIC_CBCCLRMODEWE_ENABLE     ((0x1U) << TZIC_CBCCLRMODEWE_Pos)

#define TZIC_CBCCLRMODEWE_(x)  (((x) << TZIC_CBCCLRMODEWE_Pos) & TZIC_CBCCLRMODEWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIE            OST
  *  @access     PWMx->TZIE
  *  @brief      One-shot trip-zone interrupt enable
  */
#define TZIE_OST_Pos  (0)
#define TZIE_OST_Msk  (0x1U << TZIE_OST_Pos)

#define TZIE_OST_DISABLE  ((0x0U) << TZIE_OST_Pos)
#define TZIE_OST_ENABLE   ((0x1U) << TZIE_OST_Pos)

#define TZIE_OST_(x)  (((x) << TZIE_OST_Pos) & TZIE_OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIE            CBC
  *  @access     PWMx->TZIE
  *  @brief      Cycle-by-cycle trip-zone interrupt enable
  */
#define TZIE_CBC_Pos  (1)
#define TZIE_CBC_Msk  (0x1U << TZIE_CBC_Pos)

#define TZIE_CBC_DISABLE  ((0x0U) << TZIE_CBC_Pos)
#define TZIE_CBC_ENABLE   ((0x1U) << TZIE_CBC_Pos)

#define TZIE_CBC_(x)  (((x) << TZIE_CBC_Pos) & TZIE_CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIE            DCAEVT0
  *  @access     PWMx->TZIE
  *  @brief      Digital compare A event 0 interrupt enable
  */
#define TZIE_DCAEVT0_Pos  (2)
#define TZIE_DCAEVT0_Msk  (0x1U << TZIE_DCAEVT0_Pos)

#define TZIE_DCAEVT0_DISABLE  ((0x0U) << TZIE_DCAEVT0_Pos)
#define TZIE_DCAEVT0_ENABLE   ((0x1U) << TZIE_DCAEVT0_Pos)

#define TZIE_DCAEVT0_(x)  (((x) << TZIE_DCAEVT0_Pos) & TZIE_DCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIE            DCAEVT1
  *  @access     PWMx->TZIE
  *  @brief      Digital compare A event 1 interrupt enable
  */
#define TZIE_DCAEVT1_Pos  (3)
#define TZIE_DCAEVT1_Msk  (0x1U << TZIE_DCAEVT1_Pos)

#define TZIE_DCAEVT1_DISABLE  ((0x0U) << TZIE_DCAEVT1_Pos)
#define TZIE_DCAEVT1_ENABLE   ((0x1U) << TZIE_DCAEVT1_Pos)

#define TZIE_DCAEVT1_(x)  (((x) << TZIE_DCAEVT1_Pos) & TZIE_DCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIE            DCBEVT0
  *  @access     PWMx->TZIE
  *  @brief      Digital compare B event 0 interrupt enable
  */
#define TZIE_DCBEVT0_Pos  (4)
#define TZIE_DCBEVT0_Msk  (0x1U << TZIE_DCBEVT0_Pos)

#define TZIE_DCBEVT0_DISABLE  ((0x0U) << TZIE_DCBEVT0_Pos)
#define TZIE_DCBEVT0_ENABLE   ((0x1U) << TZIE_DCBEVT0_Pos)

#define TZIE_DCBEVT0_(x)  (((x) << TZIE_DCBEVT0_Pos) & TZIE_DCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZIE            DCBEVT1
  *  @access     PWMx->TZIE
  *  @brief      Digital compare B event 1 interrupt enable
  */
#define TZIE_DCBEVT1_Pos  (5)
#define TZIE_DCBEVT1_Msk  (0x1U << TZIE_DCBEVT1_Pos)

#define TZIE_DCBEVT1_DISABLE  ((0x0U) << TZIE_DCBEVT1_Pos)
#define TZIE_DCBEVT1_ENABLE   ((0x1U) << TZIE_DCBEVT1_Pos)

#define TZIE_DCBEVT1_(x)  (((x) << TZIE_DCBEVT1_Pos) & TZIE_DCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           OST
  *  @access     PWMx->TZFRC
  *  @brief      Software force a one-shot trip event
  *              OSTWE bit should be written 1 at the same time
  */
#define TZFRC_OST_Pos  (0)
#define TZFRC_OST_Msk  (0x1U << TZFRC_OST_Pos)

#define TZFRC_OST_NO_EFFECT  ((0x0U) << TZFRC_OST_Pos)
#define TZFRC_OST_FORCE      ((0x1U) << TZFRC_OST_Pos)

#define TZFRC_OST_(x)  (((x) << TZFRC_OST_Pos) & TZFRC_OST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           CBC
  *  @access     PWMx->TZFRC
  *  @brief      Software force a cycle-by-cycle trip event
  *              CBCWE bit should be written 1 at the same time
  */
#define TZFRC_CBC_Pos  (1)
#define TZFRC_CBC_Msk  (0x1U << TZFRC_CBC_Pos)

#define TZFRC_CBC_NO_EFFECT  ((0x0U) << TZFRC_CBC_Pos)
#define TZFRC_CBC_FORCE      ((0x1U) << TZFRC_CBC_Pos)

#define TZFRC_CBC_(x)  (((x) << TZFRC_CBC_Pos) & TZFRC_CBC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCAEVT0
  *  @access     PWMx->TZFRC
  *  @brief      Software force a digital compare A event 0
  *              DCAEVT0WE bit should be written 1 at the same time
  */
#define TZFRC_DCAEVT0_Pos  (2)
#define TZFRC_DCAEVT0_Msk  (0x1U << TZFRC_DCAEVT0_Pos)

#define TZFRC_DCAEVT0_NO_EFFECT  ((0x0U) << TZFRC_DCAEVT0_Pos)
#define TZFRC_DCAEVT0_FORCE      ((0x1U) << TZFRC_DCAEVT0_Pos)

#define TZFRC_DCAEVT0_(x)  (((x) << TZFRC_DCAEVT0_Pos) & TZFRC_DCAEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCAEVT1
  *  @access     PWMx->TZFRC
  *  @brief      Software force a digital compare A event 1
  *              DCAEVT1WE bit should be written 1 at the same time
  */
#define TZFRC_DCAEVT1_Pos  (3)
#define TZFRC_DCAEVT1_Msk  (0x1U << TZFRC_DCAEVT1_Pos)

#define TZFRC_DCAEVT1_NO_EFFECT  ((0x0U) << TZFRC_DCAEVT1_Pos)
#define TZFRC_DCAEVT1_FORCE      ((0x1U) << TZFRC_DCAEVT1_Pos)

#define TZFRC_DCAEVT1_(x)  (((x) << TZFRC_DCAEVT1_Pos) & TZFRC_DCAEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCBEVT0
  *  @access     PWMx->TZFRC
  *  @brief      Software force a digital compare B event 0
  *              DCBEVT0WE bit should be written 1 at the same time
  */
#define TZFRC_DCBEVT0_Pos  (4)
#define TZFRC_DCBEVT0_Msk  (0x1U << TZFRC_DCBEVT0_Pos)

#define TZFRC_DCBEVT0_NO_EFFECT  ((0x0U) << TZFRC_DCBEVT0_Pos)
#define TZFRC_DCBEVT0_FORCE      ((0x1U) << TZFRC_DCBEVT0_Pos)

#define TZFRC_DCBEVT0_(x)  (((x) << TZFRC_DCBEVT0_Pos) & TZFRC_DCBEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCBEVT1
  *  @access     PWMx->TZFRC
  *  @brief      Software force a digital compare B event 1
  *              DCBEVT1WE bit should be written 1 at the same time
  */
#define TZFRC_DCBEVT1_Pos  (5)
#define TZFRC_DCBEVT1_Msk  (0x1U << TZFRC_DCBEVT1_Pos)

#define TZFRC_DCBEVT1_NO_EFFECT  ((0x0U) << TZFRC_DCBEVT1_Pos)
#define TZFRC_DCBEVT1_FORCE      ((0x1U) << TZFRC_DCBEVT1_Pos)

#define TZFRC_DCBEVT1_(x)  (((x) << TZFRC_DCBEVT1_Pos) & TZFRC_DCBEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           OSTWE
  *  @access     PWMx->TZFRC
  *  @brief      OST bit write enable
  */
#define TZFRC_OSTWE_Pos  (8)
#define TZFRC_OSTWE_Msk  (0x1U << TZFRC_OSTWE_Pos)

#define TZFRC_OSTWE_DISABLE  ((0x0U) << TZFRC_OSTWE_Pos)
#define TZFRC_OSTWE_ENABLE   ((0x1U) << TZFRC_OSTWE_Pos)

#define TZFRC_OSTWE_(x)  (((x) << TZFRC_OSTWE_Pos) & TZFRC_OSTWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           CBCWE
  *  @access     PWMx->TZFRC
  *  @brief      CBC bit write enable
  */
#define TZFRC_CBCWE_Pos  (9)
#define TZFRC_CBCWE_Msk  (0x1U << TZFRC_CBCWE_Pos)

#define TZFRC_CBCWE_DISABLE  ((0x0U) << TZFRC_CBCWE_Pos)
#define TZFRC_CBCWE_ENABLE   ((0x1U) << TZFRC_CBCWE_Pos)

#define TZFRC_CBCWE_(x)  (((x) << TZFRC_CBCWE_Pos) & TZFRC_CBCWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCAEVT0WE
  *  @access     PWMx->TZFRC
  *  @brief      DAAEVT0 bit write enable
  */
#define TZFRC_DCAEVT0WE_Pos  (10)
#define TZFRC_DCAEVT0WE_Msk  (0x1U << TZFRC_DCAEVT0WE_Pos)

#define TZFRC_DCAEVT0WE_DISABLE  ((0x0U) << TZFRC_DCAEVT0WE_Pos)
#define TZFRC_DCAEVT0WE_ENABLE   ((0x1U) << TZFRC_DCAEVT0WE_Pos)

#define TZFRC_DCAEVT0WE_(x)  (((x) << TZFRC_DCAEVT0WE_Pos) & TZFRC_DCAEVT0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCAEVT1WE
  *  @access     PWMx->TZFRC
  *  @brief      DCAEVT1 bit write enable
  */
#define TZFRC_DCAEVT1WE_Pos  (11)
#define TZFRC_DCAEVT1WE_Msk  (0x1U << TZFRC_DCAEVT1WE_Pos)

#define TZFRC_DCAEVT1WE_DISABLE  ((0x0U) << TZFRC_DCAEVT1WE_Pos)
#define TZFRC_DCAEVT1WE_ENABLE   ((0x1U) << TZFRC_DCAEVT1WE_Pos)

#define TZFRC_DCAEVT1WE_(x)  (((x) << TZFRC_DCAEVT1WE_Pos) & TZFRC_DCAEVT1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCBEVT0WE
  *  @access     PWMx->TZFRC
  *  @brief      DCBEVT0 bit write enable
  */
#define TZFRC_DCBEVT0WE_Pos  (12)
#define TZFRC_DCBEVT0WE_Msk  (0x1U << TZFRC_DCBEVT0WE_Pos)

#define TZFRC_DCBEVT0WE_DISABLE  ((0x0U) << TZFRC_DCBEVT0WE_Pos)
#define TZFRC_DCBEVT0WE_ENABLE   ((0x1U) << TZFRC_DCBEVT0WE_Pos)

#define TZFRC_DCBEVT0WE_(x)  (((x) << TZFRC_DCBEVT0WE_Pos) & TZFRC_DCBEVT0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            TZFRC           DCBEVT1WE
  *  @access     PWMx->TZFRC
  *  @brief      DCBEVT1 bit write enable
  */
#define TZFRC_DCBEVT1WE_Pos  (13)
#define TZFRC_DCBEVT1WE_Msk  (0x1U << TZFRC_DCBEVT1WE_Pos)

#define TZFRC_DCBEVT1WE_DISABLE  ((0x0U) << TZFRC_DCBEVT1WE_Pos)
#define TZFRC_DCBEVT1WE_ENABLE   ((0x1U) << TZFRC_DCBEVT1WE_Pos)

#define TZFRC_DCBEVT1WE_(x)  (((x) << TZFRC_DCBEVT1WE_Pos) & TZFRC_DCBEVT1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     TZ0
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable TZ0 as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_TZ0_Pos  (0)
#define DCALTRIPSEL_TZ0_Msk  (0x1U << DCALTRIPSEL_TZ0_Pos)

#define DCALTRIPSEL_TZ0_DISABLE  ((0x0U) << DCALTRIPSEL_TZ0_Pos)
#define DCALTRIPSEL_TZ0_ENABLE   ((0x1U) << DCALTRIPSEL_TZ0_Pos)

#define DCALTRIPSEL_TZ0_(x)  (((x) << DCALTRIPSEL_TZ0_Pos) & DCALTRIPSEL_TZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     TZ1
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable TZ1 as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_TZ1_Pos  (1)
#define DCALTRIPSEL_TZ1_Msk  (0x1U << DCALTRIPSEL_TZ1_Pos)

#define DCALTRIPSEL_TZ1_DISABLE  ((0x0U) << DCALTRIPSEL_TZ1_Pos)
#define DCALTRIPSEL_TZ1_ENABLE   ((0x1U) << DCALTRIPSEL_TZ1_Pos)

#define DCALTRIPSEL_TZ1_(x)  (((x) << DCALTRIPSEL_TZ1_Pos) & DCALTRIPSEL_TZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     TZ2
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable TZ2 as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_TZ2_Pos  (2)
#define DCALTRIPSEL_TZ2_Msk  (0x1U << DCALTRIPSEL_TZ2_Pos)

#define DCALTRIPSEL_TZ2_DISABLE  ((0x0U) << DCALTRIPSEL_TZ2_Pos)
#define DCALTRIPSEL_TZ2_ENABLE   ((0x1U) << DCALTRIPSEL_TZ2_Pos)

#define DCALTRIPSEL_TZ2_(x)  (((x) << DCALTRIPSEL_TZ2_Pos) & DCALTRIPSEL_TZ2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     TZ3
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable TZ3 as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_TZ3_Pos  (3)
#define DCALTRIPSEL_TZ3_Msk  (0x1U << DCALTRIPSEL_TZ3_Pos)

#define DCALTRIPSEL_TZ3_DISABLE  ((0x0U) << DCALTRIPSEL_TZ3_Pos)
#define DCALTRIPSEL_TZ3_ENABLE   ((0x1U) << DCALTRIPSEL_TZ3_Pos)

#define DCALTRIPSEL_TZ3_(x)  (((x) << DCALTRIPSEL_TZ3_Pos) & DCALTRIPSEL_TZ3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     TZ4
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable TZ4 as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_TZ4_Pos  (4)
#define DCALTRIPSEL_TZ4_Msk  (0x1U << DCALTRIPSEL_TZ4_Pos)

#define DCALTRIPSEL_TZ4_DISABLE  ((0x0U) << DCALTRIPSEL_TZ4_Pos)
#define DCALTRIPSEL_TZ4_ENABLE   ((0x1U) << DCALTRIPSEL_TZ4_Pos)

#define DCALTRIPSEL_TZ4_(x)  (((x) << DCALTRIPSEL_TZ4_Pos) & DCALTRIPSEL_TZ4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     EPWRTZ0
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable EPWRTZ0 as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_EPWRTZ0_Pos  (5)
#define DCALTRIPSEL_EPWRTZ0_Msk  (0x1U << DCALTRIPSEL_EPWRTZ0_Pos)

#define DCALTRIPSEL_EPWRTZ0_DISABLE  ((0x0U) << DCALTRIPSEL_EPWRTZ0_Pos)
#define DCALTRIPSEL_EPWRTZ0_ENABLE   ((0x1U) << DCALTRIPSEL_EPWRTZ0_Pos)

#define DCALTRIPSEL_EPWRTZ0_(x)  (((x) << DCALTRIPSEL_EPWRTZ0_Pos) & DCALTRIPSEL_EPWRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     EPWRTZ1
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable EPWRTZ1 as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_EPWRTZ1_Pos  (6)
#define DCALTRIPSEL_EPWRTZ1_Msk  (0x1U << DCALTRIPSEL_EPWRTZ1_Pos)

#define DCALTRIPSEL_EPWRTZ1_DISABLE  ((0x0U) << DCALTRIPSEL_EPWRTZ1_Pos)
#define DCALTRIPSEL_EPWRTZ1_ENABLE   ((0x1U) << DCALTRIPSEL_EPWRTZ1_Pos)

#define DCALTRIPSEL_EPWRTZ1_(x)  (((x) << DCALTRIPSEL_EPWRTZ1_Pos) & DCALTRIPSEL_EPWRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     ADCPPU0TZ
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable ADCPPU0TZ as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_ADCPPU0TZ_Pos  (8)
#define DCALTRIPSEL_ADCPPU0TZ_Msk  (0x1U << DCALTRIPSEL_ADCPPU0TZ_Pos)

#define DCALTRIPSEL_ADCPPU0TZ_DISABLE  ((0x0U) << DCALTRIPSEL_ADCPPU0TZ_Pos)
#define DCALTRIPSEL_ADCPPU0TZ_ENABLE   ((0x1U) << DCALTRIPSEL_ADCPPU0TZ_Pos)

#define DCALTRIPSEL_ADCPPU0TZ_(x)  (((x) << DCALTRIPSEL_ADCPPU0TZ_Pos) & DCALTRIPSEL_ADCPPU0TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     ADCPPU1TZ
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable ADCPPU1TZ as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_ADCPPU1TZ_Pos  (9)
#define DCALTRIPSEL_ADCPPU1TZ_Msk  (0x1U << DCALTRIPSEL_ADCPPU1TZ_Pos)

#define DCALTRIPSEL_ADCPPU1TZ_DISABLE  ((0x0U) << DCALTRIPSEL_ADCPPU1TZ_Pos)
#define DCALTRIPSEL_ADCPPU1TZ_ENABLE   ((0x1U) << DCALTRIPSEL_ADCPPU1TZ_Pos)

#define DCALTRIPSEL_ADCPPU1TZ_(x)  (((x) << DCALTRIPSEL_ADCPPU1TZ_Pos) & DCALTRIPSEL_ADCPPU1TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     ADCPPU2TZ
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable ADCPPU2TZ as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_ADCPPU2TZ_Pos  (10)
#define DCALTRIPSEL_ADCPPU2TZ_Msk  (0x1U << DCALTRIPSEL_ADCPPU2TZ_Pos)

#define DCALTRIPSEL_ADCPPU2TZ_DISABLE  ((0x0U) << DCALTRIPSEL_ADCPPU2TZ_Pos)
#define DCALTRIPSEL_ADCPPU2TZ_ENABLE   ((0x1U) << DCALTRIPSEL_ADCPPU2TZ_Pos)

#define DCALTRIPSEL_ADCPPU2TZ_(x)  (((x) << DCALTRIPSEL_ADCPPU2TZ_Pos) & DCALTRIPSEL_ADCPPU2TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     COMP0L
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable COMPL as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_COMP0L_Pos  (16)
#define DCALTRIPSEL_COMP0L_Msk  (0x1U << DCALTRIPSEL_COMP0L_Pos)

#define DCALTRIPSEL_COMP0L_DISABLE  ((0x0U) << DCALTRIPSEL_COMP0L_Pos)
#define DCALTRIPSEL_COMP0L_ENABLE   ((0x1U) << DCALTRIPSEL_COMP0L_Pos)

#define DCALTRIPSEL_COMP0L_(x)  (((x) << DCALTRIPSEL_COMP0L_Pos) & DCALTRIPSEL_COMP0L_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCALTRIPSEL     COMP0H
  *  @access     PWMx->DCALTRIPSEL
  *  @brief      Enable COMPH as DCAL trip event (ORed)
  */
#define DCALTRIPSEL_COMP0H_Pos  (17)
#define DCALTRIPSEL_COMP0H_Msk  (0x1U << DCALTRIPSEL_COMP0H_Pos)

#define DCALTRIPSEL_COMP0H_DISABLE  ((0x0U) << DCALTRIPSEL_COMP0H_Pos)
#define DCALTRIPSEL_COMP0H_ENABLE   ((0x1U) << DCALTRIPSEL_COMP0H_Pos)

#define DCALTRIPSEL_COMP0H_(x)  (((x) << DCALTRIPSEL_COMP0H_Pos) & DCALTRIPSEL_COMP0H_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     TZ0
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable TZ0 as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_TZ0_Pos  (0)
#define DCAHTRIPSEL_TZ0_Msk  (0x1U << DCAHTRIPSEL_TZ0_Pos)

#define DCAHTRIPSEL_TZ0_DISABLE  ((0x0U) << DCAHTRIPSEL_TZ0_Pos)
#define DCAHTRIPSEL_TZ0_ENABLE   ((0x1U) << DCAHTRIPSEL_TZ0_Pos)

#define DCAHTRIPSEL_TZ0_(x)  (((x) << DCAHTRIPSEL_TZ0_Pos) & DCAHTRIPSEL_TZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     TZ1
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable TZ1 as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_TZ1_Pos  (1)
#define DCAHTRIPSEL_TZ1_Msk  (0x1U << DCAHTRIPSEL_TZ1_Pos)

#define DCAHTRIPSEL_TZ1_DISABLE  ((0x0U) << DCAHTRIPSEL_TZ1_Pos)
#define DCAHTRIPSEL_TZ1_ENABLE   ((0x1U) << DCAHTRIPSEL_TZ1_Pos)

#define DCAHTRIPSEL_TZ1_(x)  (((x) << DCAHTRIPSEL_TZ1_Pos) & DCAHTRIPSEL_TZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     TZ2
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable TZ2 as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_TZ2_Pos  (2)
#define DCAHTRIPSEL_TZ2_Msk  (0x1U << DCAHTRIPSEL_TZ2_Pos)

#define DCAHTRIPSEL_TZ2_DISABLE  ((0x0U) << DCAHTRIPSEL_TZ2_Pos)
#define DCAHTRIPSEL_TZ2_ENABLE   ((0x1U) << DCAHTRIPSEL_TZ2_Pos)

#define DCAHTRIPSEL_TZ2_(x)  (((x) << DCAHTRIPSEL_TZ2_Pos) & DCAHTRIPSEL_TZ2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     TZ3
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable TZ3 as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_TZ3_Pos  (3)
#define DCAHTRIPSEL_TZ3_Msk  (0x1U << DCAHTRIPSEL_TZ3_Pos)

#define DCAHTRIPSEL_TZ3_DISABLE  ((0x0U) << DCAHTRIPSEL_TZ3_Pos)
#define DCAHTRIPSEL_TZ3_ENABLE   ((0x1U) << DCAHTRIPSEL_TZ3_Pos)

#define DCAHTRIPSEL_TZ3_(x)  (((x) << DCAHTRIPSEL_TZ3_Pos) & DCAHTRIPSEL_TZ3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     TZ4
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable TZ4 as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_TZ4_Pos  (4)
#define DCAHTRIPSEL_TZ4_Msk  (0x1U << DCAHTRIPSEL_TZ4_Pos)

#define DCAHTRIPSEL_TZ4_DISABLE  ((0x0U) << DCAHTRIPSEL_TZ4_Pos)
#define DCAHTRIPSEL_TZ4_ENABLE   ((0x1U) << DCAHTRIPSEL_TZ4_Pos)

#define DCAHTRIPSEL_TZ4_(x)  (((x) << DCAHTRIPSEL_TZ4_Pos) & DCAHTRIPSEL_TZ4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     EPWRTZ0
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable EPWRTZ0 as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_EPWRTZ0_Pos  (5)
#define DCAHTRIPSEL_EPWRTZ0_Msk  (0x1U << DCAHTRIPSEL_EPWRTZ0_Pos)

#define DCAHTRIPSEL_EPWRTZ0_DISABLE  ((0x0U) << DCAHTRIPSEL_EPWRTZ0_Pos)
#define DCAHTRIPSEL_EPWRTZ0_ENABLE   ((0x1U) << DCAHTRIPSEL_EPWRTZ0_Pos)

#define DCAHTRIPSEL_EPWRTZ0_(x)  (((x) << DCAHTRIPSEL_EPWRTZ0_Pos) & DCAHTRIPSEL_EPWRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     EPWRTZ1
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable EPWRTZ1 as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_EPWRTZ1_Pos  (6)
#define DCAHTRIPSEL_EPWRTZ1_Msk  (0x1U << DCAHTRIPSEL_EPWRTZ1_Pos)

#define DCAHTRIPSEL_EPWRTZ1_DISABLE  ((0x0U) << DCAHTRIPSEL_EPWRTZ1_Pos)
#define DCAHTRIPSEL_EPWRTZ1_ENABLE   ((0x1U) << DCAHTRIPSEL_EPWRTZ1_Pos)

#define DCAHTRIPSEL_EPWRTZ1_(x)  (((x) << DCAHTRIPSEL_EPWRTZ1_Pos) & DCAHTRIPSEL_EPWRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     ADCPPU0TZ
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable ADCPPU0TZ as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_ADCPPU0TZ_Pos  (8)
#define DCAHTRIPSEL_ADCPPU0TZ_Msk  (0x1U << DCAHTRIPSEL_ADCPPU0TZ_Pos)

#define DCAHTRIPSEL_ADCPPU0TZ_DISABLE  ((0x0U) << DCAHTRIPSEL_ADCPPU0TZ_Pos)
#define DCAHTRIPSEL_ADCPPU0TZ_ENABLE   ((0x1U) << DCAHTRIPSEL_ADCPPU0TZ_Pos)

#define DCAHTRIPSEL_ADCPPU0TZ_(x)  (((x) << DCAHTRIPSEL_ADCPPU0TZ_Pos) & DCAHTRIPSEL_ADCPPU0TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     ADCPPU1TZ
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable ADCPPU1TZ as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_ADCPPU1TZ_Pos  (9)
#define DCAHTRIPSEL_ADCPPU1TZ_Msk  (0x1U << DCAHTRIPSEL_ADCPPU1TZ_Pos)

#define DCAHTRIPSEL_ADCPPU1TZ_DISABLE  ((0x0U) << DCAHTRIPSEL_ADCPPU1TZ_Pos)
#define DCAHTRIPSEL_ADCPPU1TZ_ENABLE   ((0x1U) << DCAHTRIPSEL_ADCPPU1TZ_Pos)

#define DCAHTRIPSEL_ADCPPU1TZ_(x)  (((x) << DCAHTRIPSEL_ADCPPU1TZ_Pos) & DCAHTRIPSEL_ADCPPU1TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     ADCPPU2TZ
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable ADCPPU2TZ as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_ADCPPU2TZ_Pos  (10)
#define DCAHTRIPSEL_ADCPPU2TZ_Msk  (0x1U << DCAHTRIPSEL_ADCPPU2TZ_Pos)

#define DCAHTRIPSEL_ADCPPU2TZ_DISABLE  ((0x0U) << DCAHTRIPSEL_ADCPPU2TZ_Pos)
#define DCAHTRIPSEL_ADCPPU2TZ_ENABLE   ((0x1U) << DCAHTRIPSEL_ADCPPU2TZ_Pos)

#define DCAHTRIPSEL_ADCPPU2TZ_(x)  (((x) << DCAHTRIPSEL_ADCPPU2TZ_Pos) & DCAHTRIPSEL_ADCPPU2TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     COMP0L
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable COMPL as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_COMP0L_Pos  (16)
#define DCAHTRIPSEL_COMP0L_Msk  (0x1U << DCAHTRIPSEL_COMP0L_Pos)

#define DCAHTRIPSEL_COMP0L_DISABLE  ((0x0U) << DCAHTRIPSEL_COMP0L_Pos)
#define DCAHTRIPSEL_COMP0L_ENABLE   ((0x1U) << DCAHTRIPSEL_COMP0L_Pos)

#define DCAHTRIPSEL_COMP0L_(x)  (((x) << DCAHTRIPSEL_COMP0L_Pos) & DCAHTRIPSEL_COMP0L_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCAHTRIPSEL     COMP0H
  *  @access     PWMx->DCAHTRIPSEL
  *  @brief      Enable COMPH as DCAH trip event (ORed)
  */
#define DCAHTRIPSEL_COMP0H_Pos  (17)
#define DCAHTRIPSEL_COMP0H_Msk  (0x1U << DCAHTRIPSEL_COMP0H_Pos)

#define DCAHTRIPSEL_COMP0H_DISABLE  ((0x0U) << DCAHTRIPSEL_COMP0H_Pos)
#define DCAHTRIPSEL_COMP0H_ENABLE   ((0x1U) << DCAHTRIPSEL_COMP0H_Pos)

#define DCAHTRIPSEL_COMP0H_(x)  (((x) << DCAHTRIPSEL_COMP0H_Pos) & DCAHTRIPSEL_COMP0H_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     TZ0
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable TZ0 as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_TZ0_Pos  (0)
#define DCBLTRIPSEL_TZ0_Msk  (0x1U << DCBLTRIPSEL_TZ0_Pos)

#define DCBLTRIPSEL_TZ0_DISABLE  ((0x0U) << DCBLTRIPSEL_TZ0_Pos)
#define DCBLTRIPSEL_TZ0_ENABLE   ((0x1U) << DCBLTRIPSEL_TZ0_Pos)

#define DCBLTRIPSEL_TZ0_(x)  (((x) << DCBLTRIPSEL_TZ0_Pos) & DCBLTRIPSEL_TZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     TZ1
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable TZ1 as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_TZ1_Pos  (1)
#define DCBLTRIPSEL_TZ1_Msk  (0x1U << DCBLTRIPSEL_TZ1_Pos)

#define DCBLTRIPSEL_TZ1_DISABLE  ((0x0U) << DCBLTRIPSEL_TZ1_Pos)
#define DCBLTRIPSEL_TZ1_ENABLE   ((0x1U) << DCBLTRIPSEL_TZ1_Pos)

#define DCBLTRIPSEL_TZ1_(x)  (((x) << DCBLTRIPSEL_TZ1_Pos) & DCBLTRIPSEL_TZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     TZ2
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable TZ2 as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_TZ2_Pos  (2)
#define DCBLTRIPSEL_TZ2_Msk  (0x1U << DCBLTRIPSEL_TZ2_Pos)

#define DCBLTRIPSEL_TZ2_DISABLE  ((0x0U) << DCBLTRIPSEL_TZ2_Pos)
#define DCBLTRIPSEL_TZ2_ENABLE   ((0x1U) << DCBLTRIPSEL_TZ2_Pos)

#define DCBLTRIPSEL_TZ2_(x)  (((x) << DCBLTRIPSEL_TZ2_Pos) & DCBLTRIPSEL_TZ2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     TZ3
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable TZ3 as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_TZ3_Pos  (3)
#define DCBLTRIPSEL_TZ3_Msk  (0x1U << DCBLTRIPSEL_TZ3_Pos)

#define DCBLTRIPSEL_TZ3_DISABLE  ((0x0U) << DCBLTRIPSEL_TZ3_Pos)
#define DCBLTRIPSEL_TZ3_ENABLE   ((0x1U) << DCBLTRIPSEL_TZ3_Pos)

#define DCBLTRIPSEL_TZ3_(x)  (((x) << DCBLTRIPSEL_TZ3_Pos) & DCBLTRIPSEL_TZ3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     TZ4
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable TZ4 as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_TZ4_Pos  (4)
#define DCBLTRIPSEL_TZ4_Msk  (0x1U << DCBLTRIPSEL_TZ4_Pos)

#define DCBLTRIPSEL_TZ4_DISABLE  ((0x0U) << DCBLTRIPSEL_TZ4_Pos)
#define DCBLTRIPSEL_TZ4_ENABLE   ((0x1U) << DCBLTRIPSEL_TZ4_Pos)

#define DCBLTRIPSEL_TZ4_(x)  (((x) << DCBLTRIPSEL_TZ4_Pos) & DCBLTRIPSEL_TZ4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     EPWRTZ0
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable EPWRTZ0 as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_EPWRTZ0_Pos  (5)
#define DCBLTRIPSEL_EPWRTZ0_Msk  (0x1U << DCBLTRIPSEL_EPWRTZ0_Pos)

#define DCBLTRIPSEL_EPWRTZ0_DISABLE  ((0x0U) << DCBLTRIPSEL_EPWRTZ0_Pos)
#define DCBLTRIPSEL_EPWRTZ0_ENABLE   ((0x1U) << DCBLTRIPSEL_EPWRTZ0_Pos)

#define DCBLTRIPSEL_EPWRTZ0_(x)  (((x) << DCBLTRIPSEL_EPWRTZ0_Pos) & DCBLTRIPSEL_EPWRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     EPWRTZ1
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable EPWRTZ1 as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_EPWRTZ1_Pos  (6)
#define DCBLTRIPSEL_EPWRTZ1_Msk  (0x1U << DCBLTRIPSEL_EPWRTZ1_Pos)

#define DCBLTRIPSEL_EPWRTZ1_DISABLE  ((0x0U) << DCBLTRIPSEL_EPWRTZ1_Pos)
#define DCBLTRIPSEL_EPWRTZ1_ENABLE   ((0x1U) << DCBLTRIPSEL_EPWRTZ1_Pos)

#define DCBLTRIPSEL_EPWRTZ1_(x)  (((x) << DCBLTRIPSEL_EPWRTZ1_Pos) & DCBLTRIPSEL_EPWRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     ADCPPU0TZ
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable ADCPPU0TZ as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_ADCPPU0TZ_Pos  (8)
#define DCBLTRIPSEL_ADCPPU0TZ_Msk  (0x1U << DCBLTRIPSEL_ADCPPU0TZ_Pos)

#define DCBLTRIPSEL_ADCPPU0TZ_DISABLE  ((0x0U) << DCBLTRIPSEL_ADCPPU0TZ_Pos)
#define DCBLTRIPSEL_ADCPPU0TZ_ENABLE   ((0x1U) << DCBLTRIPSEL_ADCPPU0TZ_Pos)

#define DCBLTRIPSEL_ADCPPU0TZ_(x)  (((x) << DCBLTRIPSEL_ADCPPU0TZ_Pos) & DCBLTRIPSEL_ADCPPU0TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     ADCPPU1TZ
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable ADCPPU1TZ as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_ADCPPU1TZ_Pos  (9)
#define DCBLTRIPSEL_ADCPPU1TZ_Msk  (0x1U << DCBLTRIPSEL_ADCPPU1TZ_Pos)

#define DCBLTRIPSEL_ADCPPU1TZ_DISABLE  ((0x0U) << DCBLTRIPSEL_ADCPPU1TZ_Pos)
#define DCBLTRIPSEL_ADCPPU1TZ_ENABLE   ((0x1U) << DCBLTRIPSEL_ADCPPU1TZ_Pos)

#define DCBLTRIPSEL_ADCPPU1TZ_(x)  (((x) << DCBLTRIPSEL_ADCPPU1TZ_Pos) & DCBLTRIPSEL_ADCPPU1TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     ADCPPU2TZ
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable ADCPPU2TZ as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_ADCPPU2TZ_Pos  (10)
#define DCBLTRIPSEL_ADCPPU2TZ_Msk  (0x1U << DCBLTRIPSEL_ADCPPU2TZ_Pos)

#define DCBLTRIPSEL_ADCPPU2TZ_DISABLE  ((0x0U) << DCBLTRIPSEL_ADCPPU2TZ_Pos)
#define DCBLTRIPSEL_ADCPPU2TZ_ENABLE   ((0x1U) << DCBLTRIPSEL_ADCPPU2TZ_Pos)

#define DCBLTRIPSEL_ADCPPU2TZ_(x)  (((x) << DCBLTRIPSEL_ADCPPU2TZ_Pos) & DCBLTRIPSEL_ADCPPU2TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     COMP0L
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable COMPL as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_COMP0L_Pos  (16)
#define DCBLTRIPSEL_COMP0L_Msk  (0x1U << DCBLTRIPSEL_COMP0L_Pos)

#define DCBLTRIPSEL_COMP0L_DISABLE  ((0x0U) << DCBLTRIPSEL_COMP0L_Pos)
#define DCBLTRIPSEL_COMP0L_ENABLE   ((0x1U) << DCBLTRIPSEL_COMP0L_Pos)

#define DCBLTRIPSEL_COMP0L_(x)  (((x) << DCBLTRIPSEL_COMP0L_Pos) & DCBLTRIPSEL_COMP0L_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBLTRIPSEL     COMP0H
  *  @access     PWMx->DCBLTRIPSEL
  *  @brief      Enable COMPH as DCBL trip event (ORed)
  */
#define DCBLTRIPSEL_COMP0H_Pos  (17)
#define DCBLTRIPSEL_COMP0H_Msk  (0x1U << DCBLTRIPSEL_COMP0H_Pos)

#define DCBLTRIPSEL_COMP0H_DISABLE  ((0x0U) << DCBLTRIPSEL_COMP0H_Pos)
#define DCBLTRIPSEL_COMP0H_ENABLE   ((0x1U) << DCBLTRIPSEL_COMP0H_Pos)

#define DCBLTRIPSEL_COMP0H_(x)  (((x) << DCBLTRIPSEL_COMP0H_Pos) & DCBLTRIPSEL_COMP0H_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     TZ0
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable TZ0 as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_TZ0_Pos  (0)
#define DCBHTRIPSEL_TZ0_Msk  (0x1U << DCBHTRIPSEL_TZ0_Pos)

#define DCBHTRIPSEL_TZ0_DISABLE  ((0x0U) << DCBHTRIPSEL_TZ0_Pos)
#define DCBHTRIPSEL_TZ0_ENABLE   ((0x1U) << DCBHTRIPSEL_TZ0_Pos)

#define DCBHTRIPSEL_TZ0_(x)  (((x) << DCBHTRIPSEL_TZ0_Pos) & DCBHTRIPSEL_TZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     TZ1
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable TZ1 as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_TZ1_Pos  (1)
#define DCBHTRIPSEL_TZ1_Msk  (0x1U << DCBHTRIPSEL_TZ1_Pos)

#define DCBHTRIPSEL_TZ1_DISABLE  ((0x0U) << DCBHTRIPSEL_TZ1_Pos)
#define DCBHTRIPSEL_TZ1_ENABLE   ((0x1U) << DCBHTRIPSEL_TZ1_Pos)

#define DCBHTRIPSEL_TZ1_(x)  (((x) << DCBHTRIPSEL_TZ1_Pos) & DCBHTRIPSEL_TZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     TZ2
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable TZ2 as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_TZ2_Pos  (2)
#define DCBHTRIPSEL_TZ2_Msk  (0x1U << DCBHTRIPSEL_TZ2_Pos)

#define DCBHTRIPSEL_TZ2_DISABLE  ((0x0U) << DCBHTRIPSEL_TZ2_Pos)
#define DCBHTRIPSEL_TZ2_ENABLE   ((0x1U) << DCBHTRIPSEL_TZ2_Pos)

#define DCBHTRIPSEL_TZ2_(x)  (((x) << DCBHTRIPSEL_TZ2_Pos) & DCBHTRIPSEL_TZ2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     TZ3
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable TZ3 as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_TZ3_Pos  (3)
#define DCBHTRIPSEL_TZ3_Msk  (0x1U << DCBHTRIPSEL_TZ3_Pos)

#define DCBHTRIPSEL_TZ3_DISABLE  ((0x0U) << DCBHTRIPSEL_TZ3_Pos)
#define DCBHTRIPSEL_TZ3_ENABLE   ((0x1U) << DCBHTRIPSEL_TZ3_Pos)

#define DCBHTRIPSEL_TZ3_(x)  (((x) << DCBHTRIPSEL_TZ3_Pos) & DCBHTRIPSEL_TZ3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     TZ4
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable TZ4 as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_TZ4_Pos  (4)
#define DCBHTRIPSEL_TZ4_Msk  (0x1U << DCBHTRIPSEL_TZ4_Pos)

#define DCBHTRIPSEL_TZ4_DISABLE  ((0x0U) << DCBHTRIPSEL_TZ4_Pos)
#define DCBHTRIPSEL_TZ4_ENABLE   ((0x1U) << DCBHTRIPSEL_TZ4_Pos)

#define DCBHTRIPSEL_TZ4_(x)  (((x) << DCBHTRIPSEL_TZ4_Pos) & DCBHTRIPSEL_TZ4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     EPWRTZ0
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable EPWRTZ0 as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_EPWRTZ0_Pos  (5)
#define DCBHTRIPSEL_EPWRTZ0_Msk  (0x1U << DCBHTRIPSEL_EPWRTZ0_Pos)

#define DCBHTRIPSEL_EPWRTZ0_DISABLE  ((0x0U) << DCBHTRIPSEL_EPWRTZ0_Pos)
#define DCBHTRIPSEL_EPWRTZ0_ENABLE   ((0x1U) << DCBHTRIPSEL_EPWRTZ0_Pos)

#define DCBHTRIPSEL_EPWRTZ0_(x)  (((x) << DCBHTRIPSEL_EPWRTZ0_Pos) & DCBHTRIPSEL_EPWRTZ0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     EPWRTZ1
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable EPWRTZ1 as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_EPWRTZ1_Pos  (6)
#define DCBHTRIPSEL_EPWRTZ1_Msk  (0x1U << DCBHTRIPSEL_EPWRTZ1_Pos)

#define DCBHTRIPSEL_EPWRTZ1_DISABLE  ((0x0U) << DCBHTRIPSEL_EPWRTZ1_Pos)
#define DCBHTRIPSEL_EPWRTZ1_ENABLE   ((0x1U) << DCBHTRIPSEL_EPWRTZ1_Pos)

#define DCBHTRIPSEL_EPWRTZ1_(x)  (((x) << DCBHTRIPSEL_EPWRTZ1_Pos) & DCBHTRIPSEL_EPWRTZ1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     ADCPPU0TZ
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable ADCPPU0TZ as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_ADCPPU0TZ_Pos  (8)
#define DCBHTRIPSEL_ADCPPU0TZ_Msk  (0x1U << DCBHTRIPSEL_ADCPPU0TZ_Pos)

#define DCBHTRIPSEL_ADCPPU0TZ_DISABLE  ((0x0U) << DCBHTRIPSEL_ADCPPU0TZ_Pos)
#define DCBHTRIPSEL_ADCPPU0TZ_ENABLE   ((0x1U) << DCBHTRIPSEL_ADCPPU0TZ_Pos)

#define DCBHTRIPSEL_ADCPPU0TZ_(x)  (((x) << DCBHTRIPSEL_ADCPPU0TZ_Pos) & DCBHTRIPSEL_ADCPPU0TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     ADCPPU1TZ
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable ADCPPU1TZ as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_ADCPPU1TZ_Pos  (9)
#define DCBHTRIPSEL_ADCPPU1TZ_Msk  (0x1U << DCBHTRIPSEL_ADCPPU1TZ_Pos)

#define DCBHTRIPSEL_ADCPPU1TZ_DISABLE  ((0x0U) << DCBHTRIPSEL_ADCPPU1TZ_Pos)
#define DCBHTRIPSEL_ADCPPU1TZ_ENABLE   ((0x1U) << DCBHTRIPSEL_ADCPPU1TZ_Pos)

#define DCBHTRIPSEL_ADCPPU1TZ_(x)  (((x) << DCBHTRIPSEL_ADCPPU1TZ_Pos) & DCBHTRIPSEL_ADCPPU1TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     ADCPPU2TZ
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable ADCPPU2TZ as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_ADCPPU2TZ_Pos  (10)
#define DCBHTRIPSEL_ADCPPU2TZ_Msk  (0x1U << DCBHTRIPSEL_ADCPPU2TZ_Pos)

#define DCBHTRIPSEL_ADCPPU2TZ_DISABLE  ((0x0U) << DCBHTRIPSEL_ADCPPU2TZ_Pos)
#define DCBHTRIPSEL_ADCPPU2TZ_ENABLE   ((0x1U) << DCBHTRIPSEL_ADCPPU2TZ_Pos)

#define DCBHTRIPSEL_ADCPPU2TZ_(x)  (((x) << DCBHTRIPSEL_ADCPPU2TZ_Pos) & DCBHTRIPSEL_ADCPPU2TZ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     COMP0L
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable COMPL as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_COMP0L_Pos  (16)
#define DCBHTRIPSEL_COMP0L_Msk  (0x1U << DCBHTRIPSEL_COMP0L_Pos)

#define DCBHTRIPSEL_COMP0L_DISABLE  ((0x0U) << DCBHTRIPSEL_COMP0L_Pos)
#define DCBHTRIPSEL_COMP0L_ENABLE   ((0x1U) << DCBHTRIPSEL_COMP0L_Pos)

#define DCBHTRIPSEL_COMP0L_(x)  (((x) << DCBHTRIPSEL_COMP0L_Pos) & DCBHTRIPSEL_COMP0L_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBHTRIPSEL     COMP0H
  *  @access     PWMx->DCBHTRIPSEL
  *  @brief      Enable COMPH as DCBH trip event (ORed)
  */
#define DCBHTRIPSEL_COMP0H_Pos  (17)
#define DCBHTRIPSEL_COMP0H_Msk  (0x1U << DCBHTRIPSEL_COMP0H_Pos)

#define DCBHTRIPSEL_COMP0H_DISABLE  ((0x0U) << DCBHTRIPSEL_COMP0H_Pos)
#define DCBHTRIPSEL_COMP0H_ENABLE   ((0x1U) << DCBHTRIPSEL_COMP0H_Pos)

#define DCBHTRIPSEL_COMP0H_(x)  (((x) << DCBHTRIPSEL_COMP0H_Pos) & DCBHTRIPSEL_COMP0H_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCACTL          EVT0SRCSEL
  *  @access     PWMx->DCACTL
  *  @brief      DCAEVT0 source signal select
  */
#define DCACTL_EVT0SRCSEL_Pos  (0)
#define DCACTL_EVT0SRCSEL_Msk  (0x1U << DCACTL_EVT0SRCSEL_Pos)

#define DCACTL_EVT0SRCSEL_RAWDCAEVT0  ((0x0U) << DCACTL_EVT0SRCSEL_Pos)
#define DCACTL_EVT0SRCSEL_DCEVTFILT   ((0x1U) << DCACTL_EVT0SRCSEL_Pos)

#define DCACTL_EVT0SRCSEL_(x)  (((x) << DCACTL_EVT0SRCSEL_Pos) & DCACTL_EVT0SRCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCACTL          EVT0SRCASYNC
  *  @access     PWMx->DCACTL
  *  @brief      DCAEVT0 source signal is asynchronous/synchronous (1/0)
  */
#define DCACTL_EVT0SRCASYNC_Pos  (1)
#define DCACTL_EVT0SRCASYNC_Msk  (0x1U << DCACTL_EVT0SRCASYNC_Pos)

#define DCACTL_EVT0SRCASYNC_DCAEVT0_SYNC   ((0x0U) << DCACTL_EVT0SRCASYNC_Pos)
#define DCACTL_EVT0SRCASYNC_DCAEVT0_ASYNC  ((0x1U) << DCACTL_EVT0SRCASYNC_Pos)

#define DCACTL_EVT0SRCASYNC_(x)  (((x) << DCACTL_EVT0SRCASYNC_Pos) & DCACTL_EVT0SRCASYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCACTL          EVT0SOCE
  *  @access     PWMx->DCACTL
  *  @brief      DCAEVT0 SOC generation
  */
#define DCACTL_EVT0SOCE_Pos  (2)
#define DCACTL_EVT0SOCE_Msk  (0x1U << DCACTL_EVT0SOCE_Pos)

#define DCACTL_EVT0SOCE_DISABLE  ((0x0U) << DCACTL_EVT0SOCE_Pos)
#define DCACTL_EVT0SOCE_ENABLE   ((0x1U) << DCACTL_EVT0SOCE_Pos)

#define DCACTL_EVT0SOCE_(x)  (((x) << DCACTL_EVT0SOCE_Pos) & DCACTL_EVT0SOCE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCACTL          EVT0SYNCE
  *  @access     PWMx->DCACTL
  *  @brief      DCAEVT0 SYNC generation
  */
#define DCACTL_EVT0SYNCE_Pos  (3)
#define DCACTL_EVT0SYNCE_Msk  (0x1U << DCACTL_EVT0SYNCE_Pos)

#define DCACTL_EVT0SYNCE_DISABLE  ((0x0U) << DCACTL_EVT0SYNCE_Pos)
#define DCACTL_EVT0SYNCE_ENABLE   ((0x1U) << DCACTL_EVT0SYNCE_Pos)

#define DCACTL_EVT0SYNCE_(x)  (((x) << DCACTL_EVT0SYNCE_Pos) & DCACTL_EVT0SYNCE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCACTL          EVT1SRCSEL
  *  @access     PWMx->DCACTL
  *  @brief      DCAEVT1 source signal select
  */
#define DCACTL_EVT1SRCSEL_Pos  (4)
#define DCACTL_EVT1SRCSEL_Msk  (0x1U << DCACTL_EVT1SRCSEL_Pos)

#define DCACTL_EVT1SRCSEL_RAWDCAEVT1  ((0x0U) << DCACTL_EVT1SRCSEL_Pos)
#define DCACTL_EVT1SRCSEL_DCEVTFILT   ((0x1U) << DCACTL_EVT1SRCSEL_Pos)

#define DCACTL_EVT1SRCSEL_(x)  (((x) << DCACTL_EVT1SRCSEL_Pos) & DCACTL_EVT1SRCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCACTL          EVT1SRCASYNC
  *  @access     PWMx->DCACTL
  *  @brief      DCAEVT1 source signal is asynchronous/synchronous
  */
#define DCACTL_EVT1SRCASYNC_Pos  (5)
#define DCACTL_EVT1SRCASYNC_Msk  (0x1U << DCACTL_EVT1SRCASYNC_Pos)

#define DCACTL_EVT1SRCASYNC_DCAEVT1_SYNC   ((0x0U) << DCACTL_EVT1SRCASYNC_Pos)
#define DCACTL_EVT1SRCASYNC_DCAEVT1_ASYNC  ((0x1U) << DCACTL_EVT1SRCASYNC_Pos)

#define DCACTL_EVT1SRCASYNC_(x)  (((x) << DCACTL_EVT1SRCASYNC_Pos) & DCACTL_EVT1SRCASYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBCTL          EVT0SRCSEL
  *  @access     PWMx->DCBCTL
  *  @brief      DCBEVT0 source signal select
  */
#define DCBCTL_EVT0SRCSEL_Pos  (0)
#define DCBCTL_EVT0SRCSEL_Msk  (0x1U << DCBCTL_EVT0SRCSEL_Pos)

#define DCBCTL_EVT0SRCSEL_RAWDCBEVT0  ((0x0U) << DCBCTL_EVT0SRCSEL_Pos)
#define DCBCTL_EVT0SRCSEL_DCEVTFILT   ((0x1U) << DCBCTL_EVT0SRCSEL_Pos)

#define DCBCTL_EVT0SRCSEL_(x)  (((x) << DCBCTL_EVT0SRCSEL_Pos) & DCBCTL_EVT0SRCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBCTL          EVT0SRCASYNC
  *  @access     PWMx->DCBCTL
  *  @brief      DCBEVT0 source signal is asynchronous/synchronous
  */
#define DCBCTL_EVT0SRCASYNC_Pos  (1)
#define DCBCTL_EVT0SRCASYNC_Msk  (0x1U << DCBCTL_EVT0SRCASYNC_Pos)

#define DCBCTL_EVT0SRCASYNC_DCBEVT0_SYNC   ((0x0U) << DCBCTL_EVT0SRCASYNC_Pos)
#define DCBCTL_EVT0SRCASYNC_DCBEVT0_ASYNC  ((0x1U) << DCBCTL_EVT0SRCASYNC_Pos)

#define DCBCTL_EVT0SRCASYNC_(x)  (((x) << DCBCTL_EVT0SRCASYNC_Pos) & DCBCTL_EVT0SRCASYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBCTL          EVT0SOCE
  *  @access     PWMx->DCBCTL
  *  @brief      DCBEVT0 SOC generation
  */
#define DCBCTL_EVT0SOCE_Pos  (2)
#define DCBCTL_EVT0SOCE_Msk  (0x1U << DCBCTL_EVT0SOCE_Pos)

#define DCBCTL_EVT0SOCE_DISABLE  ((0x0U) << DCBCTL_EVT0SOCE_Pos)
#define DCBCTL_EVT0SOCE_ENABLE   ((0x1U) << DCBCTL_EVT0SOCE_Pos)

#define DCBCTL_EVT0SOCE_(x)  (((x) << DCBCTL_EVT0SOCE_Pos) & DCBCTL_EVT0SOCE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBCTL          EVT0SYNCE
  *  @access     PWMx->DCBCTL
  *  @brief      DCBEVT0 SYNC generation
  */
#define DCBCTL_EVT0SYNCE_Pos  (3)
#define DCBCTL_EVT0SYNCE_Msk  (0x1U << DCBCTL_EVT0SYNCE_Pos)

#define DCBCTL_EVT0SYNCE_DISABLE  ((0x0U) << DCBCTL_EVT0SYNCE_Pos)
#define DCBCTL_EVT0SYNCE_ENABLE   ((0x1U) << DCBCTL_EVT0SYNCE_Pos)

#define DCBCTL_EVT0SYNCE_(x)  (((x) << DCBCTL_EVT0SYNCE_Pos) & DCBCTL_EVT0SYNCE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBCTL          EVT1SRCSEL
  *  @access     PWMx->DCBCTL
  *  @brief      DCBEVT1 source signal select
  */
#define DCBCTL_EVT1SRCSEL_Pos  (4)
#define DCBCTL_EVT1SRCSEL_Msk  (0x1U << DCBCTL_EVT1SRCSEL_Pos)

#define DCBCTL_EVT1SRCSEL_RAWDCBEVT1  ((0x0U) << DCBCTL_EVT1SRCSEL_Pos)
#define DCBCTL_EVT1SRCSEL_DCEVTFILT   ((0x1U) << DCBCTL_EVT1SRCSEL_Pos)

#define DCBCTL_EVT1SRCSEL_(x)  (((x) << DCBCTL_EVT1SRCSEL_Pos) & DCBCTL_EVT1SRCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCBCTL          EVT1SRCASYNC
  *  @access     PWMx->DCBCTL
  *  @brief      DCBEVT1 source signal is asynchronous/synchronous (1/0)
  */
#define DCBCTL_EVT1SRCASYNC_Pos  (5)
#define DCBCTL_EVT1SRCASYNC_Msk  (0x1U << DCBCTL_EVT1SRCASYNC_Pos)

#define DCBCTL_EVT1SRCASYNC_DCBEVT1_SYNC   ((0x0U) << DCBCTL_EVT1SRCASYNC_Pos)
#define DCBCTL_EVT1SRCASYNC_DCBEVT1_ASYNC  ((0x1U) << DCBCTL_EVT1SRCASYNC_Pos)

#define DCBCTL_EVT1SRCASYNC_(x)  (((x) << DCBCTL_EVT1SRCASYNC_Pos) & DCBCTL_EVT1SRCASYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          SRCSEL
  *  @access     PWMx->DCFCTL
  *  @brief      DCEVTFILT signal source select
  */
#define DCFCTL_SRCSEL_Pos  (0)
#define DCFCTL_SRCSEL_Msk  (0x3U << DCFCTL_SRCSEL_Pos)

#define DCFCTL_SRCSEL_RAWDCAEVT0  ((0x00U) << DCFCTL_SRCSEL_Pos)
#define DCFCTL_SRCSEL_RAWDCAEVT1  ((0x01U) << DCFCTL_SRCSEL_Pos)
#define DCFCTL_SRCSEL_RAWDCBEVT0  ((0x02U) << DCFCTL_SRCSEL_Pos)
#define DCFCTL_SRCSEL_RAWDCBEVT1  ((0x03U) << DCFCTL_SRCSEL_Pos)

#define DCFCTL_SRCSEL_(x)  (((x) << DCFCTL_SRCSEL_Pos) & DCFCTL_SRCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          BLANKEN
  *  @access     PWMx->DCFCTL
  *  @brief      blanking window
  */
#define DCFCTL_BLANKEN_Pos  (2)
#define DCFCTL_BLANKEN_Msk  (0x1U << DCFCTL_BLANKEN_Pos)

#define DCFCTL_BLANKEN_DISABLE  ((0x0U) << DCFCTL_BLANKEN_Pos)
#define DCFCTL_BLANKEN_ENABLE   ((0x1U) << DCFCTL_BLANKEN_Pos)

#define DCFCTL_BLANKEN_(x)  (((x) << DCFCTL_BLANKEN_Pos) & DCFCTL_BLANKEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          BLANKINV
  *  @access     PWMx->DCFCTL
  *  @brief      blanking window inversion
  */
#define DCFCTL_BLANKINV_Pos  (3)
#define DCFCTL_BLANKINV_Msk  (0x1U << DCFCTL_BLANKINV_Pos)

#define DCFCTL_BLANKINV_DISABLE  ((0x0U) << DCFCTL_BLANKINV_Pos)
#define DCFCTL_BLANKINV_ENABLE   ((0x1U) << DCFCTL_BLANKINV_Pos)

#define DCFCTL_BLANKINV_(x)  (((x) << DCFCTL_BLANKINV_Pos) & DCFCTL_BLANKINV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          PULSESEL
  *  @access     PWMx->DCFCTL
  *  @brief      Pulse select for blanking and capture alignment for this module
  */
#define DCFCTL_PULSESEL_Pos  (4)
#define DCFCTL_PULSESEL_Msk  (0x3U << DCFCTL_PULSESEL_Pos)

#define DCFCTL_PULSESEL_ALIGN_ON_ZERO         ((0x00U) << DCFCTL_PULSESEL_Pos)
#define DCFCTL_PULSESEL_ALIGN_ON_PERIOD       ((0x01U) << DCFCTL_PULSESEL_Pos)
#define DCFCTL_PULSESEL_ALIGN_ON_ZERO_PERIOD  ((0x02U) << DCFCTL_PULSESEL_Pos)

#define DCFCTL_PULSESEL_(x)  (((x) << DCFCTL_PULSESEL_Pos) & DCFCTL_PULSESEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN0EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM0 (ORed)
  */
#define DCFCTL_WIN0EN_Pos  (6)
#define DCFCTL_WIN0EN_Msk  (0x1U << DCFCTL_WIN0EN_Pos)

#define DCFCTL_WIN0EN_DISABLE  ((0x0U) << DCFCTL_WIN0EN_Pos)
#define DCFCTL_WIN0EN_ENABLE   ((0x1U) << DCFCTL_WIN0EN_Pos)

#define DCFCTL_WIN0EN_(x)  (((x) << DCFCTL_WIN0EN_Pos) & DCFCTL_WIN0EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN1EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM1 (ORed)
  */
#define DCFCTL_WIN1EN_Pos  (7)
#define DCFCTL_WIN1EN_Msk  (0x1U << DCFCTL_WIN1EN_Pos)

#define DCFCTL_WIN1EN_DISABLE  ((0x0U) << DCFCTL_WIN1EN_Pos)
#define DCFCTL_WIN1EN_ENABLE   ((0x1U) << DCFCTL_WIN1EN_Pos)

#define DCFCTL_WIN1EN_(x)  (((x) << DCFCTL_WIN1EN_Pos) & DCFCTL_WIN1EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN2EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM2 (ORed)
  */
#define DCFCTL_WIN2EN_Pos  (8)
#define DCFCTL_WIN2EN_Msk  (0x1U << DCFCTL_WIN2EN_Pos)

#define DCFCTL_WIN2EN_DISABLE  ((0x0U) << DCFCTL_WIN2EN_Pos)
#define DCFCTL_WIN2EN_ENABLE   ((0x1U) << DCFCTL_WIN2EN_Pos)

#define DCFCTL_WIN2EN_(x)  (((x) << DCFCTL_WIN2EN_Pos) & DCFCTL_WIN2EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN3EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM3 (ORed)
  */
#define DCFCTL_WIN3EN_Pos  (9)
#define DCFCTL_WIN3EN_Msk  (0x1U << DCFCTL_WIN3EN_Pos)

#define DCFCTL_WIN3EN_DISABLE  ((0x0U) << DCFCTL_WIN3EN_Pos)
#define DCFCTL_WIN3EN_ENABLE   ((0x1U) << DCFCTL_WIN3EN_Pos)

#define DCFCTL_WIN3EN_(x)  (((x) << DCFCTL_WIN3EN_Pos) & DCFCTL_WIN3EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN4EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM4 (ORed)
  */
#define DCFCTL_WIN4EN_Pos  (10)
#define DCFCTL_WIN4EN_Msk  (0x1U << DCFCTL_WIN4EN_Pos)

#define DCFCTL_WIN4EN_DISABLE  ((0x0U) << DCFCTL_WIN4EN_Pos)
#define DCFCTL_WIN4EN_ENABLE   ((0x1U) << DCFCTL_WIN4EN_Pos)

#define DCFCTL_WIN4EN_(x)  (((x) << DCFCTL_WIN4EN_Pos) & DCFCTL_WIN4EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN5EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM5 (ORed)
  */
#define DCFCTL_WIN5EN_Pos  (11)
#define DCFCTL_WIN5EN_Msk  (0x1U << DCFCTL_WIN5EN_Pos)

#define DCFCTL_WIN5EN_DISABLE  ((0x0U) << DCFCTL_WIN5EN_Pos)
#define DCFCTL_WIN5EN_ENABLE   ((0x1U) << DCFCTL_WIN5EN_Pos)

#define DCFCTL_WIN5EN_(x)  (((x) << DCFCTL_WIN5EN_Pos) & DCFCTL_WIN5EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN6EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM6 (ORed)
  */
#define DCFCTL_WIN6EN_Pos  (12)
#define DCFCTL_WIN6EN_Msk  (0x1U << DCFCTL_WIN6EN_Pos)

#define DCFCTL_WIN6EN_DISABLE  ((0x0U) << DCFCTL_WIN6EN_Pos)
#define DCFCTL_WIN6EN_ENABLE   ((0x1U) << DCFCTL_WIN6EN_Pos)

#define DCFCTL_WIN6EN_(x)  (((x) << DCFCTL_WIN6EN_Pos) & DCFCTL_WIN6EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN7EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM7 (ORed)
  */
#define DCFCTL_WIN7EN_Pos  (13)
#define DCFCTL_WIN7EN_Msk  (0x1U << DCFCTL_WIN7EN_Pos)

#define DCFCTL_WIN7EN_DISABLE  ((0x0U) << DCFCTL_WIN7EN_Pos)
#define DCFCTL_WIN7EN_ENABLE   ((0x1U) << DCFCTL_WIN7EN_Pos)

#define DCFCTL_WIN7EN_(x)  (((x) << DCFCTL_WIN7EN_Pos) & DCFCTL_WIN7EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN8EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM8 (ORed)
  */
#define DCFCTL_WIN8EN_Pos  (14)
#define DCFCTL_WIN8EN_Msk  (0x1U << DCFCTL_WIN8EN_Pos)

#define DCFCTL_WIN8EN_DISABLE  ((0x0U) << DCFCTL_WIN8EN_Pos)
#define DCFCTL_WIN8EN_ENABLE   ((0x1U) << DCFCTL_WIN8EN_Pos)

#define DCFCTL_WIN8EN_(x)  (((x) << DCFCTL_WIN8EN_Pos) & DCFCTL_WIN8EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN9EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM9 (ORed)
  */
#define DCFCTL_WIN9EN_Pos  (15)
#define DCFCTL_WIN9EN_Msk  (0x1U << DCFCTL_WIN9EN_Pos)

#define DCFCTL_WIN9EN_DISABLE  ((0x0U) << DCFCTL_WIN9EN_Pos)
#define DCFCTL_WIN9EN_ENABLE   ((0x1U) << DCFCTL_WIN9EN_Pos)

#define DCFCTL_WIN9EN_(x)  (((x) << DCFCTL_WIN9EN_Pos) & DCFCTL_WIN9EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN10EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM10 (ORed)
  */
#define DCFCTL_WIN10EN_Pos  (16)
#define DCFCTL_WIN10EN_Msk  (0x1U << DCFCTL_WIN10EN_Pos)

#define DCFCTL_WIN10EN_DISABLE  ((0x0U) << DCFCTL_WIN10EN_Pos)
#define DCFCTL_WIN10EN_ENABLE   ((0x1U) << DCFCTL_WIN10EN_Pos)

#define DCFCTL_WIN10EN_(x)  (((x) << DCFCTL_WIN10EN_Pos) & DCFCTL_WIN10EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFCTL          WIN11EN
  *  @access     PWMx->DCFCTL
  *  @brief      Enable blank window from PWM11 (ORed)
  */
#define DCFCTL_WIN11EN_Pos  (17)
#define DCFCTL_WIN11EN_Msk  (0x1U << DCFCTL_WIN11EN_Pos)

#define DCFCTL_WIN11EN_DISABLE  ((0x0U) << DCFCTL_WIN11EN_Pos)
#define DCFCTL_WIN11EN_ENABLE   ((0x1U) << DCFCTL_WIN11EN_Pos)

#define DCFCTL_WIN11EN_(x)  (((x) << DCFCTL_WIN11EN_Pos) & DCFCTL_WIN11EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFOFFSET       VAL
  *  @access     PWMx->DCFOFFSET
  *  @brief      Blanking window offset
  *              It defines the number of TBCLK cycles from the blanking window reference
  *              specified by DCFCTL.PULSESEL to the point when the blanking window is applied.
  */
#define DCFOFFSET_VAL_Pos  (0)
#define DCFOFFSET_VAL_Msk  (0xFFFFU << DCFOFFSET_VAL_Pos)

#define DCFOFFSET_VAL_(x)  (((x) << DCFOFFSET_VAL_Pos) & DCFOFFSET_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFOFFSETCNT    VAL
  *  @access     PWMx->DCFOFFSETCNT
  *  @brief      Blanking offset counter
  *              It is read only and indicates the current value of the offset counter. The
  *              counter counts down to zero and then stops until it is re-loaded on the next
  *              event defined by DCFCTL.PULSESEL.
  */
#define DCFOFFSETCNT_VAL_Pos  (0)
#define DCFOFFSETCNT_VAL_Msk  (0xFFFFU << DCFOFFSETCNT_VAL_Pos)

#define DCFOFFSETCNT_VAL_(x)  (((x) << DCFOFFSETCNT_VAL_Pos) & DCFOFFSETCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFWINDOW       VAL
  *  @access     PWMx->DCFWINDOW
  *  @brief      Blanking window width in TBCLK cycles
  *              The blanking window begins when the offset counter expires. When this occurs,
  *              the window counter is loaded and begins to count down. If the blanking window is
  *              currently active and the offset counter expires, the blanking window counter is
  *              restarted.
  *              The blanking window can cross a PWM period boundary.
  *              No blanking window is generated when it is set to zero.
  */
#define DCFWINDOW_VAL_Pos  (0)
#define DCFWINDOW_VAL_Msk  (0xFFFFU << DCFWINDOW_VAL_Pos)

#define DCFWINDOW_VAL_(x)  (((x) << DCFWINDOW_VAL_Pos) & DCFWINDOW_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCFWINDOWCNT    VAL
  *  @access     PWMx->DCFWINDOWCNT
  *  @brief      Blanking window counter
  *              It is read only and indicates the current value of the window counter. The
  *              counter counts down to zero and then stops until it is re-loaded when the offset
  *              counter reaches zero again.
  */
#define DCFWINDOWCNT_VAL_Pos  (0)
#define DCFWINDOWCNT_VAL_Msk  (0xFFFFU << DCFWINDOWCNT_VAL_Pos)

#define DCFWINDOWCNT_VAL_(x)  (((x) << DCFWINDOWCNT_VAL_Pos) & DCFWINDOWCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        CAPEN
  *  @access     PWMx->DCCAPCTL
  *  @brief      TBCNT counter capture enable
  */
#define DCCAPCTL_CAPEN_Pos  (0)
#define DCCAPCTL_CAPEN_Msk  (0x1U << DCCAPCTL_CAPEN_Pos)

#define DCCAPCTL_CAPEN_DISABLE  ((0x0U) << DCCAPCTL_CAPEN_Pos)
#define DCCAPCTL_CAPEN_ENABLE   ((0x1U) << DCCAPCTL_CAPEN_Pos)

#define DCCAPCTL_CAPEN_(x)  (((x) << DCCAPCTL_CAPEN_Pos) & DCCAPCTL_CAPEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        DIRECT
  *  @access     PWMx->DCCAPCTL
  *  @brief      DCCAP direct load mode
  */
#define DCCAPCTL_DIRECT_Pos  (1)
#define DCCAPCTL_DIRECT_Msk  (0x1U << DCCAPCTL_DIRECT_Pos)

#define DCCAPCTL_DIRECT_DISABLE  ((0x0U) << DCCAPCTL_DIRECT_Pos)
#define DCCAPCTL_DIRECT_ENABLE   ((0x1U) << DCCAPCTL_DIRECT_Pos)

#define DCCAPCTL_DIRECT_(x)  (((x) << DCCAPCTL_DIRECT_Pos) & DCCAPCTL_DIRECT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        MULTICAP
  *  @access     PWMx->DCCAPCTL
  *  @brief      DCCAP multiple capture mode
  */
#define DCCAPCTL_MULTICAP_Pos  (2)
#define DCCAPCTL_MULTICAP_Msk  (0x1U << DCCAPCTL_MULTICAP_Pos)

#define DCCAPCTL_MULTICAP_DISABLE  ((0x0U) << DCCAPCTL_MULTICAP_Pos)
#define DCCAPCTL_MULTICAP_ENABLE   ((0x1U) << DCCAPCTL_MULTICAP_Pos)

#define DCCAPCTL_MULTICAP_(x)  (((x) << DCCAPCTL_MULTICAP_Pos) & DCCAPCTL_MULTICAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        CAPENWE
  *  @access     PWMx->DCCAPCTL
  *  @brief      CAPEN bit write enable
  */
#define DCCAPCTL_CAPENWE_Pos  (4)
#define DCCAPCTL_CAPENWE_Msk  (0x1U << DCCAPCTL_CAPENWE_Pos)

#define DCCAPCTL_CAPENWE_NO_EFFECT  ((0x0U) << DCCAPCTL_CAPENWE_Pos)
#define DCCAPCTL_CAPENWE_ENABLE     ((0x1U) << DCCAPCTL_CAPENWE_Pos)

#define DCCAPCTL_CAPENWE_(x)  (((x) << DCCAPCTL_CAPENWE_Pos) & DCCAPCTL_CAPENWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        DIRECTWE
  *  @access     PWMx->DCCAPCTL
  *  @brief      DIRECT bit write enable
  */
#define DCCAPCTL_DIRECTWE_Pos  (5)
#define DCCAPCTL_DIRECTWE_Msk  (0x1U << DCCAPCTL_DIRECTWE_Pos)

#define DCCAPCTL_DIRECTWE_NO_EFFECT  ((0x0U) << DCCAPCTL_DIRECTWE_Pos)
#define DCCAPCTL_DIRECTWE_ENABLE     ((0x1U) << DCCAPCTL_DIRECTWE_Pos)

#define DCCAPCTL_DIRECTWE_(x)  (((x) << DCCAPCTL_DIRECTWE_Pos) & DCCAPCTL_DIRECTWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        MULTICAPWE
  *  @access     PWMx->DCCAPCTL
  *  @brief      MULTICAP bit write enable
  */
#define DCCAPCTL_MULTICAPWE_Pos  (6)
#define DCCAPCTL_MULTICAPWE_Msk  (0x1U << DCCAPCTL_MULTICAPWE_Pos)

#define DCCAPCTL_MULTICAPWE_NO_EFFECT  ((0x0U) << DCCAPCTL_MULTICAPWE_Pos)
#define DCCAPCTL_MULTICAPWE_ENABLE     ((0x1U) << DCCAPCTL_MULTICAPWE_Pos)

#define DCCAPCTL_MULTICAPWE_(x)  (((x) << DCCAPCTL_MULTICAPWE_Pos) & DCCAPCTL_MULTICAPWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        CAPCLR
  *  @access     PWMx->DCCAPCTL
  *  @brief      Latched capture flag clear
  */
#define DCCAPCTL_CAPCLR_Pos  (8)
#define DCCAPCTL_CAPCLR_Msk  (0x1U << DCCAPCTL_CAPCLR_Pos)

#define DCCAPCTL_CAPCLR_NO_EFFECT  ((0x0U) << DCCAPCTL_CAPCLR_Pos)
#define DCCAPCTL_CAPCLR_CLEAR      ((0x1U) << DCCAPCTL_CAPCLR_Pos)

#define DCCAPCTL_CAPCLR_(x)  (((x) << DCCAPCTL_CAPCLR_Pos) & DCCAPCTL_CAPCLR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAPCTL        CAPFLG
  *  @access     PWMx->DCCAPCTL
  *  @brief      Latched capture flag
  */
#define DCCAPCTL_CAPFLG_Pos  (9)
#define DCCAPCTL_CAPFLG_Msk  (0x1U << DCCAPCTL_CAPFLG_Pos)

#define DCCAPCTL_CAPFLG_NOT_OCCUR  ((0x0U) << DCCAPCTL_CAPFLG_Pos)
#define DCCAPCTL_CAPFLG_OCCUR      ((0x1U) << DCCAPCTL_CAPFLG_Pos)

#define DCCAPCTL_CAPFLG_(x)  (((x) << DCCAPCTL_CAPFLG_Pos) & DCCAPCTL_CAPFLG_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            DCCAP           VAL
  *  @access     PWMx->DCCAP
  *  @brief      Captured TBCNT value upon a rising-edge of DCEVTFLT
  *              In shadow mode, the captured value is copied to the shadow register on a
  *              TBCNT=TBPRD or TBCNT=zero event as defined by DCFCTL.PULSESEL. Reads of the
  *              DCCAP register always returns the shadow register contents.
  *              In direct mode, reads of the DCCAP register always returns the active value.
  */
#define DCCAP_VAL_Pos  (0)
#define DCCAP_VAL_Msk  (0xFFFFU << DCCAP_VAL_Pos)

#define DCCAP_VAL_(x)  (((x) << DCCAP_VAL_Pos) & DCCAP_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           INTEN
  *  @access     PWMx->ETCTL
  *  @brief      PWM interrupt enable
  */
#define ETCTL_INTEN_Pos  (0)
#define ETCTL_INTEN_Msk  (0x1U << ETCTL_INTEN_Pos)

#define ETCTL_INTEN_DISABLE  ((0x0U) << ETCTL_INTEN_Pos)
#define ETCTL_INTEN_ENABLE   ((0x1U) << ETCTL_INTEN_Pos)

#define ETCTL_INTEN_(x)  (((x) << ETCTL_INTEN_Pos) & ETCTL_INTEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           INTSEL
  *  @access     PWMx->ETCTL
  *  @brief      PWM interrupt select
  */
#define ETCTL_INTSEL_Pos  (1)
#define ETCTL_INTSEL_Msk  (0xFU << ETCTL_INTSEL_Pos)

#define ETCTL_INTSEL_TBCNT_EQU_ZERO         ((0x0000U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_PERIOD       ((0x0001U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_ZERO_PERIOD  ((0x0002U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPA_UP      ((0x0003U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPA_DOWN    ((0x0004U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPB_UP      ((0x0005U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPB_DOWN    ((0x0006U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPC_UP      ((0x0007U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPC_DOWN    ((0x0008U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPD_UP      ((0x0009U) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_TBCNT_EQU_CMPD_DOWN    ((0x000AU) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_DCAEVT0_SOC            ((0x000BU) << ETCTL_INTSEL_Pos)
#define ETCTL_INTSEL_DCBEVT0_SOC            ((0x000CU) << ETCTL_INTSEL_Pos)

#define ETCTL_INTSEL_(x)  (((x) << ETCTL_INTSEL_Pos) & ETCTL_INTSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           SOCAEN
  *  @access     PWMx->ETCTL
  *  @brief      ADC start of conversion A (SOCA) pulse enable
  */
#define ETCTL_SOCAEN_Pos  (8)
#define ETCTL_SOCAEN_Msk  (0x1U << ETCTL_SOCAEN_Pos)

#define ETCTL_SOCAEN_DISABLE  ((0x0U) << ETCTL_SOCAEN_Pos)
#define ETCTL_SOCAEN_ENABLE   ((0x1U) << ETCTL_SOCAEN_Pos)

#define ETCTL_SOCAEN_(x)  (((x) << ETCTL_SOCAEN_Pos) & ETCTL_SOCAEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           SOCASEL
  *  @access     PWMx->ETCTL
  *  @brief      SOCA event select
  */
#define ETCTL_SOCASEL_Pos  (9)
#define ETCTL_SOCASEL_Msk  (0xFU << ETCTL_SOCASEL_Pos)

#define ETCTL_SOCASEL_TBCNT_EQU_ZERO         ((0x0000U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_PERIOD       ((0x0001U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_ZERO_PERIOD  ((0x0002U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPA_UP      ((0x0003U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPA_DOWN    ((0x0004U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPB_UP      ((0x0005U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPB_DOWN    ((0x0006U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPC_UP      ((0x0007U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPC_DOWN    ((0x0008U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPD_UP      ((0x0009U) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_TBCNT_EQU_CMPD_DOWN    ((0x000AU) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_DCAEVT0_SOC            ((0x000BU) << ETCTL_SOCASEL_Pos)
#define ETCTL_SOCASEL_DCBEVT0_SOC            ((0x000CU) << ETCTL_SOCASEL_Pos)

#define ETCTL_SOCASEL_(x)  (((x) << ETCTL_SOCASEL_Pos) & ETCTL_SOCASEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           SOCBEN
  *  @access     PWMx->ETCTL
  *  @brief      ADC start of conversion B (SOCB) pulse enable
  */
#define ETCTL_SOCBEN_Pos  (16)
#define ETCTL_SOCBEN_Msk  (0x1U << ETCTL_SOCBEN_Pos)

#define ETCTL_SOCBEN_DISABLE  ((0x0U) << ETCTL_SOCBEN_Pos)
#define ETCTL_SOCBEN_ENABLE   ((0x1U) << ETCTL_SOCBEN_Pos)

#define ETCTL_SOCBEN_(x)  (((x) << ETCTL_SOCBEN_Pos) & ETCTL_SOCBEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           SOCBSEL
  *  @access     PWMx->ETCTL
  *  @brief      SOCB event select
  */
#define ETCTL_SOCBSEL_Pos  (17)
#define ETCTL_SOCBSEL_Msk  (0xFU << ETCTL_SOCBSEL_Pos)

#define ETCTL_SOCBSEL_TBCNT_EQU_ZERO         ((0x0000U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_PERIOD       ((0x0001U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_ZERO_PERIOD  ((0x0002U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPA_UP      ((0x0003U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPA_DOWN    ((0x0004U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPB_UP      ((0x0005U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPB_DOWN    ((0x0006U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPC_UP      ((0x0007U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPC_DOWN    ((0x0008U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPD_UP      ((0x0009U) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_TBCNT_EQU_CMPD_DOWN    ((0x000AU) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_DCAEVT0_SOC            ((0x000BU) << ETCTL_SOCBSEL_Pos)
#define ETCTL_SOCBSEL_DCBEVT0_SOC            ((0x000CU) << ETCTL_SOCBSEL_Pos)

#define ETCTL_SOCBSEL_(x)  (((x) << ETCTL_SOCBSEL_Pos) & ETCTL_SOCBSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           SOCCEN
  *  @access     PWMx->ETCTL
  *  @brief      ADC start of conversion C (SOCC) pulse enable
  */
#define ETCTL_SOCCEN_Pos  (24)
#define ETCTL_SOCCEN_Msk  (0x1U << ETCTL_SOCCEN_Pos)

#define ETCTL_SOCCEN_DISABLE  ((0x0U) << ETCTL_SOCCEN_Pos)
#define ETCTL_SOCCEN_ENABLE   ((0x1U) << ETCTL_SOCCEN_Pos)

#define ETCTL_SOCCEN_(x)  (((x) << ETCTL_SOCCEN_Pos) & ETCTL_SOCCEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCTL           SOCCSEL
  *  @access     PWMx->ETCTL
  *  @brief      SOCC event select
  */
#define ETCTL_SOCCSEL_Pos  (25)
#define ETCTL_SOCCSEL_Msk  (0xFU << ETCTL_SOCCSEL_Pos)

#define ETCTL_SOCCSEL_TBCNT_EQU_ZERO         ((0x0000U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_PERIOD       ((0x0001U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_ZERO_PERIOD  ((0x0002U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPA_UP      ((0x0003U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPA_DOWN    ((0x0004U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPB_UP      ((0x0005U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPB_DOWN    ((0x0006U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPC_UP      ((0x0007U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPC_DOWN    ((0x0008U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPD_UP      ((0x0009U) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_TBCNT_EQU_CMPD_DOWN    ((0x000AU) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_DCAEVT0_SOC            ((0x000BU) << ETCTL_SOCCSEL_Pos)
#define ETCTL_SOCCSEL_DCBEVT0_SOC            ((0x000CU) << ETCTL_SOCCSEL_Pos)

#define ETCTL_SOCCSEL_(x)  (((x) << ETCTL_SOCCSEL_Pos) & ETCTL_SOCCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            INTPRD
  *  @access     PWMx->ETPS
  *  @brief      PWM interrupt period select
  *              Interrupt is generated upon INTPRD<=INTCNT and ETCTL[INTEN]=1. No interrupt will
  *              be generated if INTPRD=0
  */
#define ETPS_INTPRD_Pos  (0)
#define ETPS_INTPRD_Msk  (0xFU << ETPS_INTPRD_Pos)

#define ETPS_INTPRD_DISABLE                ((0x0000U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_1ST_EVENT   ((0x0001U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_2ND_EVENT   ((0x0002U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_3RD_EVENT   ((0x0003U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_4TH_EVENT   ((0x0004U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_5TH_EVENT   ((0x0005U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_6TH_EVENT   ((0x0006U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_7TH_EVENT   ((0x0007U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_8TH_EVENT   ((0x0008U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_9TH_EVENT   ((0x0009U) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_10TH_EVENT  ((0x000AU) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_11TH_EVENT  ((0x000BU) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_12TH_EVENT  ((0x000CU) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_13TH_EVENT  ((0x000DU) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_14TH_EVENT  ((0x000EU) << ETPS_INTPRD_Pos)
#define ETPS_INTPRD_GEN_INT_ON_15TH_EVENT  ((0x000FU) << ETPS_INTPRD_Pos)

#define ETPS_INTPRD_(x)  (((x) << ETPS_INTPRD_Pos) & ETPS_INTPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            INTCNT
  *  @access     PWMx->ETPS
  *  @brief      PWM interrupt counter
  *              It indicates how many selected ETSEL.INTSEL events have occurred. It is
  *              automatically cleared when an interrupt pulse is generated.
  *              It can be initialized via write.
  */
#define ETPS_INTCNT_Pos  (4)
#define ETPS_INTCNT_Msk  (0xFU << ETPS_INTCNT_Pos)

#define ETPS_INTCNT_NO_EVENT_OCCUR  ((0x0000U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_1_EVENT_OCCUR   ((0x0001U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_2_EVENT_OCCUR   ((0x0002U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_3_EVENT_OCCUR   ((0x0003U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_4_EVENT_OCCUR   ((0x0004U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_5_EVENT_OCCUR   ((0x0005U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_6_EVENT_OCCUR   ((0x0006U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_7_EVENT_OCCUR   ((0x0007U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_8_EVENT_OCCUR   ((0x0008U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_9_EVENT_OCCUR   ((0x0009U) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_10_EVENT_OCCUR  ((0x000AU) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_11_EVENT_OCCUR  ((0x000BU) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_12_EVENT_OCCUR  ((0x000CU) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_13_EVENT_OCCUR  ((0x000DU) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_14_EVENT_OCCUR  ((0x000EU) << ETPS_INTCNT_Pos)
#define ETPS_INTCNT_15_EVENT_OCCUR  ((0x000FU) << ETPS_INTCNT_Pos)

#define ETPS_INTCNT_(x)  (((x) << ETPS_INTCNT_Pos) & ETPS_INTCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            SOCAPRD
  *  @access     PWMx->ETPS
  *  @brief      PWM ADC start-of-conversion A event (SOCA) period select
  *              SOCA is generated upon SOCAPRD<=SOCACNT and ETCTL[SOCAEN]=1. No SOCA will be
  *              generated if SOCAPRD=0
  */
#define ETPS_SOCAPRD_Pos  (8)
#define ETPS_SOCAPRD_Msk  (0xFU << ETPS_SOCAPRD_Pos)

#define ETPS_SOCAPRD_GEN_SOCA_DISABLE        ((0x0000U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_1ST_EVENT   ((0x0001U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_2ND_EVENT   ((0x0002U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_3RD_EVENT   ((0x0003U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_4TH_EVENT   ((0x0004U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_5TH_EVENT   ((0x0005U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_6TH_EVENT   ((0x0006U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_7TH_EVENT   ((0x0007U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_8TH_EVENT   ((0x0008U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_9TH_EVENT   ((0x0009U) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_10TH_EVENT  ((0x000AU) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_11TH_EVENT  ((0x000BU) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_12TH_EVENT  ((0x000CU) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_13TH_EVENT  ((0x000DU) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_14TH_EVENT  ((0x000EU) << ETPS_SOCAPRD_Pos)
#define ETPS_SOCAPRD_GEN_SOCA_ON_15TH_EVENT  ((0x000FU) << ETPS_SOCAPRD_Pos)

#define ETPS_SOCAPRD_(x)  (((x) << ETPS_SOCAPRD_Pos) & ETPS_SOCAPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            SOCACNT
  *  @access     PWMx->ETPS
  *  @brief      PWM ADC start-of-conversion A event (SOCA) counter
  *              It indicates how many selected ETSEL.SOCASEL events have occurred. It is
  *              automatically cleared when an SOCA pulse is generated.
  *              It can be initialized via write.
  */
#define ETPS_SOCACNT_Pos  (12)
#define ETPS_SOCACNT_Msk  (0xFU << ETPS_SOCACNT_Pos)

#define ETPS_SOCACNT_NO_EVENT_OCCUR  ((0x0000U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_1_EVENT_OCCUR   ((0x0001U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_2_EVENT_OCCUR   ((0x0002U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_3_EVENT_OCCUR   ((0x0003U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_4_EVENT_OCCUR   ((0x0004U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_5_EVENT_OCCUR   ((0x0005U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_6_EVENT_OCCUR   ((0x0006U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_7_EVENT_OCCUR   ((0x0007U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_8_EVENT_OCCUR   ((0x0008U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_9_EVENT_OCCUR   ((0x0009U) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_10_EVENT_OCCUR  ((0x000AU) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_11_EVENT_OCCUR  ((0x000BU) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_12_EVENT_OCCUR  ((0x000CU) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_13_EVENT_OCCUR  ((0x000DU) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_14_EVENT_OCCUR  ((0x000EU) << ETPS_SOCACNT_Pos)
#define ETPS_SOCACNT_15_EVENT_OCCUR  ((0x000FU) << ETPS_SOCACNT_Pos)

#define ETPS_SOCACNT_(x)  (((x) << ETPS_SOCACNT_Pos) & ETPS_SOCACNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            SOCBPRD
  *  @access     PWMx->ETPS
  *  @brief      PWM ADC start-of-conversion B event (SOCB) period select
  *              SOCB is generated upon SOCBPRD<=SOCBCNT and ETCTL[SOCBEN]=1. No SOCB will be
  *              generated if SOCBPRD=0
  */
#define ETPS_SOCBPRD_Pos  (16)
#define ETPS_SOCBPRD_Msk  (0xFU << ETPS_SOCBPRD_Pos)

#define ETPS_SOCBPRD_GEN_SOCB_DISABLE        ((0x0000U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_1ST_EVENT   ((0x0001U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_2ND_EVENT   ((0x0002U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_3RD_EVENT   ((0x0003U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_4TH_EVENT   ((0x0004U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_5TH_EVENT   ((0x0005U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_6TH_EVENT   ((0x0006U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_7TH_EVENT   ((0x0007U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_8TH_EVENT   ((0x0008U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_9TH_EVENT   ((0x0009U) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_10TH_EVENT  ((0x000AU) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_11TH_EVENT  ((0x000BU) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_12TH_EVENT  ((0x000CU) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_13TH_EVENT  ((0x000DU) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_14TH_EVENT  ((0x000EU) << ETPS_SOCBPRD_Pos)
#define ETPS_SOCBPRD_GEN_SOCB_ON_15TH_EVENT  ((0x000FU) << ETPS_SOCBPRD_Pos)

#define ETPS_SOCBPRD_(x)  (((x) << ETPS_SOCBPRD_Pos) & ETPS_SOCBPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            SOCBCNT
  *  @access     PWMx->ETPS
  *  @brief      PWM ADC start-of-conversion B event (SOCB) counter
  *              It indicates how many selected ETSEL.SOCBSEL events have occurred. It is
  *              automatically cleared when an SOCB pulse is generated.
  *              It can be initialized via write.
  */
#define ETPS_SOCBCNT_Pos  (20)
#define ETPS_SOCBCNT_Msk  (0xFU << ETPS_SOCBCNT_Pos)

#define ETPS_SOCBCNT_NO_EVENT_OCCUR  ((0x0000U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_1_EVENT_OCCUR   ((0x0001U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_2_EVENT_OCCUR   ((0x0002U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_3_EVENT_OCCUR   ((0x0003U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_4_EVENT_OCCUR   ((0x0004U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_5_EVENT_OCCUR   ((0x0005U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_6_EVENT_OCCUR   ((0x0006U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_7_EVENT_OCCUR   ((0x0007U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_8_EVENT_OCCUR   ((0x0008U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_9_EVENT_OCCUR   ((0x0009U) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_10_EVENT_OCCUR  ((0x000AU) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_11_EVENT_OCCUR  ((0x000BU) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_12_EVENT_OCCUR  ((0x000CU) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_13_EVENT_OCCUR  ((0x000DU) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_14_EVENT_OCCUR  ((0x000EU) << ETPS_SOCBCNT_Pos)
#define ETPS_SOCBCNT_15_EVENT_OCCUR  ((0x000FU) << ETPS_SOCBCNT_Pos)

#define ETPS_SOCBCNT_(x)  (((x) << ETPS_SOCBCNT_Pos) & ETPS_SOCBCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            SOCCPRD
  *  @access     PWMx->ETPS
  *  @brief      PWM ADC start-of-conversion C event (SOCC) period select
  *              SOCC is generated upon SOCCPRD<=SOCCCNT and ETCTL[SOCCEN]=1. No SOCC will be
  *              generated if SOCCPRD=0
  */
#define ETPS_SOCCPRD_Pos  (24)
#define ETPS_SOCCPRD_Msk  (0xFU << ETPS_SOCCPRD_Pos)

#define ETPS_SOCCPRD_GEN_SOCC_DISABLE        ((0x0000U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_1ST_EVENT   ((0x0001U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_2ND_EVENT   ((0x0002U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_3RD_EVENT   ((0x0003U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_4TH_EVENT   ((0x0004U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_5TH_EVENT   ((0x0005U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_6TH_EVENT   ((0x0006U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_7TH_EVENT   ((0x0007U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_8TH_EVENT   ((0x0008U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_9TH_EVENT   ((0x0009U) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_10TH_EVENT  ((0x000AU) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_11TH_EVENT  ((0x000BU) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_12TH_EVENT  ((0x000CU) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_13TH_EVENT  ((0x000DU) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_14TH_EVENT  ((0x000EU) << ETPS_SOCCPRD_Pos)
#define ETPS_SOCCPRD_GEN_SOCC_ON_15TH_EVENT  ((0x000FU) << ETPS_SOCCPRD_Pos)

#define ETPS_SOCCPRD_(x)  (((x) << ETPS_SOCCPRD_Pos) & ETPS_SOCCPRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETPS            SOCCCNT
  *  @access     PWMx->ETPS
  *  @brief      PWM ADC start-of-conversion C event (SOCC) counter
  *              It indicates how many selected ETSEL.SOCCSEL events have occurred. It is
  *              automatically cleared when an SOCC pulse is generated.
  *              It can be initialized via write.
  */
#define ETPS_SOCCCNT_Pos  (28)
#define ETPS_SOCCCNT_Msk  (0xFU << ETPS_SOCCCNT_Pos)

#define ETPS_SOCCCNT_NO_EVENT_OCCUR  ((0x0000U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_1_EVENT_OCCUR   ((0x0001U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_2_EVENT_OCCUR   ((0x0002U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_3_EVENT_OCCUR   ((0x0003U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_4_EVENT_OCCUR   ((0x0004U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_5_EVENT_OCCUR   ((0x0005U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_6_EVENT_OCCUR   ((0x0006U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_7_EVENT_OCCUR   ((0x0007U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_8_EVENT_OCCUR   ((0x0008U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_9_EVENT_OCCUR   ((0x0009U) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_10_EVENT_OCCUR  ((0x000AU) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_11_EVENT_OCCUR  ((0x000BU) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_12_EVENT_OCCUR  ((0x000CU) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_13_EVENT_OCCUR  ((0x000DU) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_14_EVENT_OCCUR  ((0x000EU) << ETPS_SOCCCNT_Pos)
#define ETPS_SOCCCNT_15_EVENT_OCCUR  ((0x000FU) << ETPS_SOCCCNT_Pos)

#define ETPS_SOCCCNT_(x)  (((x) << ETPS_SOCCCNT_Pos) & ETPS_SOCCCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFLG           INT
  *  @access     PWMx->ETFLG
  *  @brief      Latched PWM interrupt flag
  */
#define ETFLG_INT_Pos  (0)
#define ETFLG_INT_Msk  (0x1U << ETFLG_INT_Pos)

#define ETFLG_INT_NOT_OCCUR  ((0x0U) << ETFLG_INT_Pos)
#define ETFLG_INT_OCCUR      ((0x1U) << ETFLG_INT_Pos)

#define ETFLG_INT_(x)  (((x) << ETFLG_INT_Pos) & ETFLG_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFLG           SOCA
  *  @access     PWMx->ETFLG
  *  @brief      Latched PWM ADC start-of-conversion A flag
  */
#define ETFLG_SOCA_Pos  (1)
#define ETFLG_SOCA_Msk  (0x1U << ETFLG_SOCA_Pos)

#define ETFLG_SOCA_NOT_OCCUR  ((0x0U) << ETFLG_SOCA_Pos)
#define ETFLG_SOCA_OCCUR      ((0x1U) << ETFLG_SOCA_Pos)

#define ETFLG_SOCA_(x)  (((x) << ETFLG_SOCA_Pos) & ETFLG_SOCA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFLG           SOCB
  *  @access     PWMx->ETFLG
  *  @brief      Latched PWM ADC start-of-conversion B flag
  */
#define ETFLG_SOCB_Pos  (2)
#define ETFLG_SOCB_Msk  (0x1U << ETFLG_SOCB_Pos)

#define ETFLG_SOCB_NOT_OCCUR  ((0x0U) << ETFLG_SOCB_Pos)
#define ETFLG_SOCB_OCCUR      ((0x1U) << ETFLG_SOCB_Pos)

#define ETFLG_SOCB_(x)  (((x) << ETFLG_SOCB_Pos) & ETFLG_SOCB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFLG           SOCC
  *  @access     PWMx->ETFLG
  *  @brief      Latched PWM ADC start-of-conversion C flag
  */
#define ETFLG_SOCC_Pos  (3)
#define ETFLG_SOCC_Msk  (0x1U << ETFLG_SOCC_Pos)

#define ETFLG_SOCC_NOT_OCCUR  ((0x0U) << ETFLG_SOCC_Pos)
#define ETFLG_SOCC_OCCUR      ((0x1U) << ETFLG_SOCC_Pos)

#define ETFLG_SOCC_(x)  (((x) << ETFLG_SOCC_Pos) & ETFLG_SOCC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCLR           INT
  *  @access     PWMx->ETCLR
  *  @brief      Latched PWM interrupt flag clear
  */
#define ETCLR_INT_Pos  (0)
#define ETCLR_INT_Msk  (0x1U << ETCLR_INT_Pos)

#define ETCLR_INT_NO_EFFECT  ((0x0U) << ETCLR_INT_Pos)
#define ETCLR_INT_CLEAR      ((0x1U) << ETCLR_INT_Pos)

#define ETCLR_INT_(x)  (((x) << ETCLR_INT_Pos) & ETCLR_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCLR           SOCA
  *  @access     PWMx->ETCLR
  *  @brief      Latched PWM ADC start-of-conversion A flag clear
  */
#define ETCLR_SOCA_Pos  (1)
#define ETCLR_SOCA_Msk  (0x1U << ETCLR_SOCA_Pos)

#define ETCLR_SOCA_NO_EFFECT  ((0x0U) << ETCLR_SOCA_Pos)
#define ETCLR_SOCA_CLEAR      ((0x1U) << ETCLR_SOCA_Pos)

#define ETCLR_SOCA_(x)  (((x) << ETCLR_SOCA_Pos) & ETCLR_SOCA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCLR           SOCB
  *  @access     PWMx->ETCLR
  *  @brief      Latched PWM ADC start-of-conversion B flag clear
  */
#define ETCLR_SOCB_Pos  (2)
#define ETCLR_SOCB_Msk  (0x1U << ETCLR_SOCB_Pos)

#define ETCLR_SOCB_NO_EFFECT  ((0x0U) << ETCLR_SOCB_Pos)
#define ETCLR_SOCB_CLEAR      ((0x1U) << ETCLR_SOCB_Pos)

#define ETCLR_SOCB_(x)  (((x) << ETCLR_SOCB_Pos) & ETCLR_SOCB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETCLR           SOCC
  *  @access     PWMx->ETCLR
  *  @brief      Latched PWM ADC start-of-conversion C flag clear
  */
#define ETCLR_SOCC_Pos  (3)
#define ETCLR_SOCC_Msk  (0x1U << ETCLR_SOCC_Pos)

#define ETCLR_SOCC_NO_EFFECT  ((0x0U) << ETCLR_SOCC_Pos)
#define ETCLR_SOCC_CLEAR      ((0x1U) << ETCLR_SOCC_Pos)

#define ETCLR_SOCC_(x)  (((x) << ETCLR_SOCC_Pos) & ETCLR_SOCC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           INT
  *  @access     PWMx->ETFRC
  *  @brief      Software force a PWM interrupt
  *              INT bit should be written 1 at the same time
  *              This bit is ignored if ETSEL.INTEN=0 or ETPS.INTPRD=00
  */
#define ETFRC_INT_Pos  (0)
#define ETFRC_INT_Msk  (0x1U << ETFRC_INT_Pos)

#define ETFRC_INT_NO_EFFECT  ((0x0U) << ETFRC_INT_Pos)
#define ETFRC_INT_FORCE      ((0x1U) << ETFRC_INT_Pos)

#define ETFRC_INT_(x)  (((x) << ETFRC_INT_Pos) & ETFRC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           SOCA
  *  @access     PWMx->ETFRC
  *  @brief      Software force a start-of-conversion A pulse
  *              SOCAWE bit should be written 1 at the same time
  *              This bit is ignored if ETSEL.SOCAEN=0
  */
#define ETFRC_SOCA_Pos  (1)
#define ETFRC_SOCA_Msk  (0x1U << ETFRC_SOCA_Pos)

#define ETFRC_SOCA_NO_EFFECT  ((0x0U) << ETFRC_SOCA_Pos)
#define ETFRC_SOCA_FORCE      ((0x1U) << ETFRC_SOCA_Pos)

#define ETFRC_SOCA_(x)  (((x) << ETFRC_SOCA_Pos) & ETFRC_SOCA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           SOCB
  *  @access     PWMx->ETFRC
  *  @brief      Software force a start-of-conversion B pulse
  *              SOCBWE bit should be written 1 at the same time
  *              This bit is ignored if ETSEL.SOCBEN=0
  */
#define ETFRC_SOCB_Pos  (2)
#define ETFRC_SOCB_Msk  (0x1U << ETFRC_SOCB_Pos)

#define ETFRC_SOCB_NO_EFFECT  ((0x0U) << ETFRC_SOCB_Pos)
#define ETFRC_SOCB_FORCE      ((0x1U) << ETFRC_SOCB_Pos)

#define ETFRC_SOCB_(x)  (((x) << ETFRC_SOCB_Pos) & ETFRC_SOCB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           SOCC
  *  @access     PWMx->ETFRC
  *  @brief      Software force a start-of-conversion B pulse
  *              SOCCWE bit should be written 1 at the same time
  *              This bit is ignored if ETSEL.SOCCEN=0
  */
#define ETFRC_SOCC_Pos  (3)
#define ETFRC_SOCC_Msk  (0x1U << ETFRC_SOCC_Pos)

#define ETFRC_SOCC_NO_EFFECT  ((0x0U) << ETFRC_SOCC_Pos)
#define ETFRC_SOCC_FORCE      ((0x1U) << ETFRC_SOCC_Pos)

#define ETFRC_SOCC_(x)  (((x) << ETFRC_SOCC_Pos) & ETFRC_SOCC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           INTWE
  *  @access     PWMx->ETFRC
  *  @brief      INT bit write enable
  */
#define ETFRC_INTWE_Pos  (8)
#define ETFRC_INTWE_Msk  (0x1U << ETFRC_INTWE_Pos)

#define ETFRC_INTWE_DISABLE  ((0x0U) << ETFRC_INTWE_Pos)
#define ETFRC_INTWE_ENABLE   ((0x1U) << ETFRC_INTWE_Pos)

#define ETFRC_INTWE_(x)  (((x) << ETFRC_INTWE_Pos) & ETFRC_INTWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           SOCAWE
  *  @access     PWMx->ETFRC
  *  @brief      SOCA bit write enable
  */
#define ETFRC_SOCAWE_Pos  (9)
#define ETFRC_SOCAWE_Msk  (0x1U << ETFRC_SOCAWE_Pos)

#define ETFRC_SOCAWE_DISABLE  ((0x0U) << ETFRC_SOCAWE_Pos)
#define ETFRC_SOCAWE_ENABLE   ((0x1U) << ETFRC_SOCAWE_Pos)

#define ETFRC_SOCAWE_(x)  (((x) << ETFRC_SOCAWE_Pos) & ETFRC_SOCAWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           SOCBWE
  *  @access     PWMx->ETFRC
  *  @brief      SOCB bit write enable
  */
#define ETFRC_SOCBWE_Pos  (10)
#define ETFRC_SOCBWE_Msk  (0x1U << ETFRC_SOCBWE_Pos)

#define ETFRC_SOCBWE_DISABLE  ((0x0U) << ETFRC_SOCBWE_Pos)
#define ETFRC_SOCBWE_ENABLE   ((0x1U) << ETFRC_SOCBWE_Pos)

#define ETFRC_SOCBWE_(x)  (((x) << ETFRC_SOCBWE_Pos) & ETFRC_SOCBWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            ETFRC           SOCCWE
  *  @access     PWMx->ETFRC
  *  @brief      SOCC bit write enable
  */
#define ETFRC_SOCCWE_Pos  (11)
#define ETFRC_SOCCWE_Msk  (0x1U << ETFRC_SOCCWE_Pos)

#define ETFRC_SOCCWE_DISABLE  ((0x0U) << ETFRC_SOCCWE_Pos)
#define ETFRC_SOCCWE_ENABLE   ((0x1U) << ETFRC_SOCCWE_Pos)

#define ETFRC_SOCCWE_(x)  (((x) << ETFRC_SOCCWE_Pos) & ETFRC_SOCCWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMx            PWMREGKEY       KEY
  *  @access     PWMx->PWMREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected PWM registers
  */
#define PWMREGKEY_KEY_Pos  (0)
#define PWMREGKEY_KEY_Msk  (0xFFFFFFFFU << PWMREGKEY_KEY_Pos)

#define PWMREGKEY_KEY_(x)  (((x) << PWMREGKEY_KEY_Pos) & PWMREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      PWMCFG:                                                               */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ0SRCCTL       POL
  *  @access     PWMCFG->TZ0SRCCTL
  *  @brief      TZ0 polarity
  */
#define TZ0SRCCTL_POL_Pos  (0)
#define TZ0SRCCTL_POL_Msk  (0x1U << TZ0SRCCTL_POL_Pos)

#define TZ0SRCCTL_POL_ACTIVE_LOW   ((0x0U) << TZ0SRCCTL_POL_Pos)
#define TZ0SRCCTL_POL_ACTIVE_HIGH  ((0x1U) << TZ0SRCCTL_POL_Pos)

#define TZ0SRCCTL_POL_(x)  (((x) << TZ0SRCCTL_POL_Pos) & TZ0SRCCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ0SRCCTL       IOSEL
  *  @access     PWMCFG->TZ0SRCCTL
  *  @brief      GPIO number for TZ0 event
  */
#define TZ0SRCCTL_IOSEL_Pos  (1)
#define TZ0SRCCTL_IOSEL_Msk  (0x3FU << TZ0SRCCTL_IOSEL_Pos)

#define TZ0SRCCTL_IOSEL_(x)  (((x) << TZ0SRCCTL_IOSEL_Pos) & TZ0SRCCTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ1SRCCTL       POL
  *  @access     PWMCFG->TZ1SRCCTL
  *  @brief      TZ1 polarity
  */
#define TZ1SRCCTL_POL_Pos  (0)
#define TZ1SRCCTL_POL_Msk  (0x1U << TZ1SRCCTL_POL_Pos)

#define TZ1SRCCTL_POL_ACTIVE_LOW   ((0x0U) << TZ1SRCCTL_POL_Pos)
#define TZ1SRCCTL_POL_ACTIVE_HIGH  ((0x1U) << TZ1SRCCTL_POL_Pos)

#define TZ1SRCCTL_POL_(x)  (((x) << TZ1SRCCTL_POL_Pos) & TZ1SRCCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ1SRCCTL       IOSEL
  *  @access     PWMCFG->TZ1SRCCTL
  *  @brief      GPIO number for TZ1 event
  */
#define TZ1SRCCTL_IOSEL_Pos  (1)
#define TZ1SRCCTL_IOSEL_Msk  (0x3FU << TZ1SRCCTL_IOSEL_Pos)

#define TZ1SRCCTL_IOSEL_(x)  (((x) << TZ1SRCCTL_IOSEL_Pos) & TZ1SRCCTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ2SRCCTL       POL
  *  @access     PWMCFG->TZ2SRCCTL
  *  @brief      TZ2 polarity
  */
#define TZ2SRCCTL_POL_Pos  (0)
#define TZ2SRCCTL_POL_Msk  (0x1U << TZ2SRCCTL_POL_Pos)

#define TZ2SRCCTL_POL_ACTIVE_LOW   ((0x0U) << TZ2SRCCTL_POL_Pos)
#define TZ2SRCCTL_POL_ACTIVE_HIGH  ((0x1U) << TZ2SRCCTL_POL_Pos)

#define TZ2SRCCTL_POL_(x)  (((x) << TZ2SRCCTL_POL_Pos) & TZ2SRCCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ2SRCCTL       IOSEL
  *  @access     PWMCFG->TZ2SRCCTL
  *  @brief      GPIO number for TZ2 event
  */
#define TZ2SRCCTL_IOSEL_Pos  (1)
#define TZ2SRCCTL_IOSEL_Msk  (0x3FU << TZ2SRCCTL_IOSEL_Pos)

#define TZ2SRCCTL_IOSEL_(x)  (((x) << TZ2SRCCTL_IOSEL_Pos) & TZ2SRCCTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ3SRCCTL       POL
  *  @access     PWMCFG->TZ3SRCCTL
  *  @brief      TZ3 polarity
  */
#define TZ3SRCCTL_POL_Pos  (0)
#define TZ3SRCCTL_POL_Msk  (0x1U << TZ3SRCCTL_POL_Pos)

#define TZ3SRCCTL_POL_ACTIVE_LOW   ((0x0U) << TZ3SRCCTL_POL_Pos)
#define TZ3SRCCTL_POL_ACTIVE_HIGH  ((0x1U) << TZ3SRCCTL_POL_Pos)

#define TZ3SRCCTL_POL_(x)  (((x) << TZ3SRCCTL_POL_Pos) & TZ3SRCCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ3SRCCTL       IOSEL
  *  @access     PWMCFG->TZ3SRCCTL
  *  @brief      GPIO number for TZ3 event
  */
#define TZ3SRCCTL_IOSEL_Pos  (1)
#define TZ3SRCCTL_IOSEL_Msk  (0x3FU << TZ3SRCCTL_IOSEL_Pos)

#define TZ3SRCCTL_IOSEL_(x)  (((x) << TZ3SRCCTL_IOSEL_Pos) & TZ3SRCCTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ4SRCCTL       POL
  *  @access     PWMCFG->TZ4SRCCTL
  *  @brief      TZ4 polarity
  */
#define TZ4SRCCTL_POL_Pos  (0)
#define TZ4SRCCTL_POL_Msk  (0x1U << TZ4SRCCTL_POL_Pos)

#define TZ4SRCCTL_POL_ACTIVE_LOW   ((0x0U) << TZ4SRCCTL_POL_Pos)
#define TZ4SRCCTL_POL_ACTIVE_HIGH  ((0x1U) << TZ4SRCCTL_POL_Pos)

#define TZ4SRCCTL_POL_(x)  (((x) << TZ4SRCCTL_POL_Pos) & TZ4SRCCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TZ4SRCCTL       IOSEL
  *  @access     PWMCFG->TZ4SRCCTL
  *  @brief      GPIO number for TZ4 event
  */
#define TZ4SRCCTL_IOSEL_Pos  (1)
#define TZ4SRCCTL_IOSEL_Msk  (0x3FU << TZ4SRCCTL_IOSEL_Pos)

#define TZ4SRCCTL_IOSEL_(x)  (((x) << TZ4SRCCTL_IOSEL_Pos) & TZ4SRCCTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          FRCSYNC         PWM0SYNC
  *  @access     PWMCFG->FRCSYNC
  *  @brief      Software forced synchronization on PWM0
  */
#define FRCSYNC_PWM0SYNC_Pos  (0)
#define FRCSYNC_PWM0SYNC_Msk  (0x1U << FRCSYNC_PWM0SYNC_Pos)

#define FRCSYNC_PWM0SYNC_NO_EFFECT  ((0x0U) << FRCSYNC_PWM0SYNC_Pos)
#define FRCSYNC_PWM0SYNC_FORCE      ((0x1U) << FRCSYNC_PWM0SYNC_Pos)

#define FRCSYNC_PWM0SYNC_(x)  (((x) << FRCSYNC_PWM0SYNC_Pos) & FRCSYNC_PWM0SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          FRCSYNC         PWM1SYNC
  *  @access     PWMCFG->FRCSYNC
  *  @brief      Software forced synchronization on PWM1
  */
#define FRCSYNC_PWM1SYNC_Pos  (1)
#define FRCSYNC_PWM1SYNC_Msk  (0x1U << FRCSYNC_PWM1SYNC_Pos)

#define FRCSYNC_PWM1SYNC_NO_EFFECT  ((0x0U) << FRCSYNC_PWM1SYNC_Pos)
#define FRCSYNC_PWM1SYNC_FORCE      ((0x1U) << FRCSYNC_PWM1SYNC_Pos)

#define FRCSYNC_PWM1SYNC_(x)  (((x) << FRCSYNC_PWM1SYNC_Pos) & FRCSYNC_PWM1SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          FRCSYNC         PWM2SYNC
  *  @access     PWMCFG->FRCSYNC
  *  @brief      Software forced synchronization on PWM2
  */
#define FRCSYNC_PWM2SYNC_Pos  (2)
#define FRCSYNC_PWM2SYNC_Msk  (0x1U << FRCSYNC_PWM2SYNC_Pos)

#define FRCSYNC_PWM2SYNC_NO_EFFECT  ((0x0U) << FRCSYNC_PWM2SYNC_Pos)
#define FRCSYNC_PWM2SYNC_FORCE      ((0x1U) << FRCSYNC_PWM2SYNC_Pos)

#define FRCSYNC_PWM2SYNC_(x)  (((x) << FRCSYNC_PWM2SYNC_Pos) & FRCSYNC_PWM2SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          FRCSYNC         PWM3SYNC
  *  @access     PWMCFG->FRCSYNC
  *  @brief      Software forced synchronization on PWM3
  */
#define FRCSYNC_PWM3SYNC_Pos  (3)
#define FRCSYNC_PWM3SYNC_Msk  (0x1U << FRCSYNC_PWM3SYNC_Pos)

#define FRCSYNC_PWM3SYNC_NO_EFFECT  ((0x0U) << FRCSYNC_PWM3SYNC_Pos)
#define FRCSYNC_PWM3SYNC_FORCE      ((0x1U) << FRCSYNC_PWM3SYNC_Pos)

#define FRCSYNC_PWM3SYNC_(x)  (((x) << FRCSYNC_PWM3SYNC_Pos) & FRCSYNC_PWM3SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          FRCSYNC         PWMCLK
  *  @access     PWMCFG->FRCSYNC
  *  @brief      Software forced synchronization on clock for all PWMs
  */
#define FRCSYNC_PWMCLK_Pos  (31)
#define FRCSYNC_PWMCLK_Msk  (0x1U << FRCSYNC_PWMCLK_Pos)

#define FRCSYNC_PWMCLK_NO_EFFECT  ((0x0U) << FRCSYNC_PWMCLK_Pos)
#define FRCSYNC_PWMCLK_FORCE      ((0x1U) << FRCSYNC_PWMCLK_Pos)

#define FRCSYNC_PWMCLK_(x)  (((x) << FRCSYNC_PWMCLK_Pos) & FRCSYNC_PWMCLK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          GPIOSYNCICTL    POL
  *  @access     PWMCFG->GPIOSYNCICTL
  *  @brief      PWMSYNCI input polarity
  */
#define GPIOSYNCICTL_POL_Pos  (0)
#define GPIOSYNCICTL_POL_Msk  (0x1U << GPIOSYNCICTL_POL_Pos)

#define GPIOSYNCICTL_POL_ACTIVE_LOW   ((0x0U) << GPIOSYNCICTL_POL_Pos)
#define GPIOSYNCICTL_POL_ACTIVE_HIGH  ((0x1U) << GPIOSYNCICTL_POL_Pos)

#define GPIOSYNCICTL_POL_(x)  (((x) << GPIOSYNCICTL_POL_Pos) & GPIOSYNCICTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          GPIOSYNCICTL    IOSEL
  *  @access     PWMCFG->GPIOSYNCICTL
  *  @brief      GPIO number for PWMSYNCI input
  */
#define GPIOSYNCICTL_IOSEL_Pos  (1)
#define GPIOSYNCICTL_IOSEL_Msk  (0x3FU << GPIOSYNCICTL_IOSEL_Pos)

#define GPIOSYNCICTL_IOSEL_(x)  (((x) << GPIOSYNCICTL_IOSEL_Pos) & GPIOSYNCICTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          GPIOSYNCIEN     PWM0SYNC
  *  @access     PWMCFG->GPIOSYNCIEN
  *  @brief      Enable PWM0 synchronization by GPIO
  */
#define GPIOSYNCIEN_PWM0SYNC_Pos  (0)
#define GPIOSYNCIEN_PWM0SYNC_Msk  (0x1U << GPIOSYNCIEN_PWM0SYNC_Pos)

#define GPIOSYNCIEN_PWM0SYNC_DISABLE  ((0x0U) << GPIOSYNCIEN_PWM0SYNC_Pos)
#define GPIOSYNCIEN_PWM0SYNC_ENABLE   ((0x1U) << GPIOSYNCIEN_PWM0SYNC_Pos)

#define GPIOSYNCIEN_PWM0SYNC_(x)  (((x) << GPIOSYNCIEN_PWM0SYNC_Pos) & GPIOSYNCIEN_PWM0SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          GPIOSYNCIEN     PWM1SYNC
  *  @access     PWMCFG->GPIOSYNCIEN
  *  @brief      Enable PWM1 synchronization by GPIO
  */
#define GPIOSYNCIEN_PWM1SYNC_Pos  (1)
#define GPIOSYNCIEN_PWM1SYNC_Msk  (0x1U << GPIOSYNCIEN_PWM1SYNC_Pos)

#define GPIOSYNCIEN_PWM1SYNC_DISABLE  ((0x0U) << GPIOSYNCIEN_PWM1SYNC_Pos)
#define GPIOSYNCIEN_PWM1SYNC_ENABLE   ((0x1U) << GPIOSYNCIEN_PWM1SYNC_Pos)

#define GPIOSYNCIEN_PWM1SYNC_(x)  (((x) << GPIOSYNCIEN_PWM1SYNC_Pos) & GPIOSYNCIEN_PWM1SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          GPIOSYNCIEN     PWM2SYNC
  *  @access     PWMCFG->GPIOSYNCIEN
  *  @brief      Enable PWM2 synchronization by GPIO
  */
#define GPIOSYNCIEN_PWM2SYNC_Pos  (2)
#define GPIOSYNCIEN_PWM2SYNC_Msk  (0x1U << GPIOSYNCIEN_PWM2SYNC_Pos)

#define GPIOSYNCIEN_PWM2SYNC_DISABLE  ((0x0U) << GPIOSYNCIEN_PWM2SYNC_Pos)
#define GPIOSYNCIEN_PWM2SYNC_ENABLE   ((0x1U) << GPIOSYNCIEN_PWM2SYNC_Pos)

#define GPIOSYNCIEN_PWM2SYNC_(x)  (((x) << GPIOSYNCIEN_PWM2SYNC_Pos) & GPIOSYNCIEN_PWM2SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR0SYNCIEN     PWM0SYNC
  *  @access     PWMCFG->TMR0SYNCIEN
  *  @brief      Enable PWM0 synchronization by Timer 0
  */
#define TMR0SYNCIEN_PWM0SYNC_Pos  (0)
#define TMR0SYNCIEN_PWM0SYNC_Msk  (0x1U << TMR0SYNCIEN_PWM0SYNC_Pos)

#define TMR0SYNCIEN_PWM0SYNC_DISABLE  ((0x0U) << TMR0SYNCIEN_PWM0SYNC_Pos)
#define TMR0SYNCIEN_PWM0SYNC_ENABLE   ((0x1U) << TMR0SYNCIEN_PWM0SYNC_Pos)

#define TMR0SYNCIEN_PWM0SYNC_(x)  (((x) << TMR0SYNCIEN_PWM0SYNC_Pos) & TMR0SYNCIEN_PWM0SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR0SYNCIEN     PWM1SYNC
  *  @access     PWMCFG->TMR0SYNCIEN
  *  @brief      Enable PWM1 synchronization by Timer 0
  */
#define TMR0SYNCIEN_PWM1SYNC_Pos  (1)
#define TMR0SYNCIEN_PWM1SYNC_Msk  (0x1U << TMR0SYNCIEN_PWM1SYNC_Pos)

#define TMR0SYNCIEN_PWM1SYNC_DISABLE  ((0x0U) << TMR0SYNCIEN_PWM1SYNC_Pos)
#define TMR0SYNCIEN_PWM1SYNC_ENABLE   ((0x1U) << TMR0SYNCIEN_PWM1SYNC_Pos)

#define TMR0SYNCIEN_PWM1SYNC_(x)  (((x) << TMR0SYNCIEN_PWM1SYNC_Pos) & TMR0SYNCIEN_PWM1SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR0SYNCIEN     PWM2SYNC
  *  @access     PWMCFG->TMR0SYNCIEN
  *  @brief      Enable PWM2 synchronization by Timer 0
  */
#define TMR0SYNCIEN_PWM2SYNC_Pos  (2)
#define TMR0SYNCIEN_PWM2SYNC_Msk  (0x1U << TMR0SYNCIEN_PWM2SYNC_Pos)

#define TMR0SYNCIEN_PWM2SYNC_DISABLE  ((0x0U) << TMR0SYNCIEN_PWM2SYNC_Pos)
#define TMR0SYNCIEN_PWM2SYNC_ENABLE   ((0x1U) << TMR0SYNCIEN_PWM2SYNC_Pos)

#define TMR0SYNCIEN_PWM2SYNC_(x)  (((x) << TMR0SYNCIEN_PWM2SYNC_Pos) & TMR0SYNCIEN_PWM2SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR1SYNCIEN     PWM0SYNC
  *  @access     PWMCFG->TMR1SYNCIEN
  *  @brief      Enable PWM0 synchronization by Timer 1
  */
#define TMR1SYNCIEN_PWM0SYNC_Pos  (0)
#define TMR1SYNCIEN_PWM0SYNC_Msk  (0x1U << TMR1SYNCIEN_PWM0SYNC_Pos)

#define TMR1SYNCIEN_PWM0SYNC_DISABLE  ((0x0U) << TMR1SYNCIEN_PWM0SYNC_Pos)
#define TMR1SYNCIEN_PWM0SYNC_ENABLE   ((0x1U) << TMR1SYNCIEN_PWM0SYNC_Pos)

#define TMR1SYNCIEN_PWM0SYNC_(x)  (((x) << TMR1SYNCIEN_PWM0SYNC_Pos) & TMR1SYNCIEN_PWM0SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR1SYNCIEN     PWM1SYNC
  *  @access     PWMCFG->TMR1SYNCIEN
  *  @brief      Enable PWM1 synchronization by Timer 1
  */
#define TMR1SYNCIEN_PWM1SYNC_Pos  (1)
#define TMR1SYNCIEN_PWM1SYNC_Msk  (0x1U << TMR1SYNCIEN_PWM1SYNC_Pos)

#define TMR1SYNCIEN_PWM1SYNC_DISABLE  ((0x0U) << TMR1SYNCIEN_PWM1SYNC_Pos)
#define TMR1SYNCIEN_PWM1SYNC_ENABLE   ((0x1U) << TMR1SYNCIEN_PWM1SYNC_Pos)

#define TMR1SYNCIEN_PWM1SYNC_(x)  (((x) << TMR1SYNCIEN_PWM1SYNC_Pos) & TMR1SYNCIEN_PWM1SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR1SYNCIEN     PWM2SYNC
  *  @access     PWMCFG->TMR1SYNCIEN
  *  @brief      Enable PWM2 synchronization by Timer 1
  */
#define TMR1SYNCIEN_PWM2SYNC_Pos  (2)
#define TMR1SYNCIEN_PWM2SYNC_Msk  (0x1U << TMR1SYNCIEN_PWM2SYNC_Pos)

#define TMR1SYNCIEN_PWM2SYNC_DISABLE  ((0x0U) << TMR1SYNCIEN_PWM2SYNC_Pos)
#define TMR1SYNCIEN_PWM2SYNC_ENABLE   ((0x1U) << TMR1SYNCIEN_PWM2SYNC_Pos)

#define TMR1SYNCIEN_PWM2SYNC_(x)  (((x) << TMR1SYNCIEN_PWM2SYNC_Pos) & TMR1SYNCIEN_PWM2SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR2SYNCIEN     PWM0SYNC
  *  @access     PWMCFG->TMR2SYNCIEN
  *  @brief      Enable PWM0 synchronization by Timer 2
  */
#define TMR2SYNCIEN_PWM0SYNC_Pos  (0)
#define TMR2SYNCIEN_PWM0SYNC_Msk  (0x1U << TMR2SYNCIEN_PWM0SYNC_Pos)

#define TMR2SYNCIEN_PWM0SYNC_DISABLE  ((0x0U) << TMR2SYNCIEN_PWM0SYNC_Pos)
#define TMR2SYNCIEN_PWM0SYNC_ENABLE   ((0x1U) << TMR2SYNCIEN_PWM0SYNC_Pos)

#define TMR2SYNCIEN_PWM0SYNC_(x)  (((x) << TMR2SYNCIEN_PWM0SYNC_Pos) & TMR2SYNCIEN_PWM0SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR2SYNCIEN     PWM1SYNC
  *  @access     PWMCFG->TMR2SYNCIEN
  *  @brief      Enable PWM1 synchronization by Timer 2
  */
#define TMR2SYNCIEN_PWM1SYNC_Pos  (1)
#define TMR2SYNCIEN_PWM1SYNC_Msk  (0x1U << TMR2SYNCIEN_PWM1SYNC_Pos)

#define TMR2SYNCIEN_PWM1SYNC_DISABLE  ((0x0U) << TMR2SYNCIEN_PWM1SYNC_Pos)
#define TMR2SYNCIEN_PWM1SYNC_ENABLE   ((0x1U) << TMR2SYNCIEN_PWM1SYNC_Pos)

#define TMR2SYNCIEN_PWM1SYNC_(x)  (((x) << TMR2SYNCIEN_PWM1SYNC_Pos) & TMR2SYNCIEN_PWM1SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          TMR2SYNCIEN     PWM2SYNC
  *  @access     PWMCFG->TMR2SYNCIEN
  *  @brief      Enable PWM2 synchronization by Timer 2
  */
#define TMR2SYNCIEN_PWM2SYNC_Pos  (2)
#define TMR2SYNCIEN_PWM2SYNC_Msk  (0x1U << TMR2SYNCIEN_PWM2SYNC_Pos)

#define TMR2SYNCIEN_PWM2SYNC_DISABLE  ((0x0U) << TMR2SYNCIEN_PWM2SYNC_Pos)
#define TMR2SYNCIEN_PWM2SYNC_ENABLE   ((0x1U) << TMR2SYNCIEN_PWM2SYNC_Pos)

#define TMR2SYNCIEN_PWM2SYNC_(x)  (((x) << TMR2SYNCIEN_PWM2SYNC_Pos) & TMR2SYNCIEN_PWM2SYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SYNCOCTL        DURATION
  *  @access     PWMCFG->SYNCOCTL
  *  @brief      Pulse duration of PWMSYNCO to the pin
  */
#define SYNCOCTL_DURATION_Pos  (0)
#define SYNCOCTL_DURATION_Msk  (0x3U << SYNCOCTL_DURATION_Pos)

#define SYNCOCTL_DURATION_4_PWM_CLK   ((0x00U) << SYNCOCTL_DURATION_Pos)
#define SYNCOCTL_DURATION_8_PWM_CLK   ((0x01U) << SYNCOCTL_DURATION_Pos)
#define SYNCOCTL_DURATION_16_PWM_CLK  ((0x02U) << SYNCOCTL_DURATION_Pos)
#define SYNCOCTL_DURATION_32_PWM_CLK  ((0x03U) << SYNCOCTL_DURATION_Pos)

#define SYNCOCTL_DURATION_(x)  (((x) << SYNCOCTL_DURATION_Pos) & SYNCOCTL_DURATION_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SYNCOCTL        POL
  *  @access     PWMCFG->SYNCOCTL
  *  @brief      Polarity of PWMSYNCO to the pin
  */
#define SYNCOCTL_POL_Pos  (2)
#define SYNCOCTL_POL_Msk  (0x1U << SYNCOCTL_POL_Pos)

#define SYNCOCTL_POL_ACTIVE_LOW   ((0x0U) << SYNCOCTL_POL_Pos)
#define SYNCOCTL_POL_ACTIVE_HIGH  ((0x1U) << SYNCOCTL_POL_Pos)

#define SYNCOCTL_POL_(x)  (((x) << SYNCOCTL_POL_Pos) & SYNCOCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SYNCOCTL        SYNCO0EN
  *  @access     PWMCFG->SYNCOCTL
  *  @brief      Enable PWM0SYNCO output to the pin
  */
#define SYNCOCTL_SYNCO0EN_Pos  (3)
#define SYNCOCTL_SYNCO0EN_Msk  (0x1U << SYNCOCTL_SYNCO0EN_Pos)

#define SYNCOCTL_SYNCO0EN_DISABLE  ((0x0U) << SYNCOCTL_SYNCO0EN_Pos)
#define SYNCOCTL_SYNCO0EN_ENABLE   ((0x1U) << SYNCOCTL_SYNCO0EN_Pos)

#define SYNCOCTL_SYNCO0EN_(x)  (((x) << SYNCOCTL_SYNCO0EN_Pos) & SYNCOCTL_SYNCO0EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SYNCOCTL        SYNCO1EN
  *  @access     PWMCFG->SYNCOCTL
  *  @brief      Enable PWM1SYNCO output to the pin
  */
#define SYNCOCTL_SYNCO1EN_Pos  (4)
#define SYNCOCTL_SYNCO1EN_Msk  (0x1U << SYNCOCTL_SYNCO1EN_Pos)

#define SYNCOCTL_SYNCO1EN_DISABLE  ((0x0U) << SYNCOCTL_SYNCO1EN_Pos)
#define SYNCOCTL_SYNCO1EN_ENABLE   ((0x1U) << SYNCOCTL_SYNCO1EN_Pos)

#define SYNCOCTL_SYNCO1EN_(x)  (((x) << SYNCOCTL_SYNCO1EN_Pos) & SYNCOCTL_SYNCO1EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SYNCOCTL        SYNCO2EN
  *  @access     PWMCFG->SYNCOCTL
  *  @brief      Enable PWM2SYNCO output to the pin
  */
#define SYNCOCTL_SYNCO2EN_Pos  (5)
#define SYNCOCTL_SYNCO2EN_Msk  (0x1U << SYNCOCTL_SYNCO2EN_Pos)

#define SYNCOCTL_SYNCO2EN_DISABLE  ((0x0U) << SYNCOCTL_SYNCO2EN_Pos)
#define SYNCOCTL_SYNCO2EN_ENABLE   ((0x1U) << SYNCOCTL_SYNCO2EN_Pos)

#define SYNCOCTL_SYNCO2EN_(x)  (((x) << SYNCOCTL_SYNCO2EN_Pos) & SYNCOCTL_SYNCO2EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCAOCTL        DURATION
  *  @access     PWMCFG->SOCAOCTL
  *  @brief      Pulse duration of PWMSOCA output to the pin
  */
#define SOCAOCTL_DURATION_Pos  (0)
#define SOCAOCTL_DURATION_Msk  (0x3U << SOCAOCTL_DURATION_Pos)

#define SOCAOCTL_DURATION_4_PWM_CLK   ((0x00U) << SOCAOCTL_DURATION_Pos)
#define SOCAOCTL_DURATION_8_PWM_CLK   ((0x01U) << SOCAOCTL_DURATION_Pos)
#define SOCAOCTL_DURATION_16_PWM_CLK  ((0x02U) << SOCAOCTL_DURATION_Pos)
#define SOCAOCTL_DURATION_32_PWM_CLK  ((0x03U) << SOCAOCTL_DURATION_Pos)

#define SOCAOCTL_DURATION_(x)  (((x) << SOCAOCTL_DURATION_Pos) & SOCAOCTL_DURATION_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCAOCTL        POL
  *  @access     PWMCFG->SOCAOCTL
  *  @brief      Polarity of PWMSOCA output to the pin
  */
#define SOCAOCTL_POL_Pos  (2)
#define SOCAOCTL_POL_Msk  (0x1U << SOCAOCTL_POL_Pos)

#define SOCAOCTL_POL_ACTIVE_LOW   ((0x0U) << SOCAOCTL_POL_Pos)
#define SOCAOCTL_POL_ACTIVE_HIGH  ((0x1U) << SOCAOCTL_POL_Pos)

#define SOCAOCTL_POL_(x)  (((x) << SOCAOCTL_POL_Pos) & SOCAOCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCAOCTL        SOCA0EN
  *  @access     PWMCFG->SOCAOCTL
  *  @brief      Enable PWM0SOCA output to the pin
  */
#define SOCAOCTL_SOCA0EN_Pos  (3)
#define SOCAOCTL_SOCA0EN_Msk  (0x1U << SOCAOCTL_SOCA0EN_Pos)

#define SOCAOCTL_SOCA0EN_DISABLE  ((0x0U) << SOCAOCTL_SOCA0EN_Pos)
#define SOCAOCTL_SOCA0EN_ENABLE   ((0x1U) << SOCAOCTL_SOCA0EN_Pos)

#define SOCAOCTL_SOCA0EN_(x)  (((x) << SOCAOCTL_SOCA0EN_Pos) & SOCAOCTL_SOCA0EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCAOCTL        SOCA1EN
  *  @access     PWMCFG->SOCAOCTL
  *  @brief      Enable PWM1SOCA output to the pin
  */
#define SOCAOCTL_SOCA1EN_Pos  (4)
#define SOCAOCTL_SOCA1EN_Msk  (0x1U << SOCAOCTL_SOCA1EN_Pos)

#define SOCAOCTL_SOCA1EN_DISABLE  ((0x0U) << SOCAOCTL_SOCA1EN_Pos)
#define SOCAOCTL_SOCA1EN_ENABLE   ((0x1U) << SOCAOCTL_SOCA1EN_Pos)

#define SOCAOCTL_SOCA1EN_(x)  (((x) << SOCAOCTL_SOCA1EN_Pos) & SOCAOCTL_SOCA1EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCAOCTL        SOCA2EN
  *  @access     PWMCFG->SOCAOCTL
  *  @brief      Enable PWM2SOCA output to the pin
  */
#define SOCAOCTL_SOCA2EN_Pos  (5)
#define SOCAOCTL_SOCA2EN_Msk  (0x1U << SOCAOCTL_SOCA2EN_Pos)

#define SOCAOCTL_SOCA2EN_DISABLE  ((0x0U) << SOCAOCTL_SOCA2EN_Pos)
#define SOCAOCTL_SOCA2EN_ENABLE   ((0x1U) << SOCAOCTL_SOCA2EN_Pos)

#define SOCAOCTL_SOCA2EN_(x)  (((x) << SOCAOCTL_SOCA2EN_Pos) & SOCAOCTL_SOCA2EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCBOCTL        DURATION
  *  @access     PWMCFG->SOCBOCTL
  *  @brief      Pulse duration of PWMSOCB output to the pin
  */
#define SOCBOCTL_DURATION_Pos  (0)
#define SOCBOCTL_DURATION_Msk  (0x3U << SOCBOCTL_DURATION_Pos)

#define SOCBOCTL_DURATION_4_PWM_CLK   ((0x00U) << SOCBOCTL_DURATION_Pos)
#define SOCBOCTL_DURATION_8_PWM_CLK   ((0x01U) << SOCBOCTL_DURATION_Pos)
#define SOCBOCTL_DURATION_16_PWM_CLK  ((0x02U) << SOCBOCTL_DURATION_Pos)
#define SOCBOCTL_DURATION_32_PWM_CLK  ((0x03U) << SOCBOCTL_DURATION_Pos)

#define SOCBOCTL_DURATION_(x)  (((x) << SOCBOCTL_DURATION_Pos) & SOCBOCTL_DURATION_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCBOCTL        POL
  *  @access     PWMCFG->SOCBOCTL
  *  @brief      Polarity of PWMSOCB output to the pin
  */
#define SOCBOCTL_POL_Pos  (2)
#define SOCBOCTL_POL_Msk  (0x1U << SOCBOCTL_POL_Pos)

#define SOCBOCTL_POL_ACTIVE_LOW   ((0x0U) << SOCBOCTL_POL_Pos)
#define SOCBOCTL_POL_ACTIVE_HIGH  ((0x1U) << SOCBOCTL_POL_Pos)

#define SOCBOCTL_POL_(x)  (((x) << SOCBOCTL_POL_Pos) & SOCBOCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCBOCTL        SOCB0EN
  *  @access     PWMCFG->SOCBOCTL
  *  @brief      Enable PWM0SOCB output to the pin
  */
#define SOCBOCTL_SOCB0EN_Pos  (3)
#define SOCBOCTL_SOCB0EN_Msk  (0x1U << SOCBOCTL_SOCB0EN_Pos)

#define SOCBOCTL_SOCB0EN_DISABLE  ((0x0U) << SOCBOCTL_SOCB0EN_Pos)
#define SOCBOCTL_SOCB0EN_ENABLE   ((0x1U) << SOCBOCTL_SOCB0EN_Pos)

#define SOCBOCTL_SOCB0EN_(x)  (((x) << SOCBOCTL_SOCB0EN_Pos) & SOCBOCTL_SOCB0EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCBOCTL        SOCB1EN
  *  @access     PWMCFG->SOCBOCTL
  *  @brief      Enable PWM1SOCB output to the pin
  */
#define SOCBOCTL_SOCB1EN_Pos  (4)
#define SOCBOCTL_SOCB1EN_Msk  (0x1U << SOCBOCTL_SOCB1EN_Pos)

#define SOCBOCTL_SOCB1EN_DISABLE  ((0x0U) << SOCBOCTL_SOCB1EN_Pos)
#define SOCBOCTL_SOCB1EN_ENABLE   ((0x1U) << SOCBOCTL_SOCB1EN_Pos)

#define SOCBOCTL_SOCB1EN_(x)  (((x) << SOCBOCTL_SOCB1EN_Pos) & SOCBOCTL_SOCB1EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCBOCTL        SOCB2EN
  *  @access     PWMCFG->SOCBOCTL
  *  @brief      Enable PWM2SOCB output to the pin
  */
#define SOCBOCTL_SOCB2EN_Pos  (5)
#define SOCBOCTL_SOCB2EN_Msk  (0x1U << SOCBOCTL_SOCB2EN_Pos)

#define SOCBOCTL_SOCB2EN_DISABLE  ((0x0U) << SOCBOCTL_SOCB2EN_Pos)
#define SOCBOCTL_SOCB2EN_ENABLE   ((0x1U) << SOCBOCTL_SOCB2EN_Pos)

#define SOCBOCTL_SOCB2EN_(x)  (((x) << SOCBOCTL_SOCB2EN_Pos) & SOCBOCTL_SOCB2EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCCOCTL        DURATION
  *  @access     PWMCFG->SOCCOCTL
  *  @brief      Pulse duration of PWMSOCC output to the pin
  */
#define SOCCOCTL_DURATION_Pos  (0)
#define SOCCOCTL_DURATION_Msk  (0x3U << SOCCOCTL_DURATION_Pos)

#define SOCCOCTL_DURATION_4_PWM_CLK   ((0x00U) << SOCCOCTL_DURATION_Pos)
#define SOCCOCTL_DURATION_8_PWM_CLK   ((0x01U) << SOCCOCTL_DURATION_Pos)
#define SOCCOCTL_DURATION_16_PWM_CLK  ((0x02U) << SOCCOCTL_DURATION_Pos)
#define SOCCOCTL_DURATION_32_PWM_CLK  ((0x03U) << SOCCOCTL_DURATION_Pos)

#define SOCCOCTL_DURATION_(x)  (((x) << SOCCOCTL_DURATION_Pos) & SOCCOCTL_DURATION_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCCOCTL        POL
  *  @access     PWMCFG->SOCCOCTL
  *  @brief      Polarity of PWMSOCC output to the pin
  */
#define SOCCOCTL_POL_Pos  (2)
#define SOCCOCTL_POL_Msk  (0x1U << SOCCOCTL_POL_Pos)

#define SOCCOCTL_POL_ACTIVE_LOW   ((0x0U) << SOCCOCTL_POL_Pos)
#define SOCCOCTL_POL_ACTIVE_HIGH  ((0x1U) << SOCCOCTL_POL_Pos)

#define SOCCOCTL_POL_(x)  (((x) << SOCCOCTL_POL_Pos) & SOCCOCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCCOCTL        SOCC0EN
  *  @access     PWMCFG->SOCCOCTL
  *  @brief      Enable PWM0SOCC output to the pin
  */
#define SOCCOCTL_SOCC0EN_Pos  (3)
#define SOCCOCTL_SOCC0EN_Msk  (0x1U << SOCCOCTL_SOCC0EN_Pos)

#define SOCCOCTL_SOCC0EN_DISABLE  ((0x0U) << SOCCOCTL_SOCC0EN_Pos)
#define SOCCOCTL_SOCC0EN_ENABLE   ((0x1U) << SOCCOCTL_SOCC0EN_Pos)

#define SOCCOCTL_SOCC0EN_(x)  (((x) << SOCCOCTL_SOCC0EN_Pos) & SOCCOCTL_SOCC0EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCCOCTL        SOCC1EN
  *  @access     PWMCFG->SOCCOCTL
  *  @brief      Enable PWM1SOCC output to the pin
  */
#define SOCCOCTL_SOCC1EN_Pos  (4)
#define SOCCOCTL_SOCC1EN_Msk  (0x1U << SOCCOCTL_SOCC1EN_Pos)

#define SOCCOCTL_SOCC1EN_DISABLE  ((0x0U) << SOCCOCTL_SOCC1EN_Pos)
#define SOCCOCTL_SOCC1EN_ENABLE   ((0x1U) << SOCCOCTL_SOCC1EN_Pos)

#define SOCCOCTL_SOCC1EN_(x)  (((x) << SOCCOCTL_SOCC1EN_Pos) & SOCCOCTL_SOCC1EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          SOCCOCTL        SOCC2EN
  *  @access     PWMCFG->SOCCOCTL
  *  @brief      Enable PWM2SOCC output to the pin
  */
#define SOCCOCTL_SOCC2EN_Pos  (5)
#define SOCCOCTL_SOCC2EN_Msk  (0x1U << SOCCOCTL_SOCC2EN_Pos)

#define SOCCOCTL_SOCC2EN_DISABLE  ((0x0U) << SOCCOCTL_SOCC2EN_Pos)
#define SOCCOCTL_SOCC2EN_ENABLE   ((0x1U) << SOCCOCTL_SOCC2EN_Pos)

#define SOCCOCTL_SOCC2EN_(x)  (((x) << SOCCOCTL_SOCC2EN_Pos) & SOCCOCTL_SOCC2EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PWMCFG          PWMCFGREGKEY    KEY
  *  @access     PWMCFG->PWMCFGREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected PWMCFG registers
  */
#define PWMCFGREGKEY_KEY_Pos  (0)
#define PWMCFGREGKEY_KEY_Msk  (0xFFFFFFFFU << PWMCFGREGKEY_KEY_Pos)

#define PWMCFGREGKEY_KEY_(x)  (((x) << PWMCFGREGKEY_KEY_Pos) & PWMCFGREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      ADC:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH0
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 0 interrupt flag
  */
#define ADCIF_CH0_Pos  (0)
#define ADCIF_CH0_Msk  (0x1U << ADCIF_CH0_Pos)

#define ADCIF_CH0_NOT_OCCUR  ((0x0U) << ADCIF_CH0_Pos)
#define ADCIF_CH0_OCCUR      ((0x1U) << ADCIF_CH0_Pos)

#define ADCIF_CH0_(x)  (((x) << ADCIF_CH0_Pos) & ADCIF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH1
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 1 interrupt flag
  */
#define ADCIF_CH1_Pos  (1)
#define ADCIF_CH1_Msk  (0x1U << ADCIF_CH1_Pos)

#define ADCIF_CH1_NOT_OCCUR  ((0x0U) << ADCIF_CH1_Pos)
#define ADCIF_CH1_OCCUR      ((0x1U) << ADCIF_CH1_Pos)

#define ADCIF_CH1_(x)  (((x) << ADCIF_CH1_Pos) & ADCIF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH2
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 2 interrupt flag
  */
#define ADCIF_CH2_Pos  (2)
#define ADCIF_CH2_Msk  (0x1U << ADCIF_CH2_Pos)

#define ADCIF_CH2_NOT_OCCUR  ((0x0U) << ADCIF_CH2_Pos)
#define ADCIF_CH2_OCCUR      ((0x1U) << ADCIF_CH2_Pos)

#define ADCIF_CH2_(x)  (((x) << ADCIF_CH2_Pos) & ADCIF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH3
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 3 interrupt flag
  */
#define ADCIF_CH3_Pos  (3)
#define ADCIF_CH3_Msk  (0x1U << ADCIF_CH3_Pos)

#define ADCIF_CH3_NOT_OCCUR  ((0x0U) << ADCIF_CH3_Pos)
#define ADCIF_CH3_OCCUR      ((0x1U) << ADCIF_CH3_Pos)

#define ADCIF_CH3_(x)  (((x) << ADCIF_CH3_Pos) & ADCIF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH4
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 4 interrupt flag
  */
#define ADCIF_CH4_Pos  (4)
#define ADCIF_CH4_Msk  (0x1U << ADCIF_CH4_Pos)

#define ADCIF_CH4_NOT_OCCUR  ((0x0U) << ADCIF_CH4_Pos)
#define ADCIF_CH4_OCCUR      ((0x1U) << ADCIF_CH4_Pos)

#define ADCIF_CH4_(x)  (((x) << ADCIF_CH4_Pos) & ADCIF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH5
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 5 interrupt flag
  */
#define ADCIF_CH5_Pos  (5)
#define ADCIF_CH5_Msk  (0x1U << ADCIF_CH5_Pos)

#define ADCIF_CH5_NOT_OCCUR  ((0x0U) << ADCIF_CH5_Pos)
#define ADCIF_CH5_OCCUR      ((0x1U) << ADCIF_CH5_Pos)

#define ADCIF_CH5_(x)  (((x) << ADCIF_CH5_Pos) & ADCIF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH6
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 6 interrupt flag
  */
#define ADCIF_CH6_Pos  (6)
#define ADCIF_CH6_Msk  (0x1U << ADCIF_CH6_Pos)

#define ADCIF_CH6_NOT_OCCUR  ((0x0U) << ADCIF_CH6_Pos)
#define ADCIF_CH6_OCCUR      ((0x1U) << ADCIF_CH6_Pos)

#define ADCIF_CH6_(x)  (((x) << ADCIF_CH6_Pos) & ADCIF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH7
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 7 interrupt flag
  */
#define ADCIF_CH7_Pos  (7)
#define ADCIF_CH7_Msk  (0x1U << ADCIF_CH7_Pos)

#define ADCIF_CH7_NOT_OCCUR  ((0x0U) << ADCIF_CH7_Pos)
#define ADCIF_CH7_OCCUR      ((0x1U) << ADCIF_CH7_Pos)

#define ADCIF_CH7_(x)  (((x) << ADCIF_CH7_Pos) & ADCIF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH8
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 8 interrupt flag
  */
#define ADCIF_CH8_Pos  (8)
#define ADCIF_CH8_Msk  (0x1U << ADCIF_CH8_Pos)

#define ADCIF_CH8_NOT_OCCUR  ((0x0U) << ADCIF_CH8_Pos)
#define ADCIF_CH8_OCCUR      ((0x1U) << ADCIF_CH8_Pos)

#define ADCIF_CH8_(x)  (((x) << ADCIF_CH8_Pos) & ADCIF_CH8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH9
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 9 interrupt flag
  */
#define ADCIF_CH9_Pos  (9)
#define ADCIF_CH9_Msk  (0x1U << ADCIF_CH9_Pos)

#define ADCIF_CH9_NOT_OCCUR  ((0x0U) << ADCIF_CH9_Pos)
#define ADCIF_CH9_OCCUR      ((0x1U) << ADCIF_CH9_Pos)

#define ADCIF_CH9_(x)  (((x) << ADCIF_CH9_Pos) & ADCIF_CH9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH10
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 10 interrupt flag
  */
#define ADCIF_CH10_Pos  (10)
#define ADCIF_CH10_Msk  (0x1U << ADCIF_CH10_Pos)

#define ADCIF_CH10_NOT_OCCUR  ((0x0U) << ADCIF_CH10_Pos)
#define ADCIF_CH10_OCCUR      ((0x1U) << ADCIF_CH10_Pos)

#define ADCIF_CH10_(x)  (((x) << ADCIF_CH10_Pos) & ADCIF_CH10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH11
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 11 interrupt flag
  */
#define ADCIF_CH11_Pos  (11)
#define ADCIF_CH11_Msk  (0x1U << ADCIF_CH11_Pos)

#define ADCIF_CH11_NOT_OCCUR  ((0x0U) << ADCIF_CH11_Pos)
#define ADCIF_CH11_OCCUR      ((0x1U) << ADCIF_CH11_Pos)

#define ADCIF_CH11_(x)  (((x) << ADCIF_CH11_Pos) & ADCIF_CH11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH12
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 12 interrupt flag
  */
#define ADCIF_CH12_Pos  (12)
#define ADCIF_CH12_Msk  (0x1U << ADCIF_CH12_Pos)

#define ADCIF_CH12_NOT_OCCUR  ((0x0U) << ADCIF_CH12_Pos)
#define ADCIF_CH12_OCCUR      ((0x1U) << ADCIF_CH12_Pos)

#define ADCIF_CH12_(x)  (((x) << ADCIF_CH12_Pos) & ADCIF_CH12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH13
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 13 interrupt flag
  */
#define ADCIF_CH13_Pos  (13)
#define ADCIF_CH13_Msk  (0x1U << ADCIF_CH13_Pos)

#define ADCIF_CH13_NOT_OCCUR  ((0x0U) << ADCIF_CH13_Pos)
#define ADCIF_CH13_OCCUR      ((0x1U) << ADCIF_CH13_Pos)

#define ADCIF_CH13_(x)  (((x) << ADCIF_CH13_Pos) & ADCIF_CH13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH14
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 14 interrupt flag
  */
#define ADCIF_CH14_Pos  (14)
#define ADCIF_CH14_Msk  (0x1U << ADCIF_CH14_Pos)

#define ADCIF_CH14_NOT_OCCUR  ((0x0U) << ADCIF_CH14_Pos)
#define ADCIF_CH14_OCCUR      ((0x1U) << ADCIF_CH14_Pos)

#define ADCIF_CH14_(x)  (((x) << ADCIF_CH14_Pos) & ADCIF_CH14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIF           CH15
  *  @access     ADC->ADCIF
  *  @brief      ADC channel 15 interrupt flag
  */
#define ADCIF_CH15_Pos  (15)
#define ADCIF_CH15_Msk  (0x1U << ADCIF_CH15_Pos)

#define ADCIF_CH15_NOT_OCCUR  ((0x0U) << ADCIF_CH15_Pos)
#define ADCIF_CH15_OCCUR      ((0x1U) << ADCIF_CH15_Pos)

#define ADCIF_CH15_(x)  (((x) << ADCIF_CH15_Pos) & ADCIF_CH15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH0
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 0 interrupt flag clear
  */
#define ADCIC_CH0_Pos  (0)
#define ADCIC_CH0_Msk  (0x1U << ADCIC_CH0_Pos)

#define ADCIC_CH0_NO_EFFECT  ((0x0U) << ADCIC_CH0_Pos)
#define ADCIC_CH0_CLEAR      ((0x1U) << ADCIC_CH0_Pos)

#define ADCIC_CH0_(x)  (((x) << ADCIC_CH0_Pos) & ADCIC_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH1
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 1 interrupt flag clear
  */
#define ADCIC_CH1_Pos  (1)
#define ADCIC_CH1_Msk  (0x1U << ADCIC_CH1_Pos)

#define ADCIC_CH1_NO_EFFECT  ((0x0U) << ADCIC_CH1_Pos)
#define ADCIC_CH1_CLEAR      ((0x1U) << ADCIC_CH1_Pos)

#define ADCIC_CH1_(x)  (((x) << ADCIC_CH1_Pos) & ADCIC_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH2
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 2 interrupt flag clear
  */
#define ADCIC_CH2_Pos  (2)
#define ADCIC_CH2_Msk  (0x1U << ADCIC_CH2_Pos)

#define ADCIC_CH2_NO_EFFECT  ((0x0U) << ADCIC_CH2_Pos)
#define ADCIC_CH2_CLEAR      ((0x1U) << ADCIC_CH2_Pos)

#define ADCIC_CH2_(x)  (((x) << ADCIC_CH2_Pos) & ADCIC_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH3
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 3 interrupt flag clear
  */
#define ADCIC_CH3_Pos  (3)
#define ADCIC_CH3_Msk  (0x1U << ADCIC_CH3_Pos)

#define ADCIC_CH3_NO_EFFECT  ((0x0U) << ADCIC_CH3_Pos)
#define ADCIC_CH3_CLEAR      ((0x1U) << ADCIC_CH3_Pos)

#define ADCIC_CH3_(x)  (((x) << ADCIC_CH3_Pos) & ADCIC_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH4
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 4 interrupt flag clear
  */
#define ADCIC_CH4_Pos  (4)
#define ADCIC_CH4_Msk  (0x1U << ADCIC_CH4_Pos)

#define ADCIC_CH4_NO_EFFECT  ((0x0U) << ADCIC_CH4_Pos)
#define ADCIC_CH4_CLEAR      ((0x1U) << ADCIC_CH4_Pos)

#define ADCIC_CH4_(x)  (((x) << ADCIC_CH4_Pos) & ADCIC_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH5
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 5 interrupt flag clear
  */
#define ADCIC_CH5_Pos  (5)
#define ADCIC_CH5_Msk  (0x1U << ADCIC_CH5_Pos)

#define ADCIC_CH5_NO_EFFECT  ((0x0U) << ADCIC_CH5_Pos)
#define ADCIC_CH5_CLEAR      ((0x1U) << ADCIC_CH5_Pos)

#define ADCIC_CH5_(x)  (((x) << ADCIC_CH5_Pos) & ADCIC_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH6
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 6 interrupt flag clear
  */
#define ADCIC_CH6_Pos  (6)
#define ADCIC_CH6_Msk  (0x1U << ADCIC_CH6_Pos)

#define ADCIC_CH6_NO_EFFECT  ((0x0U) << ADCIC_CH6_Pos)
#define ADCIC_CH6_CLEAR      ((0x1U) << ADCIC_CH6_Pos)

#define ADCIC_CH6_(x)  (((x) << ADCIC_CH6_Pos) & ADCIC_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH7
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 7 interrupt flag clear
  */
#define ADCIC_CH7_Pos  (7)
#define ADCIC_CH7_Msk  (0x1U << ADCIC_CH7_Pos)

#define ADCIC_CH7_NO_EFFECT  ((0x0U) << ADCIC_CH7_Pos)
#define ADCIC_CH7_CLEAR      ((0x1U) << ADCIC_CH7_Pos)

#define ADCIC_CH7_(x)  (((x) << ADCIC_CH7_Pos) & ADCIC_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH8
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 8 interrupt flag clear
  */
#define ADCIC_CH8_Pos  (8)
#define ADCIC_CH8_Msk  (0x1U << ADCIC_CH8_Pos)

#define ADCIC_CH8_NO_EFFECT  ((0x0U) << ADCIC_CH8_Pos)
#define ADCIC_CH8_CLEAR      ((0x1U) << ADCIC_CH8_Pos)

#define ADCIC_CH8_(x)  (((x) << ADCIC_CH8_Pos) & ADCIC_CH8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH9
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 9 interrupt flag clear
  */
#define ADCIC_CH9_Pos  (9)
#define ADCIC_CH9_Msk  (0x1U << ADCIC_CH9_Pos)

#define ADCIC_CH9_NO_EFFECT  ((0x0U) << ADCIC_CH9_Pos)
#define ADCIC_CH9_CLEAR      ((0x1U) << ADCIC_CH9_Pos)

#define ADCIC_CH9_(x)  (((x) << ADCIC_CH9_Pos) & ADCIC_CH9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH10
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 10 interrupt flag clear
  */
#define ADCIC_CH10_Pos  (10)
#define ADCIC_CH10_Msk  (0x1U << ADCIC_CH10_Pos)

#define ADCIC_CH10_NO_EFFECT  ((0x0U) << ADCIC_CH10_Pos)
#define ADCIC_CH10_CLEAR      ((0x1U) << ADCIC_CH10_Pos)

#define ADCIC_CH10_(x)  (((x) << ADCIC_CH10_Pos) & ADCIC_CH10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH11
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 11 interrupt flag clear
  */
#define ADCIC_CH11_Pos  (11)
#define ADCIC_CH11_Msk  (0x1U << ADCIC_CH11_Pos)

#define ADCIC_CH11_NO_EFFECT  ((0x0U) << ADCIC_CH11_Pos)
#define ADCIC_CH11_CLEAR      ((0x1U) << ADCIC_CH11_Pos)

#define ADCIC_CH11_(x)  (((x) << ADCIC_CH11_Pos) & ADCIC_CH11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH12
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 12 interrupt flag clear
  */
#define ADCIC_CH12_Pos  (12)
#define ADCIC_CH12_Msk  (0x1U << ADCIC_CH12_Pos)

#define ADCIC_CH12_NO_EFFECT  ((0x0U) << ADCIC_CH12_Pos)
#define ADCIC_CH12_CLEAR      ((0x1U) << ADCIC_CH12_Pos)

#define ADCIC_CH12_(x)  (((x) << ADCIC_CH12_Pos) & ADCIC_CH12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH13
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 13 interrupt flag clear
  */
#define ADCIC_CH13_Pos  (13)
#define ADCIC_CH13_Msk  (0x1U << ADCIC_CH13_Pos)

#define ADCIC_CH13_NO_EFFECT  ((0x0U) << ADCIC_CH13_Pos)
#define ADCIC_CH13_CLEAR      ((0x1U) << ADCIC_CH13_Pos)

#define ADCIC_CH13_(x)  (((x) << ADCIC_CH13_Pos) & ADCIC_CH13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH14
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 14 interrupt flag clear
  */
#define ADCIC_CH14_Pos  (14)
#define ADCIC_CH14_Msk  (0x1U << ADCIC_CH14_Pos)

#define ADCIC_CH14_NO_EFFECT  ((0x0U) << ADCIC_CH14_Pos)
#define ADCIC_CH14_CLEAR      ((0x1U) << ADCIC_CH14_Pos)

#define ADCIC_CH14_(x)  (((x) << ADCIC_CH14_Pos) & ADCIC_CH14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIC           CH15
  *  @access     ADC->ADCIC
  *  @brief      ADC channel 15 interrupt flag clear
  */
#define ADCIC_CH15_Pos  (15)
#define ADCIC_CH15_Msk  (0x1U << ADCIC_CH15_Pos)

#define ADCIC_CH15_NO_EFFECT  ((0x0U) << ADCIC_CH15_Pos)
#define ADCIC_CH15_CLEAR      ((0x1U) << ADCIC_CH15_Pos)

#define ADCIC_CH15_(x)  (((x) << ADCIC_CH15_Pos) & ADCIC_CH15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH0
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 0 interrupt overflow flag
  */
#define ADCIOVF_CH0_Pos  (0)
#define ADCIOVF_CH0_Msk  (0x1U << ADCIOVF_CH0_Pos)

#define ADCIOVF_CH0_NOT_OCCUR  ((0x0U) << ADCIOVF_CH0_Pos)
#define ADCIOVF_CH0_OCCUR      ((0x1U) << ADCIOVF_CH0_Pos)

#define ADCIOVF_CH0_(x)  (((x) << ADCIOVF_CH0_Pos) & ADCIOVF_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH1
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 1 interrupt overflow flag
  */
#define ADCIOVF_CH1_Pos  (1)
#define ADCIOVF_CH1_Msk  (0x1U << ADCIOVF_CH1_Pos)

#define ADCIOVF_CH1_NOT_OCCUR  ((0x0U) << ADCIOVF_CH1_Pos)
#define ADCIOVF_CH1_OCCUR      ((0x1U) << ADCIOVF_CH1_Pos)

#define ADCIOVF_CH1_(x)  (((x) << ADCIOVF_CH1_Pos) & ADCIOVF_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH2
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 2 interrupt overflow flag
  */
#define ADCIOVF_CH2_Pos  (2)
#define ADCIOVF_CH2_Msk  (0x1U << ADCIOVF_CH2_Pos)

#define ADCIOVF_CH2_NOT_OCCUR  ((0x0U) << ADCIOVF_CH2_Pos)
#define ADCIOVF_CH2_OCCUR      ((0x1U) << ADCIOVF_CH2_Pos)

#define ADCIOVF_CH2_(x)  (((x) << ADCIOVF_CH2_Pos) & ADCIOVF_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH3
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 3 interrupt overflow flag
  */
#define ADCIOVF_CH3_Pos  (3)
#define ADCIOVF_CH3_Msk  (0x1U << ADCIOVF_CH3_Pos)

#define ADCIOVF_CH3_NOT_OCCUR  ((0x0U) << ADCIOVF_CH3_Pos)
#define ADCIOVF_CH3_OCCUR      ((0x1U) << ADCIOVF_CH3_Pos)

#define ADCIOVF_CH3_(x)  (((x) << ADCIOVF_CH3_Pos) & ADCIOVF_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH4
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 4 interrupt overflow flag
  */
#define ADCIOVF_CH4_Pos  (4)
#define ADCIOVF_CH4_Msk  (0x1U << ADCIOVF_CH4_Pos)

#define ADCIOVF_CH4_NOT_OCCUR  ((0x0U) << ADCIOVF_CH4_Pos)
#define ADCIOVF_CH4_OCCUR      ((0x1U) << ADCIOVF_CH4_Pos)

#define ADCIOVF_CH4_(x)  (((x) << ADCIOVF_CH4_Pos) & ADCIOVF_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH5
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 5 interrupt overflow flag
  */
#define ADCIOVF_CH5_Pos  (5)
#define ADCIOVF_CH5_Msk  (0x1U << ADCIOVF_CH5_Pos)

#define ADCIOVF_CH5_NOT_OCCUR  ((0x0U) << ADCIOVF_CH5_Pos)
#define ADCIOVF_CH5_OCCUR      ((0x1U) << ADCIOVF_CH5_Pos)

#define ADCIOVF_CH5_(x)  (((x) << ADCIOVF_CH5_Pos) & ADCIOVF_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH6
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 6 interrupt overflow flag
  */
#define ADCIOVF_CH6_Pos  (6)
#define ADCIOVF_CH6_Msk  (0x1U << ADCIOVF_CH6_Pos)

#define ADCIOVF_CH6_NOT_OCCUR  ((0x0U) << ADCIOVF_CH6_Pos)
#define ADCIOVF_CH6_OCCUR      ((0x1U) << ADCIOVF_CH6_Pos)

#define ADCIOVF_CH6_(x)  (((x) << ADCIOVF_CH6_Pos) & ADCIOVF_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH7
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 7 interrupt overflow flag
  */
#define ADCIOVF_CH7_Pos  (7)
#define ADCIOVF_CH7_Msk  (0x1U << ADCIOVF_CH7_Pos)

#define ADCIOVF_CH7_NOT_OCCUR  ((0x0U) << ADCIOVF_CH7_Pos)
#define ADCIOVF_CH7_OCCUR      ((0x1U) << ADCIOVF_CH7_Pos)

#define ADCIOVF_CH7_(x)  (((x) << ADCIOVF_CH7_Pos) & ADCIOVF_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH8
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 8 interrupt overflow flag
  */
#define ADCIOVF_CH8_Pos  (8)
#define ADCIOVF_CH8_Msk  (0x1U << ADCIOVF_CH8_Pos)

#define ADCIOVF_CH8_NOT_OCCUR  ((0x0U) << ADCIOVF_CH8_Pos)
#define ADCIOVF_CH8_OCCUR      ((0x1U) << ADCIOVF_CH8_Pos)

#define ADCIOVF_CH8_(x)  (((x) << ADCIOVF_CH8_Pos) & ADCIOVF_CH8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH9
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 9 interrupt overflow flag
  */
#define ADCIOVF_CH9_Pos  (9)
#define ADCIOVF_CH9_Msk  (0x1U << ADCIOVF_CH9_Pos)

#define ADCIOVF_CH9_NOT_OCCUR  ((0x0U) << ADCIOVF_CH9_Pos)
#define ADCIOVF_CH9_OCCUR      ((0x1U) << ADCIOVF_CH9_Pos)

#define ADCIOVF_CH9_(x)  (((x) << ADCIOVF_CH9_Pos) & ADCIOVF_CH9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH10
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 10 interrupt overflow flag
  */
#define ADCIOVF_CH10_Pos  (10)
#define ADCIOVF_CH10_Msk  (0x1U << ADCIOVF_CH10_Pos)

#define ADCIOVF_CH10_NOT_OCCUR  ((0x0U) << ADCIOVF_CH10_Pos)
#define ADCIOVF_CH10_OCCUR      ((0x1U) << ADCIOVF_CH10_Pos)

#define ADCIOVF_CH10_(x)  (((x) << ADCIOVF_CH10_Pos) & ADCIOVF_CH10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH11
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 11 interrupt overflow flag
  */
#define ADCIOVF_CH11_Pos  (11)
#define ADCIOVF_CH11_Msk  (0x1U << ADCIOVF_CH11_Pos)

#define ADCIOVF_CH11_NOT_OCCUR  ((0x0U) << ADCIOVF_CH11_Pos)
#define ADCIOVF_CH11_OCCUR      ((0x1U) << ADCIOVF_CH11_Pos)

#define ADCIOVF_CH11_(x)  (((x) << ADCIOVF_CH11_Pos) & ADCIOVF_CH11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH12
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 12 interrupt overflow flag
  */
#define ADCIOVF_CH12_Pos  (12)
#define ADCIOVF_CH12_Msk  (0x1U << ADCIOVF_CH12_Pos)

#define ADCIOVF_CH12_NOT_OCCUR  ((0x0U) << ADCIOVF_CH12_Pos)
#define ADCIOVF_CH12_OCCUR      ((0x1U) << ADCIOVF_CH12_Pos)

#define ADCIOVF_CH12_(x)  (((x) << ADCIOVF_CH12_Pos) & ADCIOVF_CH12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH13
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 13 interrupt overflow flag
  */
#define ADCIOVF_CH13_Pos  (13)
#define ADCIOVF_CH13_Msk  (0x1U << ADCIOVF_CH13_Pos)

#define ADCIOVF_CH13_NOT_OCCUR  ((0x0U) << ADCIOVF_CH13_Pos)
#define ADCIOVF_CH13_OCCUR      ((0x1U) << ADCIOVF_CH13_Pos)

#define ADCIOVF_CH13_(x)  (((x) << ADCIOVF_CH13_Pos) & ADCIOVF_CH13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH14
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 14 interrupt overflow flag
  */
#define ADCIOVF_CH14_Pos  (14)
#define ADCIOVF_CH14_Msk  (0x1U << ADCIOVF_CH14_Pos)

#define ADCIOVF_CH14_NOT_OCCUR  ((0x0U) << ADCIOVF_CH14_Pos)
#define ADCIOVF_CH14_OCCUR      ((0x1U) << ADCIOVF_CH14_Pos)

#define ADCIOVF_CH14_(x)  (((x) << ADCIOVF_CH14_Pos) & ADCIOVF_CH14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVF         CH15
  *  @access     ADC->ADCIOVF
  *  @brief      ADC channel 15 interrupt overflow flag
  */
#define ADCIOVF_CH15_Pos  (15)
#define ADCIOVF_CH15_Msk  (0x1U << ADCIOVF_CH15_Pos)

#define ADCIOVF_CH15_NOT_OCCUR  ((0x0U) << ADCIOVF_CH15_Pos)
#define ADCIOVF_CH15_OCCUR      ((0x1U) << ADCIOVF_CH15_Pos)

#define ADCIOVF_CH15_(x)  (((x) << ADCIOVF_CH15_Pos) & ADCIOVF_CH15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH0
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 0 interrupt overflow flag clear
  */
#define ADCIOVFC_CH0_Pos  (0)
#define ADCIOVFC_CH0_Msk  (0x1U << ADCIOVFC_CH0_Pos)

#define ADCIOVFC_CH0_NO_EFFECT  ((0x0U) << ADCIOVFC_CH0_Pos)
#define ADCIOVFC_CH0_CLEAR      ((0x1U) << ADCIOVFC_CH0_Pos)

#define ADCIOVFC_CH0_(x)  (((x) << ADCIOVFC_CH0_Pos) & ADCIOVFC_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH1
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 1 interrupt overflow flag clear
  */
#define ADCIOVFC_CH1_Pos  (1)
#define ADCIOVFC_CH1_Msk  (0x1U << ADCIOVFC_CH1_Pos)

#define ADCIOVFC_CH1_NO_EFFECT  ((0x0U) << ADCIOVFC_CH1_Pos)
#define ADCIOVFC_CH1_CLEAR      ((0x1U) << ADCIOVFC_CH1_Pos)

#define ADCIOVFC_CH1_(x)  (((x) << ADCIOVFC_CH1_Pos) & ADCIOVFC_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH2
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 2 interrupt overflow flag clear
  */
#define ADCIOVFC_CH2_Pos  (2)
#define ADCIOVFC_CH2_Msk  (0x1U << ADCIOVFC_CH2_Pos)

#define ADCIOVFC_CH2_NO_EFFECT  ((0x0U) << ADCIOVFC_CH2_Pos)
#define ADCIOVFC_CH2_CLEAR      ((0x1U) << ADCIOVFC_CH2_Pos)

#define ADCIOVFC_CH2_(x)  (((x) << ADCIOVFC_CH2_Pos) & ADCIOVFC_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH3
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 3 interrupt overflow flag clear
  */
#define ADCIOVFC_CH3_Pos  (3)
#define ADCIOVFC_CH3_Msk  (0x1U << ADCIOVFC_CH3_Pos)

#define ADCIOVFC_CH3_NO_EFFECT  ((0x0U) << ADCIOVFC_CH3_Pos)
#define ADCIOVFC_CH3_CLEAR      ((0x1U) << ADCIOVFC_CH3_Pos)

#define ADCIOVFC_CH3_(x)  (((x) << ADCIOVFC_CH3_Pos) & ADCIOVFC_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH4
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 4 interrupt overflow flag clear
  */
#define ADCIOVFC_CH4_Pos  (4)
#define ADCIOVFC_CH4_Msk  (0x1U << ADCIOVFC_CH4_Pos)

#define ADCIOVFC_CH4_NO_EFFECT  ((0x0U) << ADCIOVFC_CH4_Pos)
#define ADCIOVFC_CH4_CLEAR      ((0x1U) << ADCIOVFC_CH4_Pos)

#define ADCIOVFC_CH4_(x)  (((x) << ADCIOVFC_CH4_Pos) & ADCIOVFC_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH5
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 5 interrupt overflow flag clear
  */
#define ADCIOVFC_CH5_Pos  (5)
#define ADCIOVFC_CH5_Msk  (0x1U << ADCIOVFC_CH5_Pos)

#define ADCIOVFC_CH5_NO_EFFECT  ((0x0U) << ADCIOVFC_CH5_Pos)
#define ADCIOVFC_CH5_CLEAR      ((0x1U) << ADCIOVFC_CH5_Pos)

#define ADCIOVFC_CH5_(x)  (((x) << ADCIOVFC_CH5_Pos) & ADCIOVFC_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH6
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 6 interrupt overflow flag clear
  */
#define ADCIOVFC_CH6_Pos  (6)
#define ADCIOVFC_CH6_Msk  (0x1U << ADCIOVFC_CH6_Pos)

#define ADCIOVFC_CH6_NO_EFFECT  ((0x0U) << ADCIOVFC_CH6_Pos)
#define ADCIOVFC_CH6_CLEAR      ((0x1U) << ADCIOVFC_CH6_Pos)

#define ADCIOVFC_CH6_(x)  (((x) << ADCIOVFC_CH6_Pos) & ADCIOVFC_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH7
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 7 interrupt overflow flag clear
  */
#define ADCIOVFC_CH7_Pos  (7)
#define ADCIOVFC_CH7_Msk  (0x1U << ADCIOVFC_CH7_Pos)

#define ADCIOVFC_CH7_NO_EFFECT  ((0x0U) << ADCIOVFC_CH7_Pos)
#define ADCIOVFC_CH7_CLEAR      ((0x1U) << ADCIOVFC_CH7_Pos)

#define ADCIOVFC_CH7_(x)  (((x) << ADCIOVFC_CH7_Pos) & ADCIOVFC_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH8
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 8 interrupt overflow flag clear
  */
#define ADCIOVFC_CH8_Pos  (8)
#define ADCIOVFC_CH8_Msk  (0x1U << ADCIOVFC_CH8_Pos)

#define ADCIOVFC_CH8_NO_EFFECT  ((0x0U) << ADCIOVFC_CH8_Pos)
#define ADCIOVFC_CH8_CLEAR      ((0x1U) << ADCIOVFC_CH8_Pos)

#define ADCIOVFC_CH8_(x)  (((x) << ADCIOVFC_CH8_Pos) & ADCIOVFC_CH8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH9
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 9 interrupt overflow flag clear
  */
#define ADCIOVFC_CH9_Pos  (9)
#define ADCIOVFC_CH9_Msk  (0x1U << ADCIOVFC_CH9_Pos)

#define ADCIOVFC_CH9_NO_EFFECT  ((0x0U) << ADCIOVFC_CH9_Pos)
#define ADCIOVFC_CH9_CLEAR      ((0x1U) << ADCIOVFC_CH9_Pos)

#define ADCIOVFC_CH9_(x)  (((x) << ADCIOVFC_CH9_Pos) & ADCIOVFC_CH9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH10
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 10 interrupt overflow flag clear
  */
#define ADCIOVFC_CH10_Pos  (10)
#define ADCIOVFC_CH10_Msk  (0x1U << ADCIOVFC_CH10_Pos)

#define ADCIOVFC_CH10_NO_EFFECT  ((0x0U) << ADCIOVFC_CH10_Pos)
#define ADCIOVFC_CH10_CLEAR      ((0x1U) << ADCIOVFC_CH10_Pos)

#define ADCIOVFC_CH10_(x)  (((x) << ADCIOVFC_CH10_Pos) & ADCIOVFC_CH10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH11
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 11 interrupt overflow flag clear
  */
#define ADCIOVFC_CH11_Pos  (11)
#define ADCIOVFC_CH11_Msk  (0x1U << ADCIOVFC_CH11_Pos)

#define ADCIOVFC_CH11_NO_EFFECT  ((0x0U) << ADCIOVFC_CH11_Pos)
#define ADCIOVFC_CH11_CLEAR      ((0x1U) << ADCIOVFC_CH11_Pos)

#define ADCIOVFC_CH11_(x)  (((x) << ADCIOVFC_CH11_Pos) & ADCIOVFC_CH11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH12
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 12 interrupt overflow flag clear
  */
#define ADCIOVFC_CH12_Pos  (12)
#define ADCIOVFC_CH12_Msk  (0x1U << ADCIOVFC_CH12_Pos)

#define ADCIOVFC_CH12_NO_EFFECT  ((0x0U) << ADCIOVFC_CH12_Pos)
#define ADCIOVFC_CH12_CLEAR      ((0x1U) << ADCIOVFC_CH12_Pos)

#define ADCIOVFC_CH12_(x)  (((x) << ADCIOVFC_CH12_Pos) & ADCIOVFC_CH12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH13
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 13 interrupt overflow flag clear
  */
#define ADCIOVFC_CH13_Pos  (13)
#define ADCIOVFC_CH13_Msk  (0x1U << ADCIOVFC_CH13_Pos)

#define ADCIOVFC_CH13_NO_EFFECT  ((0x0U) << ADCIOVFC_CH13_Pos)
#define ADCIOVFC_CH13_CLEAR      ((0x1U) << ADCIOVFC_CH13_Pos)

#define ADCIOVFC_CH13_(x)  (((x) << ADCIOVFC_CH13_Pos) & ADCIOVFC_CH13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH14
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 14 interrupt overflow flag clear
  */
#define ADCIOVFC_CH14_Pos  (14)
#define ADCIOVFC_CH14_Msk  (0x1U << ADCIOVFC_CH14_Pos)

#define ADCIOVFC_CH14_NO_EFFECT  ((0x0U) << ADCIOVFC_CH14_Pos)
#define ADCIOVFC_CH14_CLEAR      ((0x1U) << ADCIOVFC_CH14_Pos)

#define ADCIOVFC_CH14_(x)  (((x) << ADCIOVFC_CH14_Pos) & ADCIOVFC_CH14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIOVFC        CH15
  *  @access     ADC->ADCIOVFC
  *  @brief      ADC channel 15 interrupt overflow flag clear
  */
#define ADCIOVFC_CH15_Pos  (15)
#define ADCIOVFC_CH15_Msk  (0x1U << ADCIOVFC_CH15_Pos)

#define ADCIOVFC_CH15_NO_EFFECT  ((0x0U) << ADCIOVFC_CH15_Pos)
#define ADCIOVFC_CH15_CLEAR      ((0x1U) << ADCIOVFC_CH15_Pos)

#define ADCIOVFC_CH15_(x)  (((x) << ADCIOVFC_CH15_Pos) & ADCIOVFC_CH15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH0
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 0 interrupt enable
  */
#define ADCIE_CH0_Pos  (0)
#define ADCIE_CH0_Msk  (0x1U << ADCIE_CH0_Pos)

#define ADCIE_CH0_DISABLE  ((0x0U) << ADCIE_CH0_Pos)
#define ADCIE_CH0_ENABLE   ((0x1U) << ADCIE_CH0_Pos)

#define ADCIE_CH0_(x)  (((x) << ADCIE_CH0_Pos) & ADCIE_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH1
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 1 interrupt enable
  */
#define ADCIE_CH1_Pos  (1)
#define ADCIE_CH1_Msk  (0x1U << ADCIE_CH1_Pos)

#define ADCIE_CH1_DISABLE  ((0x0U) << ADCIE_CH1_Pos)
#define ADCIE_CH1_ENABLE   ((0x1U) << ADCIE_CH1_Pos)

#define ADCIE_CH1_(x)  (((x) << ADCIE_CH1_Pos) & ADCIE_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH2
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 2 interrupt enable
  */
#define ADCIE_CH2_Pos  (2)
#define ADCIE_CH2_Msk  (0x1U << ADCIE_CH2_Pos)

#define ADCIE_CH2_DISABLE  ((0x0U) << ADCIE_CH2_Pos)
#define ADCIE_CH2_ENABLE   ((0x1U) << ADCIE_CH2_Pos)

#define ADCIE_CH2_(x)  (((x) << ADCIE_CH2_Pos) & ADCIE_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH3
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 3 interrupt enable
  */
#define ADCIE_CH3_Pos  (3)
#define ADCIE_CH3_Msk  (0x1U << ADCIE_CH3_Pos)

#define ADCIE_CH3_DISABLE  ((0x0U) << ADCIE_CH3_Pos)
#define ADCIE_CH3_ENABLE   ((0x1U) << ADCIE_CH3_Pos)

#define ADCIE_CH3_(x)  (((x) << ADCIE_CH3_Pos) & ADCIE_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH4
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 4 interrupt enable
  */
#define ADCIE_CH4_Pos  (4)
#define ADCIE_CH4_Msk  (0x1U << ADCIE_CH4_Pos)

#define ADCIE_CH4_DISABLE  ((0x0U) << ADCIE_CH4_Pos)
#define ADCIE_CH4_ENABLE   ((0x1U) << ADCIE_CH4_Pos)

#define ADCIE_CH4_(x)  (((x) << ADCIE_CH4_Pos) & ADCIE_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH5
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 5 interrupt enable
  */
#define ADCIE_CH5_Pos  (5)
#define ADCIE_CH5_Msk  (0x1U << ADCIE_CH5_Pos)

#define ADCIE_CH5_DISABLE  ((0x0U) << ADCIE_CH5_Pos)
#define ADCIE_CH5_ENABLE   ((0x1U) << ADCIE_CH5_Pos)

#define ADCIE_CH5_(x)  (((x) << ADCIE_CH5_Pos) & ADCIE_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH6
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 6 interrupt enable
  */
#define ADCIE_CH6_Pos  (6)
#define ADCIE_CH6_Msk  (0x1U << ADCIE_CH6_Pos)

#define ADCIE_CH6_DISABLE  ((0x0U) << ADCIE_CH6_Pos)
#define ADCIE_CH6_ENABLE   ((0x1U) << ADCIE_CH6_Pos)

#define ADCIE_CH6_(x)  (((x) << ADCIE_CH6_Pos) & ADCIE_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH7
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 7 interrupt enable
  */
#define ADCIE_CH7_Pos  (7)
#define ADCIE_CH7_Msk  (0x1U << ADCIE_CH7_Pos)

#define ADCIE_CH7_DISABLE  ((0x0U) << ADCIE_CH7_Pos)
#define ADCIE_CH7_ENABLE   ((0x1U) << ADCIE_CH7_Pos)

#define ADCIE_CH7_(x)  (((x) << ADCIE_CH7_Pos) & ADCIE_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH8
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 8 interrupt enable
  */
#define ADCIE_CH8_Pos  (8)
#define ADCIE_CH8_Msk  (0x1U << ADCIE_CH8_Pos)

#define ADCIE_CH8_DISABLE  ((0x0U) << ADCIE_CH8_Pos)
#define ADCIE_CH8_ENABLE   ((0x1U) << ADCIE_CH8_Pos)

#define ADCIE_CH8_(x)  (((x) << ADCIE_CH8_Pos) & ADCIE_CH8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH9
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 9 interrupt enable
  */
#define ADCIE_CH9_Pos  (9)
#define ADCIE_CH9_Msk  (0x1U << ADCIE_CH9_Pos)

#define ADCIE_CH9_DISABLE  ((0x0U) << ADCIE_CH9_Pos)
#define ADCIE_CH9_ENABLE   ((0x1U) << ADCIE_CH9_Pos)

#define ADCIE_CH9_(x)  (((x) << ADCIE_CH9_Pos) & ADCIE_CH9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH10
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 10 interrupt enable
  */
#define ADCIE_CH10_Pos  (10)
#define ADCIE_CH10_Msk  (0x1U << ADCIE_CH10_Pos)

#define ADCIE_CH10_DISABLE  ((0x0U) << ADCIE_CH10_Pos)
#define ADCIE_CH10_ENABLE   ((0x1U) << ADCIE_CH10_Pos)

#define ADCIE_CH10_(x)  (((x) << ADCIE_CH10_Pos) & ADCIE_CH10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH11
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 11 interrupt enable
  */
#define ADCIE_CH11_Pos  (11)
#define ADCIE_CH11_Msk  (0x1U << ADCIE_CH11_Pos)

#define ADCIE_CH11_DISABLE  ((0x0U) << ADCIE_CH11_Pos)
#define ADCIE_CH11_ENABLE   ((0x1U) << ADCIE_CH11_Pos)

#define ADCIE_CH11_(x)  (((x) << ADCIE_CH11_Pos) & ADCIE_CH11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH12
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 12 interrupt enable
  */
#define ADCIE_CH12_Pos  (12)
#define ADCIE_CH12_Msk  (0x1U << ADCIE_CH12_Pos)

#define ADCIE_CH12_DISABLE  ((0x0U) << ADCIE_CH12_Pos)
#define ADCIE_CH12_ENABLE   ((0x1U) << ADCIE_CH12_Pos)

#define ADCIE_CH12_(x)  (((x) << ADCIE_CH12_Pos) & ADCIE_CH12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH13
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 13 interrupt enable
  */
#define ADCIE_CH13_Pos  (13)
#define ADCIE_CH13_Msk  (0x1U << ADCIE_CH13_Pos)

#define ADCIE_CH13_DISABLE  ((0x0U) << ADCIE_CH13_Pos)
#define ADCIE_CH13_ENABLE   ((0x1U) << ADCIE_CH13_Pos)

#define ADCIE_CH13_(x)  (((x) << ADCIE_CH13_Pos) & ADCIE_CH13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH14
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 14 interrupt enable
  */
#define ADCIE_CH14_Pos  (14)
#define ADCIE_CH14_Msk  (0x1U << ADCIE_CH14_Pos)

#define ADCIE_CH14_DISABLE  ((0x0U) << ADCIE_CH14_Pos)
#define ADCIE_CH14_ENABLE   ((0x1U) << ADCIE_CH14_Pos)

#define ADCIE_CH14_(x)  (((x) << ADCIE_CH14_Pos) & ADCIE_CH14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCIE           CH15
  *  @access     ADC->ADCIE
  *  @brief      ADC channel 15 interrupt enable
  */
#define ADCIE_CH15_Pos  (15)
#define ADCIE_CH15_Msk  (0x1U << ADCIE_CH15_Pos)

#define ADCIE_CH15_DISABLE  ((0x0U) << ADCIE_CH15_Pos)
#define ADCIE_CH15_ENABLE   ((0x1U) << ADCIE_CH15_Pos)

#define ADCIE_CH15_(x)  (((x) << ADCIE_CH15_Pos) & ADCIE_CH15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCPRICTL    PRIORITY
  *  @access     ADC->ADCSOCPRICTL
  *  @brief      SOC (Start of Conversion) Priority
  *              Determineds the cutoff point for priority mode and round arbitration of SOCs
  */
#define ADCSOCPRICTL_PRIORITY_Pos  (0)
#define ADCSOCPRICTL_PRIORITY_Msk  (0xFU << ADCSOCPRICTL_PRIORITY_Pos)

#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC0   ((0x0000U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC1   ((0x0001U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC2   ((0x0002U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC3   ((0x0003U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC4   ((0x0004U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC5   ((0x0005U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC6   ((0x0006U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC7   ((0x0007U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC8   ((0x0008U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC9   ((0x0009U) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC10  ((0x000AU) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC11  ((0x000BU) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC12  ((0x000CU) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC13  ((0x000DU) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC14  ((0x000EU) << ADCSOCPRICTL_PRIORITY_Pos)
#define ADCSOCPRICTL_PRIORITY_CUTOFF_AT_SOC15  ((0x000FU) << ADCSOCPRICTL_PRIORITY_Pos)

#define ADCSOCPRICTL_PRIORITY_(x)  (((x) << ADCSOCPRICTL_PRIORITY_Pos) & ADCSOCPRICTL_PRIORITY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCPRICTL    RRPOINTER
  *  @access     ADC->ADCSOCPRICTL
  *  @brief      Round Ring Pointer
  *              Holds the latest SOCx in Round Ring, and determine the next order of conversion.
  */
#define ADCSOCPRICTL_RRPOINTER_Pos  (4)
#define ADCSOCPRICTL_RRPOINTER_Msk  (0xFU << ADCSOCPRICTL_RRPOINTER_Pos)

#define ADCSOCPRICTL_RRPOINTER_SOC0   ((0x0000U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC1   ((0x0001U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC2   ((0x0002U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC3   ((0x0003U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC4   ((0x0004U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC5   ((0x0005U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC6   ((0x0006U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC7   ((0x0007U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC8   ((0x0008U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC9   ((0x0009U) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC10  ((0x000AU) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC11  ((0x000BU) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC12  ((0x000CU) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC13  ((0x000DU) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC14  ((0x000EU) << ADCSOCPRICTL_RRPOINTER_Pos)
#define ADCSOCPRICTL_RRPOINTER_SOC15  ((0x000FU) << ADCSOCPRICTL_RRPOINTER_Pos)

#define ADCSOCPRICTL_RRPOINTER_(x)  (((x) << ADCSOCPRICTL_RRPOINTER_Pos) & ADCSOCPRICTL_RRPOINTER_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC0
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC0 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC0_Pos  (0)
#define ADCSOCFLG_SOC0_Msk  (0x1U << ADCSOCFLG_SOC0_Pos)

#define ADCSOCFLG_SOC0_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC0_Pos)
#define ADCSOCFLG_SOC0_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC0_Pos)

#define ADCSOCFLG_SOC0_(x)  (((x) << ADCSOCFLG_SOC0_Pos) & ADCSOCFLG_SOC0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC1
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC1 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC1_Pos  (1)
#define ADCSOCFLG_SOC1_Msk  (0x1U << ADCSOCFLG_SOC1_Pos)

#define ADCSOCFLG_SOC1_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC1_Pos)
#define ADCSOCFLG_SOC1_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC1_Pos)

#define ADCSOCFLG_SOC1_(x)  (((x) << ADCSOCFLG_SOC1_Pos) & ADCSOCFLG_SOC1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC2
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC2 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC2_Pos  (2)
#define ADCSOCFLG_SOC2_Msk  (0x1U << ADCSOCFLG_SOC2_Pos)

#define ADCSOCFLG_SOC2_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC2_Pos)
#define ADCSOCFLG_SOC2_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC2_Pos)

#define ADCSOCFLG_SOC2_(x)  (((x) << ADCSOCFLG_SOC2_Pos) & ADCSOCFLG_SOC2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC3
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC3 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC3_Pos  (3)
#define ADCSOCFLG_SOC3_Msk  (0x1U << ADCSOCFLG_SOC3_Pos)

#define ADCSOCFLG_SOC3_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC3_Pos)
#define ADCSOCFLG_SOC3_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC3_Pos)

#define ADCSOCFLG_SOC3_(x)  (((x) << ADCSOCFLG_SOC3_Pos) & ADCSOCFLG_SOC3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC4
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC4 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC4_Pos  (4)
#define ADCSOCFLG_SOC4_Msk  (0x1U << ADCSOCFLG_SOC4_Pos)

#define ADCSOCFLG_SOC4_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC4_Pos)
#define ADCSOCFLG_SOC4_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC4_Pos)

#define ADCSOCFLG_SOC4_(x)  (((x) << ADCSOCFLG_SOC4_Pos) & ADCSOCFLG_SOC4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC5
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC5 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC5_Pos  (5)
#define ADCSOCFLG_SOC5_Msk  (0x1U << ADCSOCFLG_SOC5_Pos)

#define ADCSOCFLG_SOC5_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC5_Pos)
#define ADCSOCFLG_SOC5_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC5_Pos)

#define ADCSOCFLG_SOC5_(x)  (((x) << ADCSOCFLG_SOC5_Pos) & ADCSOCFLG_SOC5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC6
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC6 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC6_Pos  (6)
#define ADCSOCFLG_SOC6_Msk  (0x1U << ADCSOCFLG_SOC6_Pos)

#define ADCSOCFLG_SOC6_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC6_Pos)
#define ADCSOCFLG_SOC6_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC6_Pos)

#define ADCSOCFLG_SOC6_(x)  (((x) << ADCSOCFLG_SOC6_Pos) & ADCSOCFLG_SOC6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC7
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC7 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC7_Pos  (7)
#define ADCSOCFLG_SOC7_Msk  (0x1U << ADCSOCFLG_SOC7_Pos)

#define ADCSOCFLG_SOC7_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC7_Pos)
#define ADCSOCFLG_SOC7_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC7_Pos)

#define ADCSOCFLG_SOC7_(x)  (((x) << ADCSOCFLG_SOC7_Pos) & ADCSOCFLG_SOC7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC8
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC8 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC8_Pos  (8)
#define ADCSOCFLG_SOC8_Msk  (0x1U << ADCSOCFLG_SOC8_Pos)

#define ADCSOCFLG_SOC8_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC8_Pos)
#define ADCSOCFLG_SOC8_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC8_Pos)

#define ADCSOCFLG_SOC8_(x)  (((x) << ADCSOCFLG_SOC8_Pos) & ADCSOCFLG_SOC8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC9
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC9 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC9_Pos  (9)
#define ADCSOCFLG_SOC9_Msk  (0x1U << ADCSOCFLG_SOC9_Pos)

#define ADCSOCFLG_SOC9_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC9_Pos)
#define ADCSOCFLG_SOC9_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC9_Pos)

#define ADCSOCFLG_SOC9_(x)  (((x) << ADCSOCFLG_SOC9_Pos) & ADCSOCFLG_SOC9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC10
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC10 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC10_Pos  (10)
#define ADCSOCFLG_SOC10_Msk  (0x1U << ADCSOCFLG_SOC10_Pos)

#define ADCSOCFLG_SOC10_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC10_Pos)
#define ADCSOCFLG_SOC10_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC10_Pos)

#define ADCSOCFLG_SOC10_(x)  (((x) << ADCSOCFLG_SOC10_Pos) & ADCSOCFLG_SOC10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC11
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC11 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC11_Pos  (11)
#define ADCSOCFLG_SOC11_Msk  (0x1U << ADCSOCFLG_SOC11_Pos)

#define ADCSOCFLG_SOC11_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC11_Pos)
#define ADCSOCFLG_SOC11_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC11_Pos)

#define ADCSOCFLG_SOC11_(x)  (((x) << ADCSOCFLG_SOC11_Pos) & ADCSOCFLG_SOC11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC12
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC12 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC12_Pos  (12)
#define ADCSOCFLG_SOC12_Msk  (0x1U << ADCSOCFLG_SOC12_Pos)

#define ADCSOCFLG_SOC12_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC12_Pos)
#define ADCSOCFLG_SOC12_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC12_Pos)

#define ADCSOCFLG_SOC12_(x)  (((x) << ADCSOCFLG_SOC12_Pos) & ADCSOCFLG_SOC12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC13
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC13 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC13_Pos  (13)
#define ADCSOCFLG_SOC13_Msk  (0x1U << ADCSOCFLG_SOC13_Pos)

#define ADCSOCFLG_SOC13_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC13_Pos)
#define ADCSOCFLG_SOC13_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC13_Pos)

#define ADCSOCFLG_SOC13_(x)  (((x) << ADCSOCFLG_SOC13_Pos) & ADCSOCFLG_SOC13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC14
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC14 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC14_Pos  (14)
#define ADCSOCFLG_SOC14_Msk  (0x1U << ADCSOCFLG_SOC14_Pos)

#define ADCSOCFLG_SOC14_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC14_Pos)
#define ADCSOCFLG_SOC14_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC14_Pos)

#define ADCSOCFLG_SOC14_(x)  (((x) << ADCSOCFLG_SOC14_Pos) & ADCSOCFLG_SOC14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFLG       SOC15
  *  @access     ADC->ADCSOCFLG
  *  @brief      SOC15 (Start of Conversion) flag
  */
#define ADCSOCFLG_SOC15_Pos  (15)
#define ADCSOCFLG_SOC15_Msk  (0x1U << ADCSOCFLG_SOC15_Pos)

#define ADCSOCFLG_SOC15_NO_PENDING     ((0x0U) << ADCSOCFLG_SOC15_Pos)
#define ADCSOCFLG_SOC15_TRIG_RECEIVED  ((0x1U) << ADCSOCFLG_SOC15_Pos)

#define ADCSOCFLG_SOC15_(x)  (((x) << ADCSOCFLG_SOC15_Pos) & ADCSOCFLG_SOC15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC0
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC0 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC0_Pos  (0)
#define ADCSOCFRC_SOC0_Msk  (0x1U << ADCSOCFRC_SOC0_Pos)

#define ADCSOCFRC_SOC0_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC0_Pos)
#define ADCSOCFRC_SOC0_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC0_Pos)

#define ADCSOCFRC_SOC0_(x)  (((x) << ADCSOCFRC_SOC0_Pos) & ADCSOCFRC_SOC0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC1
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC1 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC1_Pos  (1)
#define ADCSOCFRC_SOC1_Msk  (0x1U << ADCSOCFRC_SOC1_Pos)

#define ADCSOCFRC_SOC1_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC1_Pos)
#define ADCSOCFRC_SOC1_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC1_Pos)

#define ADCSOCFRC_SOC1_(x)  (((x) << ADCSOCFRC_SOC1_Pos) & ADCSOCFRC_SOC1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC2
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC2 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC2_Pos  (2)
#define ADCSOCFRC_SOC2_Msk  (0x1U << ADCSOCFRC_SOC2_Pos)

#define ADCSOCFRC_SOC2_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC2_Pos)
#define ADCSOCFRC_SOC2_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC2_Pos)

#define ADCSOCFRC_SOC2_(x)  (((x) << ADCSOCFRC_SOC2_Pos) & ADCSOCFRC_SOC2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC3
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC3 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC3_Pos  (3)
#define ADCSOCFRC_SOC3_Msk  (0x1U << ADCSOCFRC_SOC3_Pos)

#define ADCSOCFRC_SOC3_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC3_Pos)
#define ADCSOCFRC_SOC3_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC3_Pos)

#define ADCSOCFRC_SOC3_(x)  (((x) << ADCSOCFRC_SOC3_Pos) & ADCSOCFRC_SOC3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC4
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC4 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC4_Pos  (4)
#define ADCSOCFRC_SOC4_Msk  (0x1U << ADCSOCFRC_SOC4_Pos)

#define ADCSOCFRC_SOC4_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC4_Pos)
#define ADCSOCFRC_SOC4_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC4_Pos)

#define ADCSOCFRC_SOC4_(x)  (((x) << ADCSOCFRC_SOC4_Pos) & ADCSOCFRC_SOC4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC5
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC5 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC5_Pos  (5)
#define ADCSOCFRC_SOC5_Msk  (0x1U << ADCSOCFRC_SOC5_Pos)

#define ADCSOCFRC_SOC5_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC5_Pos)
#define ADCSOCFRC_SOC5_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC5_Pos)

#define ADCSOCFRC_SOC5_(x)  (((x) << ADCSOCFRC_SOC5_Pos) & ADCSOCFRC_SOC5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC6
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC6 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC6_Pos  (6)
#define ADCSOCFRC_SOC6_Msk  (0x1U << ADCSOCFRC_SOC6_Pos)

#define ADCSOCFRC_SOC6_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC6_Pos)
#define ADCSOCFRC_SOC6_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC6_Pos)

#define ADCSOCFRC_SOC6_(x)  (((x) << ADCSOCFRC_SOC6_Pos) & ADCSOCFRC_SOC6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC7
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC7 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC7_Pos  (7)
#define ADCSOCFRC_SOC7_Msk  (0x1U << ADCSOCFRC_SOC7_Pos)

#define ADCSOCFRC_SOC7_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC7_Pos)
#define ADCSOCFRC_SOC7_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC7_Pos)

#define ADCSOCFRC_SOC7_(x)  (((x) << ADCSOCFRC_SOC7_Pos) & ADCSOCFRC_SOC7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC8
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC8 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC8_Pos  (8)
#define ADCSOCFRC_SOC8_Msk  (0x1U << ADCSOCFRC_SOC8_Pos)

#define ADCSOCFRC_SOC8_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC8_Pos)
#define ADCSOCFRC_SOC8_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC8_Pos)

#define ADCSOCFRC_SOC8_(x)  (((x) << ADCSOCFRC_SOC8_Pos) & ADCSOCFRC_SOC8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC9
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC9 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC9_Pos  (9)
#define ADCSOCFRC_SOC9_Msk  (0x1U << ADCSOCFRC_SOC9_Pos)

#define ADCSOCFRC_SOC9_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC9_Pos)
#define ADCSOCFRC_SOC9_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC9_Pos)

#define ADCSOCFRC_SOC9_(x)  (((x) << ADCSOCFRC_SOC9_Pos) & ADCSOCFRC_SOC9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC10
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC10 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC10_Pos  (10)
#define ADCSOCFRC_SOC10_Msk  (0x1U << ADCSOCFRC_SOC10_Pos)

#define ADCSOCFRC_SOC10_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC10_Pos)
#define ADCSOCFRC_SOC10_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC10_Pos)

#define ADCSOCFRC_SOC10_(x)  (((x) << ADCSOCFRC_SOC10_Pos) & ADCSOCFRC_SOC10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC11
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC11 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC11_Pos  (11)
#define ADCSOCFRC_SOC11_Msk  (0x1U << ADCSOCFRC_SOC11_Pos)

#define ADCSOCFRC_SOC11_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC11_Pos)
#define ADCSOCFRC_SOC11_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC11_Pos)

#define ADCSOCFRC_SOC11_(x)  (((x) << ADCSOCFRC_SOC11_Pos) & ADCSOCFRC_SOC11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC12
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC12 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC12_Pos  (12)
#define ADCSOCFRC_SOC12_Msk  (0x1U << ADCSOCFRC_SOC12_Pos)

#define ADCSOCFRC_SOC12_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC12_Pos)
#define ADCSOCFRC_SOC12_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC12_Pos)

#define ADCSOCFRC_SOC12_(x)  (((x) << ADCSOCFRC_SOC12_Pos) & ADCSOCFRC_SOC12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC13
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC13 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC13_Pos  (13)
#define ADCSOCFRC_SOC13_Msk  (0x1U << ADCSOCFRC_SOC13_Pos)

#define ADCSOCFRC_SOC13_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC13_Pos)
#define ADCSOCFRC_SOC13_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC13_Pos)

#define ADCSOCFRC_SOC13_(x)  (((x) << ADCSOCFRC_SOC13_Pos) & ADCSOCFRC_SOC13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC14
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC14 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC14_Pos  (14)
#define ADCSOCFRC_SOC14_Msk  (0x1U << ADCSOCFRC_SOC14_Pos)

#define ADCSOCFRC_SOC14_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC14_Pos)
#define ADCSOCFRC_SOC14_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC14_Pos)

#define ADCSOCFRC_SOC14_(x)  (((x) << ADCSOCFRC_SOC14_Pos) & ADCSOCFRC_SOC14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCFRC       SOC15
  *  @access     ADC->ADCSOCFRC
  *  @brief      SOC15 (Start of Conversion) flag force
  */
#define ADCSOCFRC_SOC15_Pos  (15)
#define ADCSOCFRC_SOC15_Msk  (0x1U << ADCSOCFRC_SOC15_Pos)

#define ADCSOCFRC_SOC15_NO_EFFECT      ((0x0U) << ADCSOCFRC_SOC15_Pos)
#define ADCSOCFRC_SOC15_FORCE_CONVERT  ((0x1U) << ADCSOCFRC_SOC15_Pos)

#define ADCSOCFRC_SOC15_(x)  (((x) << ADCSOCFRC_SOC15_Pos) & ADCSOCFRC_SOC15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC0
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC0 (Start of Conversion) overflow flag
  *              This indicates an SOC0 interrupt was generated while an existing SOC0 interrupt
  *              was already pending. This overflow flag can't stop SOC0 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC0_Pos  (0)
#define ADCSOCOVF_SOC0_Msk  (0x1U << ADCSOCOVF_SOC0_Pos)

#define ADCSOCOVF_SOC0_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC0_Pos)
#define ADCSOCOVF_SOC0_OCCUR      ((0x1U) << ADCSOCOVF_SOC0_Pos)

#define ADCSOCOVF_SOC0_(x)  (((x) << ADCSOCOVF_SOC0_Pos) & ADCSOCOVF_SOC0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC1
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC1 (Start of Conversion) overflow flag
  *              This indicates an SOC1 interrupt was generated while an existing SOC1 interrupt
  *              was already pending. This overflow flag can't stop SOC1 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC1_Pos  (1)
#define ADCSOCOVF_SOC1_Msk  (0x1U << ADCSOCOVF_SOC1_Pos)

#define ADCSOCOVF_SOC1_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC1_Pos)
#define ADCSOCOVF_SOC1_OCCUR      ((0x1U) << ADCSOCOVF_SOC1_Pos)

#define ADCSOCOVF_SOC1_(x)  (((x) << ADCSOCOVF_SOC1_Pos) & ADCSOCOVF_SOC1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC2
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC2 (Start of Conversion) overflow flag
  *              This indicates an SOC2 interrupt was generated while an existing SOC2 interrupt
  *              was already pending. This overflow flag can't stop SOC2 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC2_Pos  (2)
#define ADCSOCOVF_SOC2_Msk  (0x1U << ADCSOCOVF_SOC2_Pos)

#define ADCSOCOVF_SOC2_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC2_Pos)
#define ADCSOCOVF_SOC2_OCCUR      ((0x1U) << ADCSOCOVF_SOC2_Pos)

#define ADCSOCOVF_SOC2_(x)  (((x) << ADCSOCOVF_SOC2_Pos) & ADCSOCOVF_SOC2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC3
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC3 (Start of Conversion) overflow flag
  *              This indicates an SOC3 interrupt was generated while an existing SOC3 interrupt
  *              was already pending. This overflow flag can't stop SOC3 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC3_Pos  (3)
#define ADCSOCOVF_SOC3_Msk  (0x1U << ADCSOCOVF_SOC3_Pos)

#define ADCSOCOVF_SOC3_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC3_Pos)
#define ADCSOCOVF_SOC3_OCCUR      ((0x1U) << ADCSOCOVF_SOC3_Pos)

#define ADCSOCOVF_SOC3_(x)  (((x) << ADCSOCOVF_SOC3_Pos) & ADCSOCOVF_SOC3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC4
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC4 (Start of Conversion) overflow flag
  *              This indicates an SOC4 interrupt was generated while an existing SOC4 interrupt
  *              was already pending. This overflow flag can't stop SOC4 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC4_Pos  (4)
#define ADCSOCOVF_SOC4_Msk  (0x1U << ADCSOCOVF_SOC4_Pos)

#define ADCSOCOVF_SOC4_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC4_Pos)
#define ADCSOCOVF_SOC4_OCCUR      ((0x1U) << ADCSOCOVF_SOC4_Pos)

#define ADCSOCOVF_SOC4_(x)  (((x) << ADCSOCOVF_SOC4_Pos) & ADCSOCOVF_SOC4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC5
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC5 (Start of Conversion) overflow flag
  *              This indicates an SOC5 interrupt was generated while an existing SOC5 interrupt
  *              was already pending. This overflow flag can't stop SOC5 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC5_Pos  (5)
#define ADCSOCOVF_SOC5_Msk  (0x1U << ADCSOCOVF_SOC5_Pos)

#define ADCSOCOVF_SOC5_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC5_Pos)
#define ADCSOCOVF_SOC5_OCCUR      ((0x1U) << ADCSOCOVF_SOC5_Pos)

#define ADCSOCOVF_SOC5_(x)  (((x) << ADCSOCOVF_SOC5_Pos) & ADCSOCOVF_SOC5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC6
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC6 (Start of Conversion) overflow flag
  *              This indicates an SOC6 interrupt was generated while an existing SOC6 interrupt
  *              was already pending. This overflow flag can't stop SOC6 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC6_Pos  (6)
#define ADCSOCOVF_SOC6_Msk  (0x1U << ADCSOCOVF_SOC6_Pos)

#define ADCSOCOVF_SOC6_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC6_Pos)
#define ADCSOCOVF_SOC6_OCCUR      ((0x1U) << ADCSOCOVF_SOC6_Pos)

#define ADCSOCOVF_SOC6_(x)  (((x) << ADCSOCOVF_SOC6_Pos) & ADCSOCOVF_SOC6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC7
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC7 (Start of Conversion) overflow flag
  *              This indicates an SOC7 interrupt was generated while an existing SOC7 interrupt
  *              was already pending. This overflow flag can't stop SOC7 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC7_Pos  (7)
#define ADCSOCOVF_SOC7_Msk  (0x1U << ADCSOCOVF_SOC7_Pos)

#define ADCSOCOVF_SOC7_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC7_Pos)
#define ADCSOCOVF_SOC7_OCCUR      ((0x1U) << ADCSOCOVF_SOC7_Pos)

#define ADCSOCOVF_SOC7_(x)  (((x) << ADCSOCOVF_SOC7_Pos) & ADCSOCOVF_SOC7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC8
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC8 (Start of Conversion) overflow flag
  *              This indicates an SOC8 interrupt was generated while an existing SOC8 interrupt
  *              was already pending. This overflow flag can't stop SOC8 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC8_Pos  (8)
#define ADCSOCOVF_SOC8_Msk  (0x1U << ADCSOCOVF_SOC8_Pos)

#define ADCSOCOVF_SOC8_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC8_Pos)
#define ADCSOCOVF_SOC8_OCCUR      ((0x1U) << ADCSOCOVF_SOC8_Pos)

#define ADCSOCOVF_SOC8_(x)  (((x) << ADCSOCOVF_SOC8_Pos) & ADCSOCOVF_SOC8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC9
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC9 (Start of Conversion) overflow flag
  *              This indicates an SOC9 interrupt was generated while an existing SOC9 interrupt
  *              was already pending. This overflow flag can't stop SOC9 interrupts from being
  *              processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC9_Pos  (9)
#define ADCSOCOVF_SOC9_Msk  (0x1U << ADCSOCOVF_SOC9_Pos)

#define ADCSOCOVF_SOC9_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC9_Pos)
#define ADCSOCOVF_SOC9_OCCUR      ((0x1U) << ADCSOCOVF_SOC9_Pos)

#define ADCSOCOVF_SOC9_(x)  (((x) << ADCSOCOVF_SOC9_Pos) & ADCSOCOVF_SOC9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC10
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC10 (Start of Conversion) overflow flag
  *              This indicates an SOC10 interrupt was generated while an existing SOC10
  *              interrupt was already pending. This overflow flag can't stop SOC10 interrupts
  *              from being processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC10_Pos  (10)
#define ADCSOCOVF_SOC10_Msk  (0x1U << ADCSOCOVF_SOC10_Pos)

#define ADCSOCOVF_SOC10_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC10_Pos)
#define ADCSOCOVF_SOC10_OCCUR      ((0x1U) << ADCSOCOVF_SOC10_Pos)

#define ADCSOCOVF_SOC10_(x)  (((x) << ADCSOCOVF_SOC10_Pos) & ADCSOCOVF_SOC10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC11
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC11 (Start of Conversion) overflow flag
  *              This indicates an SOC11 interrupt was generated while an existing SOC11
  *              interrupt was already pending. This overflow flag can't stop SOC11 interrupts
  *              from being processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC11_Pos  (11)
#define ADCSOCOVF_SOC11_Msk  (0x1U << ADCSOCOVF_SOC11_Pos)

#define ADCSOCOVF_SOC11_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC11_Pos)
#define ADCSOCOVF_SOC11_OCCUR      ((0x1U) << ADCSOCOVF_SOC11_Pos)

#define ADCSOCOVF_SOC11_(x)  (((x) << ADCSOCOVF_SOC11_Pos) & ADCSOCOVF_SOC11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC12
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC12 (Start of Conversion) overflow flag
  *              This indicates an SOC12 interrupt was generated while an existing SOC12
  *              interrupt was already pending. This overflow flag can't stop SOC12 interrupts
  *              from being processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC12_Pos  (12)
#define ADCSOCOVF_SOC12_Msk  (0x1U << ADCSOCOVF_SOC12_Pos)

#define ADCSOCOVF_SOC12_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC12_Pos)
#define ADCSOCOVF_SOC12_OCCUR      ((0x1U) << ADCSOCOVF_SOC12_Pos)

#define ADCSOCOVF_SOC12_(x)  (((x) << ADCSOCOVF_SOC12_Pos) & ADCSOCOVF_SOC12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC13
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC13 (Start of Conversion) overflow flag
  *              This indicates an SOC13 interrupt was generated while an existing SOC13
  *              interrupt was already pending. This overflow flag can't stop SOC13 interrupts
  *              from being processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC13_Pos  (13)
#define ADCSOCOVF_SOC13_Msk  (0x1U << ADCSOCOVF_SOC13_Pos)

#define ADCSOCOVF_SOC13_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC13_Pos)
#define ADCSOCOVF_SOC13_OCCUR      ((0x1U) << ADCSOCOVF_SOC13_Pos)

#define ADCSOCOVF_SOC13_(x)  (((x) << ADCSOCOVF_SOC13_Pos) & ADCSOCOVF_SOC13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC14
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC14 (Start of Conversion) overflow flag
  *              This indicates an SOC14 interrupt was generated while an existing SOC14
  *              interrupt was already pending. This overflow flag can't stop SOC14 interrupts
  *              from being processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC14_Pos  (14)
#define ADCSOCOVF_SOC14_Msk  (0x1U << ADCSOCOVF_SOC14_Pos)

#define ADCSOCOVF_SOC14_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC14_Pos)
#define ADCSOCOVF_SOC14_OCCUR      ((0x1U) << ADCSOCOVF_SOC14_Pos)

#define ADCSOCOVF_SOC14_(x)  (((x) << ADCSOCOVF_SOC14_Pos) & ADCSOCOVF_SOC14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVF       SOC15
  *  @access     ADC->ADCSOCOVF
  *  @brief      SOC15 (Start of Conversion) overflow flag
  *              This indicates an SOC15 interrupt was generated while an existing SOC15
  *              interrupt was already pending. This overflow flag can't stop SOC15 interrupts
  *              from being processing. It just show that a trigger was missed.
  */
#define ADCSOCOVF_SOC15_Pos  (15)
#define ADCSOCOVF_SOC15_Msk  (0x1U << ADCSOCOVF_SOC15_Pos)

#define ADCSOCOVF_SOC15_NOT_OCCUR  ((0x0U) << ADCSOCOVF_SOC15_Pos)
#define ADCSOCOVF_SOC15_OCCUR      ((0x1U) << ADCSOCOVF_SOC15_Pos)

#define ADCSOCOVF_SOC15_(x)  (((x) << ADCSOCOVF_SOC15_Pos) & ADCSOCOVF_SOC15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC0
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC0 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC0 overflow bit in ADCSOCOVF register simultaneously, then software
  *              has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC0_Pos  (0)
#define ADCSOCOVFC_SOC0_Msk  (0x1U << ADCSOCOVFC_SOC0_Pos)

#define ADCSOCOVFC_SOC0_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC0_Pos)
#define ADCSOCOVFC_SOC0_CLEAR      ((0x1U) << ADCSOCOVFC_SOC0_Pos)

#define ADCSOCOVFC_SOC0_(x)  (((x) << ADCSOCOVFC_SOC0_Pos) & ADCSOCOVFC_SOC0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC1
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC1 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC1 overflow bit in ADCSOCOVF register simultaneously, then software
  *              has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC1_Pos  (1)
#define ADCSOCOVFC_SOC1_Msk  (0x1U << ADCSOCOVFC_SOC1_Pos)

#define ADCSOCOVFC_SOC1_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC1_Pos)
#define ADCSOCOVFC_SOC1_CLEAR      ((0x1U) << ADCSOCOVFC_SOC1_Pos)

#define ADCSOCOVFC_SOC1_(x)  (((x) << ADCSOCOVFC_SOC1_Pos) & ADCSOCOVFC_SOC1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC2
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC2 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC2 overflow bit in ADCSOCOVF register simultaneously, then software
  *              has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC2_Pos  (2)
#define ADCSOCOVFC_SOC2_Msk  (0x1U << ADCSOCOVFC_SOC2_Pos)

#define ADCSOCOVFC_SOC2_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC2_Pos)
#define ADCSOCOVFC_SOC2_CLEAR      ((0x1U) << ADCSOCOVFC_SOC2_Pos)

#define ADCSOCOVFC_SOC2_(x)  (((x) << ADCSOCOVFC_SOC2_Pos) & ADCSOCOVFC_SOC2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC3
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC3 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC3 overflow bit in ADCSOCOVF register simultaneously, then software
  *              has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC3_Pos  (3)
#define ADCSOCOVFC_SOC3_Msk  (0x1U << ADCSOCOVFC_SOC3_Pos)

#define ADCSOCOVFC_SOC3_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC3_Pos)
#define ADCSOCOVFC_SOC3_CLEAR      ((0x1U) << ADCSOCOVFC_SOC3_Pos)

#define ADCSOCOVFC_SOC3_(x)  (((x) << ADCSOCOVFC_SOC3_Pos) & ADCSOCOVFC_SOC3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC4
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC4 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC4 overflow bit in ADCSOCOVF register simultaneously, then hardware
  *              has priority and ADCSOCOVF register will be set.
  */
#define ADCSOCOVFC_SOC4_Pos  (4)
#define ADCSOCOVFC_SOC4_Msk  (0x1U << ADCSOCOVFC_SOC4_Pos)

#define ADCSOCOVFC_SOC4_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC4_Pos)
#define ADCSOCOVFC_SOC4_CLEAR      ((0x1U) << ADCSOCOVFC_SOC4_Pos)

#define ADCSOCOVFC_SOC4_(x)  (((x) << ADCSOCOVFC_SOC4_Pos) & ADCSOCOVFC_SOC4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC5
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC5 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC5 overflow bit in ADCSOCOVF register simultaneously, then hardware
  *              has priority and ADCSOCOVF register will be set.
  */
#define ADCSOCOVFC_SOC5_Pos  (5)
#define ADCSOCOVFC_SOC5_Msk  (0x1U << ADCSOCOVFC_SOC5_Pos)

#define ADCSOCOVFC_SOC5_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC5_Pos)
#define ADCSOCOVFC_SOC5_CLEAR      ((0x1U) << ADCSOCOVFC_SOC5_Pos)

#define ADCSOCOVFC_SOC5_(x)  (((x) << ADCSOCOVFC_SOC5_Pos) & ADCSOCOVFC_SOC5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC6
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC6 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC6 overflow bit in ADCSOCOVF register simultaneously, then hardware
  *              has priority and ADCSOCOVF register will be set.
  */
#define ADCSOCOVFC_SOC6_Pos  (6)
#define ADCSOCOVFC_SOC6_Msk  (0x1U << ADCSOCOVFC_SOC6_Pos)

#define ADCSOCOVFC_SOC6_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC6_Pos)
#define ADCSOCOVFC_SOC6_CLEAR      ((0x1U) << ADCSOCOVFC_SOC6_Pos)

#define ADCSOCOVFC_SOC6_(x)  (((x) << ADCSOCOVFC_SOC6_Pos) & ADCSOCOVFC_SOC6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC7
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC7 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC7 overflow bit in ADCSOCOVF register simultaneously, then software
  *              has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC7_Pos  (7)
#define ADCSOCOVFC_SOC7_Msk  (0x1U << ADCSOCOVFC_SOC7_Pos)

#define ADCSOCOVFC_SOC7_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC7_Pos)
#define ADCSOCOVFC_SOC7_CLEAR      ((0x1U) << ADCSOCOVFC_SOC7_Pos)

#define ADCSOCOVFC_SOC7_(x)  (((x) << ADCSOCOVFC_SOC7_Pos) & ADCSOCOVFC_SOC7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC8
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC8 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC8 overflow bit in ADCSOCOVF register simultaneously, then software
  *              has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC8_Pos  (8)
#define ADCSOCOVFC_SOC8_Msk  (0x1U << ADCSOCOVFC_SOC8_Pos)

#define ADCSOCOVFC_SOC8_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC8_Pos)
#define ADCSOCOVFC_SOC8_CLEAR      ((0x1U) << ADCSOCOVFC_SOC8_Pos)

#define ADCSOCOVFC_SOC8_(x)  (((x) << ADCSOCOVFC_SOC8_Pos) & ADCSOCOVFC_SOC8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC9
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC9 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC9 overflow bit in ADCSOCOVF register simultaneously, then hardware
  *              has priority and ADCSOCOVF register will be set.
  */
#define ADCSOCOVFC_SOC9_Pos  (9)
#define ADCSOCOVFC_SOC9_Msk  (0x1U << ADCSOCOVFC_SOC9_Pos)

#define ADCSOCOVFC_SOC9_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC9_Pos)
#define ADCSOCOVFC_SOC9_CLEAR      ((0x1U) << ADCSOCOVFC_SOC9_Pos)

#define ADCSOCOVFC_SOC9_(x)  (((x) << ADCSOCOVFC_SOC9_Pos) & ADCSOCOVFC_SOC9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC10
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC10 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC10 overflow bit in ADCSOCOVF register simultaneously, then
  *              software has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC10_Pos  (10)
#define ADCSOCOVFC_SOC10_Msk  (0x1U << ADCSOCOVFC_SOC10_Pos)

#define ADCSOCOVFC_SOC10_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC10_Pos)
#define ADCSOCOVFC_SOC10_CLEAR      ((0x1U) << ADCSOCOVFC_SOC10_Pos)

#define ADCSOCOVFC_SOC10_(x)  (((x) << ADCSOCOVFC_SOC10_Pos) & ADCSOCOVFC_SOC10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC11
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC11 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC11 overflow bit in ADCSOCOVF register simultaneously, then
  *              software has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC11_Pos  (11)
#define ADCSOCOVFC_SOC11_Msk  (0x1U << ADCSOCOVFC_SOC11_Pos)

#define ADCSOCOVFC_SOC11_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC11_Pos)
#define ADCSOCOVFC_SOC11_CLEAR      ((0x1U) << ADCSOCOVFC_SOC11_Pos)

#define ADCSOCOVFC_SOC11_(x)  (((x) << ADCSOCOVFC_SOC11_Pos) & ADCSOCOVFC_SOC11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC12
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC12 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC12 overflow bit in ADCSOCOVF register simultaneously, then
  *              software has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC12_Pos  (12)
#define ADCSOCOVFC_SOC12_Msk  (0x1U << ADCSOCOVFC_SOC12_Pos)

#define ADCSOCOVFC_SOC12_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC12_Pos)
#define ADCSOCOVFC_SOC12_CLEAR      ((0x1U) << ADCSOCOVFC_SOC12_Pos)

#define ADCSOCOVFC_SOC12_(x)  (((x) << ADCSOCOVFC_SOC12_Pos) & ADCSOCOVFC_SOC12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC13
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC13 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC13 overflow bit in ADCSOCOVF register simultaneously, then
  *              software has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC13_Pos  (13)
#define ADCSOCOVFC_SOC13_Msk  (0x1U << ADCSOCOVFC_SOC13_Pos)

#define ADCSOCOVFC_SOC13_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC13_Pos)
#define ADCSOCOVFC_SOC13_CLEAR      ((0x1U) << ADCSOCOVFC_SOC13_Pos)

#define ADCSOCOVFC_SOC13_(x)  (((x) << ADCSOCOVFC_SOC13_Pos) & ADCSOCOVFC_SOC13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC14
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC14 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC14 overflow bit in ADCSOCOVF register simultaneously, then
  *              software has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC14_Pos  (14)
#define ADCSOCOVFC_SOC14_Msk  (0x1U << ADCSOCOVFC_SOC14_Pos)

#define ADCSOCOVFC_SOC14_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC14_Pos)
#define ADCSOCOVFC_SOC14_CLEAR      ((0x1U) << ADCSOCOVFC_SOC14_Pos)

#define ADCSOCOVFC_SOC14_(x)  (((x) << ADCSOCOVFC_SOC14_Pos) & ADCSOCOVFC_SOC14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCSOCOVFC      SOC15
  *  @access     ADC->ADCSOCOVFC
  *  @brief      Clear SOC15 overflow flag
  *              If this bit receive a request to set from software and hardware try to set
  *              respective SOC15 overflow bit in ADCSOCOVF register simultaneously, then
  *              software has priority and ADCSOCOVF register will be cleared.
  */
#define ADCSOCOVFC_SOC15_Pos  (15)
#define ADCSOCOVFC_SOC15_Msk  (0x1U << ADCSOCOVFC_SOC15_Pos)

#define ADCSOCOVFC_SOC15_NO_EFFECT  ((0x0U) << ADCSOCOVFC_SOC15_Pos)
#define ADCSOCOVFC_SOC15_CLEAR      ((0x1U) << ADCSOCOVFC_SOC15_Pos)

#define ADCSOCOVFC_SOC15_(x)  (((x) << ADCSOCOVFC_SOC15_Pos) & ADCSOCOVFC_SOC15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH0
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH0 SOC enable
  */
#define ADCINTSOCEN_CH0_Pos  (0)
#define ADCINTSOCEN_CH0_Msk  (0x1U << ADCINTSOCEN_CH0_Pos)

#define ADCINTSOCEN_CH0_DISABLE  ((0x0U) << ADCINTSOCEN_CH0_Pos)
#define ADCINTSOCEN_CH0_ENABLE   ((0x1U) << ADCINTSOCEN_CH0_Pos)

#define ADCINTSOCEN_CH0_(x)  (((x) << ADCINTSOCEN_CH0_Pos) & ADCINTSOCEN_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH1
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH1 SOC enable
  */
#define ADCINTSOCEN_CH1_Pos  (1)
#define ADCINTSOCEN_CH1_Msk  (0x1U << ADCINTSOCEN_CH1_Pos)

#define ADCINTSOCEN_CH1_DISABLE  ((0x0U) << ADCINTSOCEN_CH1_Pos)
#define ADCINTSOCEN_CH1_ENABLE   ((0x1U) << ADCINTSOCEN_CH1_Pos)

#define ADCINTSOCEN_CH1_(x)  (((x) << ADCINTSOCEN_CH1_Pos) & ADCINTSOCEN_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH2
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH2 SOC enable
  */
#define ADCINTSOCEN_CH2_Pos  (2)
#define ADCINTSOCEN_CH2_Msk  (0x1U << ADCINTSOCEN_CH2_Pos)

#define ADCINTSOCEN_CH2_DISABLE  ((0x0U) << ADCINTSOCEN_CH2_Pos)
#define ADCINTSOCEN_CH2_ENABLE   ((0x1U) << ADCINTSOCEN_CH2_Pos)

#define ADCINTSOCEN_CH2_(x)  (((x) << ADCINTSOCEN_CH2_Pos) & ADCINTSOCEN_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH3
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH3 SOC enable
  */
#define ADCINTSOCEN_CH3_Pos  (3)
#define ADCINTSOCEN_CH3_Msk  (0x1U << ADCINTSOCEN_CH3_Pos)

#define ADCINTSOCEN_CH3_DISABLE  ((0x0U) << ADCINTSOCEN_CH3_Pos)
#define ADCINTSOCEN_CH3_ENABLE   ((0x1U) << ADCINTSOCEN_CH3_Pos)

#define ADCINTSOCEN_CH3_(x)  (((x) << ADCINTSOCEN_CH3_Pos) & ADCINTSOCEN_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH4
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH4 SOC enable
  */
#define ADCINTSOCEN_CH4_Pos  (4)
#define ADCINTSOCEN_CH4_Msk  (0x1U << ADCINTSOCEN_CH4_Pos)

#define ADCINTSOCEN_CH4_DISABLE  ((0x0U) << ADCINTSOCEN_CH4_Pos)
#define ADCINTSOCEN_CH4_ENABLE   ((0x1U) << ADCINTSOCEN_CH4_Pos)

#define ADCINTSOCEN_CH4_(x)  (((x) << ADCINTSOCEN_CH4_Pos) & ADCINTSOCEN_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH5
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH5 SOC enable
  */
#define ADCINTSOCEN_CH5_Pos  (5)
#define ADCINTSOCEN_CH5_Msk  (0x1U << ADCINTSOCEN_CH5_Pos)

#define ADCINTSOCEN_CH5_DISABLE  ((0x0U) << ADCINTSOCEN_CH5_Pos)
#define ADCINTSOCEN_CH5_ENABLE   ((0x1U) << ADCINTSOCEN_CH5_Pos)

#define ADCINTSOCEN_CH5_(x)  (((x) << ADCINTSOCEN_CH5_Pos) & ADCINTSOCEN_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH6
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH6 SOC enable
  */
#define ADCINTSOCEN_CH6_Pos  (6)
#define ADCINTSOCEN_CH6_Msk  (0x1U << ADCINTSOCEN_CH6_Pos)

#define ADCINTSOCEN_CH6_DISABLE  ((0x0U) << ADCINTSOCEN_CH6_Pos)
#define ADCINTSOCEN_CH6_ENABLE   ((0x1U) << ADCINTSOCEN_CH6_Pos)

#define ADCINTSOCEN_CH6_(x)  (((x) << ADCINTSOCEN_CH6_Pos) & ADCINTSOCEN_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH7
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH7 SOC enable
  */
#define ADCINTSOCEN_CH7_Pos  (7)
#define ADCINTSOCEN_CH7_Msk  (0x1U << ADCINTSOCEN_CH7_Pos)

#define ADCINTSOCEN_CH7_DISABLE  ((0x0U) << ADCINTSOCEN_CH7_Pos)
#define ADCINTSOCEN_CH7_ENABLE   ((0x1U) << ADCINTSOCEN_CH7_Pos)

#define ADCINTSOCEN_CH7_(x)  (((x) << ADCINTSOCEN_CH7_Pos) & ADCINTSOCEN_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH8
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH8 SOC enable
  */
#define ADCINTSOCEN_CH8_Pos  (8)
#define ADCINTSOCEN_CH8_Msk  (0x1U << ADCINTSOCEN_CH8_Pos)

#define ADCINTSOCEN_CH8_DISABLE  ((0x0U) << ADCINTSOCEN_CH8_Pos)
#define ADCINTSOCEN_CH8_ENABLE   ((0x1U) << ADCINTSOCEN_CH8_Pos)

#define ADCINTSOCEN_CH8_(x)  (((x) << ADCINTSOCEN_CH8_Pos) & ADCINTSOCEN_CH8_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH9
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH9 SOC enable
  */
#define ADCINTSOCEN_CH9_Pos  (9)
#define ADCINTSOCEN_CH9_Msk  (0x1U << ADCINTSOCEN_CH9_Pos)

#define ADCINTSOCEN_CH9_DISABLE  ((0x0U) << ADCINTSOCEN_CH9_Pos)
#define ADCINTSOCEN_CH9_ENABLE   ((0x1U) << ADCINTSOCEN_CH9_Pos)

#define ADCINTSOCEN_CH9_(x)  (((x) << ADCINTSOCEN_CH9_Pos) & ADCINTSOCEN_CH9_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH10
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH10 SOC enable
  */
#define ADCINTSOCEN_CH10_Pos  (10)
#define ADCINTSOCEN_CH10_Msk  (0x1U << ADCINTSOCEN_CH10_Pos)

#define ADCINTSOCEN_CH10_DISABLE  ((0x0U) << ADCINTSOCEN_CH10_Pos)
#define ADCINTSOCEN_CH10_ENABLE   ((0x1U) << ADCINTSOCEN_CH10_Pos)

#define ADCINTSOCEN_CH10_(x)  (((x) << ADCINTSOCEN_CH10_Pos) & ADCINTSOCEN_CH10_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH11
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH11 SOC enable
  */
#define ADCINTSOCEN_CH11_Pos  (11)
#define ADCINTSOCEN_CH11_Msk  (0x1U << ADCINTSOCEN_CH11_Pos)

#define ADCINTSOCEN_CH11_DISABLE  ((0x0U) << ADCINTSOCEN_CH11_Pos)
#define ADCINTSOCEN_CH11_ENABLE   ((0x1U) << ADCINTSOCEN_CH11_Pos)

#define ADCINTSOCEN_CH11_(x)  (((x) << ADCINTSOCEN_CH11_Pos) & ADCINTSOCEN_CH11_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH12
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH12 SOC enable
  */
#define ADCINTSOCEN_CH12_Pos  (12)
#define ADCINTSOCEN_CH12_Msk  (0x1U << ADCINTSOCEN_CH12_Pos)

#define ADCINTSOCEN_CH12_DISABLE  ((0x0U) << ADCINTSOCEN_CH12_Pos)
#define ADCINTSOCEN_CH12_ENABLE   ((0x1U) << ADCINTSOCEN_CH12_Pos)

#define ADCINTSOCEN_CH12_(x)  (((x) << ADCINTSOCEN_CH12_Pos) & ADCINTSOCEN_CH12_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH13
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH13 SOC enable
  */
#define ADCINTSOCEN_CH13_Pos  (13)
#define ADCINTSOCEN_CH13_Msk  (0x1U << ADCINTSOCEN_CH13_Pos)

#define ADCINTSOCEN_CH13_DISABLE  ((0x0U) << ADCINTSOCEN_CH13_Pos)
#define ADCINTSOCEN_CH13_ENABLE   ((0x1U) << ADCINTSOCEN_CH13_Pos)

#define ADCINTSOCEN_CH13_(x)  (((x) << ADCINTSOCEN_CH13_Pos) & ADCINTSOCEN_CH13_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH14
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH14 SOC enable
  */
#define ADCINTSOCEN_CH14_Pos  (14)
#define ADCINTSOCEN_CH14_Msk  (0x1U << ADCINTSOCEN_CH14_Pos)

#define ADCINTSOCEN_CH14_DISABLE  ((0x0U) << ADCINTSOCEN_CH14_Pos)
#define ADCINTSOCEN_CH14_ENABLE   ((0x1U) << ADCINTSOCEN_CH14_Pos)

#define ADCINTSOCEN_CH14_(x)  (((x) << ADCINTSOCEN_CH14_Pos) & ADCINTSOCEN_CH14_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCEN     CH15
  *  @access     ADC->ADCINTSOCEN
  *  @brief      ADC interrupt trigger CH15 SOC enable
  */
#define ADCINTSOCEN_CH15_Pos  (15)
#define ADCINTSOCEN_CH15_Msk  (0x1U << ADCINTSOCEN_CH15_Pos)

#define ADCINTSOCEN_CH15_DISABLE  ((0x0U) << ADCINTSOCEN_CH15_Pos)
#define ADCINTSOCEN_CH15_ENABLE   ((0x1U) << ADCINTSOCEN_CH15_Pos)

#define ADCINTSOCEN_CH15_(x)  (((x) << ADCINTSOCEN_CH15_Pos) & ADCINTSOCEN_CH15_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH0
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH0 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH0_Pos  (0)
#define ADCINTSOCSEL_CH0_Msk  (0xFU << ADCINTSOCSEL_CH0_Pos)

#define ADCINTSOCSEL_CH0_(x)  (((x) << ADCINTSOCSEL_CH0_Pos) & ADCINTSOCSEL_CH0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH1
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH1 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH1_Pos  (4)
#define ADCINTSOCSEL_CH1_Msk  (0xFU << ADCINTSOCSEL_CH1_Pos)

#define ADCINTSOCSEL_CH1_(x)  (((x) << ADCINTSOCSEL_CH1_Pos) & ADCINTSOCSEL_CH1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH2
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH2 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH2_Pos  (8)
#define ADCINTSOCSEL_CH2_Msk  (0xFU << ADCINTSOCSEL_CH2_Pos)

#define ADCINTSOCSEL_CH2_(x)  (((x) << ADCINTSOCSEL_CH2_Pos) & ADCINTSOCSEL_CH2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH3
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH3 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH3_Pos  (12)
#define ADCINTSOCSEL_CH3_Msk  (0xFU << ADCINTSOCSEL_CH3_Pos)

#define ADCINTSOCSEL_CH3_(x)  (((x) << ADCINTSOCSEL_CH3_Pos) & ADCINTSOCSEL_CH3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH4
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH4 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH4_Pos  (16)
#define ADCINTSOCSEL_CH4_Msk  (0xFU << ADCINTSOCSEL_CH4_Pos)

#define ADCINTSOCSEL_CH4_(x)  (((x) << ADCINTSOCSEL_CH4_Pos) & ADCINTSOCSEL_CH4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH5
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH5 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH5_Pos  (20)
#define ADCINTSOCSEL_CH5_Msk  (0xFU << ADCINTSOCSEL_CH5_Pos)

#define ADCINTSOCSEL_CH5_(x)  (((x) << ADCINTSOCSEL_CH5_Pos) & ADCINTSOCSEL_CH5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH6
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH6 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH6_Pos  (24)
#define ADCINTSOCSEL_CH6_Msk  (0xFU << ADCINTSOCSEL_CH6_Pos)

#define ADCINTSOCSEL_CH6_(x)  (((x) << ADCINTSOCSEL_CH6_Pos) & ADCINTSOCSEL_CH6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCINTSOCSEL    CH7
  *  @access     ADC->ADCINTSOCSEL
  *  @brief      ADC CH7 SOC from which channel interrupt
  */
#define ADCINTSOCSEL_CH7_Pos  (28)
#define ADCINTSOCSEL_CH7_Msk  (0xFU << ADCINTSOCSEL_CH7_Pos)

#define ADCINTSOCSEL_CH7_(x)  (((x) << ADCINTSOCSEL_CH7_Pos) & ADCINTSOCSEL_CH7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCEXTSOCCTL    POL
  *  @access     ADC->ADCEXTSOCCTL
  *  @brief      EXTSOC polarity
  */
#define ADCEXTSOCCTL_POL_Pos  (0)
#define ADCEXTSOCCTL_POL_Msk  (0x1U << ADCEXTSOCCTL_POL_Pos)

#define ADCEXTSOCCTL_POL_ACTIVE_LOW   ((0x0U) << ADCEXTSOCCTL_POL_Pos)
#define ADCEXTSOCCTL_POL_ACTIVE_HIGH  ((0x1U) << ADCEXTSOCCTL_POL_Pos)

#define ADCEXTSOCCTL_POL_(x)  (((x) << ADCEXTSOCCTL_POL_Pos) & ADCEXTSOCCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCEXTSOCCTL    IOSEL
  *  @access     ADC->ADCEXTSOCCTL
  *  @brief      GPIO number for EXTSOC
  */
#define ADCEXTSOCCTL_IOSEL_Pos  (1)
#define ADCEXTSOCCTL_IOSEL_Msk  (0x3FU << ADCEXTSOCCTL_IOSEL_Pos)

#define ADCEXTSOCCTL_IOSEL_(x)  (((x) << ADCEXTSOCCTL_IOSEL_Pos) & ADCEXTSOCCTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        SAMPCNT
  *  @access     ADC->ADCCHCTL
  *  @brief      Sample window size,
  *              which is (SAMPCNT + 1) ADC clock cycles
  */
#define ADCCHCTL_SAMPCNT_Pos  (0)
#define ADCCHCTL_SAMPCNT_Msk  (0xFFU << ADCCHCTL_SAMPCNT_Pos)

#define ADCCHCTL_SAMPCNT_(x)  (((x) << ADCCHCTL_SAMPCNT_Pos) & ADCCHCTL_SAMPCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        CONVCNT
  *  @access     ADC->ADCCHCTL
  *  @brief      Conversion window size,
  *              which is (CONVCNT + 1) ADC clock cycles
  */
#define ADCCHCTL_CONVCNT_Pos  (8)
#define ADCCHCTL_CONVCNT_Msk  (0x1FU << ADCCHCTL_CONVCNT_Pos)

#define ADCCHCTL_CONVCNT_(x)  (((x) << ADCCHCTL_CONVCNT_Pos) & ADCCHCTL_CONVCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        FRACBIT
  *  @access     ADC->ADCCHCTL
  *  @brief      Keep 7 LSBs as fractional part to ADC result due to average
  */
#define ADCCHCTL_FRACBIT_Pos  (13)
#define ADCCHCTL_FRACBIT_Msk  (0x1U << ADCCHCTL_FRACBIT_Pos)

#define ADCCHCTL_FRACBIT_DISABLE  ((0x0U) << ADCCHCTL_FRACBIT_Pos)
#define ADCCHCTL_FRACBIT_ENABLE   ((0x1U) << ADCCHCTL_FRACBIT_Pos)

#define ADCCHCTL_FRACBIT_(x)  (((x) << ADCCHCTL_FRACBIT_Pos) & ADCCHCTL_FRACBIT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        AVGCNT
  *  @access     ADC->ADCCHCTL
  *  @brief      Select average counts for the ADC result
  */
#define ADCCHCTL_AVGCNT_Pos  (14)
#define ADCCHCTL_AVGCNT_Msk  (0x7U << ADCCHCTL_AVGCNT_Pos)

#define ADCCHCTL_AVGCNT_NO_AVG   ((0x000U) << ADCCHCTL_AVGCNT_Pos)
#define ADCCHCTL_AVGCNT_AVG_2    ((0x001U) << ADCCHCTL_AVGCNT_Pos)
#define ADCCHCTL_AVGCNT_AVG_4    ((0x002U) << ADCCHCTL_AVGCNT_Pos)
#define ADCCHCTL_AVGCNT_AVG_8    ((0x003U) << ADCCHCTL_AVGCNT_Pos)
#define ADCCHCTL_AVGCNT_AVG_16   ((0x004U) << ADCCHCTL_AVGCNT_Pos)
#define ADCCHCTL_AVGCNT_AVG_32   ((0x005U) << ADCCHCTL_AVGCNT_Pos)
#define ADCCHCTL_AVGCNT_AVG_64   ((0x006U) << ADCCHCTL_AVGCNT_Pos)
#define ADCCHCTL_AVGCNT_AVG_128  ((0x007U) << ADCCHCTL_AVGCNT_Pos)

#define ADCCHCTL_AVGCNT_(x)  (((x) << ADCCHCTL_AVGCNT_Pos) & ADCCHCTL_AVGCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        SHINSELP
  *  @access     ADC->ADCCHCTL
  *  @brief      Select positive input of selected SH
  */
#define ADCCHCTL_SHINSELP_Pos  (17)
#define ADCCHCTL_SHINSELP_Msk  (0xFU << ADCCHCTL_SHINSELP_Pos)

#define ADCCHCTL_SHINSELP_GND                 ((0x0000U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_TSENS_P             ((0x0001U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_DPGAP_OUT           ((0x0002U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ANA_IN0             ((0x0003U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ANA_IN2             ((0x0004U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ANA_IN4             ((0x0005U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_SPGA_OUT            ((0x0006U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ATEST               ((0x0007U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_DACBUF              ((0x0008U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_DAC0                ((0x0009U) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_VDD12               ((0x000AU) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_VDD33               ((0x000BU) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ANA_IN9_PHU         ((0x000CU) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ANA_IN10_PHV        ((0x000DU) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ANA_IN11_PHW        ((0x000EU) << ADCCHCTL_SHINSELP_Pos)
#define ADCCHCTL_SHINSELP_ANA_IN13_VBATM_DIV  ((0x000FU) << ADCCHCTL_SHINSELP_Pos)

#define ADCCHCTL_SHINSELP_(x)  (((x) << ADCCHCTL_SHINSELP_Pos) & ADCCHCTL_SHINSELP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        SHINSELN
  *  @access     ADC->ADCCHCTL
  *  @brief      Select negative input of selected SH
  */
#define ADCCHCTL_SHINSELN_Pos  (21)
#define ADCCHCTL_SHINSELN_Msk  (0xFU << ADCCHCTL_SHINSELN_Pos)

#define ADCCHCTL_SHINSELN_GND           ((0x0000U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_TSENS_N       ((0x0001U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_DPGAN_OUT     ((0x0002U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_ANA_IN1       ((0x0003U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_ANA_IN3       ((0x0004U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_ANA_IN5       ((0x0005U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_ANA_IN6       ((0x0006U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_ANA_IN7       ((0x0007U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_ANA_IN8       ((0x0008U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_DAC1          ((0x0009U) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_DAC2          ((0x000AU) << ADCCHCTL_SHINSELN_Pos)
#define ADCCHCTL_SHINSELN_ANA_IN12_PHC  ((0x000BU) << ADCCHCTL_SHINSELN_Pos)

#define ADCCHCTL_SHINSELN_(x)  (((x) << ADCCHCTL_SHINSELN_Pos) & ADCCHCTL_SHINSELN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        TRIGSEL
  *  @access     ADC->ADCCHCTL
  *  @brief      SOC trigger source, which will set bit in ADCSOCFLG
  *              It can be overridden by ADCINTSOCSEL
  */
#define ADCCHCTL_TRIGSEL_Pos  (25)
#define ADCCHCTL_TRIGSEL_Msk  (0xFU << ADCCHCTL_TRIGSEL_Pos)

#define ADCCHCTL_TRIGSEL_SOFTWARE  ((0x0000U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_TIMER0    ((0x0001U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_TIMER1    ((0x0002U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_TIMER2    ((0x0003U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_EXTSOC    ((0x0004U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM0SOCA  ((0x0005U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM0SOCB  ((0x0006U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM0SOCC  ((0x0007U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM1SOCA  ((0x0008U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM1SOCB  ((0x0009U) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM1SOCC  ((0x000AU) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM2SOCA  ((0x000BU) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM2SOCB  ((0x000CU) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM2SOCC  ((0x000DU) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM3SOCA  ((0x000EU) << ADCCHCTL_TRIGSEL_Pos)
#define ADCCHCTL_TRIGSEL_PWM3SOCB  ((0x000FU) << ADCCHCTL_TRIGSEL_Pos)

#define ADCCHCTL_TRIGSEL_(x)  (((x) << ADCCHCTL_TRIGSEL_Pos) & ADCCHCTL_TRIGSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCHCTL        SHSEL
  *  @access     ADC->ADCCHCTL
  *  @brief      SH select
  */
#define ADCCHCTL_SHSEL_Pos  (29)
#define ADCCHCTL_SHSEL_Msk  (0x1U << ADCCHCTL_SHSEL_Pos)

#define ADCCHCTL_SHSEL_DISABLE  ((0x0U) << ADCCHCTL_SHSEL_Pos)
#define ADCCHCTL_SHSEL_SH0      ((0x1U) << ADCCHCTL_SHSEL_Pos)

#define ADCCHCTL_SHSEL_(x)  (((x) << ADCCHCTL_SHSEL_Pos) & ADCCHCTL_SHSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCOFFSET       VAL
  *  @access     ADC->ADCOFFSET
  *  @brief      Offset trimming (signed number) for ADCRESULT0
  *              Should be within [-4096, 4095]
  */
#define ADCOFFSET_VAL_Pos  (0)
#define ADCOFFSET_VAL_Msk  (0xFFFFFFFFU << ADCOFFSET_VAL_Pos)

#define ADCOFFSET_VAL_(x)  (((x) << ADCOFFSET_VAL_Pos) & ADCOFFSET_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCGAIN         VAL
  *  @access     ADC->ADCGAIN
  *  @brief      Gain trimming (VAL/32768) for ADCRESULT0
  */
#define ADCGAIN_VAL_Pos  (0)
#define ADCGAIN_VAL_Msk  (0xFFFFU << ADCGAIN_VAL_Pos)

#define ADCGAIN_VAL_(x)  (((x) << ADCGAIN_VAL_Pos) & ADCGAIN_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             SHOFFSET        VAL
  *  @access     ADC->SHOFFSET
  *  @brief      Offset trimming (signed number) for SH0
  *              Should be within [-4096, 4095]
  */
#define SHOFFSET_VAL_Pos  (0)
#define SHOFFSET_VAL_Msk  (0xFFFFFFFFU << SHOFFSET_VAL_Pos)

#define SHOFFSET_VAL_(x)  (((x) << SHOFFSET_VAL_Pos) & SHOFFSET_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             SHGAIN          VAL
  *  @access     ADC->SHGAIN
  *  @brief      Gain trimming (VAL/32768) for SH0
  */
#define SHGAIN_VAL_Pos  (0)
#define SHGAIN_VAL_Msk  (0xFFFFU << SHGAIN_VAL_Pos)

#define SHGAIN_VAL_(x)  (((x) << SHGAIN_VAL_Pos) & SHGAIN_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             SHFLG           SHRDY0
  *  @access     ADC->SHFLG
  *  @brief      SHRAWCODE0 ready flag
  */
#define SHFLG_SHRDY0_Pos  (0)
#define SHFLG_SHRDY0_Msk  (0x1U << SHFLG_SHRDY0_Pos)

#define SHFLG_SHRDY0_NOT_READY  ((0x0U) << SHFLG_SHRDY0_Pos)
#define SHFLG_SHRDY0_READY      ((0x1U) << SHFLG_SHRDY0_Pos)

#define SHFLG_SHRDY0_(x)  (((x) << SHFLG_SHRDY0_Pos) & SHFLG_SHRDY0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             SHFLGCLR        SHRDY0
  *  @access     ADC->SHFLGCLR
  *  @brief      SHRAWCODE0 ready flag clear
  */
#define SHFLGCLR_SHRDY0_Pos  (0)
#define SHFLGCLR_SHRDY0_Msk  (0x1U << SHFLGCLR_SHRDY0_Pos)

#define SHFLGCLR_SHRDY0_NO_EFFECT  ((0x0U) << SHFLGCLR_SHRDY0_Pos)
#define SHFLGCLR_SHRDY0_CLEAR      ((0x1U) << SHFLGCLR_SHRDY0_Pos)

#define SHFLGCLR_SHRDY0_(x)  (((x) << SHFLGCLR_SHRDY0_Pos) & SHFLGCLR_SHRDY0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          REFEN
  *  @access     ADC->ADCCTL
  *  @brief      ADC reference enable
  */
#define ADCCTL_REFEN_Pos  (1)
#define ADCCTL_REFEN_Msk  (0x1U << ADCCTL_REFEN_Pos)

#define ADCCTL_REFEN_DISABLE  ((0x0U) << ADCCTL_REFEN_Pos)
#define ADCCTL_REFEN_ENABLE   ((0x1U) << ADCCTL_REFEN_Pos)

#define ADCCTL_REFEN_(x)  (((x) << ADCCTL_REFEN_Pos) & ADCCTL_REFEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          EN
  *  @access     ADC->ADCCTL
  *  @brief      ADC enable
  */
#define ADCCTL_EN_Pos  (2)
#define ADCCTL_EN_Msk  (0x1U << ADCCTL_EN_Pos)

#define ADCCTL_EN_DISABLE  ((0x0U) << ADCCTL_EN_Pos)
#define ADCCTL_EN_ENABLE   ((0x1U) << ADCCTL_EN_Pos)

#define ADCCTL_EN_(x)  (((x) << ADCCTL_EN_Pos) & ADCCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          RST
  *  @access     ADC->ADCCTL
  *  @brief      ADC digital finite state machine reset
  */
#define ADCCTL_RST_Pos  (3)
#define ADCCTL_RST_Msk  (0x1U << ADCCTL_RST_Pos)

#define ADCCTL_RST_NO_EFFECT  ((0x0U) << ADCCTL_RST_Pos)
#define ADCCTL_RST_RESET_ADC  ((0x1U) << ADCCTL_RST_Pos)

#define ADCCTL_RST_(x)  (((x) << ADCCTL_RST_Pos) & ADCCTL_RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          SHFRCP0
  *  @access     ADC->ADCCTL
  *  @brief      Force SH0 positive input connection
  */
#define ADCCTL_SHFRCP0_Pos  (4)
#define ADCCTL_SHFRCP0_Msk  (0x3U << ADCCTL_SHFRCP0_Pos)

#define ADCCTL_SHFRCP0_DISABLE     ((0x00U) << ADCCTL_SHFRCP0_Pos)
#define ADCCTL_SHFRCP0_FORCE_LOW   ((0x02U) << ADCCTL_SHFRCP0_Pos)
#define ADCCTL_SHFRCP0_FORCE_HIGH  ((0x03U) << ADCCTL_SHFRCP0_Pos)

#define ADCCTL_SHFRCP0_(x)  (((x) << ADCCTL_SHFRCP0_Pos) & ADCCTL_SHFRCP0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          SHFRCN0
  *  @access     ADC->ADCCTL
  *  @brief      Force SH0 negative input connection
  */
#define ADCCTL_SHFRCN0_Pos  (6)
#define ADCCTL_SHFRCN0_Msk  (0x3U << ADCCTL_SHFRCN0_Pos)

#define ADCCTL_SHFRCN0_DISABLE     ((0x00U) << ADCCTL_SHFRCN0_Pos)
#define ADCCTL_SHFRCN0_FORCE_LOW   ((0x02U) << ADCCTL_SHFRCN0_Pos)
#define ADCCTL_SHFRCN0_FORCE_HIGH  ((0x03U) << ADCCTL_SHFRCN0_Pos)

#define ADCCTL_SHFRCN0_(x)  (((x) << ADCCTL_SHFRCN0_Pos) & ADCCTL_SHFRCN0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN0
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 0 DMA enable
  */
#define ADCCTL_DMAEN0_Pos  (16)
#define ADCCTL_DMAEN0_Msk  (0x1U << ADCCTL_DMAEN0_Pos)

#define ADCCTL_DMAEN0_DISABLE  ((0x0U) << ADCCTL_DMAEN0_Pos)
#define ADCCTL_DMAEN0_ENABLE   ((0x1U) << ADCCTL_DMAEN0_Pos)

#define ADCCTL_DMAEN0_(x)  (((x) << ADCCTL_DMAEN0_Pos) & ADCCTL_DMAEN0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN1
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 1 DMA enable
  */
#define ADCCTL_DMAEN1_Pos  (17)
#define ADCCTL_DMAEN1_Msk  (0x1U << ADCCTL_DMAEN1_Pos)

#define ADCCTL_DMAEN1_DISABLE  ((0x0U) << ADCCTL_DMAEN1_Pos)
#define ADCCTL_DMAEN1_ENABLE   ((0x1U) << ADCCTL_DMAEN1_Pos)

#define ADCCTL_DMAEN1_(x)  (((x) << ADCCTL_DMAEN1_Pos) & ADCCTL_DMAEN1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN2
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 2 DMA enable
  */
#define ADCCTL_DMAEN2_Pos  (18)
#define ADCCTL_DMAEN2_Msk  (0x1U << ADCCTL_DMAEN2_Pos)

#define ADCCTL_DMAEN2_DISABLE  ((0x0U) << ADCCTL_DMAEN2_Pos)
#define ADCCTL_DMAEN2_ENABLE   ((0x1U) << ADCCTL_DMAEN2_Pos)

#define ADCCTL_DMAEN2_(x)  (((x) << ADCCTL_DMAEN2_Pos) & ADCCTL_DMAEN2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN3
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 3 DMA enable
  */
#define ADCCTL_DMAEN3_Pos  (19)
#define ADCCTL_DMAEN3_Msk  (0x1U << ADCCTL_DMAEN3_Pos)

#define ADCCTL_DMAEN3_DISABLE  ((0x0U) << ADCCTL_DMAEN3_Pos)
#define ADCCTL_DMAEN3_ENABLE   ((0x1U) << ADCCTL_DMAEN3_Pos)

#define ADCCTL_DMAEN3_(x)  (((x) << ADCCTL_DMAEN3_Pos) & ADCCTL_DMAEN3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN4
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 4 DMA enable
  */
#define ADCCTL_DMAEN4_Pos  (20)
#define ADCCTL_DMAEN4_Msk  (0x1U << ADCCTL_DMAEN4_Pos)

#define ADCCTL_DMAEN4_DISABLE  ((0x0U) << ADCCTL_DMAEN4_Pos)
#define ADCCTL_DMAEN4_ENABLE   ((0x1U) << ADCCTL_DMAEN4_Pos)

#define ADCCTL_DMAEN4_(x)  (((x) << ADCCTL_DMAEN4_Pos) & ADCCTL_DMAEN4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN5
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 5 DMA enable
  */
#define ADCCTL_DMAEN5_Pos  (21)
#define ADCCTL_DMAEN5_Msk  (0x1U << ADCCTL_DMAEN5_Pos)

#define ADCCTL_DMAEN5_DISABLE  ((0x0U) << ADCCTL_DMAEN5_Pos)
#define ADCCTL_DMAEN5_ENABLE   ((0x1U) << ADCCTL_DMAEN5_Pos)

#define ADCCTL_DMAEN5_(x)  (((x) << ADCCTL_DMAEN5_Pos) & ADCCTL_DMAEN5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN6
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 6 DMA enable
  */
#define ADCCTL_DMAEN6_Pos  (22)
#define ADCCTL_DMAEN6_Msk  (0x1U << ADCCTL_DMAEN6_Pos)

#define ADCCTL_DMAEN6_DISABLE  ((0x0U) << ADCCTL_DMAEN6_Pos)
#define ADCCTL_DMAEN6_ENABLE   ((0x1U) << ADCCTL_DMAEN6_Pos)

#define ADCCTL_DMAEN6_(x)  (((x) << ADCCTL_DMAEN6_Pos) & ADCCTL_DMAEN6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCCTL          DMAEN7
  *  @access     ADC->ADCCTL
  *  @brief      ADC result 7 DMA enable
  */
#define ADCCTL_DMAEN7_Pos  (23)
#define ADCCTL_DMAEN7_Msk  (0x1U << ADCCTL_DMAEN7_Pos)

#define ADCCTL_DMAEN7_DISABLE  ((0x0U) << ADCCTL_DMAEN7_Pos)
#define ADCCTL_DMAEN7_ENABLE   ((0x1U) << ADCCTL_DMAEN7_Pos)

#define ADCCTL_DMAEN7_(x)  (((x) << ADCCTL_DMAEN7_Pos) & ADCCTL_DMAEN7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             SHRAWCODE       VAL
  *  @access     ADC->SHRAWCODE
  *  @brief      Raw code (Signed number from -4096 to 4095) for SH0.
  */
#define SHRAWCODE_VAL_Pos  (0)
#define SHRAWCODE_VAL_Msk  (0xFFFFFFFFU << SHRAWCODE_VAL_Pos)

#define SHRAWCODE_VAL_(x)  (((x) << SHRAWCODE_VAL_Pos) & SHRAWCODE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCRESULT       VAL
  *  @access     ADC->ADCRESULT
  *  @brief      ADC result (Signed number from -4096 to 4095)
  */
#define ADCRESULT_VAL_Pos  (0)
#define ADCRESULT_VAL_Msk  (0xFFFFFFFFU << ADCRESULT_VAL_Pos)

#define ADCRESULT_VAL_(x)  (((x) << ADCRESULT_VAL_Pos) & ADCRESULT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPURESULT       VAL
  *  @access     ADC->PPURESULT
  *  @brief      Comparison result with extended sign bit
  */
#define PPURESULT_VAL_Pos  (0)
#define PPURESULT_VAL_Msk  (0xFFFFFFFFU << PPURESULT_VAL_Pos)

#define PPURESULT_VAL_(x)  (((x) << PPURESULT_VAL_Pos) & PPURESULT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUSOCDLY       VAL
  *  @access     ADC->PPUSOCDLY
  *  @brief      Delay from trigger to execution for SOC selected by PPUCTL[n].SOCSEL
  */
#define PPUSOCDLY_VAL_Pos  (0)
#define PPUSOCDLY_VAL_Msk  (0xFFFFFFFFU << PPUSOCDLY_VAL_Pos)

#define PPUSOCDLY_VAL_(x)  (((x) << PPUSOCDLY_VAL_Pos) & PPUSOCDLY_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPURAWIF        TZUV
  *  @access     ADC->PPURAWIF
  *  @brief      Latched under-voltage event flag
  */
#define PPURAWIF_TZUV_Pos  (0)
#define PPURAWIF_TZUV_Msk  (0x1U << PPURAWIF_TZUV_Pos)

#define PPURAWIF_TZUV_NOT_OCCUR  ((0x0U) << PPURAWIF_TZUV_Pos)
#define PPURAWIF_TZUV_OCCUR      ((0x1U) << PPURAWIF_TZUV_Pos)

#define PPURAWIF_TZUV_(x)  (((x) << PPURAWIF_TZUV_Pos) & PPURAWIF_TZUV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPURAWIF        TZOV
  *  @access     ADC->PPURAWIF
  *  @brief      Latched over-voltage event flag
  */
#define PPURAWIF_TZOV_Pos  (1)
#define PPURAWIF_TZOV_Msk  (0x1U << PPURAWIF_TZOV_Pos)

#define PPURAWIF_TZOV_NOT_OCCUR  ((0x0U) << PPURAWIF_TZOV_Pos)
#define PPURAWIF_TZOV_OCCUR      ((0x1U) << PPURAWIF_TZOV_Pos)

#define PPURAWIF_TZOV_(x)  (((x) << PPURAWIF_TZOV_Pos) & PPURAWIF_TZOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPURAWIF        XZRO
  *  @access     ADC->PPURAWIF
  *  @brief      Latched zero-cross event flag
  */
#define PPURAWIF_XZRO_Pos  (2)
#define PPURAWIF_XZRO_Msk  (0x1U << PPURAWIF_XZRO_Pos)

#define PPURAWIF_XZRO_NOT_OCCUR  ((0x0U) << PPURAWIF_XZRO_Pos)
#define PPURAWIF_XZRO_OCCUR      ((0x1U) << PPURAWIF_XZRO_Pos)

#define PPURAWIF_XZRO_(x)  (((x) << PPURAWIF_XZRO_Pos) & PPURAWIF_XZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIF           TZUV
  *  @access     ADC->PPUIF
  *  @brief      Latched PPU under-voltage interrupt flag
  */
#define PPUIF_TZUV_Pos  (0)
#define PPUIF_TZUV_Msk  (0x1U << PPUIF_TZUV_Pos)

#define PPUIF_TZUV_NOT_OCCUR  ((0x0U) << PPUIF_TZUV_Pos)
#define PPUIF_TZUV_OCCUR      ((0x1U) << PPUIF_TZUV_Pos)

#define PPUIF_TZUV_(x)  (((x) << PPUIF_TZUV_Pos) & PPUIF_TZUV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIF           TZOV
  *  @access     ADC->PPUIF
  *  @brief      Latched PPU over-voltage interrupt flag
  */
#define PPUIF_TZOV_Pos  (1)
#define PPUIF_TZOV_Msk  (0x1U << PPUIF_TZOV_Pos)

#define PPUIF_TZOV_NOT_OCCUR  ((0x0U) << PPUIF_TZOV_Pos)
#define PPUIF_TZOV_OCCUR      ((0x1U) << PPUIF_TZOV_Pos)

#define PPUIF_TZOV_(x)  (((x) << PPUIF_TZOV_Pos) & PPUIF_TZOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIF           XZRO
  *  @access     ADC->PPUIF
  *  @brief      Latched PPU zero-cross interrupt flag
  */
#define PPUIF_XZRO_Pos  (2)
#define PPUIF_XZRO_Msk  (0x1U << PPUIF_XZRO_Pos)

#define PPUIF_XZRO_NOT_OCCUR  ((0x0U) << PPUIF_XZRO_Pos)
#define PPUIF_XZRO_OCCUR      ((0x1U) << PPUIF_XZRO_Pos)

#define PPUIF_XZRO_(x)  (((x) << PPUIF_XZRO_Pos) & PPUIF_XZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIF           INT
  *  @access     ADC->PPUIF
  *  @brief      PPU interrupt flag
  */
#define PPUIF_INT_Pos  (3)
#define PPUIF_INT_Msk  (0x1U << PPUIF_INT_Pos)

#define PPUIF_INT_NOT_OCCUR  ((0x0U) << PPUIF_INT_Pos)
#define PPUIF_INT_OCCUR      ((0x1U) << PPUIF_INT_Pos)

#define PPUIF_INT_(x)  (((x) << PPUIF_INT_Pos) & PPUIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIC           TZUV
  *  @access     ADC->PPUIC
  *  @brief      PPU under-voltage interrupt clear
  */
#define PPUIC_TZUV_Pos  (0)
#define PPUIC_TZUV_Msk  (0x1U << PPUIC_TZUV_Pos)

#define PPUIC_TZUV_NO_EFFECT  ((0x0U) << PPUIC_TZUV_Pos)
#define PPUIC_TZUV_CLEAR      ((0x1U) << PPUIC_TZUV_Pos)

#define PPUIC_TZUV_(x)  (((x) << PPUIC_TZUV_Pos) & PPUIC_TZUV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIC           TZOV
  *  @access     ADC->PPUIC
  *  @brief      PPU over-voltage interrupt clear
  */
#define PPUIC_TZOV_Pos  (1)
#define PPUIC_TZOV_Msk  (0x1U << PPUIC_TZOV_Pos)

#define PPUIC_TZOV_NO_EFFECT  ((0x0U) << PPUIC_TZOV_Pos)
#define PPUIC_TZOV_CLEAR      ((0x1U) << PPUIC_TZOV_Pos)

#define PPUIC_TZOV_(x)  (((x) << PPUIC_TZOV_Pos) & PPUIC_TZOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIC           XZRO
  *  @access     ADC->PPUIC
  *  @brief      PPU zero-cross interrupt clear
  */
#define PPUIC_XZRO_Pos  (2)
#define PPUIC_XZRO_Msk  (0x1U << PPUIC_XZRO_Pos)

#define PPUIC_XZRO_NO_EFFECT  ((0x0U) << PPUIC_XZRO_Pos)
#define PPUIC_XZRO_CLEAR      ((0x1U) << PPUIC_XZRO_Pos)

#define PPUIC_XZRO_(x)  (((x) << PPUIC_XZRO_Pos) & PPUIC_XZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIC           INT
  *  @access     ADC->PPUIC
  *  @brief      PPU interrupt flag clear
  */
#define PPUIC_INT_Pos  (3)
#define PPUIC_INT_Msk  (0x1U << PPUIC_INT_Pos)

#define PPUIC_INT_NO_EFFECT  ((0x0U) << PPUIC_INT_Pos)
#define PPUIC_INT_CLEAR      ((0x1U) << PPUIC_INT_Pos)

#define PPUIC_INT_(x)  (((x) << PPUIC_INT_Pos) & PPUIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIE           TZUV
  *  @access     ADC->PPUIE
  *  @brief      Enable under-voltage event as interrupt source
  */
#define PPUIE_TZUV_Pos  (0)
#define PPUIE_TZUV_Msk  (0x1U << PPUIE_TZUV_Pos)

#define PPUIE_TZUV_DISABLE  ((0x0U) << PPUIE_TZUV_Pos)
#define PPUIE_TZUV_ENABLE   ((0x1U) << PPUIE_TZUV_Pos)

#define PPUIE_TZUV_(x)  (((x) << PPUIE_TZUV_Pos) & PPUIE_TZUV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIE           TZOV
  *  @access     ADC->PPUIE
  *  @brief      Enable over-voltage event as interrupt source
  */
#define PPUIE_TZOV_Pos  (1)
#define PPUIE_TZOV_Msk  (0x1U << PPUIE_TZOV_Pos)

#define PPUIE_TZOV_DISABLE  ((0x0U) << PPUIE_TZOV_Pos)
#define PPUIE_TZOV_ENABLE   ((0x1U) << PPUIE_TZOV_Pos)

#define PPUIE_TZOV_(x)  (((x) << PPUIE_TZOV_Pos) & PPUIE_TZOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUIE           XZRO
  *  @access     ADC->PPUIE
  *  @brief      Enable zero-cross event as interrupt source
  */
#define PPUIE_XZRO_Pos  (2)
#define PPUIE_XZRO_Msk  (0x1U << PPUIE_XZRO_Pos)

#define PPUIE_XZRO_DISABLE  ((0x0U) << PPUIE_XZRO_Pos)
#define PPUIE_XZRO_ENABLE   ((0x1U) << PPUIE_XZRO_Pos)

#define PPUIE_XZRO_(x)  (((x) << PPUIE_XZRO_Pos) & PPUIE_XZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUTZE          TZUV
  *  @access     ADC->PPUTZE
  *  @brief      Enable under-voltage event as trip-zone event
  */
#define PPUTZE_TZUV_Pos  (0)
#define PPUTZE_TZUV_Msk  (0x1U << PPUTZE_TZUV_Pos)

#define PPUTZE_TZUV_DISABLE  ((0x0U) << PPUTZE_TZUV_Pos)
#define PPUTZE_TZUV_ENABLE   ((0x1U) << PPUTZE_TZUV_Pos)

#define PPUTZE_TZUV_(x)  (((x) << PPUTZE_TZUV_Pos) & PPUTZE_TZUV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUTZE          TZOV
  *  @access     ADC->PPUTZE
  *  @brief      Enable over-voltage event as trip-zone event
  */
#define PPUTZE_TZOV_Pos  (1)
#define PPUTZE_TZOV_Msk  (0x1U << PPUTZE_TZOV_Pos)

#define PPUTZE_TZOV_DISABLE  ((0x0U) << PPUTZE_TZOV_Pos)
#define PPUTZE_TZOV_ENABLE   ((0x1U) << PPUTZE_TZOV_Pos)

#define PPUTZE_TZOV_(x)  (((x) << PPUTZE_TZOV_Pos) & PPUTZE_TZOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUTZE          XZRO
  *  @access     ADC->PPUTZE
  *  @brief      Enable zero-cross event as trip-zone event
  */
#define PPUTZE_XZRO_Pos  (2)
#define PPUTZE_XZRO_Msk  (0x1U << PPUTZE_XZRO_Pos)

#define PPUTZE_XZRO_DISABLE  ((0x0U) << PPUTZE_XZRO_Pos)
#define PPUTZE_XZRO_ENABLE   ((0x1U) << PPUTZE_XZRO_Pos)

#define PPUTZE_XZRO_(x)  (((x) << PPUTZE_XZRO_Pos) & PPUTZE_XZRO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUCTL          EN
  *  @access     ADC->PPUCTL
  *  @brief      PPU enable
  */
#define PPUCTL_EN_Pos  (0)
#define PPUCTL_EN_Msk  (0x1U << PPUCTL_EN_Pos)

#define PPUCTL_EN_DISABLE  ((0x0U) << PPUCTL_EN_Pos)
#define PPUCTL_EN_ENABLE   ((0x1U) << PPUCTL_EN_Pos)

#define PPUCTL_EN_(x)  (((x) << PPUCTL_EN_Pos) & PPUCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUCTL          CBCEN
  *  @access     ADC->PPUCTL
  *  @brief      PPU cycle-by-cycle clear enable
  */
#define PPUCTL_CBCEN_Pos  (1)
#define PPUCTL_CBCEN_Msk  (0x1U << PPUCTL_CBCEN_Pos)

#define PPUCTL_CBCEN_DISABLE  ((0x0U) << PPUCTL_CBCEN_Pos)
#define PPUCTL_CBCEN_ENABLE   ((0x1U) << PPUCTL_CBCEN_Pos)

#define PPUCTL_CBCEN_(x)  (((x) << PPUCTL_CBCEN_Pos) & PPUCTL_CBCEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUCTL          SOCSEL
  *  @access     ADC->PPUCTL
  *  @brief      Select the SOC signal to derive its self PPUSOCDLY[n]
  */
#define PPUCTL_SOCSEL_Pos  (2)
#define PPUCTL_SOCSEL_Msk  (0xFU << PPUCTL_SOCSEL_Pos)

#define PPUCTL_SOCSEL_(x)  (((x) << PPUCTL_SOCSEL_Pos) & PPUCTL_SOCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUCTL          DATASEL
  *  @access     ADC->PPUCTL
  *  @brief      Select the ADC result to compare with the reference
  */
#define PPUCTL_DATASEL_Pos  (6)
#define PPUCTL_DATASEL_Msk  (0xFU << PPUCTL_DATASEL_Pos)

#define PPUCTL_DATASEL_(x)  (((x) << PPUCTL_DATASEL_Pos) & PPUCTL_DATASEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUCTL          POL
  *  @access     ADC->PPUCTL
  *  @brief      Polarity for comparison
  */
#define PPUCTL_POL_Pos  (10)
#define PPUCTL_POL_Msk  (0x1U << PPUCTL_POL_Pos)

#define PPUCTL_POL_REF_MINUS_CODE  ((0x0U) << PPUCTL_POL_Pos)
#define PPUCTL_POL_CODE_MINUS_REF  ((0x1U) << PPUCTL_POL_Pos)

#define PPUCTL_POL_(x)  (((x) << PPUCTL_POL_Pos) & PPUCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUREF          VAL
  *  @access     ADC->PPUREF
  *  @brief      Reference with extended sign bit
  *              Should be within [-4096, 4095]
  */
#define PPUREF_VAL_Pos  (0)
#define PPUREF_VAL_Msk  (0xFFFFFFFFU << PPUREF_VAL_Pos)

#define PPUREF_VAL_(x)  (((x) << PPUREF_VAL_Pos) & PPUREF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUTHL          VAL
  *  @access     ADC->PPUTHL
  *  @brief      Signed trip-zone threshold within [-8192, 8191]
  */
#define PPUTHL_VAL_Pos  (0)
#define PPUTHL_VAL_Msk  (0xFFFFFFFFU << PPUTHL_VAL_Pos)

#define PPUTHL_VAL_(x)  (((x) << PPUTHL_VAL_Pos) & PPUTHL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             PPUTHH          VAL
  *  @access     ADC->PPUTHH
  *  @brief      Signed trip-zone threshold within [-8192, 8191]
  */
#define PPUTHH_VAL_Pos  (0)
#define PPUTHH_VAL_Msk  (0xFFFFFFFFU << PPUTHH_VAL_Pos)

#define PPUTHH_VAL_(x)  (((x) << PPUTHH_VAL_Pos) & PPUTHH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             TSENSCTL        EN
  *  @access     ADC->TSENSCTL
  *  @brief      Temperature sensor enable
  */
#define TSENSCTL_EN_Pos  (0)
#define TSENSCTL_EN_Msk  (0x1U << TSENSCTL_EN_Pos)

#define TSENSCTL_EN_DISABLE  ((0x0U) << TSENSCTL_EN_Pos)
#define TSENSCTL_EN_ENABLE   ((0x1U) << TSENSCTL_EN_Pos)

#define TSENSCTL_EN_(x)  (((x) << TSENSCTL_EN_Pos) & TSENSCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             TSENSCTL        OUTINV
  *  @access     ADC->TSENSCTL
  *  @brief      Invert T-Sensor output 0 and output 1
  */
#define TSENSCTL_OUTINV_Pos  (1)
#define TSENSCTL_OUTINV_Msk  (0x1U << TSENSCTL_OUTINV_Pos)

#define TSENSCTL_OUTINV_DISABLE  ((0x0U) << TSENSCTL_OUTINV_Pos)
#define TSENSCTL_OUTINV_ENABLE   ((0x1U) << TSENSCTL_OUTINV_Pos)

#define TSENSCTL_OUTINV_(x)  (((x) << TSENSCTL_OUTINV_Pos) & TSENSCTL_OUTINV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             TSENSCTL        SWAPBJT
  *  @access     ADC->TSENSCTL
  *  @brief      Swap BJT
  */
#define TSENSCTL_SWAPBJT_Pos  (2)
#define TSENSCTL_SWAPBJT_Msk  (0x1U << TSENSCTL_SWAPBJT_Pos)

#define TSENSCTL_SWAPBJT_NOT_SWAP  ((0x0U) << TSENSCTL_SWAPBJT_Pos)
#define TSENSCTL_SWAPBJT_SWAP      ((0x1U) << TSENSCTL_SWAPBJT_Pos)

#define TSENSCTL_SWAPBJT_(x)  (((x) << TSENSCTL_SWAPBJT_Pos) & TSENSCTL_SWAPBJT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             TSENSCTL        DEMSEL
  *  @access     ADC->TSENSCTL
  *  @brief      Current branch select for dynamic element match
  */
#define TSENSCTL_DEMSEL_Pos  (3)
#define TSENSCTL_DEMSEL_Msk  (0xFU << TSENSCTL_DEMSEL_Pos)

#define TSENSCTL_DEMSEL_(x)  (((x) << TSENSCTL_DEMSEL_Pos) & TSENSCTL_DEMSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ADC             ADCREGKEY       KEY
  *  @access     ADC->ADCREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected ADC registers
  */
#define ADCREGKEY_KEY_Pos  (0)
#define ADCREGKEY_KEY_Msk  (0xFFFFFFFFU << ADCREGKEY_KEY_Pos)

#define ADCREGKEY_KEY_(x)  (((x) << ADCREGKEY_KEY_Pos) & ADCREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      COMP:                                                                 */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPFLTOUT      COMPL
  *  @access     COMP->COMPFLTOUT
  *  @brief      COMPL filtered output without latch
  */
#define COMPFLTOUT_COMPL_Pos  (0)
#define COMPFLTOUT_COMPL_Msk  (0x1U << COMPFLTOUT_COMPL_Pos)

#define COMPFLTOUT_COMPL_LOW   ((0x0U) << COMPFLTOUT_COMPL_Pos)
#define COMPFLTOUT_COMPL_HIGH  ((0x1U) << COMPFLTOUT_COMPL_Pos)

#define COMPFLTOUT_COMPL_(x)  (((x) << COMPFLTOUT_COMPL_Pos) & COMPFLTOUT_COMPL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPFLTOUT      COMPH
  *  @access     COMP->COMPFLTOUT
  *  @brief      COMPH filtered output without latch
  */
#define COMPFLTOUT_COMPH_Pos  (1)
#define COMPFLTOUT_COMPH_Msk  (0x1U << COMPFLTOUT_COMPH_Pos)

#define COMPFLTOUT_COMPH_LOW   ((0x0U) << COMPFLTOUT_COMPH_Pos)
#define COMPFLTOUT_COMPH_HIGH  ((0x1U) << COMPFLTOUT_COMPH_Pos)

#define COMPFLTOUT_COMPH_(x)  (((x) << COMPFLTOUT_COMPH_Pos) & COMPFLTOUT_COMPH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPFLG         COMPL
  *  @access     COMP->COMPFLG
  *  @brief      Latched COMPFLTOUT[COMPL]
  */
#define COMPFLG_COMPL_Pos  (0)
#define COMPFLG_COMPL_Msk  (0x1U << COMPFLG_COMPL_Pos)

#define COMPFLG_COMPL_LOW   ((0x0U) << COMPFLG_COMPL_Pos)
#define COMPFLG_COMPL_HIGH  ((0x1U) << COMPFLG_COMPL_Pos)

#define COMPFLG_COMPL_(x)  (((x) << COMPFLG_COMPL_Pos) & COMPFLG_COMPL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPFLG         COMPH
  *  @access     COMP->COMPFLG
  *  @brief      Latched COMPFLTOUT[COMPH]
  */
#define COMPFLG_COMPH_Pos  (1)
#define COMPFLG_COMPH_Msk  (0x1U << COMPFLG_COMPH_Pos)

#define COMPFLG_COMPH_LOW   ((0x0U) << COMPFLG_COMPH_Pos)
#define COMPFLG_COMPH_HIGH  ((0x1U) << COMPFLG_COMPH_Pos)

#define COMPFLG_COMPH_(x)  (((x) << COMPFLG_COMPH_Pos) & COMPFLG_COMPH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPFLGCLR      COMPL
  *  @access     COMP->COMPFLGCLR
  *  @brief      Latched COMPL flag clear
  */
#define COMPFLGCLR_COMPL_Pos  (0)
#define COMPFLGCLR_COMPL_Msk  (0x1U << COMPFLGCLR_COMPL_Pos)

#define COMPFLGCLR_COMPL_NO_EFFECT  ((0x0U) << COMPFLGCLR_COMPL_Pos)
#define COMPFLGCLR_COMPL_CLEAR      ((0x1U) << COMPFLGCLR_COMPL_Pos)

#define COMPFLGCLR_COMPL_(x)  (((x) << COMPFLGCLR_COMPL_Pos) & COMPFLGCLR_COMPL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPFLGCLR      COMPH
  *  @access     COMP->COMPFLGCLR
  *  @brief      Latched COMPH flag clear
  */
#define COMPFLGCLR_COMPH_Pos  (1)
#define COMPFLGCLR_COMPH_Msk  (0x1U << COMPFLGCLR_COMPH_Pos)

#define COMPFLGCLR_COMPH_NO_EFFECT  ((0x0U) << COMPFLGCLR_COMPH_Pos)
#define COMPFLGCLR_COMPH_CLEAR      ((0x1U) << COMPFLGCLR_COMPH_Pos)

#define COMPFLGCLR_COMPH_(x)  (((x) << COMPFLGCLR_COMPH_Pos) & COMPFLGCLR_COMPH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPCTL         ENL
  *  @access     COMP->COMPCTL
  *  @brief      COMP0L enable
  */
#define COMPCTL_ENL_Pos  (0)
#define COMPCTL_ENL_Msk  (0x1U << COMPCTL_ENL_Pos)

#define COMPCTL_ENL_DISABLE  ((0x0U) << COMPCTL_ENL_Pos)
#define COMPCTL_ENL_ENABLE   ((0x1U) << COMPCTL_ENL_Pos)

#define COMPCTL_ENL_(x)  (((x) << COMPCTL_ENL_Pos) & COMPCTL_ENL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPCTL         ENH
  *  @access     COMP->COMPCTL
  *  @brief      COMP0H enable
  */
#define COMPCTL_ENH_Pos  (1)
#define COMPCTL_ENH_Msk  (0x1U << COMPCTL_ENH_Pos)

#define COMPCTL_ENH_DISABLE  ((0x0U) << COMPCTL_ENH_Pos)
#define COMPCTL_ENH_ENABLE   ((0x1U) << COMPCTL_ENH_Pos)

#define COMPCTL_ENH_(x)  (((x) << COMPCTL_ENH_Pos) & COMPCTL_ENH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPCTL         HYSTSEL
  *  @access     COMP->COMPCTL
  *  @brief      COMP0 hysteresis select
  */
#define COMPCTL_HYSTSEL_Pos  (2)
#define COMPCTL_HYSTSEL_Msk  (0x3U << COMPCTL_HYSTSEL_Pos)

#define COMPCTL_HYSTSEL_0_MV   ((0x00U) << COMPCTL_HYSTSEL_Pos)
#define COMPCTL_HYSTSEL_12_MV  ((0x01U) << COMPCTL_HYSTSEL_Pos)
#define COMPCTL_HYSTSEL_24_MV  ((0x02U) << COMPCTL_HYSTSEL_Pos)
#define COMPCTL_HYSTSEL_36_MV  ((0x03U) << COMPCTL_HYSTSEL_Pos)

#define COMPCTL_HYSTSEL_(x)  (((x) << COMPCTL_HYSTSEL_Pos) & COMPCTL_HYSTSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPCTL         INSEL
  *  @access     COMP->COMPCTL
  *  @brief      COMP0 input select
  */
#define COMPCTL_INSEL_Pos  (4)
#define COMPCTL_INSEL_Msk  (0x7U << COMPCTL_INSEL_Pos)

#define COMPCTL_INSEL_DPGAN_OUT  ((0x000U) << COMPCTL_INSEL_Pos)
#define COMPCTL_INSEL_DPGAP_OUT  ((0x001U) << COMPCTL_INSEL_Pos)
#define COMPCTL_INSEL_SPGA_OUT   ((0x002U) << COMPCTL_INSEL_Pos)
#define COMPCTL_INSEL_ANA_IN0    ((0x003U) << COMPCTL_INSEL_Pos)
#define COMPCTL_INSEL_ANA_IN1    ((0x004U) << COMPCTL_INSEL_Pos)
#define COMPCTL_INSEL_ANA_IN2    ((0x005U) << COMPCTL_INSEL_Pos)
#define COMPCTL_INSEL_ANA_IN3    ((0x006U) << COMPCTL_INSEL_Pos)
#define COMPCTL_INSEL_ANA_IN4    ((0x007U) << COMPCTL_INSEL_Pos)

#define COMPCTL_INSEL_(x)  (((x) << COMPCTL_INSEL_Pos) & COMPCTL_INSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPCTL         SYNCSEL
  *  @access     COMP->COMPCTL
  *  @brief      Select the synchronous output from PWM[SYNCSEL]
  */
#define COMPCTL_SYNCSEL_Pos  (8)
#define COMPCTL_SYNCSEL_Msk  (0x3U << COMPCTL_SYNCSEL_Pos)

#define COMPCTL_SYNCSEL_PWM0SYNCO  ((0x00U) << COMPCTL_SYNCSEL_Pos)
#define COMPCTL_SYNCSEL_PWM1SYNCO  ((0x01U) << COMPCTL_SYNCSEL_Pos)
#define COMPCTL_SYNCSEL_PWM2SYNCO  ((0x02U) << COMPCTL_SYNCSEL_Pos)
#define COMPCTL_SYNCSEL_PWM3SYNCO  ((0x03U) << COMPCTL_SYNCSEL_Pos)

#define COMPCTL_SYNCSEL_(x)  (((x) << COMPCTL_SYNCSEL_Pos) & COMPCTL_SYNCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        SEL4PWM
  *  @access     COMP->COMPLCTL
  *  @brief      COMP0L output select for PWM
  */
#define COMPLCTL_SEL4PWM_Pos  (0)
#define COMPLCTL_SEL4PWM_Msk  (0x7U << COMPLCTL_SEL4PWM_Pos)

#define COMPLCTL_SEL4PWM_ORIGINAL                     ((0x000U) << COMPLCTL_SEL4PWM_Pos)
#define COMPLCTL_SEL4PWM_SYNC                         ((0x001U) << COMPLCTL_SEL4PWM_Pos)
#define COMPLCTL_SEL4PWM_FILTRED                      ((0x002U) << COMPLCTL_SEL4PWM_Pos)
#define COMPLCTL_SEL4PWM_LATCHED                      ((0x003U) << COMPLCTL_SEL4PWM_Pos)
#define COMPLCTL_SEL4PWM_ORIGINAL_OR_LATCHED          ((0x004U) << COMPLCTL_SEL4PWM_Pos)
#define COMPLCTL_SEL4PWM_SYNC_OR_LATCHED              ((0x005U) << COMPLCTL_SEL4PWM_Pos)
#define COMPLCTL_SEL4PWM_FILTERED_OR_LATCHED          ((0x006U) << COMPLCTL_SEL4PWM_Pos)
#define COMPLCTL_SEL4PWM_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << COMPLCTL_SEL4PWM_Pos)

#define COMPLCTL_SEL4PWM_(x)  (((x) << COMPLCTL_SEL4PWM_Pos) & COMPLCTL_SEL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        POL4PWM
  *  @access     COMP->COMPLCTL
  *  @brief      COMP0L output polarity for PWM
  */
#define COMPLCTL_POL4PWM_Pos  (3)
#define COMPLCTL_POL4PWM_Msk  (0x1U << COMPLCTL_POL4PWM_Pos)

#define COMPLCTL_POL4PWM_ACTIVE_LOW   ((0x0U) << COMPLCTL_POL4PWM_Pos)
#define COMPLCTL_POL4PWM_ACTIVE_HIGH  ((0x1U) << COMPLCTL_POL4PWM_Pos)

#define COMPLCTL_POL4PWM_(x)  (((x) << COMPLCTL_POL4PWM_Pos) & COMPLCTL_POL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        SEL4GPIO
  *  @access     COMP->COMPLCTL
  *  @brief      COMP0L output select for GPIO
  */
#define COMPLCTL_SEL4GPIO_Pos  (4)
#define COMPLCTL_SEL4GPIO_Msk  (0x7U << COMPLCTL_SEL4GPIO_Pos)

#define COMPLCTL_SEL4GPIO_ORIGINAL                     ((0x000U) << COMPLCTL_SEL4GPIO_Pos)
#define COMPLCTL_SEL4GPIO_SYNC                         ((0x001U) << COMPLCTL_SEL4GPIO_Pos)
#define COMPLCTL_SEL4GPIO_FILTRED                      ((0x002U) << COMPLCTL_SEL4GPIO_Pos)
#define COMPLCTL_SEL4GPIO_LATCHED                      ((0x003U) << COMPLCTL_SEL4GPIO_Pos)
#define COMPLCTL_SEL4GPIO_ORIGINAL_OR_LATCHED          ((0x004U) << COMPLCTL_SEL4GPIO_Pos)
#define COMPLCTL_SEL4GPIO_SYNC_OR_LATCHED              ((0x005U) << COMPLCTL_SEL4GPIO_Pos)
#define COMPLCTL_SEL4GPIO_FILTERED_OR_LATCHED          ((0x006U) << COMPLCTL_SEL4GPIO_Pos)
#define COMPLCTL_SEL4GPIO_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << COMPLCTL_SEL4GPIO_Pos)

#define COMPLCTL_SEL4GPIO_(x)  (((x) << COMPLCTL_SEL4GPIO_Pos) & COMPLCTL_SEL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        POL4GPIO
  *  @access     COMP->COMPLCTL
  *  @brief      COMP0L output polarity for GPIO
  */
#define COMPLCTL_POL4GPIO_Pos  (7)
#define COMPLCTL_POL4GPIO_Msk  (0x1U << COMPLCTL_POL4GPIO_Pos)

#define COMPLCTL_POL4GPIO_ACTIVE_LOW   ((0x0U) << COMPLCTL_POL4GPIO_Pos)
#define COMPLCTL_POL4GPIO_ACTIVE_HIGH  ((0x1U) << COMPLCTL_POL4GPIO_Pos)

#define COMPLCTL_POL4GPIO_(x)  (((x) << COMPLCTL_POL4GPIO_Pos) & COMPLCTL_POL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        SYNCCLREN
  *  @access     COMP->COMPLCTL
  *  @brief      Enable latched COMP0L status clear by PWMSYNC
  */
#define COMPLCTL_SYNCCLREN_Pos  (8)
#define COMPLCTL_SYNCCLREN_Msk  (0x1U << COMPLCTL_SYNCCLREN_Pos)

#define COMPLCTL_SYNCCLREN_DISABLE  ((0x0U) << COMPLCTL_SYNCCLREN_Pos)
#define COMPLCTL_SYNCCLREN_ENABLE   ((0x1U) << COMPLCTL_SYNCCLREN_Pos)

#define COMPLCTL_SYNCCLREN_(x)  (((x) << COMPLCTL_SYNCCLREN_Pos) & COMPLCTL_SYNCCLREN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        FLTDIV
  *  @access     COMP->COMPLCTL
  *  @brief      Filter's clock dividing ratio is (FLTDIV+1)
  */
#define COMPLCTL_FLTDIV_Pos  (9)
#define COMPLCTL_FLTDIV_Msk  (0x3FFU << COMPLCTL_FLTDIV_Pos)

#define COMPLCTL_FLTDIV_(x)  (((x) << COMPLCTL_FLTDIV_Pos) & COMPLCTL_FLTDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        FLTWIN
  *  @access     COMP->COMPLCTL
  *  @brief      Filter's window size is (FLTWIN+1) samples
  */
#define COMPLCTL_FLTWIN_Pos  (19)
#define COMPLCTL_FLTWIN_Msk  (0x1FU << COMPLCTL_FLTWIN_Pos)

#define COMPLCTL_FLTWIN_(x)  (((x) << COMPLCTL_FLTWIN_Pos) & COMPLCTL_FLTWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        FLTTH
  *  @access     COMP->COMPLCTL
  *  @brief      Filter's threshold is (FLTTH+1) 1's/0's for output to toggle
  */
#define COMPLCTL_FLTTH_Pos  (24)
#define COMPLCTL_FLTTH_Msk  (0x1FU << COMPLCTL_FLTTH_Pos)

#define COMPLCTL_FLTTH_(x)  (((x) << COMPLCTL_FLTTH_Pos) & COMPLCTL_FLTTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPLCTL        FLTRST
  *  @access     COMP->COMPLCTL
  *  @brief      Reset all registers in the filter with the input
  */
#define COMPLCTL_FLTRST_Pos  (29)
#define COMPLCTL_FLTRST_Msk  (0x1U << COMPLCTL_FLTRST_Pos)

#define COMPLCTL_FLTRST_NO_EFFECT  ((0x0U) << COMPLCTL_FLTRST_Pos)
#define COMPLCTL_FLTRST_RESET      ((0x1U) << COMPLCTL_FLTRST_Pos)

#define COMPLCTL_FLTRST_(x)  (((x) << COMPLCTL_FLTRST_Pos) & COMPLCTL_FLTRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        SEL4PWM
  *  @access     COMP->COMPHCTL
  *  @brief      COMP0H output select for PWM
  */
#define COMPHCTL_SEL4PWM_Pos  (0)
#define COMPHCTL_SEL4PWM_Msk  (0x7U << COMPHCTL_SEL4PWM_Pos)

#define COMPHCTL_SEL4PWM_ORIGINAL                     ((0x000U) << COMPHCTL_SEL4PWM_Pos)
#define COMPHCTL_SEL4PWM_SYNC                         ((0x001U) << COMPHCTL_SEL4PWM_Pos)
#define COMPHCTL_SEL4PWM_FILTRED                      ((0x002U) << COMPHCTL_SEL4PWM_Pos)
#define COMPHCTL_SEL4PWM_LATCHED                      ((0x003U) << COMPHCTL_SEL4PWM_Pos)
#define COMPHCTL_SEL4PWM_ORIGINAL_OR_LATCHED          ((0x004U) << COMPHCTL_SEL4PWM_Pos)
#define COMPHCTL_SEL4PWM_SYNC_OR_LATCHED              ((0x005U) << COMPHCTL_SEL4PWM_Pos)
#define COMPHCTL_SEL4PWM_FILTERED_OR_LATCHED          ((0x006U) << COMPHCTL_SEL4PWM_Pos)
#define COMPHCTL_SEL4PWM_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << COMPHCTL_SEL4PWM_Pos)

#define COMPHCTL_SEL4PWM_(x)  (((x) << COMPHCTL_SEL4PWM_Pos) & COMPHCTL_SEL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        POL4PWM
  *  @access     COMP->COMPHCTL
  *  @brief      COMP0H output polarity for PWM
  */
#define COMPHCTL_POL4PWM_Pos  (3)
#define COMPHCTL_POL4PWM_Msk  (0x1U << COMPHCTL_POL4PWM_Pos)

#define COMPHCTL_POL4PWM_ACTIVE_LOW   ((0x0U) << COMPHCTL_POL4PWM_Pos)
#define COMPHCTL_POL4PWM_ACTIVE_HIGH  ((0x1U) << COMPHCTL_POL4PWM_Pos)

#define COMPHCTL_POL4PWM_(x)  (((x) << COMPHCTL_POL4PWM_Pos) & COMPHCTL_POL4PWM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        SEL4GPIO
  *  @access     COMP->COMPHCTL
  *  @brief      COMP0H output select for GPIO
  */
#define COMPHCTL_SEL4GPIO_Pos  (4)
#define COMPHCTL_SEL4GPIO_Msk  (0x7U << COMPHCTL_SEL4GPIO_Pos)

#define COMPHCTL_SEL4GPIO_ORIGINAL                     ((0x000U) << COMPHCTL_SEL4GPIO_Pos)
#define COMPHCTL_SEL4GPIO_SYNC                         ((0x001U) << COMPHCTL_SEL4GPIO_Pos)
#define COMPHCTL_SEL4GPIO_FILTRED                      ((0x002U) << COMPHCTL_SEL4GPIO_Pos)
#define COMPHCTL_SEL4GPIO_LATCHED                      ((0x003U) << COMPHCTL_SEL4GPIO_Pos)
#define COMPHCTL_SEL4GPIO_ORIGINAL_OR_LATCHED          ((0x004U) << COMPHCTL_SEL4GPIO_Pos)
#define COMPHCTL_SEL4GPIO_SYNC_OR_LATCHED              ((0x005U) << COMPHCTL_SEL4GPIO_Pos)
#define COMPHCTL_SEL4GPIO_FILTERED_OR_LATCHED          ((0x006U) << COMPHCTL_SEL4GPIO_Pos)
#define COMPHCTL_SEL4GPIO_ORIGINAL_OR_SYNC_OR_LATCHED  ((0x007U) << COMPHCTL_SEL4GPIO_Pos)

#define COMPHCTL_SEL4GPIO_(x)  (((x) << COMPHCTL_SEL4GPIO_Pos) & COMPHCTL_SEL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        POL4GPIO
  *  @access     COMP->COMPHCTL
  *  @brief      COMP0H output polarity for GPIO
  */
#define COMPHCTL_POL4GPIO_Pos  (7)
#define COMPHCTL_POL4GPIO_Msk  (0x1U << COMPHCTL_POL4GPIO_Pos)

#define COMPHCTL_POL4GPIO_ACTIVE_LOW   ((0x0U) << COMPHCTL_POL4GPIO_Pos)
#define COMPHCTL_POL4GPIO_ACTIVE_HIGH  ((0x1U) << COMPHCTL_POL4GPIO_Pos)

#define COMPHCTL_POL4GPIO_(x)  (((x) << COMPHCTL_POL4GPIO_Pos) & COMPHCTL_POL4GPIO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        SYNCCLREN
  *  @access     COMP->COMPHCTL
  *  @brief      Enable latched COMP0H status clear by PWMSYNC
  */
#define COMPHCTL_SYNCCLREN_Pos  (8)
#define COMPHCTL_SYNCCLREN_Msk  (0x1U << COMPHCTL_SYNCCLREN_Pos)

#define COMPHCTL_SYNCCLREN_DISABLE  ((0x0U) << COMPHCTL_SYNCCLREN_Pos)
#define COMPHCTL_SYNCCLREN_ENABLE   ((0x1U) << COMPHCTL_SYNCCLREN_Pos)

#define COMPHCTL_SYNCCLREN_(x)  (((x) << COMPHCTL_SYNCCLREN_Pos) & COMPHCTL_SYNCCLREN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        FLTDIV
  *  @access     COMP->COMPHCTL
  *  @brief      Filter's clock dividing ratio is (FLTDIV+1)
  */
#define COMPHCTL_FLTDIV_Pos  (9)
#define COMPHCTL_FLTDIV_Msk  (0x3FFU << COMPHCTL_FLTDIV_Pos)

#define COMPHCTL_FLTDIV_(x)  (((x) << COMPHCTL_FLTDIV_Pos) & COMPHCTL_FLTDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        FLTWIN
  *  @access     COMP->COMPHCTL
  *  @brief      Filter's window size is (FLTWIN+1) samples
  */
#define COMPHCTL_FLTWIN_Pos  (19)
#define COMPHCTL_FLTWIN_Msk  (0x1FU << COMPHCTL_FLTWIN_Pos)

#define COMPHCTL_FLTWIN_(x)  (((x) << COMPHCTL_FLTWIN_Pos) & COMPHCTL_FLTWIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        FLTTH
  *  @access     COMP->COMPHCTL
  *  @brief      Filter's threshold is (FLTTH+1) 1's/0's for output to toggle
  */
#define COMPHCTL_FLTTH_Pos  (24)
#define COMPHCTL_FLTTH_Msk  (0x1FU << COMPHCTL_FLTTH_Pos)

#define COMPHCTL_FLTTH_(x)  (((x) << COMPHCTL_FLTTH_Pos) & COMPHCTL_FLTTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPHCTL        FLTRST
  *  @access     COMP->COMPHCTL
  *  @brief      Reset all registers in the filter with the input
  */
#define COMPHCTL_FLTRST_Pos  (29)
#define COMPHCTL_FLTRST_Msk  (0x1U << COMPHCTL_FLTRST_Pos)

#define COMPHCTL_FLTRST_NO_EFFECT  ((0x0U) << COMPHCTL_FLTRST_Pos)
#define COMPHCTL_FLTRST_RESET      ((0x1U) << COMPHCTL_FLTRST_Pos)

#define COMPHCTL_FLTRST_(x)  (((x) << COMPHCTL_FLTRST_Pos) & COMPHCTL_FLTRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CTL         EN
  *  @access     COMP->DAC0CTL
  *  @brief      DAC enable
  */
#define DAC0CTL_EN_Pos  (0)
#define DAC0CTL_EN_Msk  (0x1U << DAC0CTL_EN_Pos)

#define DAC0CTL_EN_DISABLE  ((0x0U) << DAC0CTL_EN_Pos)
#define DAC0CTL_EN_ENABLE   ((0x1U) << DAC0CTL_EN_Pos)

#define DAC0CTL_EN_(x)  (((x) << DAC0CTL_EN_Pos) & DAC0CTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CTL         CODELOAD
  *  @access     COMP->DAC0CTL
  *  @brief      DAC code load mode
  */
#define DAC0CTL_CODELOAD_Pos  (1)
#define DAC0CTL_CODELOAD_Msk  (0x1U << DAC0CTL_CODELOAD_Pos)

#define DAC0CTL_CODELOAD_SHADOW_MODE  ((0x0U) << DAC0CTL_CODELOAD_Pos)
#define DAC0CTL_CODELOAD_DIRECT_MODE  ((0x1U) << DAC0CTL_CODELOAD_Pos)

#define DAC0CTL_CODELOAD_(x)  (((x) << DAC0CTL_CODELOAD_Pos) & DAC0CTL_CODELOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CTL         SYNCSEL
  *  @access     COMP->DAC0CTL
  *  @brief      PWMSYNC is selected from PWM[SYNCSEL]
  */
#define DAC0CTL_SYNCSEL_Pos  (2)
#define DAC0CTL_SYNCSEL_Msk  (0x3U << DAC0CTL_SYNCSEL_Pos)

#define DAC0CTL_SYNCSEL_PWM0SYNCO  ((0x00U) << DAC0CTL_SYNCSEL_Pos)
#define DAC0CTL_SYNCSEL_PWM1SYNCO  ((0x01U) << DAC0CTL_SYNCSEL_Pos)
#define DAC0CTL_SYNCSEL_PWM2SYNCO  ((0x02U) << DAC0CTL_SYNCSEL_Pos)
#define DAC0CTL_SYNCSEL_PWM3SYNCO  ((0x03U) << DAC0CTL_SYNCSEL_Pos)

#define DAC0CTL_SYNCSEL_(x)  (((x) << DAC0CTL_SYNCSEL_Pos) & DAC0CTL_SYNCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CTL         RAMPEN
  *  @access     COMP->DAC0CTL
  *  @brief      DAC Ramping enable
  */
#define DAC0CTL_RAMPEN_Pos  (6)
#define DAC0CTL_RAMPEN_Msk  (0x1U << DAC0CTL_RAMPEN_Pos)

#define DAC0CTL_RAMPEN_DISABLE  ((0x0U) << DAC0CTL_RAMPEN_Pos)
#define DAC0CTL_RAMPEN_ENABLE   ((0x1U) << DAC0CTL_RAMPEN_Pos)

#define DAC0CTL_RAMPEN_(x)  (((x) << DAC0CTL_RAMPEN_Pos) & DAC0CTL_RAMPEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CTL         RAMPLOAD
  *  @access     COMP->DAC0CTL
  *  @brief      DAC Ramp load mode
  */
#define DAC0CTL_RAMPLOAD_Pos  (7)
#define DAC0CTL_RAMPLOAD_Msk  (0x1U << DAC0CTL_RAMPLOAD_Pos)

#define DAC0CTL_RAMPLOAD_SHADOW_MODE  ((0x0U) << DAC0CTL_RAMPLOAD_Pos)
#define DAC0CTL_RAMPLOAD_DIRECT_MODE  ((0x1U) << DAC0CTL_RAMPLOAD_Pos)

#define DAC0CTL_RAMPLOAD_(x)  (((x) << DAC0CTL_RAMPLOAD_Pos) & DAC0CTL_RAMPLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CTL         DBGRUN
  *  @access     COMP->DAC0CTL
  *  @brief      Behavior on CPU halted or lockup
  */
#define DAC0CTL_DBGRUN_Pos  (14)
#define DAC0CTL_DBGRUN_Msk  (0x3U << DAC0CTL_DBGRUN_Pos)

#define DAC0CTL_DBGRUN_STOP_IMMEDIATELY  ((0x00U) << DAC0CTL_DBGRUN_Pos)
#define DAC0CTL_DBGRUN_STOP_AT_PWMSYNC   ((0x01U) << DAC0CTL_DBGRUN_Pos)
#define DAC0CTL_DBGRUN_KEEP_RUN          ((0x02U) << DAC0CTL_DBGRUN_Pos)

#define DAC0CTL_DBGRUN_(x)  (((x) << DAC0CTL_DBGRUN_Pos) & DAC0CTL_DBGRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CODE        VAL
  *  @access     COMP->DAC0CODE
  *  @brief      DAC code
  *              When DAC0CTL[CODELOAD]=0, write to this field only affects the shadow code.
  *              When DAC0CTL[CODELOAD]=1, write to this field affects both the shadow code and
  *              the active code.
  */
#define DAC0CODE_VAL_Pos  (0)
#define DAC0CODE_VAL_Msk  (0x3FFU << DAC0CODE_VAL_Pos)

#define DAC0CODE_VAL_(x)  (((x) << DAC0CODE_VAL_Pos) & DAC0CODE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC0CODEA       VAL
  *  @access     COMP->DAC0CODEA
  *  @brief      Active DAC code
  */
#define DAC0CODEA_VAL_Pos  (0)
#define DAC0CODEA_VAL_Msk  (0x3FFU << DAC0CODEA_VAL_Pos)

#define DAC0CODEA_VAL_(x)  (((x) << DAC0CODEA_VAL_Pos) & DAC0CODEA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP0DLY        VAL
  *  @access     COMP->RAMP0DLY
  *  @brief      Delay from PWMSYNC to start of ramping
  */
#define RAMP0DLY_VAL_Pos  (0)
#define RAMP0DLY_VAL_Msk  (0xFFFFU << RAMP0DLY_VAL_Pos)

#define RAMP0DLY_VAL_(x)  (((x) << RAMP0DLY_VAL_Pos) & RAMP0DLY_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP0DLYA       VAL
  *  @access     COMP->RAMP0DLYA
  *  @brief      Delay from PWMSYNC to start of ramping
  */
#define RAMP0DLYA_VAL_Pos  (0)
#define RAMP0DLYA_VAL_Msk  (0xFFFFU << RAMP0DLYA_VAL_Pos)

#define RAMP0DLYA_VAL_(x)  (((x) << RAMP0DLYA_VAL_Pos) & RAMP0DLYA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP0DEC        VAL
  *  @access     COMP->RAMP0DEC
  *  @brief      Step size for decremental ramping
  */
#define RAMP0DEC_VAL_Pos  (0)
#define RAMP0DEC_VAL_Msk  (0xFFFFU << RAMP0DEC_VAL_Pos)

#define RAMP0DEC_VAL_(x)  (((x) << RAMP0DEC_VAL_Pos) & RAMP0DEC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP0DECA       VAL
  *  @access     COMP->RAMP0DECA
  *  @brief      Step size for decremental ramping
  */
#define RAMP0DECA_VAL_Pos  (0)
#define RAMP0DECA_VAL_Msk  (0xFFFFU << RAMP0DECA_VAL_Pos)

#define RAMP0DECA_VAL_(x)  (((x) << RAMP0DECA_VAL_Pos) & RAMP0DECA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP0MAX        VAL
  *  @access     COMP->RAMP0MAX
  *  @brief      Reload value when reset ramping
  */
#define RAMP0MAX_VAL_Pos  (0)
#define RAMP0MAX_VAL_Msk  (0xFFFFU << RAMP0MAX_VAL_Pos)

#define RAMP0MAX_VAL_(x)  (((x) << RAMP0MAX_VAL_Pos) & RAMP0MAX_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP0MAXA       VAL
  *  @access     COMP->RAMP0MAXA
  *  @brief      Reload value when reset ramping
  */
#define RAMP0MAXA_VAL_Pos  (0)
#define RAMP0MAXA_VAL_Msk  (0xFFFFU << RAMP0MAXA_VAL_Pos)

#define RAMP0MAXA_VAL_(x)  (((x) << RAMP0MAXA_VAL_Pos) & RAMP0MAXA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP0CNT        VAL
  *  @access     COMP->RAMP0CNT
  *  @brief      Count number of RAMP0
  */
#define RAMP0CNT_VAL_Pos  (0)
#define RAMP0CNT_VAL_Msk  (0xFFFFU << RAMP0CNT_VAL_Pos)

#define RAMP0CNT_VAL_(x)  (((x) << RAMP0CNT_VAL_Pos) & RAMP0CNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CTL         EN
  *  @access     COMP->DAC1CTL
  *  @brief      DAC enable
  */
#define DAC1CTL_EN_Pos  (0)
#define DAC1CTL_EN_Msk  (0x1U << DAC1CTL_EN_Pos)

#define DAC1CTL_EN_DISABLE  ((0x0U) << DAC1CTL_EN_Pos)
#define DAC1CTL_EN_ENABLE   ((0x1U) << DAC1CTL_EN_Pos)

#define DAC1CTL_EN_(x)  (((x) << DAC1CTL_EN_Pos) & DAC1CTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CTL         CODELOAD
  *  @access     COMP->DAC1CTL
  *  @brief      DAC code load mode
  */
#define DAC1CTL_CODELOAD_Pos  (1)
#define DAC1CTL_CODELOAD_Msk  (0x1U << DAC1CTL_CODELOAD_Pos)

#define DAC1CTL_CODELOAD_SHADOW_MODE  ((0x0U) << DAC1CTL_CODELOAD_Pos)
#define DAC1CTL_CODELOAD_DIRECT_MODE  ((0x1U) << DAC1CTL_CODELOAD_Pos)

#define DAC1CTL_CODELOAD_(x)  (((x) << DAC1CTL_CODELOAD_Pos) & DAC1CTL_CODELOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CTL         SYNCSEL
  *  @access     COMP->DAC1CTL
  *  @brief      PWMSYNC is selected from PWM.SYNCSEL
  */
#define DAC1CTL_SYNCSEL_Pos  (2)
#define DAC1CTL_SYNCSEL_Msk  (0x3U << DAC1CTL_SYNCSEL_Pos)

#define DAC1CTL_SYNCSEL_PWM0SYNCO  ((0x00U) << DAC1CTL_SYNCSEL_Pos)
#define DAC1CTL_SYNCSEL_PWM1SYNCO  ((0x01U) << DAC1CTL_SYNCSEL_Pos)
#define DAC1CTL_SYNCSEL_PWM2SYNCO  ((0x02U) << DAC1CTL_SYNCSEL_Pos)
#define DAC1CTL_SYNCSEL_PWM3SYNCO  ((0x03U) << DAC1CTL_SYNCSEL_Pos)

#define DAC1CTL_SYNCSEL_(x)  (((x) << DAC1CTL_SYNCSEL_Pos) & DAC1CTL_SYNCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CTL         RAMPEN
  *  @access     COMP->DAC1CTL
  *  @brief      DAC Ramping enable
  */
#define DAC1CTL_RAMPEN_Pos  (6)
#define DAC1CTL_RAMPEN_Msk  (0x1U << DAC1CTL_RAMPEN_Pos)

#define DAC1CTL_RAMPEN_DISABLE  ((0x0U) << DAC1CTL_RAMPEN_Pos)
#define DAC1CTL_RAMPEN_ENABLE   ((0x1U) << DAC1CTL_RAMPEN_Pos)

#define DAC1CTL_RAMPEN_(x)  (((x) << DAC1CTL_RAMPEN_Pos) & DAC1CTL_RAMPEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CTL         RAMPLOAD
  *  @access     COMP->DAC1CTL
  *  @brief      DAC Ramp load mode
  */
#define DAC1CTL_RAMPLOAD_Pos  (7)
#define DAC1CTL_RAMPLOAD_Msk  (0x1U << DAC1CTL_RAMPLOAD_Pos)

#define DAC1CTL_RAMPLOAD_SHADOW_MODE  ((0x0U) << DAC1CTL_RAMPLOAD_Pos)
#define DAC1CTL_RAMPLOAD_DIRECT_MODE  ((0x1U) << DAC1CTL_RAMPLOAD_Pos)

#define DAC1CTL_RAMPLOAD_(x)  (((x) << DAC1CTL_RAMPLOAD_Pos) & DAC1CTL_RAMPLOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CTL         DBGRUN
  *  @access     COMP->DAC1CTL
  *  @brief      Behavior on CPU halted or lockup
  */
#define DAC1CTL_DBGRUN_Pos  (14)
#define DAC1CTL_DBGRUN_Msk  (0x3U << DAC1CTL_DBGRUN_Pos)

#define DAC1CTL_DBGRUN_STOP_IMMEDIATELY  ((0x00U) << DAC1CTL_DBGRUN_Pos)
#define DAC1CTL_DBGRUN_STOP_AT_PWMSYNC   ((0x01U) << DAC1CTL_DBGRUN_Pos)
#define DAC1CTL_DBGRUN_KEEP_RUN          ((0x02U) << DAC1CTL_DBGRUN_Pos)

#define DAC1CTL_DBGRUN_(x)  (((x) << DAC1CTL_DBGRUN_Pos) & DAC1CTL_DBGRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CODE        VAL
  *  @access     COMP->DAC1CODE
  *  @brief      DAC code
  *              When DAC1CTL.CODELOAD=0, write to this field only affects the shadow code.
  *              When DAC1CTL.CODELOAD=1, write to this field affects both the shadow code and
  *              the active code.
  */
#define DAC1CODE_VAL_Pos  (0)
#define DAC1CODE_VAL_Msk  (0x3FFU << DAC1CODE_VAL_Pos)

#define DAC1CODE_VAL_(x)  (((x) << DAC1CODE_VAL_Pos) & DAC1CODE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC1CODEA       VAL
  *  @access     COMP->DAC1CODEA
  *  @brief      Active DAC code
  */
#define DAC1CODEA_VAL_Pos  (0)
#define DAC1CODEA_VAL_Msk  (0x3FFU << DAC1CODEA_VAL_Pos)

#define DAC1CODEA_VAL_(x)  (((x) << DAC1CODEA_VAL_Pos) & DAC1CODEA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP1DLY        VAL
  *  @access     COMP->RAMP1DLY
  *  @brief      Delay from PWMSYNC to start of ramping
  */
#define RAMP1DLY_VAL_Pos  (0)
#define RAMP1DLY_VAL_Msk  (0xFFFFU << RAMP1DLY_VAL_Pos)

#define RAMP1DLY_VAL_(x)  (((x) << RAMP1DLY_VAL_Pos) & RAMP1DLY_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP1DLYA       VAL
  *  @access     COMP->RAMP1DLYA
  *  @brief      Delay from PWMSYNC to start of ramping
  */
#define RAMP1DLYA_VAL_Pos  (0)
#define RAMP1DLYA_VAL_Msk  (0xFFFFU << RAMP1DLYA_VAL_Pos)

#define RAMP1DLYA_VAL_(x)  (((x) << RAMP1DLYA_VAL_Pos) & RAMP1DLYA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP1DEC        VAL
  *  @access     COMP->RAMP1DEC
  *  @brief      Step size for decremental ramping
  */
#define RAMP1DEC_VAL_Pos  (0)
#define RAMP1DEC_VAL_Msk  (0xFFFFU << RAMP1DEC_VAL_Pos)

#define RAMP1DEC_VAL_(x)  (((x) << RAMP1DEC_VAL_Pos) & RAMP1DEC_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP1DECA       VAL
  *  @access     COMP->RAMP1DECA
  *  @brief      Step size for decremental ramping
  */
#define RAMP1DECA_VAL_Pos  (0)
#define RAMP1DECA_VAL_Msk  (0xFFFFU << RAMP1DECA_VAL_Pos)

#define RAMP1DECA_VAL_(x)  (((x) << RAMP1DECA_VAL_Pos) & RAMP1DECA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP1MAX        VAL
  *  @access     COMP->RAMP1MAX
  *  @brief      Reload value when reset ramping
  */
#define RAMP1MAX_VAL_Pos  (0)
#define RAMP1MAX_VAL_Msk  (0xFFFFU << RAMP1MAX_VAL_Pos)

#define RAMP1MAX_VAL_(x)  (((x) << RAMP1MAX_VAL_Pos) & RAMP1MAX_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP1MAXA       VAL
  *  @access     COMP->RAMP1MAXA
  *  @brief      Reload value when reset ramping
  */
#define RAMP1MAXA_VAL_Pos  (0)
#define RAMP1MAXA_VAL_Msk  (0xFFFFU << RAMP1MAXA_VAL_Pos)

#define RAMP1MAXA_VAL_(x)  (((x) << RAMP1MAXA_VAL_Pos) & RAMP1MAXA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            RAMP1CNT        VAL
  *  @access     COMP->RAMP1CNT
  *  @brief      Count number of RAMP1
  */
#define RAMP1CNT_VAL_Pos  (0)
#define RAMP1CNT_VAL_Msk  (0xFFFFU << RAMP1CNT_VAL_Pos)

#define RAMP1CNT_VAL_(x)  (((x) << RAMP1CNT_VAL_Pos) & RAMP1CNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC2CTL         EN
  *  @access     COMP->DAC2CTL
  *  @brief      DAC enable
  */
#define DAC2CTL_EN_Pos  (0)
#define DAC2CTL_EN_Msk  (0x1U << DAC2CTL_EN_Pos)

#define DAC2CTL_EN_DISABLE  ((0x0U) << DAC2CTL_EN_Pos)
#define DAC2CTL_EN_ENABLE   ((0x1U) << DAC2CTL_EN_Pos)

#define DAC2CTL_EN_(x)  (((x) << DAC2CTL_EN_Pos) & DAC2CTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC2CTL         CODELOAD
  *  @access     COMP->DAC2CTL
  *  @brief      DAC code load mode
  */
#define DAC2CTL_CODELOAD_Pos  (1)
#define DAC2CTL_CODELOAD_Msk  (0x1U << DAC2CTL_CODELOAD_Pos)

#define DAC2CTL_CODELOAD_SHADOW_MODE  ((0x0U) << DAC2CTL_CODELOAD_Pos)
#define DAC2CTL_CODELOAD_DIRECT_MODE  ((0x1U) << DAC2CTL_CODELOAD_Pos)

#define DAC2CTL_CODELOAD_(x)  (((x) << DAC2CTL_CODELOAD_Pos) & DAC2CTL_CODELOAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC2CTL         SYNCSEL
  *  @access     COMP->DAC2CTL
  *  @brief      PWM synchronous output select
  */
#define DAC2CTL_SYNCSEL_Pos  (2)
#define DAC2CTL_SYNCSEL_Msk  (0x3U << DAC2CTL_SYNCSEL_Pos)

#define DAC2CTL_SYNCSEL_PWM0SYNCO  ((0x00U) << DAC2CTL_SYNCSEL_Pos)
#define DAC2CTL_SYNCSEL_PWM1SYNCO  ((0x01U) << DAC2CTL_SYNCSEL_Pos)
#define DAC2CTL_SYNCSEL_PWM2SYNCO  ((0x02U) << DAC2CTL_SYNCSEL_Pos)
#define DAC2CTL_SYNCSEL_PWM3SYNCO  ((0x03U) << DAC2CTL_SYNCSEL_Pos)

#define DAC2CTL_SYNCSEL_(x)  (((x) << DAC2CTL_SYNCSEL_Pos) & DAC2CTL_SYNCSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC2CODE        VAL
  *  @access     COMP->DAC2CODE
  *  @brief      DAC code
  *              When DAC2CTL.CODELOAD=0, write to this field only affects the shadow code.
  *              When DAC2CTL.CODELOAD=1, write to this field affects both the shadow code and
  *              the active code.
  */
#define DAC2CODE_VAL_Pos  (0)
#define DAC2CODE_VAL_Msk  (0x3FFU << DAC2CODE_VAL_Pos)

#define DAC2CODE_VAL_(x)  (((x) << DAC2CODE_VAL_Pos) & DAC2CODE_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DAC2CODEA       VAL
  *  @access     COMP->DAC2CODEA
  *  @brief      Active DAC code
  */
#define DAC2CODEA_VAL_Pos  (0)
#define DAC2CODEA_VAL_Msk  (0x3FFU << DAC2CODEA_VAL_Pos)

#define DAC2CODEA_VAL_(x)  (((x) << DAC2CODEA_VAL_Pos) & DAC2CODEA_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DACBUFCTL       EN
  *  @access     COMP->DACBUFCTL
  *  @brief      DAC buffer enable
  */
#define DACBUFCTL_EN_Pos  (0)
#define DACBUFCTL_EN_Msk  (0x1U << DACBUFCTL_EN_Pos)

#define DACBUFCTL_EN_DISABLE  ((0x0U) << DACBUFCTL_EN_Pos)
#define DACBUFCTL_EN_ENABLE   ((0x1U) << DACBUFCTL_EN_Pos)

#define DACBUFCTL_EN_(x)  (((x) << DACBUFCTL_EN_Pos) & DACBUFCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DACBUFCTL       OE
  *  @access     COMP->DACBUFCTL
  *  @brief      Enable output to GPIO
  */
#define DACBUFCTL_OE_Pos  (1)
#define DACBUFCTL_OE_Msk  (0x1U << DACBUFCTL_OE_Pos)

#define DACBUFCTL_OE_DISABLE  ((0x0U) << DACBUFCTL_OE_Pos)
#define DACBUFCTL_OE_ENABLE   ((0x1U) << DACBUFCTL_OE_Pos)

#define DACBUFCTL_OE_(x)  (((x) << DACBUFCTL_OE_Pos) & DACBUFCTL_OE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            DACBUFCTL       INSEL
  *  @access     COMP->DACBUFCTL
  *  @brief      Select the DAC module
  */
#define DACBUFCTL_INSEL_Pos  (2)
#define DACBUFCTL_INSEL_Msk  (0x1U << DACBUFCTL_INSEL_Pos)

#define DACBUFCTL_INSEL_DAC0  ((0x0U) << DACBUFCTL_INSEL_Pos)
#define DACBUFCTL_INSEL_DAC1  ((0x1U) << DACBUFCTL_INSEL_Pos)

#define DACBUFCTL_INSEL_(x)  (((x) << DACBUFCTL_INSEL_Pos) & DACBUFCTL_INSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              COMP            COMPREGKEY      KEY
  *  @access     COMP->COMPREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected COMP registers
  */
#define COMPREGKEY_KEY_Pos  (0)
#define COMPREGKEY_KEY_Msk  (0xFFFFFFFFU << COMPREGKEY_KEY_Pos)

#define COMPREGKEY_KEY_(x)  (((x) << COMPREGKEY_KEY_Pos) & COMPREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      PGA:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             DPGACTL         EN
  *  @access     PGA->DPGACTL
  *  @brief      PGA enable
  */
#define DPGACTL_EN_Pos  (0)
#define DPGACTL_EN_Msk  (0x1U << DPGACTL_EN_Pos)

#define DPGACTL_EN_DISABLE  ((0x0U) << DPGACTL_EN_Pos)
#define DPGACTL_EN_ENABLE   ((0x1U) << DPGACTL_EN_Pos)

#define DPGACTL_EN_(x)  (((x) << DPGACTL_EN_Pos) & DPGACTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             DPGACTL         BYP
  *  @access     PGA->DPGACTL
  *  @brief      PGA bypass
  */
#define DPGACTL_BYP_Pos  (1)
#define DPGACTL_BYP_Msk  (0x1U << DPGACTL_BYP_Pos)

#define DPGACTL_BYP_DISABLE  ((0x0U) << DPGACTL_BYP_Pos)
#define DPGACTL_BYP_ENABLE   ((0x1U) << DPGACTL_BYP_Pos)

#define DPGACTL_BYP_(x)  (((x) << DPGACTL_BYP_Pos) & DPGACTL_BYP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             DPGACTL         GAIN
  *  @access     PGA->DPGACTL
  *  @brief      PGA differential gain
  */
#define DPGACTL_GAIN_Pos  (2)
#define DPGACTL_GAIN_Msk  (0x7U << DPGACTL_GAIN_Pos)

#define DPGACTL_GAIN_2X   ((0x000U) << DPGACTL_GAIN_Pos)
#define DPGACTL_GAIN_4X   ((0x001U) << DPGACTL_GAIN_Pos)
#define DPGACTL_GAIN_8X   ((0x002U) << DPGACTL_GAIN_Pos)
#define DPGACTL_GAIN_16X  ((0x003U) << DPGACTL_GAIN_Pos)
#define DPGACTL_GAIN_24X  ((0x004U) << DPGACTL_GAIN_Pos)
#define DPGACTL_GAIN_32X  ((0x005U) << DPGACTL_GAIN_Pos)
#define DPGACTL_GAIN_48X  ((0x006U) << DPGACTL_GAIN_Pos)
#define DPGACTL_GAIN_64X  ((0x007U) << DPGACTL_GAIN_Pos)

#define DPGACTL_GAIN_(x)  (((x) << DPGACTL_GAIN_Pos) & DPGACTL_GAIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             DPGACTL         PUIP
  *  @access     PGA->DPGACTL
  *  @brief      PGA positive input pull-up enable
  */
#define DPGACTL_PUIP_Pos  (5)
#define DPGACTL_PUIP_Msk  (0x1U << DPGACTL_PUIP_Pos)

#define DPGACTL_PUIP_DISABLE  ((0x0U) << DPGACTL_PUIP_Pos)
#define DPGACTL_PUIP_ENABLE   ((0x1U) << DPGACTL_PUIP_Pos)

#define DPGACTL_PUIP_(x)  (((x) << DPGACTL_PUIP_Pos) & DPGACTL_PUIP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             DPGACTL         PUIN
  *  @access     PGA->DPGACTL
  *  @brief      PGA negative input pull-up enable
  */
#define DPGACTL_PUIN_Pos  (6)
#define DPGACTL_PUIN_Msk  (0x1U << DPGACTL_PUIN_Pos)

#define DPGACTL_PUIN_DISABLE  ((0x0U) << DPGACTL_PUIN_Pos)
#define DPGACTL_PUIN_ENABLE   ((0x1U) << DPGACTL_PUIN_Pos)

#define DPGACTL_PUIN_(x)  (((x) << DPGACTL_PUIN_Pos) & DPGACTL_PUIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             DPGACTL         PUSTRENGTH
  *  @access     PGA->DPGACTL
  *  @brief      PGA pull-up strength
  */
#define DPGACTL_PUSTRENGTH_Pos  (7)
#define DPGACTL_PUSTRENGTH_Msk  (0x1U << DPGACTL_PUSTRENGTH_Pos)

#define DPGACTL_PUSTRENGTH_2_MA   ((0x0U) << DPGACTL_PUSTRENGTH_Pos)
#define DPGACTL_PUSTRENGTH_10_MA  ((0x1U) << DPGACTL_PUSTRENGTH_Pos)

#define DPGACTL_PUSTRENGTH_(x)  (((x) << DPGACTL_PUSTRENGTH_Pos) & DPGACTL_PUSTRENGTH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             DPGACTL         D2SBUFEN
  *  @access     PGA->DPGACTL
  *  @brief      PGA differential to single-ended buffer enable
  */
#define DPGACTL_D2SBUFEN_Pos  (8)
#define DPGACTL_D2SBUFEN_Msk  (0x1U << DPGACTL_D2SBUFEN_Pos)

#define DPGACTL_D2SBUFEN_DISABLE  ((0x0U) << DPGACTL_D2SBUFEN_Pos)
#define DPGACTL_D2SBUFEN_ENABLE   ((0x1U) << DPGACTL_D2SBUFEN_Pos)

#define DPGACTL_D2SBUFEN_(x)  (((x) << DPGACTL_D2SBUFEN_Pos) & DPGACTL_D2SBUFEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             SPGACTL         EN
  *  @access     PGA->SPGACTL
  *  @brief      PGA enable
  */
#define SPGACTL_EN_Pos  (0)
#define SPGACTL_EN_Msk  (0x1U << SPGACTL_EN_Pos)

#define SPGACTL_EN_DISABLE  ((0x0U) << SPGACTL_EN_Pos)
#define SPGACTL_EN_ENABLE   ((0x1U) << SPGACTL_EN_Pos)

#define SPGACTL_EN_(x)  (((x) << SPGACTL_EN_Pos) & SPGACTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             SPGACTL         INSEL
  *  @access     PGA->SPGACTL
  *  @brief      PGA input select
  */
#define SPGACTL_INSEL_Pos  (1)
#define SPGACTL_INSEL_Msk  (0x7U << SPGACTL_INSEL_Pos)

#define SPGACTL_INSEL_ANA_IN0  ((0x000U) << SPGACTL_INSEL_Pos)
#define SPGACTL_INSEL_ANA_IN1  ((0x001U) << SPGACTL_INSEL_Pos)
#define SPGACTL_INSEL_ANA_IN2  ((0x002U) << SPGACTL_INSEL_Pos)
#define SPGACTL_INSEL_ANA_IN3  ((0x003U) << SPGACTL_INSEL_Pos)
#define SPGACTL_INSEL_ANA_IN4  ((0x004U) << SPGACTL_INSEL_Pos)
#define SPGACTL_INSEL_TSENS_N  ((0x005U) << SPGACTL_INSEL_Pos)
#define SPGACTL_INSEL_TSENS_P  ((0x006U) << SPGACTL_INSEL_Pos)
#define SPGACTL_INSEL_ATEST    ((0x007U) << SPGACTL_INSEL_Pos)

#define SPGACTL_INSEL_(x)  (((x) << SPGACTL_INSEL_Pos) & SPGACTL_INSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             SPGACTL         GAIN
  *  @access     PGA->SPGACTL
  *  @brief      PGA gain
  */
#define SPGACTL_GAIN_Pos  (4)
#define SPGACTL_GAIN_Msk  (0x7U << SPGACTL_GAIN_Pos)

#define SPGACTL_GAIN_1X   ((0x000U) << SPGACTL_GAIN_Pos)
#define SPGACTL_GAIN_2X   ((0x001U) << SPGACTL_GAIN_Pos)
#define SPGACTL_GAIN_4X   ((0x002U) << SPGACTL_GAIN_Pos)
#define SPGACTL_GAIN_8X   ((0x003U) << SPGACTL_GAIN_Pos)
#define SPGACTL_GAIN_16X  ((0x004U) << SPGACTL_GAIN_Pos)
#define SPGACTL_GAIN_32X  ((0x005U) << SPGACTL_GAIN_Pos)
#define SPGACTL_GAIN_48X  ((0x006U) << SPGACTL_GAIN_Pos)
#define SPGACTL_GAIN_64X  ((0x007U) << SPGACTL_GAIN_Pos)

#define SPGACTL_GAIN_(x)  (((x) << SPGACTL_GAIN_Pos) & SPGACTL_GAIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              PGA             PGAREGKEY       KEY
  *  @access     PGA->PGAREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected PGA registers
  */
#define PGAREGKEY_KEY_Pos  (0)
#define PGAREGKEY_KEY_Msk  (0xFFFFFFFFU << PGAREGKEY_KEY_Pos)

#define PGAREGKEY_KEY_(x)  (((x) << PGAREGKEY_KEY_Pos) & PGAREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      ECAP:                                                                 */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPSRCCTL       POL
  *  @access     ECAP->CAPSRCCTL
  *  @brief      Source input polarity
  */
#define CAPSRCCTL_POL_Pos  (0)
#define CAPSRCCTL_POL_Msk  (0x1U << CAPSRCCTL_POL_Pos)

#define CAPSRCCTL_POL_ACTIVE_LOW   ((0x0U) << CAPSRCCTL_POL_Pos)
#define CAPSRCCTL_POL_ACTIVE_HIGH  ((0x1U) << CAPSRCCTL_POL_Pos)

#define CAPSRCCTL_POL_(x)  (((x) << CAPSRCCTL_POL_Pos) & CAPSRCCTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPSRCCTL       IOSEL
  *  @access     ECAP->CAPSRCCTL
  *  @brief      GPIO number to be selected as capture input
  */
#define CAPSRCCTL_IOSEL_Pos  (1)
#define CAPSRCCTL_IOSEL_Msk  (0x7FU << CAPSRCCTL_IOSEL_Pos)

#define CAPSRCCTL_IOSEL_(x)  (((x) << CAPSRCCTL_IOSEL_Pos) & CAPSRCCTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPSRCCTL       POL1
  *  @access     ECAP->CAPSRCCTL
  *  @brief      Source input polarity for the 2nd pin in dual pin mode
  */
#define CAPSRCCTL_POL1_Pos  (16)
#define CAPSRCCTL_POL1_Msk  (0x1U << CAPSRCCTL_POL1_Pos)

#define CAPSRCCTL_POL1_ACTIVE_LOW   ((0x0U) << CAPSRCCTL_POL1_Pos)
#define CAPSRCCTL_POL1_ACTIVE_HIGH  ((0x1U) << CAPSRCCTL_POL1_Pos)

#define CAPSRCCTL_POL1_(x)  (((x) << CAPSRCCTL_POL1_Pos) & CAPSRCCTL_POL1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPSRCCTL       IOSEL1
  *  @access     ECAP->CAPSRCCTL
  *  @brief      GPIO number to be selected as 2nd capture input in dual pin mode
  */
#define CAPSRCCTL_IOSEL1_Pos  (17)
#define CAPSRCCTL_IOSEL1_Msk  (0x7FU << CAPSRCCTL_IOSEL1_Pos)

#define CAPSRCCTL_IOSEL1_(x)  (((x) << CAPSRCCTL_IOSEL1_Pos) & CAPSRCCTL_IOSEL1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPSYNCICTL     POL
  *  @access     ECAP->CAPSYNCICTL
  *  @brief      Source input polarity
  */
#define CAPSYNCICTL_POL_Pos  (0)
#define CAPSYNCICTL_POL_Msk  (0x1U << CAPSYNCICTL_POL_Pos)

#define CAPSYNCICTL_POL_ACTIVE_LOW   ((0x0U) << CAPSYNCICTL_POL_Pos)
#define CAPSYNCICTL_POL_ACTIVE_HIGH  ((0x1U) << CAPSYNCICTL_POL_Pos)

#define CAPSYNCICTL_POL_(x)  (((x) << CAPSYNCICTL_POL_Pos) & CAPSYNCICTL_POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPSYNCICTL     IOSEL
  *  @access     ECAP->CAPSYNCICTL
  *  @brief      GPIO number to be selected as sync input
  */
#define CAPSYNCICTL_IOSEL_Pos  (1)
#define CAPSYNCICTL_IOSEL_Msk  (0x7FU << CAPSYNCICTL_IOSEL_Pos)

#define CAPSYNCICTL_IOSEL_(x)  (((x) << CAPSYNCICTL_IOSEL_Pos) & CAPSYNCICTL_IOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPTSCNT        VAL
  *  @access     ECAP->CAPTSCNT
  *  @brief      Active 32-bit counter register that is used as the capture time-base.
  */
#define CAPTSCNT_VAL_Pos  (0)
#define CAPTSCNT_VAL_Msk  (0xFFFFFFFFU << CAPTSCNT_VAL_Pos)

#define CAPTSCNT_VAL_(x)  (((x) << CAPTSCNT_VAL_Pos) & CAPTSCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCNTPHS       VAL
  *  @access     ECAP->CAPCNTPHS
  *  @brief      Counter phase value register that can be programmed for phase lag/lead.
  */
#define CAPCNTPHS_VAL_Pos  (0)
#define CAPCNTPHS_VAL_Msk  (0xFFFFFFFFU << CAPCNTPHS_VAL_Pos)

#define CAPCNTPHS_VAL_(x)  (((x) << CAPCNTPHS_VAL_Pos) & CAPCNTPHS_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAP0            VAL
  *  @access     ECAP->CAP0
  *  @brief      In capture mode
  *              -This register is loaded from time-stamp counter (CAPTSCNT) upon a capture event
  *              0.
  *              In APWM mode
  *              -Writting to this register set the active value of PRD, and also update CAP2
  *              with the same value. This emulates the immediate mode.
  *              - Upon CAPTSCNT=PRD (CAP0), this register is updated as CAP2. This emulates the
  *              shadow mode.
  */
#define CAP0_VAL_Pos  (0)
#define CAP0_VAL_Msk  (0xFFFFFFFFU << CAP0_VAL_Pos)

#define CAP0_VAL_(x)  (((x) << CAP0_VAL_Pos) & CAP0_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAP1            VAL
  *  @access     ECAP->CAP1
  *  @brief      In capture mode
  *              -This register is loaded from time-stamp counter (CAPTSCNT) upon a capture event
  *              1.
  *              In APWM mode
  *              -Writting to this register set the active value of CMP, and also update CAP3
  *              with the same value. This emulates the immediate mode.
  *              - Upon CAPTSCNT=PRD (CAP0), this register is updated as CAP3. This emulates the
  *              shadow mode.
  */
#define CAP1_VAL_Pos  (0)
#define CAP1_VAL_Msk  (0xFFFFFFFFU << CAP1_VAL_Pos)

#define CAP1_VAL_(x)  (((x) << CAP1_VAL_Pos) & CAP1_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAP2            VAL
  *  @access     ECAP->CAP2
  *  @brief      In capture mode
  *              -This register is loaded from time-stamp counter (CAPTSCNT) upon a capture event
  *              2.
  *              In APWM mode
  *              -Writting to this register set the shadow value of PRD. Upon CAPTSCNT=PRD
  *              (CAP0), CAP0 will be updated to the value of this register. This emulates the
  *              shadow mode.
  */
#define CAP2_VAL_Pos  (0)
#define CAP2_VAL_Msk  (0xFFFFFFFFU << CAP2_VAL_Pos)

#define CAP2_VAL_(x)  (((x) << CAP2_VAL_Pos) & CAP2_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAP3            VAL
  *  @access     ECAP->CAP3
  *  @brief      In capture mode
  *              -This register is loaded from time-stamp counter (CAPTSCNT) upon a capture event
  *              3.
  *              In APWM mode
  *              -Writting to this register set the shadow value of CMP. Upon CAPTSCNT=PRD
  *              (CAP0), CAP1 will be updated to the value of this register. This emulates the
  *              shadow mode.
  */
#define CAP3_VAL_Pos  (0)
#define CAP3_VAL_Msk  (0xFFFFFFFFU << CAP3_VAL_Pos)

#define CAP3_VAL_(x)  (((x) << CAP3_VAL_Pos) & CAP3_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CAP0POL
  *  @access     ECAP->CAPCTL
  *  @brief      Capture event 0 polarity select
  */
#define CAPCTL_CAP0POL_Pos  (0)
#define CAPCTL_CAP0POL_Msk  (0x1U << CAPCTL_CAP0POL_Pos)

#define CAPCTL_CAP0POL_TRIG_ON_FALLING_EDGE  ((0x0U) << CAPCTL_CAP0POL_Pos)
#define CAPCTL_CAP0POL_TRIG_ON_RISING_EDGE   ((0x1U) << CAPCTL_CAP0POL_Pos)

#define CAPCTL_CAP0POL_(x)  (((x) << CAPCTL_CAP0POL_Pos) & CAPCTL_CAP0POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CNTRST0
  *  @access     ECAP->CAPCTL
  *  @brief      Counter reset on capture event 0
  */
#define CAPCTL_CNTRST0_Pos  (1)
#define CAPCTL_CNTRST0_Msk  (0x1U << CAPCTL_CNTRST0_Pos)

#define CAPCTL_CNTRST0_DISABLE  ((0x0U) << CAPCTL_CNTRST0_Pos)
#define CAPCTL_CNTRST0_ENABLE   ((0x1U) << CAPCTL_CNTRST0_Pos)

#define CAPCTL_CNTRST0_(x)  (((x) << CAPCTL_CNTRST0_Pos) & CAPCTL_CNTRST0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CAP1POL
  *  @access     ECAP->CAPCTL
  *  @brief      Capture event 1 polarity select
  */
#define CAPCTL_CAP1POL_Pos  (2)
#define CAPCTL_CAP1POL_Msk  (0x1U << CAPCTL_CAP1POL_Pos)

#define CAPCTL_CAP1POL_TRIG_ON_FALLING_EDGE  ((0x0U) << CAPCTL_CAP1POL_Pos)
#define CAPCTL_CAP1POL_TRIG_ON_RISING_EDGE   ((0x1U) << CAPCTL_CAP1POL_Pos)

#define CAPCTL_CAP1POL_(x)  (((x) << CAPCTL_CAP1POL_Pos) & CAPCTL_CAP1POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CNTRST1
  *  @access     ECAP->CAPCTL
  *  @brief      Counter reset on capture event 1
  */
#define CAPCTL_CNTRST1_Pos  (3)
#define CAPCTL_CNTRST1_Msk  (0x1U << CAPCTL_CNTRST1_Pos)

#define CAPCTL_CNTRST1_DISABLE  ((0x0U) << CAPCTL_CNTRST1_Pos)
#define CAPCTL_CNTRST1_ENABLE   ((0x1U) << CAPCTL_CNTRST1_Pos)

#define CAPCTL_CNTRST1_(x)  (((x) << CAPCTL_CNTRST1_Pos) & CAPCTL_CNTRST1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CAP2POL
  *  @access     ECAP->CAPCTL
  *  @brief      Capture event 2 polarity select
  */
#define CAPCTL_CAP2POL_Pos  (4)
#define CAPCTL_CAP2POL_Msk  (0x1U << CAPCTL_CAP2POL_Pos)

#define CAPCTL_CAP2POL_TRIG_ON_FALLING_EDGE  ((0x0U) << CAPCTL_CAP2POL_Pos)
#define CAPCTL_CAP2POL_TRIG_ON_RISING_EDGE   ((0x1U) << CAPCTL_CAP2POL_Pos)

#define CAPCTL_CAP2POL_(x)  (((x) << CAPCTL_CAP2POL_Pos) & CAPCTL_CAP2POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CNTRST2
  *  @access     ECAP->CAPCTL
  *  @brief      Counter reset on capture event 2
  */
#define CAPCTL_CNTRST2_Pos  (5)
#define CAPCTL_CNTRST2_Msk  (0x1U << CAPCTL_CNTRST2_Pos)

#define CAPCTL_CNTRST2_DISABLE  ((0x0U) << CAPCTL_CNTRST2_Pos)
#define CAPCTL_CNTRST2_ENABLE   ((0x1U) << CAPCTL_CNTRST2_Pos)

#define CAPCTL_CNTRST2_(x)  (((x) << CAPCTL_CNTRST2_Pos) & CAPCTL_CNTRST2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CAP3POL
  *  @access     ECAP->CAPCTL
  *  @brief      Capture event 3 polarity select
  */
#define CAPCTL_CAP3POL_Pos  (6)
#define CAPCTL_CAP3POL_Msk  (0x1U << CAPCTL_CAP3POL_Pos)

#define CAPCTL_CAP3POL_TRIG_ON_FALLING_EDGE  ((0x0U) << CAPCTL_CAP3POL_Pos)
#define CAPCTL_CAP3POL_TRIG_ON_RISING_EDGE   ((0x1U) << CAPCTL_CAP3POL_Pos)

#define CAPCTL_CAP3POL_(x)  (((x) << CAPCTL_CAP3POL_Pos) & CAPCTL_CAP3POL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CNTRST3
  *  @access     ECAP->CAPCTL
  *  @brief      Counter reset on capture event 3
  */
#define CAPCTL_CNTRST3_Pos  (7)
#define CAPCTL_CNTRST3_Msk  (0x1U << CAPCTL_CNTRST3_Pos)

#define CAPCTL_CNTRST3_DISABLE  ((0x0U) << CAPCTL_CNTRST3_Pos)
#define CAPCTL_CNTRST3_ENABLE   ((0x1U) << CAPCTL_CNTRST3_Pos)

#define CAPCTL_CNTRST3_(x)  (((x) << CAPCTL_CNTRST3_Pos) & CAPCTL_CNTRST3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          CAPLDEN
  *  @access     ECAP->CAPCTL
  *  @brief      Enable CAP0-3 loading on a capture event.
  *              This bit does not affect the generation of CEVT0-3 events
  */
#define CAPCTL_CAPLDEN_Pos  (8)
#define CAPCTL_CAPLDEN_Msk  (0x1U << CAPCTL_CAPLDEN_Pos)

#define CAPCTL_CAPLDEN_DISABLE  ((0x0U) << CAPCTL_CAPLDEN_Pos)
#define CAPCTL_CAPLDEN_ENABLE   ((0x1U) << CAPCTL_CAPLDEN_Pos)

#define CAPCTL_CAPLDEN_(x)  (((x) << CAPCTL_CAPLDEN_Pos) & CAPCTL_CAPLDEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          EVTDIV
  *  @access     ECAP->CAPCTL
  *  @brief      Event Filter prescale select
  */
#define CAPCTL_EVTDIV_Pos  (9)
#define CAPCTL_EVTDIV_Msk  (0xFFU << CAPCTL_EVTDIV_Pos)

#define CAPCTL_EVTDIV_(x)  (((x) << CAPCTL_EVTDIV_Pos) & CAPCTL_EVTDIV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          ONESHOT
  *  @access     ECAP->CAPCTL
  *  @brief      One-shot mode enable (applicable only in capture mode)
  */
#define CAPCTL_ONESHOT_Pos  (17)
#define CAPCTL_ONESHOT_Msk  (0x1U << CAPCTL_ONESHOT_Pos)

#define CAPCTL_ONESHOT_DISABLE  ((0x0U) << CAPCTL_ONESHOT_Pos)
#define CAPCTL_ONESHOT_ENABLE   ((0x1U) << CAPCTL_ONESHOT_Pos)

#define CAPCTL_ONESHOT_(x)  (((x) << CAPCTL_ONESHOT_Pos) & CAPCTL_ONESHOT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          STOPWRAP
  *  @access     ECAP->CAPCTL
  *  @brief      Stop value for one-shot mode
  *              This is the number (between 0-3) of captures allowed to occur before the
  *              CAP(0-3) registers are frozen, i.e., capture sequence is stopped.
  *              Wrap value for continuous mode. This is the number (between 0-3) of the capture
  *              register in which the circular buffer wraps around and starts again.
  *              Notes: Following 2 actions occurs when MOD4=STOPWRAP:
  *              - MOD4 counter is stopped (frozen)
  *              - Capture register loads are inhibited. In one-shot mode, further interrupt
  *              events are blocked until re-armed.
  */
#define CAPCTL_STOPWRAP_Pos  (18)
#define CAPCTL_STOPWRAP_Msk  (0x3U << CAPCTL_STOPWRAP_Pos)

#define CAPCTL_STOPWRAP_ON_CAPTURE_EVENT0  ((0x00U) << CAPCTL_STOPWRAP_Pos)
#define CAPCTL_STOPWRAP_ON_CAPTURE_EVENT1  ((0x01U) << CAPCTL_STOPWRAP_Pos)
#define CAPCTL_STOPWRAP_ON_CAPTURE_EVENT2  ((0x02U) << CAPCTL_STOPWRAP_Pos)
#define CAPCTL_STOPWRAP_ON_CAPTURE_EVENT3  ((0x03U) << CAPCTL_STOPWRAP_Pos)

#define CAPCTL_STOPWRAP_(x)  (((x) << CAPCTL_STOPWRAP_Pos) & CAPCTL_STOPWRAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          REARM
  *  @access     ECAP->CAPCTL
  *  @brief      One-shot re-arming control.
  */
#define CAPCTL_REARM_Pos  (20)
#define CAPCTL_REARM_Msk  (0x1U << CAPCTL_REARM_Pos)

#define CAPCTL_REARM_NO_EFFECT  ((0x0U) << CAPCTL_REARM_Pos)
#define CAPCTL_REARM_FORCE      ((0x1U) << CAPCTL_REARM_Pos)

#define CAPCTL_REARM_(x)  (((x) << CAPCTL_REARM_Pos) & CAPCTL_REARM_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          TSCNTRUN
  *  @access     ECAP->CAPCTL
  *  @brief      Time stamp counter run/stop control
  */
#define CAPCTL_TSCNTRUN_Pos  (21)
#define CAPCTL_TSCNTRUN_Msk  (0x1U << CAPCTL_TSCNTRUN_Pos)

#define CAPCTL_TSCNTRUN_STOP_COUNTER   ((0x0U) << CAPCTL_TSCNTRUN_Pos)
#define CAPCTL_TSCNTRUN_START_COUNTER  ((0x1U) << CAPCTL_TSCNTRUN_Pos)

#define CAPCTL_TSCNTRUN_(x)  (((x) << CAPCTL_TSCNTRUN_Pos) & CAPCTL_TSCNTRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          PHSEN
  *  @access     ECAP->CAPCTL
  *  @brief      Phase synchronization enable
  */
#define CAPCTL_PHSEN_Pos  (22)
#define CAPCTL_PHSEN_Msk  (0x1U << CAPCTL_PHSEN_Pos)

#define CAPCTL_PHSEN_DISABLE  ((0x0U) << CAPCTL_PHSEN_Pos)
#define CAPCTL_PHSEN_ENABLE   ((0x1U) << CAPCTL_PHSEN_Pos)

#define CAPCTL_PHSEN_(x)  (((x) << CAPCTL_PHSEN_Pos) & CAPCTL_PHSEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          SYNCOSEL
  *  @access     ECAP->CAPCTL
  *  @brief      Sync-Out Select
  */
#define CAPCTL_SYNCOSEL_Pos  (23)
#define CAPCTL_SYNCOSEL_Msk  (0x3U << CAPCTL_SYNCOSEL_Pos)

#define CAPCTL_SYNCOSEL_DISABLE_SYNC_OUT  ((0x01U) << CAPCTL_SYNCOSEL_Pos)
#define CAPCTL_SYNCOSEL_SYNC_IN           ((0x02U) << CAPCTL_SYNCOSEL_Pos)
#define CAPCTL_SYNCOSEL_CNT_EQU_PRD       ((0x03U) << CAPCTL_SYNCOSEL_Pos)

#define CAPCTL_SYNCOSEL_(x)  (((x) << CAPCTL_SYNCOSEL_Pos) & CAPCTL_SYNCOSEL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          FRCSYNC
  *  @access     ECAP->CAPCTL
  *  @brief      Software-forced counter synchronizing.
  */
#define CAPCTL_FRCSYNC_Pos  (25)
#define CAPCTL_FRCSYNC_Msk  (0x1U << CAPCTL_FRCSYNC_Pos)

#define CAPCTL_FRCSYNC_NO_EFFECT  ((0x0U) << CAPCTL_FRCSYNC_Pos)
#define CAPCTL_FRCSYNC_FORCE      ((0x1U) << CAPCTL_FRCSYNC_Pos)

#define CAPCTL_FRCSYNC_(x)  (((x) << CAPCTL_FRCSYNC_Pos) & CAPCTL_FRCSYNC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          APWMMODE
  *  @access     ECAP->CAPCTL
  *  @brief      CAP/APWM operating mode select
  */
#define CAPCTL_APWMMODE_Pos  (26)
#define CAPCTL_APWMMODE_Msk  (0x1U << CAPCTL_APWMMODE_Pos)

#define CAPCTL_APWMMODE_CAPTURE_MODE  ((0x0U) << CAPCTL_APWMMODE_Pos)
#define CAPCTL_APWMMODE_APWM_MODE     ((0x1U) << CAPCTL_APWMMODE_Pos)

#define CAPCTL_APWMMODE_(x)  (((x) << CAPCTL_APWMMODE_Pos) & CAPCTL_APWMMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          APWMPOL
  *  @access     ECAP->CAPCTL
  *  @brief      APWM output polarity select. This is applicable only in APWM operating mode.
  */
#define CAPCTL_APWMPOL_Pos  (27)
#define CAPCTL_APWMPOL_Msk  (0x1U << CAPCTL_APWMPOL_Pos)

#define CAPCTL_APWMPOL_ACTIVE_LOW   ((0x0U) << CAPCTL_APWMPOL_Pos)
#define CAPCTL_APWMPOL_ACTIVE_HIGH  ((0x1U) << CAPCTL_APWMPOL_Pos)

#define CAPCTL_APWMPOL_(x)  (((x) << CAPCTL_APWMPOL_Pos) & CAPCTL_APWMPOL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          DBGRUN
  *  @access     ECAP->CAPCTL
  *  @brief      ECAP counter behaviour when CPU is halted
  *              Note: Debug operation and CPU fault exceptions both can cause CPU halted.
  */
#define CAPCTL_DBGRUN_Pos  (28)
#define CAPCTL_DBGRUN_Msk  (0x3U << CAPCTL_DBGRUN_Pos)

#define CAPCTL_DBGRUN_STOP_IMMEDIATELY  ((0x00U) << CAPCTL_DBGRUN_Pos)
#define CAPCTL_DBGRUN_STOP_AT_ZERO      ((0x01U) << CAPCTL_DBGRUN_Pos)
#define CAPCTL_DBGRUN_KEEP_RUNNING      ((0x02U) << CAPCTL_DBGRUN_Pos)

#define CAPCTL_DBGRUN_(x)  (((x) << CAPCTL_DBGRUN_Pos) & CAPCTL_DBGRUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          EVTDIVRST
  *  @access     ECAP->CAPCTL
  *  @brief      Event divider reset
  */
#define CAPCTL_EVTDIVRST_Pos  (30)
#define CAPCTL_EVTDIVRST_Msk  (0x1U << CAPCTL_EVTDIVRST_Pos)

#define CAPCTL_EVTDIVRST_NO_EFFECT  ((0x0U) << CAPCTL_EVTDIVRST_Pos)
#define CAPCTL_EVTDIVRST_RESET      ((0x1U) << CAPCTL_EVTDIVRST_Pos)

#define CAPCTL_EVTDIVRST_(x)  (((x) << CAPCTL_EVTDIVRST_Pos) & CAPCTL_EVTDIVRST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPCTL          DUALPIN
  *  @access     ECAP->CAPCTL
  *  @brief      Dual pin capture mode
  */
#define CAPCTL_DUALPIN_Pos  (31)
#define CAPCTL_DUALPIN_Msk  (0x1U << CAPCTL_DUALPIN_Pos)

#define CAPCTL_DUALPIN_DISABLE  ((0x0U) << CAPCTL_DUALPIN_Pos)
#define CAPCTL_DUALPIN_ENABLE   ((0x1U) << CAPCTL_DUALPIN_Pos)

#define CAPCTL_DUALPIN_(x)  (((x) << CAPCTL_DUALPIN_Pos) & CAPCTL_DUALPIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPRAWIF        CEVT0
  *  @access     ECAP->CAPRAWIF
  *  @brief      Capture event 0 raw flag.
  *              This flag is only active in CAP mode.
  */
#define CAPRAWIF_CEVT0_Pos  (0)
#define CAPRAWIF_CEVT0_Msk  (0x1U << CAPRAWIF_CEVT0_Pos)

#define CAPRAWIF_CEVT0_NOT_OCCUR  ((0x0U) << CAPRAWIF_CEVT0_Pos)
#define CAPRAWIF_CEVT0_OCCUR      ((0x1U) << CAPRAWIF_CEVT0_Pos)

#define CAPRAWIF_CEVT0_(x)  (((x) << CAPRAWIF_CEVT0_Pos) & CAPRAWIF_CEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPRAWIF        CEVT1
  *  @access     ECAP->CAPRAWIF
  *  @brief      Capture event 1 raw flag.
  *              This flag is only active in CAP mode.
  */
#define CAPRAWIF_CEVT1_Pos  (1)
#define CAPRAWIF_CEVT1_Msk  (0x1U << CAPRAWIF_CEVT1_Pos)

#define CAPRAWIF_CEVT1_NOT_OCCUR  ((0x0U) << CAPRAWIF_CEVT1_Pos)
#define CAPRAWIF_CEVT1_OCCUR      ((0x1U) << CAPRAWIF_CEVT1_Pos)

#define CAPRAWIF_CEVT1_(x)  (((x) << CAPRAWIF_CEVT1_Pos) & CAPRAWIF_CEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPRAWIF        CEVT2
  *  @access     ECAP->CAPRAWIF
  *  @brief      Capture event 2 raw flag.
  *              This flag is active only in CAP mode.
  */
#define CAPRAWIF_CEVT2_Pos  (2)
#define CAPRAWIF_CEVT2_Msk  (0x1U << CAPRAWIF_CEVT2_Pos)

#define CAPRAWIF_CEVT2_NOT_OCCUR  ((0x0U) << CAPRAWIF_CEVT2_Pos)
#define CAPRAWIF_CEVT2_OCCUR      ((0x1U) << CAPRAWIF_CEVT2_Pos)

#define CAPRAWIF_CEVT2_(x)  (((x) << CAPRAWIF_CEVT2_Pos) & CAPRAWIF_CEVT2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPRAWIF        CEVT3
  *  @access     ECAP->CAPRAWIF
  *  @brief      Capture event 3 raw flag.
  *              This flag is only active in CAP mode.
  */
#define CAPRAWIF_CEVT3_Pos  (3)
#define CAPRAWIF_CEVT3_Msk  (0x1U << CAPRAWIF_CEVT3_Pos)

#define CAPRAWIF_CEVT3_NOT_OCCUR  ((0x0U) << CAPRAWIF_CEVT3_Pos)
#define CAPRAWIF_CEVT3_OCCUR      ((0x1U) << CAPRAWIF_CEVT3_Pos)

#define CAPRAWIF_CEVT3_(x)  (((x) << CAPRAWIF_CEVT3_Pos) & CAPRAWIF_CEVT3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPRAWIF        CNTOVF
  *  @access     ECAP->CAPRAWIF
  *  @brief      Counter overflow (CAPTSCNT=0xFFFFFFFF) event raw flag.
  *              This flag is active in CAP and APWM mode.
  */
#define CAPRAWIF_CNTOVF_Pos  (4)
#define CAPRAWIF_CNTOVF_Msk  (0x1U << CAPRAWIF_CNTOVF_Pos)

#define CAPRAWIF_CNTOVF_NOT_OCCUR  ((0x0U) << CAPRAWIF_CNTOVF_Pos)
#define CAPRAWIF_CNTOVF_OCCUR      ((0x1U) << CAPRAWIF_CNTOVF_Pos)

#define CAPRAWIF_CNTOVF_(x)  (((x) << CAPRAWIF_CNTOVF_Pos) & CAPRAWIF_CNTOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPRAWIF        PRD
  *  @access     ECAP->CAPRAWIF
  *  @brief      CAPTSCNT=CAP0 (PRD) event raw flag.
  *              This flag is only active in APWM mode.
  */
#define CAPRAWIF_PRD_Pos  (5)
#define CAPRAWIF_PRD_Msk  (0x1U << CAPRAWIF_PRD_Pos)

#define CAPRAWIF_PRD_NOT_OCCUR  ((0x0U) << CAPRAWIF_PRD_Pos)
#define CAPRAWIF_PRD_OCCUR      ((0x1U) << CAPRAWIF_PRD_Pos)

#define CAPRAWIF_PRD_(x)  (((x) << CAPRAWIF_PRD_Pos) & CAPRAWIF_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPRAWIF        CMP
  *  @access     ECAP->CAPRAWIF
  *  @brief      CAPTSCNT=CAP1 (CMP) event raw flag.
  *              This flag is active only in APWM mode.
  */
#define CAPRAWIF_CMP_Pos  (6)
#define CAPRAWIF_CMP_Msk  (0x1U << CAPRAWIF_CMP_Pos)

#define CAPRAWIF_CMP_NOT_OCCUR  ((0x0U) << CAPRAWIF_CMP_Pos)
#define CAPRAWIF_CMP_OCCUR      ((0x1U) << CAPRAWIF_CMP_Pos)

#define CAPRAWIF_CMP_(x)  (((x) << CAPRAWIF_CMP_Pos) & CAPRAWIF_CMP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           CEVT0
  *  @access     ECAP->CAPIF
  *  @brief      Capture event 0 interrupt flag.
  *              This flag is only active in CAP mode.
  */
#define CAPIF_CEVT0_Pos  (0)
#define CAPIF_CEVT0_Msk  (0x1U << CAPIF_CEVT0_Pos)

#define CAPIF_CEVT0_NOT_OCCUR  ((0x0U) << CAPIF_CEVT0_Pos)
#define CAPIF_CEVT0_OCCUR      ((0x1U) << CAPIF_CEVT0_Pos)

#define CAPIF_CEVT0_(x)  (((x) << CAPIF_CEVT0_Pos) & CAPIF_CEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           CEVT1
  *  @access     ECAP->CAPIF
  *  @brief      Capture event 1 interrupt flag.
  *              This flag is only active in CAP mode.
  */
#define CAPIF_CEVT1_Pos  (1)
#define CAPIF_CEVT1_Msk  (0x1U << CAPIF_CEVT1_Pos)

#define CAPIF_CEVT1_NOT_OCCUR  ((0x0U) << CAPIF_CEVT1_Pos)
#define CAPIF_CEVT1_OCCUR      ((0x1U) << CAPIF_CEVT1_Pos)

#define CAPIF_CEVT1_(x)  (((x) << CAPIF_CEVT1_Pos) & CAPIF_CEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           CEVT2
  *  @access     ECAP->CAPIF
  *  @brief      Capture event 2 interrupt flag.
  *              This flag is active only in CAP mode.
  */
#define CAPIF_CEVT2_Pos  (2)
#define CAPIF_CEVT2_Msk  (0x1U << CAPIF_CEVT2_Pos)

#define CAPIF_CEVT2_NOT_OCCUR  ((0x0U) << CAPIF_CEVT2_Pos)
#define CAPIF_CEVT2_OCCUR      ((0x1U) << CAPIF_CEVT2_Pos)

#define CAPIF_CEVT2_(x)  (((x) << CAPIF_CEVT2_Pos) & CAPIF_CEVT2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           CEVT3
  *  @access     ECAP->CAPIF
  *  @brief      Capture event 3 interrupt flag.
  *              This flag is only active in CAP mode.
  */
#define CAPIF_CEVT3_Pos  (3)
#define CAPIF_CEVT3_Msk  (0x1U << CAPIF_CEVT3_Pos)

#define CAPIF_CEVT3_NOT_OCCUR  ((0x0U) << CAPIF_CEVT3_Pos)
#define CAPIF_CEVT3_OCCUR      ((0x1U) << CAPIF_CEVT3_Pos)

#define CAPIF_CEVT3_(x)  (((x) << CAPIF_CEVT3_Pos) & CAPIF_CEVT3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           CNTOVF
  *  @access     ECAP->CAPIF
  *  @brief      Counter overflow (CAPTSCNT=0xFFFFFFFF) event interrupt flag.
  *              This flag is active in CAP and APWM mode.
  */
#define CAPIF_CNTOVF_Pos  (4)
#define CAPIF_CNTOVF_Msk  (0x1U << CAPIF_CNTOVF_Pos)

#define CAPIF_CNTOVF_NOT_OCCUR  ((0x0U) << CAPIF_CNTOVF_Pos)
#define CAPIF_CNTOVF_OCCUR      ((0x1U) << CAPIF_CNTOVF_Pos)

#define CAPIF_CNTOVF_(x)  (((x) << CAPIF_CNTOVF_Pos) & CAPIF_CNTOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           PRD
  *  @access     ECAP->CAPIF
  *  @brief      CAPTSCNT=CAP0 (PRD) event interrupt flag.
  *              This flag is only active in APWM mode.
  */
#define CAPIF_PRD_Pos  (5)
#define CAPIF_PRD_Msk  (0x1U << CAPIF_PRD_Pos)

#define CAPIF_PRD_NOT_OCCUR  ((0x0U) << CAPIF_PRD_Pos)
#define CAPIF_PRD_OCCUR      ((0x1U) << CAPIF_PRD_Pos)

#define CAPIF_PRD_(x)  (((x) << CAPIF_PRD_Pos) & CAPIF_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           CMP
  *  @access     ECAP->CAPIF
  *  @brief      CAPTSCNT=CAP1 (CMP) event interrupt flag.
  *              This flag is active only in APWM mode.
  */
#define CAPIF_CMP_Pos  (6)
#define CAPIF_CMP_Msk  (0x1U << CAPIF_CMP_Pos)

#define CAPIF_CMP_NOT_OCCUR  ((0x0U) << CAPIF_CMP_Pos)
#define CAPIF_CMP_OCCUR      ((0x1U) << CAPIF_CMP_Pos)

#define CAPIF_CMP_(x)  (((x) << CAPIF_CMP_Pos) & CAPIF_CMP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIF           INT
  *  @access     ECAP->CAPIF
  *  @brief      Global interrupt flag
  */
#define CAPIF_INT_Pos  (7)
#define CAPIF_INT_Msk  (0x1U << CAPIF_INT_Pos)

#define CAPIF_INT_NOT_OCCUR  ((0x0U) << CAPIF_INT_Pos)
#define CAPIF_INT_OCCUR      ((0x1U) << CAPIF_INT_Pos)

#define CAPIF_INT_(x)  (((x) << CAPIF_INT_Pos) & CAPIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIE           CEVT0
  *  @access     ECAP->CAPIE
  *  @brief      Capture event 0 interrupt enable
  */
#define CAPIE_CEVT0_Pos  (0)
#define CAPIE_CEVT0_Msk  (0x1U << CAPIE_CEVT0_Pos)

#define CAPIE_CEVT0_DISABLE  ((0x0U) << CAPIE_CEVT0_Pos)
#define CAPIE_CEVT0_ENABLE   ((0x1U) << CAPIE_CEVT0_Pos)

#define CAPIE_CEVT0_(x)  (((x) << CAPIE_CEVT0_Pos) & CAPIE_CEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIE           CEVT1
  *  @access     ECAP->CAPIE
  *  @brief      Capture event 1 interrupt enable
  */
#define CAPIE_CEVT1_Pos  (1)
#define CAPIE_CEVT1_Msk  (0x1U << CAPIE_CEVT1_Pos)

#define CAPIE_CEVT1_DISABLE  ((0x0U) << CAPIE_CEVT1_Pos)
#define CAPIE_CEVT1_ENABLE   ((0x1U) << CAPIE_CEVT1_Pos)

#define CAPIE_CEVT1_(x)  (((x) << CAPIE_CEVT1_Pos) & CAPIE_CEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIE           CEVT2
  *  @access     ECAP->CAPIE
  *  @brief      Capture event 2 interrupt enable
  */
#define CAPIE_CEVT2_Pos  (2)
#define CAPIE_CEVT2_Msk  (0x1U << CAPIE_CEVT2_Pos)

#define CAPIE_CEVT2_DISABLE  ((0x0U) << CAPIE_CEVT2_Pos)
#define CAPIE_CEVT2_ENABLE   ((0x1U) << CAPIE_CEVT2_Pos)

#define CAPIE_CEVT2_(x)  (((x) << CAPIE_CEVT2_Pos) & CAPIE_CEVT2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIE           CEVT3
  *  @access     ECAP->CAPIE
  *  @brief      Capture event 3 interrupt enable
  */
#define CAPIE_CEVT3_Pos  (3)
#define CAPIE_CEVT3_Msk  (0x1U << CAPIE_CEVT3_Pos)

#define CAPIE_CEVT3_DISABLE  ((0x0U) << CAPIE_CEVT3_Pos)
#define CAPIE_CEVT3_ENABLE   ((0x1U) << CAPIE_CEVT3_Pos)

#define CAPIE_CEVT3_(x)  (((x) << CAPIE_CEVT3_Pos) & CAPIE_CEVT3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIE           CNTOVF
  *  @access     ECAP->CAPIE
  *  @brief      Counter overflow interrupt enable
  */
#define CAPIE_CNTOVF_Pos  (4)
#define CAPIE_CNTOVF_Msk  (0x1U << CAPIE_CNTOVF_Pos)

#define CAPIE_CNTOVF_DISABLE  ((0x0U) << CAPIE_CNTOVF_Pos)
#define CAPIE_CNTOVF_ENABLE   ((0x1U) << CAPIE_CNTOVF_Pos)

#define CAPIE_CNTOVF_(x)  (((x) << CAPIE_CNTOVF_Pos) & CAPIE_CNTOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIE           PRD
  *  @access     ECAP->CAPIE
  *  @brief      CAPTSCNT=CAP0 (PRD) interrupt enable
  */
#define CAPIE_PRD_Pos  (5)
#define CAPIE_PRD_Msk  (0x1U << CAPIE_PRD_Pos)

#define CAPIE_PRD_DISABLE  ((0x0U) << CAPIE_PRD_Pos)
#define CAPIE_PRD_ENABLE   ((0x1U) << CAPIE_PRD_Pos)

#define CAPIE_PRD_(x)  (((x) << CAPIE_PRD_Pos) & CAPIE_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIE           CMP
  *  @access     ECAP->CAPIE
  *  @brief      CAPTSCNT=CAP1 (CMP) interrupt enable
  */
#define CAPIE_CMP_Pos  (6)
#define CAPIE_CMP_Msk  (0x1U << CAPIE_CMP_Pos)

#define CAPIE_CMP_DISABLE  ((0x0U) << CAPIE_CMP_Pos)
#define CAPIE_CMP_ENABLE   ((0x1U) << CAPIE_CMP_Pos)

#define CAPIE_CMP_(x)  (((x) << CAPIE_CMP_Pos) & CAPIE_CMP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           CEVT0
  *  @access     ECAP->CAPIC
  *  @brief      Capture event 0 interrupt clear
  */
#define CAPIC_CEVT0_Pos  (0)
#define CAPIC_CEVT0_Msk  (0x1U << CAPIC_CEVT0_Pos)

#define CAPIC_CEVT0_NO_EFFECT  ((0x0U) << CAPIC_CEVT0_Pos)
#define CAPIC_CEVT0_CLEAR      ((0x1U) << CAPIC_CEVT0_Pos)

#define CAPIC_CEVT0_(x)  (((x) << CAPIC_CEVT0_Pos) & CAPIC_CEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           CEVT1
  *  @access     ECAP->CAPIC
  *  @brief      Capture event 1 interrupt clear
  */
#define CAPIC_CEVT1_Pos  (1)
#define CAPIC_CEVT1_Msk  (0x1U << CAPIC_CEVT1_Pos)

#define CAPIC_CEVT1_NO_EFFECT  ((0x0U) << CAPIC_CEVT1_Pos)
#define CAPIC_CEVT1_CLEAR      ((0x1U) << CAPIC_CEVT1_Pos)

#define CAPIC_CEVT1_(x)  (((x) << CAPIC_CEVT1_Pos) & CAPIC_CEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           CEVT2
  *  @access     ECAP->CAPIC
  *  @brief      Capture event 2 interrupt clear
  */
#define CAPIC_CEVT2_Pos  (2)
#define CAPIC_CEVT2_Msk  (0x1U << CAPIC_CEVT2_Pos)

#define CAPIC_CEVT2_NO_EFFECT  ((0x0U) << CAPIC_CEVT2_Pos)
#define CAPIC_CEVT2_CLEAR      ((0x1U) << CAPIC_CEVT2_Pos)

#define CAPIC_CEVT2_(x)  (((x) << CAPIC_CEVT2_Pos) & CAPIC_CEVT2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           CEVT3
  *  @access     ECAP->CAPIC
  *  @brief      Capture event 3 interrupt clear
  */
#define CAPIC_CEVT3_Pos  (3)
#define CAPIC_CEVT3_Msk  (0x1U << CAPIC_CEVT3_Pos)

#define CAPIC_CEVT3_NO_EFFECT  ((0x0U) << CAPIC_CEVT3_Pos)
#define CAPIC_CEVT3_CLEAR      ((0x1U) << CAPIC_CEVT3_Pos)

#define CAPIC_CEVT3_(x)  (((x) << CAPIC_CEVT3_Pos) & CAPIC_CEVT3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           CNTOVF
  *  @access     ECAP->CAPIC
  *  @brief      Counter overflow interrupt clear
  */
#define CAPIC_CNTOVF_Pos  (4)
#define CAPIC_CNTOVF_Msk  (0x1U << CAPIC_CNTOVF_Pos)

#define CAPIC_CNTOVF_NO_EFFECT  ((0x0U) << CAPIC_CNTOVF_Pos)
#define CAPIC_CNTOVF_CLEAR      ((0x1U) << CAPIC_CNTOVF_Pos)

#define CAPIC_CNTOVF_(x)  (((x) << CAPIC_CNTOVF_Pos) & CAPIC_CNTOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           PRD
  *  @access     ECAP->CAPIC
  *  @brief      CAPTSCNT=CAP0 (PRD) interrupt clear
  */
#define CAPIC_PRD_Pos  (5)
#define CAPIC_PRD_Msk  (0x1U << CAPIC_PRD_Pos)

#define CAPIC_PRD_NO_EFFECT  ((0x0U) << CAPIC_PRD_Pos)
#define CAPIC_PRD_CLEAR      ((0x1U) << CAPIC_PRD_Pos)

#define CAPIC_PRD_(x)  (((x) << CAPIC_PRD_Pos) & CAPIC_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           CMP
  *  @access     ECAP->CAPIC
  *  @brief      CAPTSCNT=CAP1 (CMP) interrupt clear
  */
#define CAPIC_CMP_Pos  (6)
#define CAPIC_CMP_Msk  (0x1U << CAPIC_CMP_Pos)

#define CAPIC_CMP_NO_EFFECT  ((0x0U) << CAPIC_CMP_Pos)
#define CAPIC_CMP_CLEAR      ((0x1U) << CAPIC_CMP_Pos)

#define CAPIC_CMP_(x)  (((x) << CAPIC_CMP_Pos) & CAPIC_CMP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIC           INT
  *  @access     ECAP->CAPIC
  *  @brief      Global interrupt clear
  */
#define CAPIC_INT_Pos  (7)
#define CAPIC_INT_Msk  (0x1U << CAPIC_INT_Pos)

#define CAPIC_INT_NO_EFFECT  ((0x0U) << CAPIC_INT_Pos)
#define CAPIC_INT_CLEAR      ((0x1U) << CAPIC_INT_Pos)

#define CAPIC_INT_(x)  (((x) << CAPIC_INT_Pos) & CAPIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT0
  *  @access     ECAP->CAPIFRC
  *  @brief      Capture event 0 force
  */
#define CAPIFRC_CEVT0_Pos  (0)
#define CAPIFRC_CEVT0_Msk  (0x1U << CAPIFRC_CEVT0_Pos)

#define CAPIFRC_CEVT0_NO_EFFECT  ((0x0U) << CAPIFRC_CEVT0_Pos)
#define CAPIFRC_CEVT0_FORCE      ((0x1U) << CAPIFRC_CEVT0_Pos)

#define CAPIFRC_CEVT0_(x)  (((x) << CAPIFRC_CEVT0_Pos) & CAPIFRC_CEVT0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT1
  *  @access     ECAP->CAPIFRC
  *  @brief      Capture event 1 force
  */
#define CAPIFRC_CEVT1_Pos  (1)
#define CAPIFRC_CEVT1_Msk  (0x1U << CAPIFRC_CEVT1_Pos)

#define CAPIFRC_CEVT1_NO_EFFECT  ((0x0U) << CAPIFRC_CEVT1_Pos)
#define CAPIFRC_CEVT1_FORCE      ((0x1U) << CAPIFRC_CEVT1_Pos)

#define CAPIFRC_CEVT1_(x)  (((x) << CAPIFRC_CEVT1_Pos) & CAPIFRC_CEVT1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT2
  *  @access     ECAP->CAPIFRC
  *  @brief      Capture event 2 force
  */
#define CAPIFRC_CEVT2_Pos  (2)
#define CAPIFRC_CEVT2_Msk  (0x1U << CAPIFRC_CEVT2_Pos)

#define CAPIFRC_CEVT2_NO_EFFECT  ((0x0U) << CAPIFRC_CEVT2_Pos)
#define CAPIFRC_CEVT2_FORCE      ((0x1U) << CAPIFRC_CEVT2_Pos)

#define CAPIFRC_CEVT2_(x)  (((x) << CAPIFRC_CEVT2_Pos) & CAPIFRC_CEVT2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT3
  *  @access     ECAP->CAPIFRC
  *  @brief      Capture event 3 force
  */
#define CAPIFRC_CEVT3_Pos  (3)
#define CAPIFRC_CEVT3_Msk  (0x1U << CAPIFRC_CEVT3_Pos)

#define CAPIFRC_CEVT3_NO_EFFECT  ((0x0U) << CAPIFRC_CEVT3_Pos)
#define CAPIFRC_CEVT3_FORCE      ((0x1U) << CAPIFRC_CEVT3_Pos)

#define CAPIFRC_CEVT3_(x)  (((x) << CAPIFRC_CEVT3_Pos) & CAPIFRC_CEVT3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CNTOVF
  *  @access     ECAP->CAPIFRC
  *  @brief      Counter overflow event force
  */
#define CAPIFRC_CNTOVF_Pos  (4)
#define CAPIFRC_CNTOVF_Msk  (0x1U << CAPIFRC_CNTOVF_Pos)

#define CAPIFRC_CNTOVF_NO_EFFECT  ((0x0U) << CAPIFRC_CNTOVF_Pos)
#define CAPIFRC_CNTOVF_FORCE      ((0x1U) << CAPIFRC_CNTOVF_Pos)

#define CAPIFRC_CNTOVF_(x)  (((x) << CAPIFRC_CNTOVF_Pos) & CAPIFRC_CNTOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         PRD
  *  @access     ECAP->CAPIFRC
  *  @brief      CAPTSCNT=CAP0 (PRD) event force.
  */
#define CAPIFRC_PRD_Pos  (5)
#define CAPIFRC_PRD_Msk  (0x1U << CAPIFRC_PRD_Pos)

#define CAPIFRC_PRD_NO_EFFECT  ((0x0U) << CAPIFRC_PRD_Pos)
#define CAPIFRC_PRD_FORCE      ((0x1U) << CAPIFRC_PRD_Pos)

#define CAPIFRC_PRD_(x)  (((x) << CAPIFRC_PRD_Pos) & CAPIFRC_PRD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CMP
  *  @access     ECAP->CAPIFRC
  *  @brief      CAPTSCNT=CAP1 (CMP) event force.
  */
#define CAPIFRC_CMP_Pos  (6)
#define CAPIFRC_CMP_Msk  (0x1U << CAPIFRC_CMP_Pos)

#define CAPIFRC_CMP_NO_EFFECT  ((0x0U) << CAPIFRC_CMP_Pos)
#define CAPIFRC_CMP_FORCE      ((0x1U) << CAPIFRC_CMP_Pos)

#define CAPIFRC_CMP_(x)  (((x) << CAPIFRC_CMP_Pos) & CAPIFRC_CMP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT0WE
  *  @access     ECAP->CAPIFRC
  *  @brief      CEVT0 bit write enable
  */
#define CAPIFRC_CEVT0WE_Pos  (8)
#define CAPIFRC_CEVT0WE_Msk  (0x1U << CAPIFRC_CEVT0WE_Pos)

#define CAPIFRC_CEVT0WE_DISABLE  ((0x0U) << CAPIFRC_CEVT0WE_Pos)
#define CAPIFRC_CEVT0WE_ENABLE   ((0x1U) << CAPIFRC_CEVT0WE_Pos)

#define CAPIFRC_CEVT0WE_(x)  (((x) << CAPIFRC_CEVT0WE_Pos) & CAPIFRC_CEVT0WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT1WE
  *  @access     ECAP->CAPIFRC
  *  @brief      CEVT1 bit write enable
  */
#define CAPIFRC_CEVT1WE_Pos  (9)
#define CAPIFRC_CEVT1WE_Msk  (0x1U << CAPIFRC_CEVT1WE_Pos)

#define CAPIFRC_CEVT1WE_DISABLE  ((0x0U) << CAPIFRC_CEVT1WE_Pos)
#define CAPIFRC_CEVT1WE_ENABLE   ((0x1U) << CAPIFRC_CEVT1WE_Pos)

#define CAPIFRC_CEVT1WE_(x)  (((x) << CAPIFRC_CEVT1WE_Pos) & CAPIFRC_CEVT1WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT2WE
  *  @access     ECAP->CAPIFRC
  *  @brief      CEVT2 bit write enable
  */
#define CAPIFRC_CEVT2WE_Pos  (10)
#define CAPIFRC_CEVT2WE_Msk  (0x1U << CAPIFRC_CEVT2WE_Pos)

#define CAPIFRC_CEVT2WE_DISABLE  ((0x0U) << CAPIFRC_CEVT2WE_Pos)
#define CAPIFRC_CEVT2WE_ENABLE   ((0x1U) << CAPIFRC_CEVT2WE_Pos)

#define CAPIFRC_CEVT2WE_(x)  (((x) << CAPIFRC_CEVT2WE_Pos) & CAPIFRC_CEVT2WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CEVT3WE
  *  @access     ECAP->CAPIFRC
  *  @brief      CEVT3 bit write enable
  */
#define CAPIFRC_CEVT3WE_Pos  (11)
#define CAPIFRC_CEVT3WE_Msk  (0x1U << CAPIFRC_CEVT3WE_Pos)

#define CAPIFRC_CEVT3WE_DISABLE  ((0x0U) << CAPIFRC_CEVT3WE_Pos)
#define CAPIFRC_CEVT3WE_ENABLE   ((0x1U) << CAPIFRC_CEVT3WE_Pos)

#define CAPIFRC_CEVT3WE_(x)  (((x) << CAPIFRC_CEVT3WE_Pos) & CAPIFRC_CEVT3WE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CNTOVFWE
  *  @access     ECAP->CAPIFRC
  *  @brief      CNTOVF bit write enable
  */
#define CAPIFRC_CNTOVFWE_Pos  (12)
#define CAPIFRC_CNTOVFWE_Msk  (0x1U << CAPIFRC_CNTOVFWE_Pos)

#define CAPIFRC_CNTOVFWE_DISABLE  ((0x0U) << CAPIFRC_CNTOVFWE_Pos)
#define CAPIFRC_CNTOVFWE_ENABLE   ((0x1U) << CAPIFRC_CNTOVFWE_Pos)

#define CAPIFRC_CNTOVFWE_(x)  (((x) << CAPIFRC_CNTOVFWE_Pos) & CAPIFRC_CNTOVFWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         PRDWE
  *  @access     ECAP->CAPIFRC
  *  @brief      PRD bit write enable
  */
#define CAPIFRC_PRDWE_Pos  (13)
#define CAPIFRC_PRDWE_Msk  (0x1U << CAPIFRC_PRDWE_Pos)

#define CAPIFRC_PRDWE_DISABLE  ((0x0U) << CAPIFRC_PRDWE_Pos)
#define CAPIFRC_PRDWE_ENABLE   ((0x1U) << CAPIFRC_PRDWE_Pos)

#define CAPIFRC_PRDWE_(x)  (((x) << CAPIFRC_PRDWE_Pos) & CAPIFRC_PRDWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPIFRC         CMPWE
  *  @access     ECAP->CAPIFRC
  *  @brief      CMP bit write enable
  */
#define CAPIFRC_CMPWE_Pos  (14)
#define CAPIFRC_CMPWE_Msk  (0x1U << CAPIFRC_CMPWE_Pos)

#define CAPIFRC_CMPWE_DISABLE  ((0x0U) << CAPIFRC_CMPWE_Pos)
#define CAPIFRC_CMPWE_ENABLE   ((0x1U) << CAPIFRC_CMPWE_Pos)

#define CAPIFRC_CMPWE_(x)  (((x) << CAPIFRC_CMPWE_Pos) & CAPIFRC_CMPWE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              ECAP            CAPREGKEY       KEY
  *  @access     ECAP->CAPREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected capture registers
  */
#define CAPREGKEY_KEY_Pos  (0)
#define CAPREGKEY_KEY_Msk  (0xFFFFFFFFU << CAPREGKEY_KEY_Pos)

#define CAPREGKEY_KEY_(x)  (((x) << CAPREGKEY_KEY_Pos) & CAPREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      I2C:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CCTL          EN
  *  @access     I2C->I2CCTL
  *  @brief      I2C enable (There are two I2C clock delay when enable or disable the I2C).
  *              When I2C is disabled, the following occurs:
  *              - The TX FIFO and RX FIFO get flushed.
  *              - Status bits in the I2CIF register are still active until I2C goes into IDLE
  *              state.
  *              - If the module is transmitting, it stops as well as deletes the contents of the
  *              transmit FIFO after the current transfer is complete.
  *              - If the module is receiving, the I2C stops the current transfer at the end of
  *              the current byte and does not acknowledge the transfer.
  */
#define I2CCTL_EN_Pos  (0)
#define I2CCTL_EN_Msk  (0x1U << I2CCTL_EN_Pos)

#define I2CCTL_EN_DISABLE  ((0x0U) << I2CCTL_EN_Pos)
#define I2CCTL_EN_ENABLE   ((0x1U) << I2CCTL_EN_Pos)

#define I2CCTL_EN_(x)  (((x) << I2CCTL_EN_Pos) & I2CCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CCTL          MODE
  *  @access     I2C->I2CCTL
  *  @brief      I2C mode
  */
#define I2CCTL_MODE_Pos  (1)
#define I2CCTL_MODE_Msk  (0x1U << I2CCTL_MODE_Pos)

#define I2CCTL_MODE_SLAVE   ((0x0U) << I2CCTL_MODE_Pos)
#define I2CCTL_MODE_MASTER  ((0x1U) << I2CCTL_MODE_Pos)

#define I2CCTL_MODE_(x)  (((x) << I2CCTL_MODE_Pos) & I2CCTL_MODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CCTL          SPEED
  *  @access     I2C->I2CCTL
  *  @brief      Speed in master mode
  */
#define I2CCTL_SPEED_Pos  (2)
#define I2CCTL_SPEED_Msk  (0x3U << I2CCTL_SPEED_Pos)

#define I2CCTL_SPEED_STANDARD  ((0x00U) << I2CCTL_SPEED_Pos)
#define I2CCTL_SPEED_FAST      ((0x01U) << I2CCTL_SPEED_Pos)
#define I2CCTL_SPEED_HIGH      ((0x02U) << I2CCTL_SPEED_Pos)

#define I2CCTL_SPEED_(x)  (((x) << I2CCTL_SPEED_Pos) & I2CCTL_SPEED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CCTL          ADDRMODE
  *  @access     I2C->I2CCTL
  *  @brief      Addressing mode
  */
#define I2CCTL_ADDRMODE_Pos  (4)
#define I2CCTL_ADDRMODE_Msk  (0x1U << I2CCTL_ADDRMODE_Pos)

#define I2CCTL_ADDRMODE_7BIT_ADDR   ((0x0U) << I2CCTL_ADDRMODE_Pos)
#define I2CCTL_ADDRMODE_10BIT_ADDR  ((0x1U) << I2CCTL_ADDRMODE_Pos)

#define I2CCTL_ADDRMODE_(x)  (((x) << I2CCTL_ADDRMODE_Pos) & I2CCTL_ADDRMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CCTL          RESTARTEN
  *  @access     I2C->I2CCTL
  *  @brief      Determines whether RESTART conditions may be sent when acting as a master. Some
  *              older slaves do not support handling RESTART conditions; however, RESTART
  *              conditions are used in several I2C operations.
  *              When RESTART is disabled, the master is prohibited from performing the following
  *              functions:
  *              - Change direction within a transfer (split)
  *              - Send a START BYTE
  *              - High-speed mode operation
  *              - Combined format transfers in 7-bit addressing modes
  *              - Read operation with a 10-bit address
  *              - Send multiple bytes per transfer By replacing RESTART condition followed by a
  *              STOP and a subsequent START condition, split operations are broken down into
  *              multiple I2C transfers. If the above operations are performed, it will result in
  *              setting bit 6 (TXABRT) of the I2CRAWIF register.
  */
#define I2CCTL_RESTARTEN_Pos  (5)
#define I2CCTL_RESTARTEN_Msk  (0x1U << I2CCTL_RESTARTEN_Pos)

#define I2CCTL_RESTARTEN_DISABLE  ((0x0U) << I2CCTL_RESTARTEN_Pos)
#define I2CCTL_RESTARTEN_ENABLE   ((0x1U) << I2CCTL_RESTARTEN_Pos)

#define I2CCTL_RESTARTEN_(x)  (((x) << I2CCTL_RESTARTEN_Pos) & I2CCTL_RESTARTEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CCTL          ACKGC
  *  @access     I2C->I2CCTL
  *  @brief      Respond upon General Call.
  *              This bit is applicable only for slave mode
  */
#define I2CCTL_ACKGC_Pos  (6)
#define I2CCTL_ACKGC_Msk  (0x1U << I2CCTL_ACKGC_Pos)

#define I2CCTL_ACKGC_NACK  ((0x0U) << I2CCTL_ACKGC_Pos)
#define I2CCTL_ACKGC_ACK   ((0x1U) << I2CCTL_ACKGC_Pos)

#define I2CCTL_ACKGC_(x)  (((x) << I2CCTL_ACKGC_Pos) & I2CCTL_ACKGC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CCTL          CLKSTRETCH
  *  @access     I2C->I2CCTL
  *  @brief      Clock stretch on RX FIFO full
  */
#define I2CCTL_CLKSTRETCH_Pos  (7)
#define I2CCTL_CLKSTRETCH_Msk  (0x1U << I2CCTL_CLKSTRETCH_Pos)

#define I2CCTL_CLKSTRETCH_DISABLE  ((0x0U) << I2CCTL_CLKSTRETCH_Pos)
#define I2CCTL_CLKSTRETCH_ENABLE   ((0x1U) << I2CCTL_CLKSTRETCH_Pos)

#define I2CCTL_CLKSTRETCH_(x)  (((x) << I2CCTL_CLKSTRETCH_Pos) & I2CCTL_CLKSTRETCH_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CMADDR        TARADDR
  *  @access     I2C->I2CMADDR
  *  @brief      Target address for any master transaction.
  *              These bits are ignored for issuing a General Call.
  *              To generate a START BYTE, the CPU needs to write only once into these bits.
  *              It should not be the same as I2CSLVADDR.
  */
#define I2CMADDR_TARADDR_Pos  (0)
#define I2CMADDR_TARADDR_Msk  (0x3FFU << I2CMADDR_TARADDR_Pos)

#define I2CMADDR_TARADDR_(x)  (((x) << I2CMADDR_TARADDR_Pos) & I2CMADDR_TARADDR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CMADDR        SPECIALCMD
  *  @access     I2C->I2CMADDR
  *  @brief      Special command
  */
#define I2CMADDR_SPECIALCMD_Pos  (10)
#define I2CMADDR_SPECIALCMD_Msk  (0x3U << I2CMADDR_SPECIALCMD_Pos)

#define I2CMADDR_SPECIALCMD_DISABLE       ((0x00U) << I2CMADDR_SPECIALCMD_Pos)
#define I2CMADDR_SPECIALCMD_GENERAL_CALL  ((0x02U) << I2CMADDR_SPECIALCMD_Pos)
#define I2CMADDR_SPECIALCMD_START_BYTE    ((0x03U) << I2CMADDR_SPECIALCMD_Pos)

#define I2CMADDR_SPECIALCMD_(x)  (((x) << I2CMADDR_SPECIALCMD_Pos) & I2CMADDR_SPECIALCMD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CMADDR        HSMCODE
  *  @access     I2C->I2CMADDR
  *  @brief      8-bit high-speed mode master code in format of (0x00001xxx)
  *              This register can be written only when the I2C interface is disabled
  *              (I2CCTL_EN=0) and the value to write is in valid format (00001xxx)
  *              Writes at other times have no effect.
  */
#define I2CMADDR_HSMCODE_Pos  (16)
#define I2CMADDR_HSMCODE_Msk  (0xFFU << I2CMADDR_HSMCODE_Pos)

#define I2CMADDR_HSMCODE_(x)  (((x) << I2CMADDR_HSMCODE_Pos) & I2CMADDR_HSMCODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSADDR        VAL
  *  @access     I2C->I2CSADDR
  *  @brief      Slave address when I2C acts as a slave
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  *              Note: The default values cannot be any of the reserved address locations: that
  *              is, 0x00 to 0x07, or 0x78 to 0x7f. The correct operation of the device is not
  *              guaranteed if you program the I2CSLVADDR or I2CMASTERADDR to a reserved value.
  */
#define I2CSADDR_VAL_Pos  (0)
#define I2CSADDR_VAL_Msk  (0x3FFU << I2CSADDR_VAL_Pos)

#define I2CSADDR_VAL_(x)  (((x) << I2CSADDR_VAL_Pos) & I2CSADDR_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CDATACMD      DATA
  *  @access     I2C->I2CDATACMD
  *  @brief      Data transmitted or received on the I2C bus.
  *              A write to the register sets the data to be transmitted.
  *              A read to the register gets the received data.
  */
#define I2CDATACMD_DATA_Pos  (0)
#define I2CDATACMD_DATA_Msk  (0xFFU << I2CDATACMD_DATA_Pos)

#define I2CDATACMD_DATA_(x)  (((x) << I2CDATACMD_DATA_Pos) & I2CDATACMD_DATA_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CDATACMD      CMD
  *  @access     I2C->I2CDATACMD
  *  @brief      Read or write control
  */
#define I2CDATACMD_CMD_Pos  (8)
#define I2CDATACMD_CMD_Msk  (0x1U << I2CDATACMD_CMD_Pos)

#define I2CDATACMD_CMD_WRITE  ((0x0U) << I2CDATACMD_CMD_Pos)
#define I2CDATACMD_CMD_READ   ((0x1U) << I2CDATACMD_CMD_Pos)

#define I2CDATACMD_CMD_(x)  (((x) << I2CDATACMD_CMD_Pos) & I2CDATACMD_CMD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSSLCNT       VAL
  *  @access     I2C->I2CSSLCNT
  *  @brief      Duration for SCL low in standard speed mode.
  *              i.e. SCL is low for I2CSSLCNT clock cycles
  *              The minimum valid value is 4. Write a value below 4 will be reset as 4 by the
  *              hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CSSLCNT_VAL_Pos  (0)
#define I2CSSLCNT_VAL_Msk  (0xFFFFU << I2CSSLCNT_VAL_Pos)

#define I2CSSLCNT_VAL_(x)  (((x) << I2CSSLCNT_VAL_Pos) & I2CSSLCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSSHCNT       VAL
  *  @access     I2C->I2CSSHCNT
  *  @brief      Duration for SCL high in standard speed mode.
  *              i.e. SCL is high for I2CSSHCNT clock cycles
  *              The minimum valid value is 5. Write a value below 5 will be reset as 5 by the
  *              hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CSSHCNT_VAL_Pos  (0)
#define I2CSSHCNT_VAL_Msk  (0xFFFFU << I2CSSHCNT_VAL_Pos)

#define I2CSSHCNT_VAL_(x)  (((x) << I2CSSHCNT_VAL_Pos) & I2CSSHCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CFSLCNT       VAL
  *  @access     I2C->I2CFSLCNT
  *  @brief      Duration for SCL low in fast speed mode.
  *              i.e. SCL is low for I2CFSLCNT clock cycles
  *              The minimum valid value is 4. Write a value below 4 will be reset as 4 by the
  *              hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CFSLCNT_VAL_Pos  (0)
#define I2CFSLCNT_VAL_Msk  (0xFFFFU << I2CFSLCNT_VAL_Pos)

#define I2CFSLCNT_VAL_(x)  (((x) << I2CFSLCNT_VAL_Pos) & I2CFSLCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CFSHCNT       VAL
  *  @access     I2C->I2CFSHCNT
  *  @brief      Duration for SCL high in fast speed mode.
  *              i.e. SCL is high for I2CFSHCNT clock cycles
  *              The minimum valid value is 5. Write a value below 5 will be reset as 5 by the
  *              hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CFSHCNT_VAL_Pos  (0)
#define I2CFSHCNT_VAL_Msk  (0xFFFFU << I2CFSHCNT_VAL_Pos)

#define I2CFSHCNT_VAL_(x)  (((x) << I2CFSHCNT_VAL_Pos) & I2CFSHCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CHSLCNT       VAL
  *  @access     I2C->I2CHSLCNT
  *  @brief      Duration for SCL low in high speed mode.
  *              i.e. SCL is low for I2CHSLCNT clock cycles
  *              The minimum valid value is 4. Write a value below 4 will be reset as 4 by the
  *              hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CHSLCNT_VAL_Pos  (0)
#define I2CHSLCNT_VAL_Msk  (0xFFFFU << I2CHSLCNT_VAL_Pos)

#define I2CHSLCNT_VAL_(x)  (((x) << I2CHSLCNT_VAL_Pos) & I2CHSLCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CHSHCNT       VAL
  *  @access     I2C->I2CHSHCNT
  *  @brief      Duration for SCL high in high speed mode.
  *              i.e. SCL is high for I2CHSHCNT clock cycles
  *              The minimum valid value is 1. Write a 0 will be reset as 1 by the hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CHSHCNT_VAL_Pos  (0)
#define I2CHSHCNT_VAL_Msk  (0xFFFFU << I2CHSHCNT_VAL_Pos)

#define I2CHSHCNT_VAL_(x)  (((x) << I2CHSHCNT_VAL_Pos) & I2CHSHCNT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CFSSPKLEN     VAL
  *  @access     I2C->I2CFSSPKLEN
  *  @brief      Duration in fast speed mode of the longest spike in the SCL or SDA lines that
  *              are filtered out by the spike suppression logic.
  *              The minimum value is 1 and write a 0 will be reset as 1 by the hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CFSSPKLEN_VAL_Pos  (0)
#define I2CFSSPKLEN_VAL_Msk  (0xFFU << I2CFSSPKLEN_VAL_Pos)

#define I2CFSSPKLEN_VAL_(x)  (((x) << I2CFSSPKLEN_VAL_Pos) & I2CFSSPKLEN_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CHSSPKLEN     VAL
  *  @access     I2C->I2CHSSPKLEN
  *  @brief      Duration in high speed mode of the longest spike in the SCL or SDA lines that
  *              are filtered out by the spike suppression logic.
  *              The minimum value is 1 and write a 0 will be reset as 1 by the hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CHSSPKLEN_VAL_Pos  (0)
#define I2CHSSPKLEN_VAL_Msk  (0xFFU << I2CHSSPKLEN_VAL_Pos)

#define I2CHSSPKLEN_VAL_(x)  (((x) << I2CHSSPKLEN_VAL_Pos) & I2CHSSPKLEN_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSDASETUP     VAL
  *  @access     I2C->I2CSDASETUP
  *  @brief      Configure SDA setup time as VAL CLK_I2C cycles
  *              i.e. If the required setup delay is 1000ns, then for an CLK_I2C frequency of 10
  *              MHz, this register is recommended to be programmed as 11.
  *              The minimum value is 2 and write a value below 2 will be reset as 2 by the
  *              hardware.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CSDASETUP_VAL_Pos  (0)
#define I2CSDASETUP_VAL_Msk  (0xFFU << I2CSDASETUP_VAL_Pos)

#define I2CSDASETUP_VAL_DELAY_CLK(x)  (((x) << I2CSDASETUP_VAL_Pos) & I2CSDASETUP_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSDAHOLD      VAL
  *  @access     I2C->I2CSDAHOLD
  *  @brief      Configure SDA hold time as VAL CLK_I2C cycles
  *              i.e. If the required hold delay is 1000ns, then for an CLK_I2C frequency of 10
  *              MHz, this register is recommended to be programmed as 11.
  *              This register can be written only when I2CCTL_EN=0. Writes at other times have
  *              no effect.
  */
#define I2CSDAHOLD_VAL_Pos  (0)
#define I2CSDAHOLD_VAL_Msk  (0xFFFFU << I2CSDAHOLD_VAL_Pos)

#define I2CSDAHOLD_VAL_DELAY_CLK(x)  (((x) << I2CSDAHOLD_VAL_Pos) & I2CSDAHOLD_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXLVL        VAL
  *  @access     I2C->I2CTXLVL
  *  @brief      Number of valid data entries in the transmit FIFO.
  */
#define I2CTXLVL_VAL_Pos  (0)
#define I2CTXLVL_VAL_Msk  (0x1FU << I2CTXLVL_VAL_Pos)

#define I2CTXLVL_VAL_(x)  (((x) << I2CTXLVL_VAL_Pos) & I2CTXLVL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRXLVL        VAL
  *  @access     I2C->I2CRXLVL
  *  @brief      Number of valid data entries in the receive FIFO.
  */
#define I2CRXLVL_VAL_Pos  (0)
#define I2CRXLVL_VAL_Msk  (0x1FU << I2CRXLVL_VAL_Pos)

#define I2CRXLVL_VAL_(x)  (((x) << I2CRXLVL_VAL_Pos) & I2CRXLVL_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXTH         VAL
  *  @access     I2C->I2CTXTH
  *  @brief      Transmit FIFO threshold level to trigger the TFEMPTY interrupt
  */
#define I2CTXTH_VAL_Pos  (0)
#define I2CTXTH_VAL_Msk  (0xFU << I2CTXTH_VAL_Pos)

#define I2CTXTH_VAL_(x)  (((x) << I2CTXTH_VAL_Pos) & I2CTXTH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRXTH         VAL
  *  @access     I2C->I2CRXTH
  *  @brief      Receive FIFO threshold level to trigger the RFFULL interrupt
  */
#define I2CRXTH_VAL_Pos  (0)
#define I2CRXTH_VAL_Msk  (0xFU << I2CRXTH_VAL_Pos)

#define I2CRXTH_VAL_(x)  (((x) << I2CRXTH_VAL_Pos) & I2CRXTH_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          ACT
  *  @access     I2C->I2CSTS
  *  @brief      I2C activity status (Logic OR of SACT and MACT)
  */
#define I2CSTS_ACT_Pos  (0)
#define I2CSTS_ACT_Msk  (0x1U << I2CSTS_ACT_Pos)

#define I2CSTS_ACT_IDLE    ((0x0U) << I2CSTS_ACT_Pos)
#define I2CSTS_ACT_ACTIVE  ((0x1U) << I2CSTS_ACT_Pos)

#define I2CSTS_ACT_(x)  (((x) << I2CSTS_ACT_Pos) & I2CSTS_ACT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          MACT
  *  @access     I2C->I2CSTS
  *  @brief      Master FSM activity status
  */
#define I2CSTS_MACT_Pos  (1)
#define I2CSTS_MACT_Msk  (0x1U << I2CSTS_MACT_Pos)

#define I2CSTS_MACT_IDLE    ((0x0U) << I2CSTS_MACT_Pos)
#define I2CSTS_MACT_ACTIVE  ((0x1U) << I2CSTS_MACT_Pos)

#define I2CSTS_MACT_(x)  (((x) << I2CSTS_MACT_Pos) & I2CSTS_MACT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          SACT
  *  @access     I2C->I2CSTS
  *  @brief      Slave FSM (Finite State Machine) activity status
  */
#define I2CSTS_SACT_Pos  (2)
#define I2CSTS_SACT_Msk  (0x1U << I2CSTS_SACT_Pos)

#define I2CSTS_SACT_IDLE    ((0x0U) << I2CSTS_SACT_Pos)
#define I2CSTS_SACT_ACTIVE  ((0x1U) << I2CSTS_SACT_Pos)

#define I2CSTS_SACT_(x)  (((x) << I2CSTS_SACT_Pos) & I2CSTS_SACT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          TXEMPTY
  *  @access     I2C->I2CSTS
  *  @brief      Transmit FIFO completely empty
  */
#define I2CSTS_TXEMPTY_Pos  (3)
#define I2CSTS_TXEMPTY_Msk  (0x1U << I2CSTS_TXEMPTY_Pos)

#define I2CSTS_TXEMPTY_NOT_EMPTY  ((0x0U) << I2CSTS_TXEMPTY_Pos)
#define I2CSTS_TXEMPTY_EMPTY      ((0x1U) << I2CSTS_TXEMPTY_Pos)

#define I2CSTS_TXEMPTY_(x)  (((x) << I2CSTS_TXEMPTY_Pos) & I2CSTS_TXEMPTY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          TXNF
  *  @access     I2C->I2CSTS
  *  @brief      Transmit FIFO not full (so can write data to it)
  */
#define I2CSTS_TXNF_Pos  (4)
#define I2CSTS_TXNF_Msk  (0x1U << I2CSTS_TXNF_Pos)

#define I2CSTS_TXNF_FULL      ((0x0U) << I2CSTS_TXNF_Pos)
#define I2CSTS_TXNF_NOT_FULL  ((0x1U) << I2CSTS_TXNF_Pos)

#define I2CSTS_TXNF_(x)  (((x) << I2CSTS_TXNF_Pos) & I2CSTS_TXNF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          RXNE
  *  @access     I2C->I2CSTS
  *  @brief      Receive FIFO not empty (so can read data from it)
  */
#define I2CSTS_RXNE_Pos  (5)
#define I2CSTS_RXNE_Msk  (0x1U << I2CSTS_RXNE_Pos)

#define I2CSTS_RXNE_EMPTY      ((0x0U) << I2CSTS_RXNE_Pos)
#define I2CSTS_RXNE_NOT_EMPTY  ((0x1U) << I2CSTS_RXNE_Pos)

#define I2CSTS_RXNE_(x)  (((x) << I2CSTS_RXNE_Pos) & I2CSTS_RXNE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          RXFULL
  *  @access     I2C->I2CSTS
  *  @brief      Receive FIFO completely full
  */
#define I2CSTS_RXFULL_Pos  (6)
#define I2CSTS_RXFULL_Msk  (0x1U << I2CSTS_RXFULL_Pos)

#define I2CSTS_RXFULL_NOT_FULL  ((0x0U) << I2CSTS_RXFULL_Pos)
#define I2CSTS_RXFULL_FULL      ((0x1U) << I2CSTS_RXFULL_Pos)

#define I2CSTS_RXFULL_(x)  (((x) << I2CSTS_RXFULL_Pos) & I2CSTS_RXFULL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          EN
  *  @access     I2C->I2CSTS
  *  @brief      I2C enabled status
  */
#define I2CSTS_EN_Pos  (7)
#define I2CSTS_EN_Msk  (0x1U << I2CSTS_EN_Pos)

#define I2CSTS_EN_DISABLE  ((0x0U) << I2CSTS_EN_Pos)
#define I2CSTS_EN_ENABLE   ((0x1U) << I2CSTS_EN_Pos)

#define I2CSTS_EN_(x)  (((x) << I2CSTS_EN_Pos) & I2CSTS_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          SRXABRT
  *  @access     I2C->I2CSTS
  *  @brief      Slave disabled while it is busy
  */
#define I2CSTS_SRXABRT_Pos  (8)
#define I2CSTS_SRXABRT_Msk  (0x1U << I2CSTS_SRXABRT_Pos)

#define I2CSTS_SRXABRT_NOT_OCCUR  ((0x0U) << I2CSTS_SRXABRT_Pos)
#define I2CSTS_SRXABRT_OCCUR      ((0x1U) << I2CSTS_SRXABRT_Pos)

#define I2CSTS_SRXABRT_(x)  (((x) << I2CSTS_SRXABRT_Pos) & I2CSTS_SRXABRT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CSTS          SRXDLOST
  *  @access     I2C->I2CSTS
  *  @brief      Slave received data lost upon disable I2C
  */
#define I2CSTS_SRXDLOST_Pos  (9)
#define I2CSTS_SRXDLOST_Msk  (0x1U << I2CSTS_SRXDLOST_Pos)

#define I2CSTS_SRXDLOST_NOT_OCCUR  ((0x0U) << I2CSTS_SRXDLOST_Pos)
#define I2CSTS_SRXDLOST_OCCUR      ((0x1U) << I2CSTS_SRXDLOST_Pos)

#define I2CSTS_SRXDLOST_(x)  (((x) << I2CSTS_SRXDLOST_Pos) & I2CSTS_SRXDLOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    ADDR7BNACK
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when master is in 7-bit addressing mode and the address sent was
  *              not acknowledged by any slave.
  */
#define I2CTXABRTSRC_ADDR7BNACK_Pos  (0)
#define I2CTXABRTSRC_ADDR7BNACK_Msk  (0x1U << I2CTXABRTSRC_ADDR7BNACK_Pos)

#define I2CTXABRTSRC_ADDR7BNACK_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_ADDR7BNACK_Pos)
#define I2CTXABRTSRC_ADDR7BNACK_OCCUR      ((0x1U) << I2CTXABRTSRC_ADDR7BNACK_Pos)

#define I2CTXABRTSRC_ADDR7BNACK_(x)  (((x) << I2CTXABRTSRC_ADDR7BNACK_Pos) & I2CTXABRTSRC_ADDR7BNACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    ADDR10B1NACK
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when master is in 10-bit address mode and the first 10-bit
  *              address byte was not acknowledged by any slave.
  */
#define I2CTXABRTSRC_ADDR10B1NACK_Pos  (1)
#define I2CTXABRTSRC_ADDR10B1NACK_Msk  (0x1U << I2CTXABRTSRC_ADDR10B1NACK_Pos)

#define I2CTXABRTSRC_ADDR10B1NACK_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_ADDR10B1NACK_Pos)
#define I2CTXABRTSRC_ADDR10B1NACK_OCCUR      ((0x1U) << I2CTXABRTSRC_ADDR10B1NACK_Pos)

#define I2CTXABRTSRC_ADDR10B1NACK_(x)  (((x) << I2CTXABRTSRC_ADDR10B1NACK_Pos) & I2CTXABRTSRC_ADDR10B1NACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    ADDR10B2NACK
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when master is in 10-bit address mode and the second address
  *              byte of the 10-bit address was not acknowledged by any slave.
  */
#define I2CTXABRTSRC_ADDR10B2NACK_Pos  (2)
#define I2CTXABRTSRC_ADDR10B2NACK_Msk  (0x1U << I2CTXABRTSRC_ADDR10B2NACK_Pos)

#define I2CTXABRTSRC_ADDR10B2NACK_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_ADDR10B2NACK_Pos)
#define I2CTXABRTSRC_ADDR10B2NACK_OCCUR      ((0x1U) << I2CTXABRTSRC_ADDR10B2NACK_Pos)

#define I2CTXABRTSRC_ADDR10B2NACK_(x)  (((x) << I2CTXABRTSRC_ADDR10B2NACK_Pos) & I2CTXABRTSRC_ADDR10B2NACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    TXDNACK
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter
  *              This bit is set when master has received an acknowledgement for the address, but
  *              when it sent data byte(s) following the address, it did not receive an
  *              acknowledge from the remote slave(s).
  */
#define I2CTXABRTSRC_TXDNACK_Pos  (3)
#define I2CTXABRTSRC_TXDNACK_Msk  (0x1U << I2CTXABRTSRC_TXDNACK_Pos)

#define I2CTXABRTSRC_TXDNACK_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_TXDNACK_Pos)
#define I2CTXABRTSRC_TXDNACK_OCCUR      ((0x1U) << I2CTXABRTSRC_TXDNACK_Pos)

#define I2CTXABRTSRC_TXDNACK_(x)  (((x) << I2CTXABRTSRC_TXDNACK_Pos) & I2CTXABRTSRC_TXDNACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    GCNACK
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter
  *              This bit is set when master sent a General Call and no slave on the bus
  *              acknowledged the General Call.
  */
#define I2CTXABRTSRC_GCNACK_Pos  (4)
#define I2CTXABRTSRC_GCNACK_Msk  (0x1U << I2CTXABRTSRC_GCNACK_Pos)

#define I2CTXABRTSRC_GCNACK_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_GCNACK_Pos)
#define I2CTXABRTSRC_GCNACK_OCCUR      ((0x1U) << I2CTXABRTSRC_GCNACK_Pos)

#define I2CTXABRTSRC_GCNACK_(x)  (((x) << I2CTXABRTSRC_GCNACK_Pos) & I2CTXABRTSRC_GCNACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    GCREAD
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter
  *              This bit is set when master sent a General Call but the user programmed the byte
  *              following the General Call to be a read from the bus (I2CDATACMD_CMD=1).
  */
#define I2CTXABRTSRC_GCREAD_Pos  (5)
#define I2CTXABRTSRC_GCREAD_Msk  (0x1U << I2CTXABRTSRC_GCREAD_Pos)

#define I2CTXABRTSRC_GCREAD_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_GCREAD_Pos)
#define I2CTXABRTSRC_GCREAD_OCCUR      ((0x1U) << I2CTXABRTSRC_GCREAD_Pos)

#define I2CTXABRTSRC_GCREAD_(x)  (((x) << I2CTXABRTSRC_GCREAD_Pos) & I2CTXABRTSRC_GCREAD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    HSMCACK
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when master is in high speed mode and the high speed master code
  *              was acknowledged (wrong behavior).
  */
#define I2CTXABRTSRC_HSMCACK_Pos  (6)
#define I2CTXABRTSRC_HSMCACK_Msk  (0x1U << I2CTXABRTSRC_HSMCACK_Pos)

#define I2CTXABRTSRC_HSMCACK_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_HSMCACK_Pos)
#define I2CTXABRTSRC_HSMCACK_OCCUR      ((0x1U) << I2CTXABRTSRC_HSMCACK_Pos)

#define I2CTXABRTSRC_HSMCACK_(x)  (((x) << I2CTXABRTSRC_HSMCACK_Pos) & I2CTXABRTSRC_HSMCACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    STARTACK
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when master has sent a START Byte and the START Byte was
  *              acknowledged (wrong behavior).
  */
#define I2CTXABRTSRC_STARTACK_Pos  (7)
#define I2CTXABRTSRC_STARTACK_Msk  (0x1U << I2CTXABRTSRC_STARTACK_Pos)

#define I2CTXABRTSRC_STARTACK_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_STARTACK_Pos)
#define I2CTXABRTSRC_STARTACK_OCCUR      ((0x1U) << I2CTXABRTSRC_STARTACK_Pos)

#define I2CTXABRTSRC_STARTACK_(x)  (((x) << I2CTXABRTSRC_STARTACK_Pos) & I2CTXABRTSRC_STARTACK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    HSNORESTART
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when the restart is disabled (I2CCTL.RESTARTEN=0) and the user
  *              is trying to use the master to transfer data in high speed mode.
  */
#define I2CTXABRTSRC_HSNORESTART_Pos  (8)
#define I2CTXABRTSRC_HSNORESTART_Msk  (0x1U << I2CTXABRTSRC_HSNORESTART_Pos)

#define I2CTXABRTSRC_HSNORESTART_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_HSNORESTART_Pos)
#define I2CTXABRTSRC_HSNORESTART_OCCUR      ((0x1U) << I2CTXABRTSRC_HSNORESTART_Pos)

#define I2CTXABRTSRC_HSNORESTART_(x)  (((x) << I2CTXABRTSRC_HSNORESTART_Pos) & I2CTXABRTSRC_HSNORESTART_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    STARTNORESTART
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when the restart is disabled (I2CCTL.RESTARTEN=0) and the user
  *              is trying to send a START Byte.
  *              Follow configurations below to avoid this error
  *              (1) I2CCTL.RESTARTEN=1
  *              (2) I2CMASTERADDR.SPECIAL=0 or I2CMASTERADDR.GCORSTART=0
  *              Otherwise, this bit is set again at next clock after it is cleared by writing a
  *              1 to I2CIC_TXABRT
  */
#define I2CTXABRTSRC_STARTNORESTART_Pos  (9)
#define I2CTXABRTSRC_STARTNORESTART_Msk  (0x1U << I2CTXABRTSRC_STARTNORESTART_Pos)

#define I2CTXABRTSRC_STARTNORESTART_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_STARTNORESTART_Pos)
#define I2CTXABRTSRC_STARTNORESTART_OCCUR      ((0x1U) << I2CTXABRTSRC_STARTNORESTART_Pos)

#define I2CTXABRTSRC_STARTNORESTART_(x)  (((x) << I2CTXABRTSRC_STARTNORESTART_Pos) & I2CTXABRTSRC_STARTNORESTART_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    RD10BNORESTART
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master receiver
  *              This bit is set when the restart is disabled (I2CCTL.RESTARTEN=0) and the master
  *              sends a read command in 10-bit addressing mode.
  */
#define I2CTXABRTSRC_RD10BNORESTART_Pos  (10)
#define I2CTXABRTSRC_RD10BNORESTART_Msk  (0x1U << I2CTXABRTSRC_RD10BNORESTART_Pos)

#define I2CTXABRTSRC_RD10BNORESTART_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_RD10BNORESTART_Pos)
#define I2CTXABRTSRC_RD10BNORESTART_OCCUR      ((0x1U) << I2CTXABRTSRC_RD10BNORESTART_Pos)

#define I2CTXABRTSRC_RD10BNORESTART_(x)  (((x) << I2CTXABRTSRC_RD10BNORESTART_Pos) & I2CTXABRTSRC_RD10BNORESTART_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    MDISABLED
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master transmitter/receiver
  *              This bit is set when user tries to initiate a master operation with the master
  *              mode is disabled.
  */
#define I2CTXABRTSRC_MDISABLED_Pos  (11)
#define I2CTXABRTSRC_MDISABLED_Msk  (0x1U << I2CTXABRTSRC_MDISABLED_Pos)

#define I2CTXABRTSRC_MDISABLED_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_MDISABLED_Pos)
#define I2CTXABRTSRC_MDISABLED_OCCUR      ((0x1U) << I2CTXABRTSRC_MDISABLED_Pos)

#define I2CTXABRTSRC_MDISABLED_(x)  (((x) << I2CTXABRTSRC_MDISABLED_Pos) & I2CTXABRTSRC_MDISABLED_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    MARBLOST
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Master/slave transmitter
  *              This bit is set when master has lost arbitration, or if I2CTXABRTSRC.SARBLOST is
  *              also set, then the slave transmitter has lost arbitration.
  */
#define I2CTXABRTSRC_MARBLOST_Pos  (12)
#define I2CTXABRTSRC_MARBLOST_Msk  (0x1U << I2CTXABRTSRC_MARBLOST_Pos)

#define I2CTXABRTSRC_MARBLOST_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_MARBLOST_Pos)
#define I2CTXABRTSRC_MARBLOST_OCCUR      ((0x1U) << I2CTXABRTSRC_MARBLOST_Pos)

#define I2CTXABRTSRC_MARBLOST_(x)  (((x) << I2CTXABRTSRC_MARBLOST_Pos) & I2CTXABRTSRC_MARBLOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    STFIFOCLR
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Slave transmitter
  *              This bis is set when slave has received a read command and some data exists in
  *              the TX FIFO so the slave issues a TXABRT interrupt to clear old data in TX FIFO.
  */
#define I2CTXABRTSRC_STFIFOCLR_Pos  (13)
#define I2CTXABRTSRC_STFIFOCLR_Msk  (0x1U << I2CTXABRTSRC_STFIFOCLR_Pos)

#define I2CTXABRTSRC_STFIFOCLR_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_STFIFOCLR_Pos)
#define I2CTXABRTSRC_STFIFOCLR_OCCUR      ((0x1U) << I2CTXABRTSRC_STFIFOCLR_Pos)

#define I2CTXABRTSRC_STFIFOCLR_(x)  (((x) << I2CTXABRTSRC_STFIFOCLR_Pos) & I2CTXABRTSRC_STFIFOCLR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    SARBLOST
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Slave transmitter
  *              This bit is set when slave lost the bus while transmitting data to a remote
  *              master. I2CTXABRTSRC.MARBLOST is set at the same time.
  *              Note: Even though the slave never 'owns' the bus, something could go wrong on
  *              the bus. This is a failsafe check. For instance, during a data transmission at
  *              the low-to-high transition of SCL, if what is on the data bus is not what is
  *              supposed to be transmitted, then I2C no longer own the bus.
  */
#define I2CTXABRTSRC_SARBLOST_Pos  (14)
#define I2CTXABRTSRC_SARBLOST_Msk  (0x1U << I2CTXABRTSRC_SARBLOST_Pos)

#define I2CTXABRTSRC_SARBLOST_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_SARBLOST_Pos)
#define I2CTXABRTSRC_SARBLOST_OCCUR      ((0x1U) << I2CTXABRTSRC_SARBLOST_Pos)

#define I2CTXABRTSRC_SARBLOST_(x)  (((x) << I2CTXABRTSRC_SARBLOST_Pos) & I2CTXABRTSRC_SARBLOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CTXABRTSRC    SCMDERR
  *  @access     I2C->I2CTXABRTSRC
  *  @brief      Role of I2C: Slave transmitter
  *              This bit is set when the processor side responds to a slave mode request for
  *              data to be transmitted to a remote master and user writes a 1 in CMD (bit 8) of
  *              I2CDATACMD register.
  */
#define I2CTXABRTSRC_SCMDERR_Pos  (15)
#define I2CTXABRTSRC_SCMDERR_Msk  (0x1U << I2CTXABRTSRC_SCMDERR_Pos)

#define I2CTXABRTSRC_SCMDERR_NOT_OCCUR  ((0x0U) << I2CTXABRTSRC_SCMDERR_Pos)
#define I2CTXABRTSRC_SCMDERR_OCCUR      ((0x1U) << I2CTXABRTSRC_SCMDERR_Pos)

#define I2CTXABRTSRC_SCMDERR_(x)  (((x) << I2CTXABRTSRC_SCMDERR_Pos) & I2CTXABRTSRC_SCMDERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        RXUDF
  *  @access     I2C->I2CRAWIF
  *  @brief      Flag to indicate the processor attempts to read the receive FIFO via I2CDATACMD
  *              register when it is empty
  */
#define I2CRAWIF_RXUDF_Pos  (0)
#define I2CRAWIF_RXUDF_Msk  (0x1U << I2CRAWIF_RXUDF_Pos)

#define I2CRAWIF_RXUDF_NOT_OCCUR  ((0x0U) << I2CRAWIF_RXUDF_Pos)
#define I2CRAWIF_RXUDF_OCCUR      ((0x1U) << I2CRAWIF_RXUDF_Pos)

#define I2CRAWIF_RXUDF_(x)  (((x) << I2CRAWIF_RXUDF_Pos) & I2CRAWIF_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        RXOVF
  *  @access     I2C->I2CRAWIF
  *  @brief      Flag to indicate the receive FIFO is completely filled to 16 and an additional
  *              byte is received from an external I2C device. The I2C acknowledges this, but any
  *              data bytes received after the FIFO is full are lost.
  */
#define I2CRAWIF_RXOVF_Pos  (1)
#define I2CRAWIF_RXOVF_Msk  (0x1U << I2CRAWIF_RXOVF_Pos)

#define I2CRAWIF_RXOVF_NOT_OCCUR  ((0x0U) << I2CRAWIF_RXOVF_Pos)
#define I2CRAWIF_RXOVF_OCCUR      ((0x1U) << I2CRAWIF_RXOVF_Pos)

#define I2CRAWIF_RXOVF_(x)  (((x) << I2CRAWIF_RXOVF_Pos) & I2CRAWIF_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        RXDAV
  *  @access     I2C->I2CRAWIF
  *  @brief      Flag to indicate there is enough data in the receive FIFO and available for read
  */
#define I2CRAWIF_RXDAV_Pos  (2)
#define I2CRAWIF_RXDAV_Msk  (0x1U << I2CRAWIF_RXDAV_Pos)

#define I2CRAWIF_RXDAV_NOT_OCCUR  ((0x0U) << I2CRAWIF_RXDAV_Pos)
#define I2CRAWIF_RXDAV_OCCUR      ((0x1U) << I2CRAWIF_RXDAV_Pos)

#define I2CRAWIF_RXDAV_(x)  (((x) << I2CRAWIF_RXDAV_Pos) & I2CRAWIF_RXDAV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        TXOVF
  *  @access     I2C->I2CRAWIF
  *  @brief      Flag to indicate an attempt to write I2CDATACMD register when transmit FIFO is
  *              full
  */
#define I2CRAWIF_TXOVF_Pos  (3)
#define I2CRAWIF_TXOVF_Msk  (0x1U << I2CRAWIF_TXOVF_Pos)

#define I2CRAWIF_TXOVF_NOT_OCCUR  ((0x0U) << I2CRAWIF_TXOVF_Pos)
#define I2CRAWIF_TXOVF_OCCUR      ((0x1U) << I2CRAWIF_TXOVF_Pos)

#define I2CRAWIF_TXOVF_(x)  (((x) << I2CRAWIF_TXOVF_Pos) & I2CRAWIF_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        TXDREQ
  *  @access     I2C->I2CRAWIF
  *  @brief      Flag to indicate there is not enough data in the transmit FIFO and request for
  *              more data
  */
#define I2CRAWIF_TXDREQ_Pos  (4)
#define I2CRAWIF_TXDREQ_Msk  (0x1U << I2CRAWIF_TXDREQ_Pos)

#define I2CRAWIF_TXDREQ_NOT_OCCUR  ((0x0U) << I2CRAWIF_TXDREQ_Pos)
#define I2CRAWIF_TXDREQ_OCCUR      ((0x1U) << I2CRAWIF_TXDREQ_Pos)

#define I2CRAWIF_TXDREQ_(x)  (((x) << I2CRAWIF_TXDREQ_Pos) & I2CRAWIF_TXDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        RDREQ
  *  @access     I2C->I2CRAWIF
  *  @brief      Latched external master read request flag when the I2C is acting as a slave
  */
#define I2CRAWIF_RDREQ_Pos  (5)
#define I2CRAWIF_RDREQ_Msk  (0x1U << I2CRAWIF_RDREQ_Pos)

#define I2CRAWIF_RDREQ_NOT_OCCUR  ((0x0U) << I2CRAWIF_RDREQ_Pos)
#define I2CRAWIF_RDREQ_OCCUR      ((0x1U) << I2CRAWIF_RDREQ_Pos)

#define I2CRAWIF_RDREQ_(x)  (((x) << I2CRAWIF_RDREQ_Pos) & I2CRAWIF_RDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        TXABRT
  *  @access     I2C->I2CRAWIF
  *  @brief      Latched transmission abort flag
  */
#define I2CRAWIF_TXABRT_Pos  (6)
#define I2CRAWIF_TXABRT_Msk  (0x1U << I2CRAWIF_TXABRT_Pos)

#define I2CRAWIF_TXABRT_NOT_OCCUR  ((0x0U) << I2CRAWIF_TXABRT_Pos)
#define I2CRAWIF_TXABRT_OCCUR      ((0x1U) << I2CRAWIF_TXABRT_Pos)

#define I2CRAWIF_TXABRT_(x)  (((x) << I2CRAWIF_TXABRT_Pos) & I2CRAWIF_TXABRT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        RXDONE
  *  @access     I2C->I2CRAWIF
  *  @brief      Flag to indicate external master receive is done when I2C acts as a slave
  *              transmitter
  */
#define I2CRAWIF_RXDONE_Pos  (7)
#define I2CRAWIF_RXDONE_Msk  (0x1U << I2CRAWIF_RXDONE_Pos)

#define I2CRAWIF_RXDONE_NOT_OCCUR  ((0x0U) << I2CRAWIF_RXDONE_Pos)
#define I2CRAWIF_RXDONE_OCCUR      ((0x1U) << I2CRAWIF_RXDONE_Pos)

#define I2CRAWIF_RXDONE_(x)  (((x) << I2CRAWIF_RXDONE_Pos) & I2CRAWIF_RXDONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        ACT
  *  @access     I2C->I2CRAWIF
  *  @brief      Latched I2C activity status flag
  */
#define I2CRAWIF_ACT_Pos  (8)
#define I2CRAWIF_ACT_Msk  (0x1U << I2CRAWIF_ACT_Pos)

#define I2CRAWIF_ACT_NOT_OCCUR  ((0x0U) << I2CRAWIF_ACT_Pos)
#define I2CRAWIF_ACT_OCCUR      ((0x1U) << I2CRAWIF_ACT_Pos)

#define I2CRAWIF_ACT_(x)  (((x) << I2CRAWIF_ACT_Pos) & I2CRAWIF_ACT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        ACKDET
  *  @access     I2C->I2CRAWIF
  *  @brief      Latched flag for detected ACK from external receiver
  */
#define I2CRAWIF_ACKDET_Pos  (9)
#define I2CRAWIF_ACKDET_Msk  (0x1U << I2CRAWIF_ACKDET_Pos)

#define I2CRAWIF_ACKDET_NOT_OCCUR  ((0x0U) << I2CRAWIF_ACKDET_Pos)
#define I2CRAWIF_ACKDET_OCCUR      ((0x1U) << I2CRAWIF_ACKDET_Pos)

#define I2CRAWIF_ACKDET_(x)  (((x) << I2CRAWIF_ACKDET_Pos) & I2CRAWIF_ACKDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        STOPDET
  *  @access     I2C->I2CRAWIF
  *  @brief      STOP condition flag
  */
#define I2CRAWIF_STOPDET_Pos  (10)
#define I2CRAWIF_STOPDET_Msk  (0x1U << I2CRAWIF_STOPDET_Pos)

#define I2CRAWIF_STOPDET_NOT_OCCUR  ((0x0U) << I2CRAWIF_STOPDET_Pos)
#define I2CRAWIF_STOPDET_OCCUR      ((0x1U) << I2CRAWIF_STOPDET_Pos)

#define I2CRAWIF_STOPDET_(x)  (((x) << I2CRAWIF_STOPDET_Pos) & I2CRAWIF_STOPDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        STARTDET
  *  @access     I2C->I2CRAWIF
  *  @brief      START or RESTART condition flag
  */
#define I2CRAWIF_STARTDET_Pos  (11)
#define I2CRAWIF_STARTDET_Msk  (0x1U << I2CRAWIF_STARTDET_Pos)

#define I2CRAWIF_STARTDET_NOT_OCCUR  ((0x0U) << I2CRAWIF_STARTDET_Pos)
#define I2CRAWIF_STARTDET_OCCUR      ((0x1U) << I2CRAWIF_STARTDET_Pos)

#define I2CRAWIF_STARTDET_(x)  (((x) << I2CRAWIF_STARTDET_Pos) & I2CRAWIF_STARTDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CRAWIF        GENCALL
  *  @access     I2C->I2CRAWIF
  *  @brief      General Call address received and acknowledged flag
  */
#define I2CRAWIF_GENCALL_Pos  (12)
#define I2CRAWIF_GENCALL_Msk  (0x1U << I2CRAWIF_GENCALL_Pos)

#define I2CRAWIF_GENCALL_NOT_OCCUR  ((0x0U) << I2CRAWIF_GENCALL_Pos)
#define I2CRAWIF_GENCALL_OCCUR      ((0x1U) << I2CRAWIF_GENCALL_Pos)

#define I2CRAWIF_GENCALL_(x)  (((x) << I2CRAWIF_GENCALL_Pos) & I2CRAWIF_GENCALL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           RXUDF
  *  @access     I2C->I2CIF
  *  @brief      Flag to indicate the processor attempts to read the receive FIFO via I2CDATACMD
  *              register when it is empty
  */
#define I2CIF_RXUDF_Pos  (0)
#define I2CIF_RXUDF_Msk  (0x1U << I2CIF_RXUDF_Pos)

#define I2CIF_RXUDF_NOT_OCCUR  ((0x0U) << I2CIF_RXUDF_Pos)
#define I2CIF_RXUDF_OCCUR      ((0x1U) << I2CIF_RXUDF_Pos)

#define I2CIF_RXUDF_(x)  (((x) << I2CIF_RXUDF_Pos) & I2CIF_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           RXOVF
  *  @access     I2C->I2CIF
  *  @brief      Flag to indicate the receive FIFO is completely filled to 16 and an additional
  *              byte is received from an external I2C device. The I2C acknowledges this, but any
  *              data bytes received after the FIFO is full are lost.
  */
#define I2CIF_RXOVF_Pos  (1)
#define I2CIF_RXOVF_Msk  (0x1U << I2CIF_RXOVF_Pos)

#define I2CIF_RXOVF_NOT_OCCUR  ((0x0U) << I2CIF_RXOVF_Pos)
#define I2CIF_RXOVF_OCCUR      ((0x1U) << I2CIF_RXOVF_Pos)

#define I2CIF_RXOVF_(x)  (((x) << I2CIF_RXOVF_Pos) & I2CIF_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           RXDAV
  *  @access     I2C->I2CIF
  *  @brief      Flag to indicate there is enough data in the receive FIFO and available for read
  */
#define I2CIF_RXDAV_Pos  (2)
#define I2CIF_RXDAV_Msk  (0x1U << I2CIF_RXDAV_Pos)

#define I2CIF_RXDAV_NOT_OCCUR  ((0x0U) << I2CIF_RXDAV_Pos)
#define I2CIF_RXDAV_OCCUR      ((0x1U) << I2CIF_RXDAV_Pos)

#define I2CIF_RXDAV_(x)  (((x) << I2CIF_RXDAV_Pos) & I2CIF_RXDAV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           TXOVF
  *  @access     I2C->I2CIF
  *  @brief      Flag to indicate an attempt to write I2CDATACMD register when transmit FIFO is
  *              full
  */
#define I2CIF_TXOVF_Pos  (3)
#define I2CIF_TXOVF_Msk  (0x1U << I2CIF_TXOVF_Pos)

#define I2CIF_TXOVF_NOT_OCCUR  ((0x0U) << I2CIF_TXOVF_Pos)
#define I2CIF_TXOVF_OCCUR      ((0x1U) << I2CIF_TXOVF_Pos)

#define I2CIF_TXOVF_(x)  (((x) << I2CIF_TXOVF_Pos) & I2CIF_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           TXDREQ
  *  @access     I2C->I2CIF
  *  @brief      Flag to indicate there is not enough data in the transmit FIFO and request for
  *              more data
  */
#define I2CIF_TXDREQ_Pos  (4)
#define I2CIF_TXDREQ_Msk  (0x1U << I2CIF_TXDREQ_Pos)

#define I2CIF_TXDREQ_NOT_OCCUR  ((0x0U) << I2CIF_TXDREQ_Pos)
#define I2CIF_TXDREQ_OCCUR      ((0x1U) << I2CIF_TXDREQ_Pos)

#define I2CIF_TXDREQ_(x)  (((x) << I2CIF_TXDREQ_Pos) & I2CIF_TXDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           RDREQ
  *  @access     I2C->I2CIF
  *  @brief      Latched external master read request flag when the I2C is acting as a slave
  */
#define I2CIF_RDREQ_Pos  (5)
#define I2CIF_RDREQ_Msk  (0x1U << I2CIF_RDREQ_Pos)

#define I2CIF_RDREQ_NOT_OCCUR  ((0x0U) << I2CIF_RDREQ_Pos)
#define I2CIF_RDREQ_OCCUR      ((0x1U) << I2CIF_RDREQ_Pos)

#define I2CIF_RDREQ_(x)  (((x) << I2CIF_RDREQ_Pos) & I2CIF_RDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           TXABRT
  *  @access     I2C->I2CIF
  *  @brief      Latched transmission abort flag
  */
#define I2CIF_TXABRT_Pos  (6)
#define I2CIF_TXABRT_Msk  (0x1U << I2CIF_TXABRT_Pos)

#define I2CIF_TXABRT_NOT_OCCUR  ((0x0U) << I2CIF_TXABRT_Pos)
#define I2CIF_TXABRT_OCCUR      ((0x1U) << I2CIF_TXABRT_Pos)

#define I2CIF_TXABRT_(x)  (((x) << I2CIF_TXABRT_Pos) & I2CIF_TXABRT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           RXDONE
  *  @access     I2C->I2CIF
  *  @brief      Flag to indicate external master receive is done when I2C acts as a slave
  *              transmitter
  */
#define I2CIF_RXDONE_Pos  (7)
#define I2CIF_RXDONE_Msk  (0x1U << I2CIF_RXDONE_Pos)

#define I2CIF_RXDONE_NOT_OCCUR  ((0x0U) << I2CIF_RXDONE_Pos)
#define I2CIF_RXDONE_OCCUR      ((0x1U) << I2CIF_RXDONE_Pos)

#define I2CIF_RXDONE_(x)  (((x) << I2CIF_RXDONE_Pos) & I2CIF_RXDONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           ACT
  *  @access     I2C->I2CIF
  *  @brief      Latched I2C activity status flag
  */
#define I2CIF_ACT_Pos  (8)
#define I2CIF_ACT_Msk  (0x1U << I2CIF_ACT_Pos)

#define I2CIF_ACT_NOT_OCCUR  ((0x0U) << I2CIF_ACT_Pos)
#define I2CIF_ACT_OCCUR      ((0x1U) << I2CIF_ACT_Pos)

#define I2CIF_ACT_(x)  (((x) << I2CIF_ACT_Pos) & I2CIF_ACT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           ACKDET
  *  @access     I2C->I2CIF
  *  @brief      Latched flag for detected ACK from external receiver
  */
#define I2CIF_ACKDET_Pos  (9)
#define I2CIF_ACKDET_Msk  (0x1U << I2CIF_ACKDET_Pos)

#define I2CIF_ACKDET_NOT_OCCUR  ((0x0U) << I2CIF_ACKDET_Pos)
#define I2CIF_ACKDET_OCCUR      ((0x1U) << I2CIF_ACKDET_Pos)

#define I2CIF_ACKDET_(x)  (((x) << I2CIF_ACKDET_Pos) & I2CIF_ACKDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           STOPDET
  *  @access     I2C->I2CIF
  *  @brief      STOP condition flag
  */
#define I2CIF_STOPDET_Pos  (10)
#define I2CIF_STOPDET_Msk  (0x1U << I2CIF_STOPDET_Pos)

#define I2CIF_STOPDET_NOT_OCCUR  ((0x0U) << I2CIF_STOPDET_Pos)
#define I2CIF_STOPDET_OCCUR      ((0x1U) << I2CIF_STOPDET_Pos)

#define I2CIF_STOPDET_(x)  (((x) << I2CIF_STOPDET_Pos) & I2CIF_STOPDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           STARTDET
  *  @access     I2C->I2CIF
  *  @brief      START or RESTART condition flag
  */
#define I2CIF_STARTDET_Pos  (11)
#define I2CIF_STARTDET_Msk  (0x1U << I2CIF_STARTDET_Pos)

#define I2CIF_STARTDET_NOT_OCCUR  ((0x0U) << I2CIF_STARTDET_Pos)
#define I2CIF_STARTDET_OCCUR      ((0x1U) << I2CIF_STARTDET_Pos)

#define I2CIF_STARTDET_(x)  (((x) << I2CIF_STARTDET_Pos) & I2CIF_STARTDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           GENCALL
  *  @access     I2C->I2CIF
  *  @brief      General Call address received and acknowledged flag
  */
#define I2CIF_GENCALL_Pos  (12)
#define I2CIF_GENCALL_Msk  (0x1U << I2CIF_GENCALL_Pos)

#define I2CIF_GENCALL_NOT_OCCUR  ((0x0U) << I2CIF_GENCALL_Pos)
#define I2CIF_GENCALL_OCCUR      ((0x1U) << I2CIF_GENCALL_Pos)

#define I2CIF_GENCALL_(x)  (((x) << I2CIF_GENCALL_Pos) & I2CIF_GENCALL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIF           INT
  *  @access     I2C->I2CIF
  *  @brief      Global interrupt flag
  */
#define I2CIF_INT_Pos  (13)
#define I2CIF_INT_Msk  (0x1U << I2CIF_INT_Pos)

#define I2CIF_INT_NOT_OCCUR  ((0x0U) << I2CIF_INT_Pos)
#define I2CIF_INT_OCCUR      ((0x1U) << I2CIF_INT_Pos)

#define I2CIF_INT_(x)  (((x) << I2CIF_INT_Pos) & I2CIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           RXUDF
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable RXUDF interrupt
  */
#define I2CIE_RXUDF_Pos  (0)
#define I2CIE_RXUDF_Msk  (0x1U << I2CIE_RXUDF_Pos)

#define I2CIE_RXUDF_DISABLE  ((0x0U) << I2CIE_RXUDF_Pos)
#define I2CIE_RXUDF_ENABLE   ((0x1U) << I2CIE_RXUDF_Pos)

#define I2CIE_RXUDF_(x)  (((x) << I2CIE_RXUDF_Pos) & I2CIE_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           RXOVF
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable RXOVF interrupt
  */
#define I2CIE_RXOVF_Pos  (1)
#define I2CIE_RXOVF_Msk  (0x1U << I2CIE_RXOVF_Pos)

#define I2CIE_RXOVF_DISABLE  ((0x0U) << I2CIE_RXOVF_Pos)
#define I2CIE_RXOVF_ENABLE   ((0x1U) << I2CIE_RXOVF_Pos)

#define I2CIE_RXOVF_(x)  (((x) << I2CIE_RXOVF_Pos) & I2CIE_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           RXDAV
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable RXDAV interrupt
  */
#define I2CIE_RXDAV_Pos  (2)
#define I2CIE_RXDAV_Msk  (0x1U << I2CIE_RXDAV_Pos)

#define I2CIE_RXDAV_DISABLE  ((0x0U) << I2CIE_RXDAV_Pos)
#define I2CIE_RXDAV_ENABLE   ((0x1U) << I2CIE_RXDAV_Pos)

#define I2CIE_RXDAV_(x)  (((x) << I2CIE_RXDAV_Pos) & I2CIE_RXDAV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           TXOVF
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable TXOVF interrupt
  */
#define I2CIE_TXOVF_Pos  (3)
#define I2CIE_TXOVF_Msk  (0x1U << I2CIE_TXOVF_Pos)

#define I2CIE_TXOVF_DISABLE  ((0x0U) << I2CIE_TXOVF_Pos)
#define I2CIE_TXOVF_ENABLE   ((0x1U) << I2CIE_TXOVF_Pos)

#define I2CIE_TXOVF_(x)  (((x) << I2CIE_TXOVF_Pos) & I2CIE_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           TXDREQ
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable TXDREQ interrupt
  */
#define I2CIE_TXDREQ_Pos  (4)
#define I2CIE_TXDREQ_Msk  (0x1U << I2CIE_TXDREQ_Pos)

#define I2CIE_TXDREQ_DISABLE  ((0x0U) << I2CIE_TXDREQ_Pos)
#define I2CIE_TXDREQ_ENABLE   ((0x1U) << I2CIE_TXDREQ_Pos)

#define I2CIE_TXDREQ_(x)  (((x) << I2CIE_TXDREQ_Pos) & I2CIE_TXDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           RDREQ
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable RDREQ interrupt
  */
#define I2CIE_RDREQ_Pos  (5)
#define I2CIE_RDREQ_Msk  (0x1U << I2CIE_RDREQ_Pos)

#define I2CIE_RDREQ_DISABLE  ((0x0U) << I2CIE_RDREQ_Pos)
#define I2CIE_RDREQ_ENABLE   ((0x1U) << I2CIE_RDREQ_Pos)

#define I2CIE_RDREQ_(x)  (((x) << I2CIE_RDREQ_Pos) & I2CIE_RDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           TXABRT
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable TXABRT interrupt
  */
#define I2CIE_TXABRT_Pos  (6)
#define I2CIE_TXABRT_Msk  (0x1U << I2CIE_TXABRT_Pos)

#define I2CIE_TXABRT_DISABLE  ((0x0U) << I2CIE_TXABRT_Pos)
#define I2CIE_TXABRT_ENABLE   ((0x1U) << I2CIE_TXABRT_Pos)

#define I2CIE_TXABRT_(x)  (((x) << I2CIE_TXABRT_Pos) & I2CIE_TXABRT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           RXDONE
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable RXDONE interrupt
  */
#define I2CIE_RXDONE_Pos  (7)
#define I2CIE_RXDONE_Msk  (0x1U << I2CIE_RXDONE_Pos)

#define I2CIE_RXDONE_DISABLE  ((0x0U) << I2CIE_RXDONE_Pos)
#define I2CIE_RXDONE_ENABLE   ((0x1U) << I2CIE_RXDONE_Pos)

#define I2CIE_RXDONE_(x)  (((x) << I2CIE_RXDONE_Pos) & I2CIE_RXDONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           ACT
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable ACTIVITY interrupt
  */
#define I2CIE_ACT_Pos  (8)
#define I2CIE_ACT_Msk  (0x1U << I2CIE_ACT_Pos)

#define I2CIE_ACT_DISABLE  ((0x0U) << I2CIE_ACT_Pos)
#define I2CIE_ACT_ENABLE   ((0x1U) << I2CIE_ACT_Pos)

#define I2CIE_ACT_(x)  (((x) << I2CIE_ACT_Pos) & I2CIE_ACT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           ACKDET
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable ACKDET interrupt
  */
#define I2CIE_ACKDET_Pos  (9)
#define I2CIE_ACKDET_Msk  (0x1U << I2CIE_ACKDET_Pos)

#define I2CIE_ACKDET_DISABLE  ((0x0U) << I2CIE_ACKDET_Pos)
#define I2CIE_ACKDET_ENABLE   ((0x1U) << I2CIE_ACKDET_Pos)

#define I2CIE_ACKDET_(x)  (((x) << I2CIE_ACKDET_Pos) & I2CIE_ACKDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           STOPDET
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable STOPDET interrupt
  */
#define I2CIE_STOPDET_Pos  (10)
#define I2CIE_STOPDET_Msk  (0x1U << I2CIE_STOPDET_Pos)

#define I2CIE_STOPDET_DISABLE  ((0x0U) << I2CIE_STOPDET_Pos)
#define I2CIE_STOPDET_ENABLE   ((0x1U) << I2CIE_STOPDET_Pos)

#define I2CIE_STOPDET_(x)  (((x) << I2CIE_STOPDET_Pos) & I2CIE_STOPDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           STARTDET
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable STARTDET interrupt
  */
#define I2CIE_STARTDET_Pos  (11)
#define I2CIE_STARTDET_Msk  (0x1U << I2CIE_STARTDET_Pos)

#define I2CIE_STARTDET_DISABLE  ((0x0U) << I2CIE_STARTDET_Pos)
#define I2CIE_STARTDET_ENABLE   ((0x1U) << I2CIE_STARTDET_Pos)

#define I2CIE_STARTDET_(x)  (((x) << I2CIE_STARTDET_Pos) & I2CIE_STARTDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIE           GENCALL
  *  @access     I2C->I2CIE
  *  @brief      Enable/disable GENCALL interrupt
  */
#define I2CIE_GENCALL_Pos  (12)
#define I2CIE_GENCALL_Msk  (0x1U << I2CIE_GENCALL_Pos)

#define I2CIE_GENCALL_DISABLE  ((0x0U) << I2CIE_GENCALL_Pos)
#define I2CIE_GENCALL_ENABLE   ((0x1U) << I2CIE_GENCALL_Pos)

#define I2CIE_GENCALL_(x)  (((x) << I2CIE_GENCALL_Pos) & I2CIE_GENCALL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           RXUDF
  *  @access     I2C->I2CIC
  *  @brief      Clear RXUDF interrupt
  */
#define I2CIC_RXUDF_Pos  (0)
#define I2CIC_RXUDF_Msk  (0x1U << I2CIC_RXUDF_Pos)

#define I2CIC_RXUDF_NO_EFFECT  ((0x0U) << I2CIC_RXUDF_Pos)
#define I2CIC_RXUDF_CLEAR      ((0x1U) << I2CIC_RXUDF_Pos)

#define I2CIC_RXUDF_(x)  (((x) << I2CIC_RXUDF_Pos) & I2CIC_RXUDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           RXOVF
  *  @access     I2C->I2CIC
  *  @brief      Clear RXOVF interrupt
  */
#define I2CIC_RXOVF_Pos  (1)
#define I2CIC_RXOVF_Msk  (0x1U << I2CIC_RXOVF_Pos)

#define I2CIC_RXOVF_NO_EFFECT  ((0x0U) << I2CIC_RXOVF_Pos)
#define I2CIC_RXOVF_CLEAR      ((0x1U) << I2CIC_RXOVF_Pos)

#define I2CIC_RXOVF_(x)  (((x) << I2CIC_RXOVF_Pos) & I2CIC_RXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           RXDAV
  *  @access     I2C->I2CIC
  *  @brief      Clear RXDAV interrupt
  */
#define I2CIC_RXDAV_Pos  (2)
#define I2CIC_RXDAV_Msk  (0x1U << I2CIC_RXDAV_Pos)

#define I2CIC_RXDAV_NO_EFFECT  ((0x0U) << I2CIC_RXDAV_Pos)
#define I2CIC_RXDAV_CLEAR      ((0x1U) << I2CIC_RXDAV_Pos)

#define I2CIC_RXDAV_(x)  (((x) << I2CIC_RXDAV_Pos) & I2CIC_RXDAV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           TXOVF
  *  @access     I2C->I2CIC
  *  @brief      Clear TXOVF interrupt
  */
#define I2CIC_TXOVF_Pos  (3)
#define I2CIC_TXOVF_Msk  (0x1U << I2CIC_TXOVF_Pos)

#define I2CIC_TXOVF_NO_EFFECT  ((0x0U) << I2CIC_TXOVF_Pos)
#define I2CIC_TXOVF_CLEAR      ((0x1U) << I2CIC_TXOVF_Pos)

#define I2CIC_TXOVF_(x)  (((x) << I2CIC_TXOVF_Pos) & I2CIC_TXOVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           TXDREQ
  *  @access     I2C->I2CIC
  *  @brief      Clear TXDREQ interrupt
  */
#define I2CIC_TXDREQ_Pos  (4)
#define I2CIC_TXDREQ_Msk  (0x1U << I2CIC_TXDREQ_Pos)

#define I2CIC_TXDREQ_NO_EFFECT  ((0x0U) << I2CIC_TXDREQ_Pos)
#define I2CIC_TXDREQ_CLEAR      ((0x1U) << I2CIC_TXDREQ_Pos)

#define I2CIC_TXDREQ_(x)  (((x) << I2CIC_TXDREQ_Pos) & I2CIC_TXDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           RDREQ
  *  @access     I2C->I2CIC
  *  @brief      Clear RDREQ interrupt
  */
#define I2CIC_RDREQ_Pos  (5)
#define I2CIC_RDREQ_Msk  (0x1U << I2CIC_RDREQ_Pos)

#define I2CIC_RDREQ_NO_EFFECT  ((0x0U) << I2CIC_RDREQ_Pos)
#define I2CIC_RDREQ_CLEAR      ((0x1U) << I2CIC_RDREQ_Pos)

#define I2CIC_RDREQ_(x)  (((x) << I2CIC_RDREQ_Pos) & I2CIC_RDREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           TXABRT
  *  @access     I2C->I2CIC
  *  @brief      Clear TXABRT interrupt
  */
#define I2CIC_TXABRT_Pos  (6)
#define I2CIC_TXABRT_Msk  (0x1U << I2CIC_TXABRT_Pos)

#define I2CIC_TXABRT_NO_EFFECT  ((0x0U) << I2CIC_TXABRT_Pos)
#define I2CIC_TXABRT_CLEAR      ((0x1U) << I2CIC_TXABRT_Pos)

#define I2CIC_TXABRT_(x)  (((x) << I2CIC_TXABRT_Pos) & I2CIC_TXABRT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           RXDONE
  *  @access     I2C->I2CIC
  *  @brief      Clear RXDONE interrupt
  */
#define I2CIC_RXDONE_Pos  (7)
#define I2CIC_RXDONE_Msk  (0x1U << I2CIC_RXDONE_Pos)

#define I2CIC_RXDONE_NO_EFFECT  ((0x0U) << I2CIC_RXDONE_Pos)
#define I2CIC_RXDONE_CLEAR      ((0x1U) << I2CIC_RXDONE_Pos)

#define I2CIC_RXDONE_(x)  (((x) << I2CIC_RXDONE_Pos) & I2CIC_RXDONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           ACT
  *  @access     I2C->I2CIC
  *  @brief      Clear ACTIVITY interrupt
  */
#define I2CIC_ACT_Pos  (8)
#define I2CIC_ACT_Msk  (0x1U << I2CIC_ACT_Pos)

#define I2CIC_ACT_NO_EFFECT  ((0x0U) << I2CIC_ACT_Pos)
#define I2CIC_ACT_CLEAR      ((0x1U) << I2CIC_ACT_Pos)

#define I2CIC_ACT_(x)  (((x) << I2CIC_ACT_Pos) & I2CIC_ACT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           ACKDET
  *  @access     I2C->I2CIC
  *  @brief      Clear ACKDET interrupt
  */
#define I2CIC_ACKDET_Pos  (9)
#define I2CIC_ACKDET_Msk  (0x1U << I2CIC_ACKDET_Pos)

#define I2CIC_ACKDET_NO_EFFECT  ((0x0U) << I2CIC_ACKDET_Pos)
#define I2CIC_ACKDET_CLEAR      ((0x1U) << I2CIC_ACKDET_Pos)

#define I2CIC_ACKDET_(x)  (((x) << I2CIC_ACKDET_Pos) & I2CIC_ACKDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           STOPDET
  *  @access     I2C->I2CIC
  *  @brief      Clear STOPDET interrupt
  */
#define I2CIC_STOPDET_Pos  (10)
#define I2CIC_STOPDET_Msk  (0x1U << I2CIC_STOPDET_Pos)

#define I2CIC_STOPDET_NO_EFFECT  ((0x0U) << I2CIC_STOPDET_Pos)
#define I2CIC_STOPDET_CLEAR      ((0x1U) << I2CIC_STOPDET_Pos)

#define I2CIC_STOPDET_(x)  (((x) << I2CIC_STOPDET_Pos) & I2CIC_STOPDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           STARTDET
  *  @access     I2C->I2CIC
  *  @brief      Clear STARTDET interrupt
  */
#define I2CIC_STARTDET_Pos  (11)
#define I2CIC_STARTDET_Msk  (0x1U << I2CIC_STARTDET_Pos)

#define I2CIC_STARTDET_NO_EFFECT  ((0x0U) << I2CIC_STARTDET_Pos)
#define I2CIC_STARTDET_CLEAR      ((0x1U) << I2CIC_STARTDET_Pos)

#define I2CIC_STARTDET_(x)  (((x) << I2CIC_STARTDET_Pos) & I2CIC_STARTDET_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           GENCALL
  *  @access     I2C->I2CIC
  *  @brief      Clear GENCALL interrupt
  */
#define I2CIC_GENCALL_Pos  (12)
#define I2CIC_GENCALL_Msk  (0x1U << I2CIC_GENCALL_Pos)

#define I2CIC_GENCALL_NO_EFFECT  ((0x0U) << I2CIC_GENCALL_Pos)
#define I2CIC_GENCALL_CLEAR      ((0x1U) << I2CIC_GENCALL_Pos)

#define I2CIC_GENCALL_(x)  (((x) << I2CIC_GENCALL_Pos) & I2CIC_GENCALL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CIC           INT
  *  @access     I2C->I2CIC
  *  @brief      Clear global combined interrupt
  */
#define I2CIC_INT_Pos  (13)
#define I2CIC_INT_Msk  (0x1U << I2CIC_INT_Pos)

#define I2CIC_INT_NO_EFFECT  ((0x0U) << I2CIC_INT_Pos)
#define I2CIC_INT_CLEAR      ((0x1U) << I2CIC_INT_Pos)

#define I2CIC_INT_(x)  (((x) << I2CIC_INT_Pos) & I2CIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              I2C             I2CREGKEY       KEY
  *  @access     I2C->I2CREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected I2C registers.
  *              The 28 MSBs of this register cannot be 0x5555555
  */
#define I2CREGKEY_KEY_Pos  (0)
#define I2CREGKEY_KEY_Msk  (0xFFFFFFFFU << I2CREGKEY_KEY_Pos)

#define I2CREGKEY_KEY_(x)  (((x) << I2CREGKEY_KEY_Pos) & I2CREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      CRC:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          EN
  *  @access     CRC->CRCCTL
  *  @brief      CRC calculate enable
  */
#define CRCCTL_EN_Pos  (0)
#define CRCCTL_EN_Msk  (0x1U << CRCCTL_EN_Pos)

#define CRCCTL_EN_DISABLE  ((0x0U) << CRCCTL_EN_Pos)
#define CRCCTL_EN_ENABLE   ((0x1U) << CRCCTL_EN_Pos)

#define CRCCTL_EN_(x)  (((x) << CRCCTL_EN_Pos) & CRCCTL_EN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          MODE
  *  @access     CRC->CRCCTL
  *  @brief      CRC mode select
  */
#define CRCCTL_MODE_Pos  (1)
#define CRCCTL_MODE_Msk  (0x7U << CRCCTL_MODE_Pos)

#define CRCCTL_MODE_8_AUTOSAR     ((0x000U) << CRCCTL_MODE_Pos)
#define CRCCTL_MODE_15_CAN        ((0x001U) << CRCCTL_MODE_Pos)
#define CRCCTL_MODE_16_CCITT      ((0x002U) << CRCCTL_MODE_Pos)
#define CRCCTL_MODE_16_IBM        ((0x003U) << CRCCTL_MODE_Pos)
#define CRCCTL_MODE_16_T10_DIF    ((0x004U) << CRCCTL_MODE_Pos)
#define CRCCTL_MODE_16_DNP        ((0x005U) << CRCCTL_MODE_Pos)
#define CRCCTL_MODE_17_CAN        ((0x006U) << CRCCTL_MODE_Pos)
#define CRCCTL_MODE_32_IEEE802P3  ((0x007U) << CRCCTL_MODE_Pos)

#define CRCCTL_MODE_(x)  (((x) << CRCCTL_MODE_Pos) & CRCCTL_MODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          CONTINUOUS
  *  @access     CRC->CRCCTL
  *  @brief      Continuous frame calculation
  */
#define CRCCTL_CONTINUOUS_Pos  (4)
#define CRCCTL_CONTINUOUS_Msk  (0x1U << CRCCTL_CONTINUOUS_Pos)

#define CRCCTL_CONTINUOUS_DISABLE  ((0x0U) << CRCCTL_CONTINUOUS_Pos)
#define CRCCTL_CONTINUOUS_ENABLE   ((0x1U) << CRCCTL_CONTINUOUS_Pos)

#define CRCCTL_CONTINUOUS_(x)  (((x) << CRCCTL_CONTINUOUS_Pos) & CRCCTL_CONTINUOUS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          ENDIANIN
  *  @access     CRC->CRCCTL
  *  @brief      Input data endian (per byte)
  */
#define CRCCTL_ENDIANIN_Pos  (5)
#define CRCCTL_ENDIANIN_Msk  (0x1U << CRCCTL_ENDIANIN_Pos)

#define CRCCTL_ENDIANIN_LITTLE_ENDIAN  ((0x0U) << CRCCTL_ENDIANIN_Pos)
#define CRCCTL_ENDIANIN_BIG_ENDIAN     ((0x1U) << CRCCTL_ENDIANIN_Pos)

#define CRCCTL_ENDIANIN_(x)  (((x) << CRCCTL_ENDIANIN_Pos) & CRCCTL_ENDIANIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          ENDIANOUT
  *  @access     CRC->CRCCTL
  *  @brief      Output result endian
  */
#define CRCCTL_ENDIANOUT_Pos  (6)
#define CRCCTL_ENDIANOUT_Msk  (0x1U << CRCCTL_ENDIANOUT_Pos)

#define CRCCTL_ENDIANOUT_LITTLE_ENDIAN  ((0x0U) << CRCCTL_ENDIANOUT_Pos)
#define CRCCTL_ENDIANOUT_BIG_ENDIAN     ((0x1U) << CRCCTL_ENDIANOUT_Pos)

#define CRCCTL_ENDIANOUT_(x)  (((x) << CRCCTL_ENDIANOUT_Pos) & CRCCTL_ENDIANOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          INVIN
  *  @access     CRC->CRCCTL
  *  @brief      Bitwise NOT of the input data
  */
#define CRCCTL_INVIN_Pos  (7)
#define CRCCTL_INVIN_Msk  (0x1U << CRCCTL_INVIN_Pos)

#define CRCCTL_INVIN_DISABLE  ((0x0U) << CRCCTL_INVIN_Pos)
#define CRCCTL_INVIN_ENABLE   ((0x1U) << CRCCTL_INVIN_Pos)

#define CRCCTL_INVIN_(x)  (((x) << CRCCTL_INVIN_Pos) & CRCCTL_INVIN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          INVOUT
  *  @access     CRC->CRCCTL
  *  @brief      Bitwise NOT of the output result
  */
#define CRCCTL_INVOUT_Pos  (8)
#define CRCCTL_INVOUT_Msk  (0x1U << CRCCTL_INVOUT_Pos)

#define CRCCTL_INVOUT_DISABLE  ((0x0U) << CRCCTL_INVOUT_Pos)
#define CRCCTL_INVOUT_ENABLE   ((0x1U) << CRCCTL_INVOUT_Pos)

#define CRCCTL_INVOUT_(x)  (((x) << CRCCTL_INVOUT_Pos) & CRCCTL_INVOUT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCCTL          PERBYTE
  *  @access     CRC->CRCCTL
  *  @brief      Set the data format for each write to the CRCSTRIN register
  */
#define CRCCTL_PERBYTE_Pos  (9)
#define CRCCTL_PERBYTE_Msk  (0x1U << CRCCTL_PERBYTE_Pos)

#define CRCCTL_PERBYTE_PER_WORD  ((0x0U) << CRCCTL_PERBYTE_Pos)
#define CRCCTL_PERBYTE_PER_BYTE  ((0x1U) << CRCCTL_PERBYTE_Pos)

#define CRCCTL_PERBYTE_(x)  (((x) << CRCCTL_PERBYTE_Pos) & CRCCTL_PERBYTE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCSTRLEN       VAL
  *  @access     CRC->CRCSTRLEN
  *  @brief      Input stream length minus 1 (in unit of byte)
  */
#define CRCSTRLEN_VAL_Pos  (0)
#define CRCSTRLEN_VAL_Msk  (0xFFFFFFFFU << CRCSTRLEN_VAL_Pos)

#define CRCSTRLEN_VAL_(x)  (((x) << CRCSTRLEN_VAL_Pos) & CRCSTRLEN_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCSEED         VAL
  *  @access     CRC->CRCSEED
  *  @brief      Set the LFSR values to the seed
  */
#define CRCSEED_VAL_Pos  (0)
#define CRCSEED_VAL_Msk  (0xFFFFFFFFU << CRCSEED_VAL_Pos)

#define CRCSEED_VAL_(x)  (((x) << CRCSEED_VAL_Pos) & CRCSEED_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCSTRIN        VAL
  *  @access     CRC->CRCSTRIN
  *  @brief      Stream Input data register
  *              The 24 MSBs will be always read as 0 if CRCCTLEN.PERBYTE=1
  */
#define CRCSTRIN_VAL_Pos  (0)
#define CRCSTRIN_VAL_Msk  (0xFFFFFFFFU << CRCSTRIN_VAL_Pos)

#define CRCSTRIN_VAL_(x)  (((x) << CRCSTRIN_VAL_Pos) & CRCSTRIN_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCRESULT       VAL
  *  @access     CRC->CRCRESULT
  *  @brief      CRC calculation result
  */
#define CRCRESULT_VAL_Pos  (0)
#define CRCRESULT_VAL_Msk  (0xFFFFFFFFU << CRCRESULT_VAL_Pos)

#define CRCRESULT_VAL_(x)  (((x) << CRCRESULT_VAL_Pos) & CRCRESULT_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCRAWIF        DONE
  *  @access     CRC->CRCRAWIF
  *  @brief      Unmasked CRC calculation done interrupt flag
  */
#define CRCRAWIF_DONE_Pos  (0)
#define CRCRAWIF_DONE_Msk  (0x1U << CRCRAWIF_DONE_Pos)

#define CRCRAWIF_DONE_NOT_OCCUR  ((0x0U) << CRCRAWIF_DONE_Pos)
#define CRCRAWIF_DONE_OCCUR      ((0x1U) << CRCRAWIF_DONE_Pos)

#define CRCRAWIF_DONE_(x)  (((x) << CRCRAWIF_DONE_Pos) & CRCRAWIF_DONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCRAWIF        STROVF
  *  @access     CRC->CRCRAWIF
  *  @brief      Unmasked CRC stream overflow interrupt flag
  */
#define CRCRAWIF_STROVF_Pos  (1)
#define CRCRAWIF_STROVF_Msk  (0x1U << CRCRAWIF_STROVF_Pos)

#define CRCRAWIF_STROVF_NOT_OCCUR  ((0x0U) << CRCRAWIF_STROVF_Pos)
#define CRCRAWIF_STROVF_OCCUR      ((0x1U) << CRCRAWIF_STROVF_Pos)

#define CRCRAWIF_STROVF_(x)  (((x) << CRCRAWIF_STROVF_Pos) & CRCRAWIF_STROVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIF           DONE
  *  @access     CRC->CRCIF
  *  @brief      Masked CRC calculation done interrupt flag
  */
#define CRCIF_DONE_Pos  (0)
#define CRCIF_DONE_Msk  (0x1U << CRCIF_DONE_Pos)

#define CRCIF_DONE_NOT_OCCUR  ((0x0U) << CRCIF_DONE_Pos)
#define CRCIF_DONE_OCCUR      ((0x1U) << CRCIF_DONE_Pos)

#define CRCIF_DONE_(x)  (((x) << CRCIF_DONE_Pos) & CRCIF_DONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIF           STROVF
  *  @access     CRC->CRCIF
  *  @brief      Masked CRC stream overflow interrupt flag
  */
#define CRCIF_STROVF_Pos  (1)
#define CRCIF_STROVF_Msk  (0x1U << CRCIF_STROVF_Pos)

#define CRCIF_STROVF_NOT_OCCUR  ((0x0U) << CRCIF_STROVF_Pos)
#define CRCIF_STROVF_OCCUR      ((0x1U) << CRCIF_STROVF_Pos)

#define CRCIF_STROVF_(x)  (((x) << CRCIF_STROVF_Pos) & CRCIF_STROVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIF           INT
  *  @access     CRC->CRCIF
  *  @brief      Global CRC interrupt flag issued to CPU
  */
#define CRCIF_INT_Pos  (2)
#define CRCIF_INT_Msk  (0x1U << CRCIF_INT_Pos)

#define CRCIF_INT_NOT_OCCUR  ((0x0U) << CRCIF_INT_Pos)
#define CRCIF_INT_OCCUR      ((0x1U) << CRCIF_INT_Pos)

#define CRCIF_INT_(x)  (((x) << CRCIF_INT_Pos) & CRCIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIC           DONE
  *  @access     CRC->CRCIC
  *  @brief      CRC calculation done interrupt clear
  */
#define CRCIC_DONE_Pos  (0)
#define CRCIC_DONE_Msk  (0x1U << CRCIC_DONE_Pos)

#define CRCIC_DONE_NO_EFFECT  ((0x0U) << CRCIC_DONE_Pos)
#define CRCIC_DONE_CLEAR      ((0x1U) << CRCIC_DONE_Pos)

#define CRCIC_DONE_(x)  (((x) << CRCIC_DONE_Pos) & CRCIC_DONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIC           STROVF
  *  @access     CRC->CRCIC
  *  @brief      CRC stream overflow interrupt clear
  */
#define CRCIC_STROVF_Pos  (1)
#define CRCIC_STROVF_Msk  (0x1U << CRCIC_STROVF_Pos)

#define CRCIC_STROVF_NO_EFFECT  ((0x0U) << CRCIC_STROVF_Pos)
#define CRCIC_STROVF_CLEAR      ((0x1U) << CRCIC_STROVF_Pos)

#define CRCIC_STROVF_(x)  (((x) << CRCIC_STROVF_Pos) & CRCIC_STROVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIC           INT
  *  @access     CRC->CRCIC
  *  @brief      Global CRC interrupt clear
  */
#define CRCIC_INT_Pos  (2)
#define CRCIC_INT_Msk  (0x1U << CRCIC_INT_Pos)

#define CRCIC_INT_NO_EFFECT  ((0x0U) << CRCIC_INT_Pos)
#define CRCIC_INT_CLEAR      ((0x1U) << CRCIC_INT_Pos)

#define CRCIC_INT_(x)  (((x) << CRCIC_INT_Pos) & CRCIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIE           DONE
  *  @access     CRC->CRCIE
  *  @brief      CRC calculation done interrupt enable
  */
#define CRCIE_DONE_Pos  (0)
#define CRCIE_DONE_Msk  (0x1U << CRCIE_DONE_Pos)

#define CRCIE_DONE_DISABLE  ((0x0U) << CRCIE_DONE_Pos)
#define CRCIE_DONE_ENABLE   ((0x1U) << CRCIE_DONE_Pos)

#define CRCIE_DONE_(x)  (((x) << CRCIE_DONE_Pos) & CRCIE_DONE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCIE           STROVF
  *  @access     CRC->CRCIE
  *  @brief      CRC stream overflow interrupt enable
  */
#define CRCIE_STROVF_Pos  (1)
#define CRCIE_STROVF_Msk  (0x1U << CRCIE_STROVF_Pos)

#define CRCIE_STROVF_DISABLE  ((0x0U) << CRCIE_STROVF_Pos)
#define CRCIE_STROVF_ENABLE   ((0x1U) << CRCIE_STROVF_Pos)

#define CRCIE_STROVF_(x)  (((x) << CRCIE_STROVF_Pos) & CRCIE_STROVF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CRC             CRCREGKEY       KEY
  *  @access     CRC->CRCREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected CRC registers
  */
#define CRCREGKEY_KEY_Pos  (0)
#define CRCREGKEY_KEY_Msk  (0xFFFFFFFFU << CRCREGKEY_KEY_Pos)

#define CRCREGKEY_KEY_(x)  (((x) << CRCREGKEY_KEY_Pos) & CRCREGKEY_KEY_Msk)


/******************************************************************************/
/*                                                                            */
/*      CANMBOX:                                                              */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFDW      BYTE0
  *  @access     CANMBOX->CANMBOXFDW
  *  @brief      Byte (4 * N + 0) of CAN frame, N is CANMBOXFDW index.
  */
#define CANMBOXFDW_BYTE0_Pos  (0)
#define CANMBOXFDW_BYTE0_Msk  (0xFFU << CANMBOXFDW_BYTE0_Pos)

#define CANMBOXFDW_BYTE0_(x)  (((x) << CANMBOXFDW_BYTE0_Pos) & CANMBOXFDW_BYTE0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFDW      BYTE1
  *  @access     CANMBOX->CANMBOXFDW
  *  @brief      Byte (4 * N + 1) of CAN frame, N is CANMBOXFDW index.
  */
#define CANMBOXFDW_BYTE1_Pos  (8)
#define CANMBOXFDW_BYTE1_Msk  (0xFFU << CANMBOXFDW_BYTE1_Pos)

#define CANMBOXFDW_BYTE1_(x)  (((x) << CANMBOXFDW_BYTE1_Pos) & CANMBOXFDW_BYTE1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFDW      BYTE2
  *  @access     CANMBOX->CANMBOXFDW
  *  @brief      Byte (4 * N + 2) of CAN frame, N is CANMBOXFDW index.
  */
#define CANMBOXFDW_BYTE2_Pos  (16)
#define CANMBOXFDW_BYTE2_Msk  (0xFFU << CANMBOXFDW_BYTE2_Pos)

#define CANMBOXFDW_BYTE2_(x)  (((x) << CANMBOXFDW_BYTE2_Pos) & CANMBOXFDW_BYTE2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFDW      BYTE3
  *  @access     CANMBOX->CANMBOXFDW
  *  @brief      Byte (4 * N + 3) of CAN frame, N is CANMBOXFDW index.
  */
#define CANMBOXFDW_BYTE3_Pos  (24)
#define CANMBOXFDW_BYTE3_Msk  (0xFFU << CANMBOXFDW_BYTE3_Pos)

#define CANMBOXFDW_BYTE3_(x)  (((x) << CANMBOXFDW_BYTE3_Pos) & CANMBOXFDW_BYTE3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFMSK     ID
  *  @access     CANMBOX->CANMBOXFMSK
  *  @brief      Identifier mask.
  */
#define CANMBOXFMSK_ID_Pos  (0)
#define CANMBOXFMSK_ID_Msk  (0x1FFFFFFFU << CANMBOXFMSK_ID_Pos)

#define CANMBOXFMSK_ID_(x)  (((x) << CANMBOXFMSK_ID_Pos) & CANMBOXFMSK_ID_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFMSK     IDE
  *  @access     CANMBOX->CANMBOXFMSK
  *  @brief      Identifier extension bit mask.
  */
#define CANMBOXFMSK_IDE_Pos  (29)
#define CANMBOXFMSK_IDE_Msk  (0x1U << CANMBOXFMSK_IDE_Pos)

#define CANMBOXFMSK_IDE_DONT_CARE  ((0x0U) << CANMBOXFMSK_IDE_Pos)
#define CANMBOXFMSK_IDE_CARE       ((0x1U) << CANMBOXFMSK_IDE_Pos)

#define CANMBOXFMSK_IDE_(x)  (((x) << CANMBOXFMSK_IDE_Pos) & CANMBOXFMSK_IDE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFMSK     RTR
  *  @access     CANMBOX->CANMBOXFMSK
  *  @brief      Remote transmission request bit mask.
  */
#define CANMBOXFMSK_RTR_Pos  (30)
#define CANMBOXFMSK_RTR_Msk  (0x1U << CANMBOXFMSK_RTR_Pos)

#define CANMBOXFMSK_RTR_DONT_CARE  ((0x0U) << CANMBOXFMSK_RTR_Pos)
#define CANMBOXFMSK_RTR_CARE       ((0x1U) << CANMBOXFMSK_RTR_Pos)

#define CANMBOXFMSK_RTR_(x)  (((x) << CANMBOXFMSK_RTR_Pos) & CANMBOXFMSK_RTR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFID      ID
  *  @access     CANMBOX->CANMBOXFID
  *  @brief      Identifier.
  */
#define CANMBOXFID_ID_Pos  (0)
#define CANMBOXFID_ID_Msk  (0x1FFFFFFFU << CANMBOXFID_ID_Pos)

#define CANMBOXFID_ID_(x)  (((x) << CANMBOXFID_ID_Pos) & CANMBOXFID_ID_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFID      IDE
  *  @access     CANMBOX->CANMBOXFID
  *  @brief      Identifier extension bit.
  */
#define CANMBOXFID_IDE_Pos  (29)
#define CANMBOXFID_IDE_Msk  (0x1U << CANMBOXFID_IDE_Pos)

#define CANMBOXFID_IDE_STANDARD  ((0x0U) << CANMBOXFID_IDE_Pos)
#define CANMBOXFID_IDE_EXTENDED  ((0x1U) << CANMBOXFID_IDE_Pos)

#define CANMBOXFID_IDE_(x)  (((x) << CANMBOXFID_IDE_Pos) & CANMBOXFID_IDE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXFID      RTR
  *  @access     CANMBOX->CANMBOXFID
  *  @brief      Remote transmission request bit.
  */
#define CANMBOXFID_RTR_Pos  (30)
#define CANMBOXFID_RTR_Msk  (0x1U << CANMBOXFID_RTR_Pos)

#define CANMBOXFID_RTR_DATA    ((0x0U) << CANMBOXFID_RTR_Pos)
#define CANMBOXFID_RTR_REMOTE  ((0x1U) << CANMBOXFID_RTR_Pos)

#define CANMBOXFID_RTR_(x)  (((x) << CANMBOXFID_RTR_Pos) & CANMBOXFID_RTR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMTS      TS
  *  @access     CANMBOX->CANMBOXMTS
  *  @brief      Timestamp
  */
#define CANMBOXMTS_TS_Pos  (0)
#define CANMBOXMTS_TS_Msk  (0xFFFFFFFFU << CANMBOXMTS_TS_Pos)

#define CANMBOXMTS_TS_(x)  (((x) << CANMBOXMTS_TS_Pos) & CANMBOXMTS_TS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     DLC
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Data length code.
  */
#define CANMBOXMCTL_DLC_Pos  (0)
#define CANMBOXMCTL_DLC_Msk  (0xFU << CANMBOXMCTL_DLC_Pos)

#define CANMBOXMCTL_DLC_0   ((0x0000U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_1   ((0x0001U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_2   ((0x0002U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_3   ((0x0003U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_4   ((0x0004U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_5   ((0x0005U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_6   ((0x0006U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_7   ((0x0007U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_8   ((0x0008U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_12  ((0x0009U) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_16  ((0x000AU) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_20  ((0x000BU) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_24  ((0x000CU) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_32  ((0x000DU) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_48  ((0x000EU) << CANMBOXMCTL_DLC_Pos)
#define CANMBOXMCTL_DLC_64  ((0x000FU) << CANMBOXMCTL_DLC_Pos)

#define CANMBOXMCTL_DLC_(x)  (((x) << CANMBOXMCTL_DLC_Pos) & CANMBOXMCTL_DLC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     ESI
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Error state indicator.
  */
#define CANMBOXMCTL_ESI_Pos  (4)
#define CANMBOXMCTL_ESI_Msk  (0x1U << CANMBOXMCTL_ESI_Pos)

#define CANMBOXMCTL_ESI_ACTIVE   ((0x0U) << CANMBOXMCTL_ESI_Pos)
#define CANMBOXMCTL_ESI_PASSIVE  ((0x1U) << CANMBOXMCTL_ESI_Pos)

#define CANMBOXMCTL_ESI_(x)  (((x) << CANMBOXMCTL_ESI_Pos) & CANMBOXMCTL_ESI_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     BRS
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Bit rate switch.
  */
#define CANMBOXMCTL_BRS_Pos  (5)
#define CANMBOXMCTL_BRS_Msk  (0x1U << CANMBOXMCTL_BRS_Pos)

#define CANMBOXMCTL_BRS_DISABLE  ((0x0U) << CANMBOXMCTL_BRS_Pos)
#define CANMBOXMCTL_BRS_ENABLE   ((0x1U) << CANMBOXMCTL_BRS_Pos)

#define CANMBOXMCTL_BRS_(x)  (((x) << CANMBOXMCTL_BRS_Pos) & CANMBOXMCTL_BRS_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     FDF
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      FD format indicator.
  */
#define CANMBOXMCTL_FDF_Pos  (6)
#define CANMBOXMCTL_FDF_Msk  (0x1U << CANMBOXMCTL_FDF_Pos)

#define CANMBOXMCTL_FDF_DISABLE  ((0x0U) << CANMBOXMCTL_FDF_Pos)
#define CANMBOXMCTL_FDF_ENABLE   ((0x1U) << CANMBOXMCTL_FDF_Pos)

#define CANMBOXMCTL_FDF_(x)  (((x) << CANMBOXMCTL_FDF_Pos) & CANMBOXMCTL_FDF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     ESICTL
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Control send error state indicator enable
  */
#define CANMBOXMCTL_ESICTL_Pos  (7)
#define CANMBOXMCTL_ESICTL_Msk  (0x1U << CANMBOXMCTL_ESICTL_Pos)

#define CANMBOXMCTL_ESICTL_DISABLE  ((0x0U) << CANMBOXMCTL_ESICTL_Pos)
#define CANMBOXMCTL_ESICTL_ENABLE   ((0x1U) << CANMBOXMCTL_ESICTL_Pos)

#define CANMBOXMCTL_ESICTL_(x)  (((x) << CANMBOXMCTL_ESICTL_Pos) & CANMBOXMCTL_ESICTL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     LOCK
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Milbox locked flag.
  *              Note: always write 0 to this field.
  */
#define CANMBOXMCTL_LOCK_Pos  (21)
#define CANMBOXMCTL_LOCK_Msk  (0x1U << CANMBOXMCTL_LOCK_Pos)

#define CANMBOXMCTL_LOCK_NOT_OCCURED  ((0x0U) << CANMBOXMCTL_LOCK_Pos)
#define CANMBOXMCTL_LOCK_OCCURRED     ((0x1U) << CANMBOXMCTL_LOCK_Pos)

#define CANMBOXMCTL_LOCK_(x)  (((x) << CANMBOXMCTL_LOCK_Pos) & CANMBOXMCTL_LOCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     OVWR
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Enable overWrite mailbox which is end of block.
  */
#define CANMBOXMCTL_OVWR_Pos  (22)
#define CANMBOXMCTL_OVWR_Msk  (0x1U << CANMBOXMCTL_OVWR_Pos)

#define CANMBOXMCTL_OVWR_DISABLE  ((0x0U) << CANMBOXMCTL_OVWR_Pos)
#define CANMBOXMCTL_OVWR_ENABLE   ((0x1U) << CANMBOXMCTL_OVWR_Pos)

#define CANMBOXMCTL_OVWR_(x)  (((x) << CANMBOXMCTL_OVWR_Pos) & CANMBOXMCTL_OVWR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     EOB
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      End of block.
  */
#define CANMBOXMCTL_EOB_Pos  (23)
#define CANMBOXMCTL_EOB_Msk  (0x1U << CANMBOXMCTL_EOB_Pos)

#define CANMBOXMCTL_EOB_DISABLE  ((0x0U) << CANMBOXMCTL_EOB_Pos)
#define CANMBOXMCTL_EOB_ENABLE   ((0x1U) << CANMBOXMCTL_EOB_Pos)

#define CANMBOXMCTL_EOB_(x)  (((x) << CANMBOXMCTL_EOB_Pos) & CANMBOXMCTL_EOB_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     IE
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Enable mailbox transfer interrupt.
  */
#define CANMBOXMCTL_IE_Pos  (24)
#define CANMBOXMCTL_IE_Msk  (0x1U << CANMBOXMCTL_IE_Pos)

#define CANMBOXMCTL_IE_DISABLE  ((0x0U) << CANMBOXMCTL_IE_Pos)
#define CANMBOXMCTL_IE_ENABLE   ((0x1U) << CANMBOXMCTL_IE_Pos)

#define CANMBOXMCTL_IE_(x)  (((x) << CANMBOXMCTL_IE_Pos) & CANMBOXMCTL_IE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     IF
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Interrupt pending flag.
  *              Note: always write 0 to this field.
  */
#define CANMBOXMCTL_IF_Pos  (25)
#define CANMBOXMCTL_IF_Msk  (0x1U << CANMBOXMCTL_IF_Pos)

#define CANMBOXMCTL_IF_NOT_OCCURED  ((0x0U) << CANMBOXMCTL_IF_Pos)
#define CANMBOXMCTL_IF_OCCURRED     ((0x1U) << CANMBOXMCTL_IF_Pos)

#define CANMBOXMCTL_IF_(x)  (((x) << CANMBOXMCTL_IF_Pos) & CANMBOXMCTL_IF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     TXREQ
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Transmit request.
  */
#define CANMBOXMCTL_TXREQ_Pos  (26)
#define CANMBOXMCTL_TXREQ_Msk  (0x1U << CANMBOXMCTL_TXREQ_Pos)

#define CANMBOXMCTL_TXREQ_DISABLE  ((0x0U) << CANMBOXMCTL_TXREQ_Pos)
#define CANMBOXMCTL_TXREQ_ENABLE   ((0x1U) << CANMBOXMCTL_TXREQ_Pos)

#define CANMBOXMCTL_TXREQ_(x)  (((x) << CANMBOXMCTL_TXREQ_Pos) & CANMBOXMCTL_TXREQ_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     LOST
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Received message lost.
  *              Note: always write 0 to this field.
  */
#define CANMBOXMCTL_LOST_Pos  (27)
#define CANMBOXMCTL_LOST_Msk  (0x1U << CANMBOXMCTL_LOST_Pos)

#define CANMBOXMCTL_LOST_NOT_OCCURED  ((0x0U) << CANMBOXMCTL_LOST_Pos)
#define CANMBOXMCTL_LOST_OCCURRED     ((0x1U) << CANMBOXMCTL_LOST_Pos)

#define CANMBOXMCTL_LOST_(x)  (((x) << CANMBOXMCTL_LOST_Pos) & CANMBOXMCTL_LOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     NEW
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      New message.
  */
#define CANMBOXMCTL_NEW_Pos  (28)
#define CANMBOXMCTL_NEW_Msk  (0x1U << CANMBOXMCTL_NEW_Pos)

#define CANMBOXMCTL_NEW_OLD  ((0x0U) << CANMBOXMCTL_NEW_Pos)
#define CANMBOXMCTL_NEW_NEW  ((0x1U) << CANMBOXMCTL_NEW_Pos)

#define CANMBOXMCTL_NEW_(x)  (((x) << CANMBOXMCTL_NEW_Pos) & CANMBOXMCTL_NEW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     RMTEN
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Enable remote frame auto response.
  */
#define CANMBOXMCTL_RMTEN_Pos  (29)
#define CANMBOXMCTL_RMTEN_Msk  (0x1U << CANMBOXMCTL_RMTEN_Pos)

#define CANMBOXMCTL_RMTEN_DISABLE  ((0x0U) << CANMBOXMCTL_RMTEN_Pos)
#define CANMBOXMCTL_RMTEN_ENABLE   ((0x1U) << CANMBOXMCTL_RMTEN_Pos)

#define CANMBOXMCTL_RMTEN_(x)  (((x) << CANMBOXMCTL_RMTEN_Pos) & CANMBOXMCTL_RMTEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     DIR
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Message data transfer direction on bus.
  */
#define CANMBOXMCTL_DIR_Pos  (30)
#define CANMBOXMCTL_DIR_Msk  (0x1U << CANMBOXMCTL_DIR_Pos)

#define CANMBOXMCTL_DIR_RECEPTION     ((0x0U) << CANMBOXMCTL_DIR_Pos)
#define CANMBOXMCTL_DIR_TRANSMISSION  ((0x1U) << CANMBOXMCTL_DIR_Pos)

#define CANMBOXMCTL_DIR_(x)  (((x) << CANMBOXMCTL_DIR_Pos) & CANMBOXMCTL_DIR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CANMBOX         CANMBOXMCTL     EN
  *  @access     CANMBOX->CANMBOXMCTL
  *  @brief      Enable mailbox
  */
#define CANMBOXMCTL_EN_Pos  (31)
#define CANMBOXMCTL_EN_Msk  (0x1U << CANMBOXMCTL_EN_Pos)

#define CANMBOXMCTL_EN_DISABLE  ((0x0U) << CANMBOXMCTL_EN_Pos)
#define CANMBOXMCTL_EN_ENABLE   ((0x1U) << CANMBOXMCTL_EN_Pos)

#define CANMBOXMCTL_EN_(x)  (((x) << CANMBOXMCTL_EN_Pos) & CANMBOXMCTL_EN_Msk)


/******************************************************************************/
/*                                                                            */
/*      CAN:                                                                  */
/*                                                                            */
/******************************************************************************/


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          RUN
  *  @access     CAN->CANCTL
  *  @brief      Enable module run.
  */
#define CANCTL_RUN_Pos  (0)
#define CANCTL_RUN_Msk  (0x1U << CANCTL_RUN_Pos)

#define CANCTL_RUN_STOP  ((0x0U) << CANCTL_RUN_Pos)
#define CANCTL_RUN_RUN   ((0x1U) << CANCTL_RUN_Pos)

#define CANCTL_RUN_(x)  (((x) << CANCTL_RUN_Pos) & CANCTL_RUN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          RST
  *  @access     CAN->CANCTL
  *  @brief      Software reset.
  */
#define CANCTL_RST_Pos  (3)
#define CANCTL_RST_Msk  (0x1U << CANCTL_RST_Pos)

#define CANCTL_RST_DISABLE  ((0x0U) << CANCTL_RST_Pos)
#define CANCTL_RST_ENABLE   ((0x1U) << CANCTL_RST_Pos)

#define CANCTL_RST_(x)  (((x) << CANCTL_RST_Pos) & CANCTL_RST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          RECOVEN
  *  @access     CAN->CANCTL
  *  @brief      Enable bus off recovery.
  *              This field is not write protected by REGKEY.
  */
#define CANCTL_RECOVEN_Pos  (4)
#define CANCTL_RECOVEN_Msk  (0x1U << CANCTL_RECOVEN_Pos)

#define CANCTL_RECOVEN_DISABLE  ((0x0U) << CANCTL_RECOVEN_Pos)
#define CANCTL_RECOVEN_ENABLE   ((0x1U) << CANCTL_RECOVEN_Pos)

#define CANCTL_RECOVEN_(x)  (((x) << CANCTL_RECOVEN_Pos) & CANCTL_RECOVEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          AUTOON
  *  @access     CAN->CANCTL
  *  @brief      Enable auto bus on.
  */
#define CANCTL_AUTOON_Pos  (5)
#define CANCTL_AUTOON_Msk  (0x1U << CANCTL_AUTOON_Pos)

#define CANCTL_AUTOON_DISABLE  ((0x0U) << CANCTL_AUTOON_Pos)
#define CANCTL_AUTOON_ENABLE   ((0x1U) << CANCTL_AUTOON_Pos)

#define CANCTL_AUTOON_(x)  (((x) << CANCTL_AUTOON_Pos) & CANCTL_AUTOON_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          RETX
  *  @access     CAN->CANCTL
  *  @brief      Enable automatic retransmission.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANCTL_RETX_Pos  (6)
#define CANCTL_RETX_Msk  (0x1U << CANCTL_RETX_Pos)

#define CANCTL_RETX_DISABLE  ((0x0U) << CANCTL_RETX_Pos)
#define CANCTL_RETX_ENABLE   ((0x1U) << CANCTL_RETX_Pos)

#define CANCTL_RETX_(x)  (((x) << CANCTL_RETX_Pos) & CANCTL_RETX_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          IOSWAP
  *  @access     CAN->CANCTL
  *  @brief      Enable swap TXD/RXD Pin.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANCTL_IOSWAP_Pos  (7)
#define CANCTL_IOSWAP_Msk  (0x1U << CANCTL_IOSWAP_Pos)

#define CANCTL_IOSWAP_DISABLE  ((0x0U) << CANCTL_IOSWAP_Pos)
#define CANCTL_IOSWAP_ENABLE   ((0x1U) << CANCTL_IOSWAP_Pos)

#define CANCTL_IOSWAP_(x)  (((x) << CANCTL_IOSWAP_Pos) & CANCTL_IOSWAP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          PXEN
  *  @access     CAN->CANCTL
  *  @brief      Protocol exception enable.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANCTL_PXEN_Pos  (8)
#define CANCTL_PXEN_Msk  (0x1U << CANCTL_PXEN_Pos)

#define CANCTL_PXEN_DISABLE  ((0x0U) << CANCTL_PXEN_Pos)
#define CANCTL_PXEN_ENABLE   ((0x1U) << CANCTL_PXEN_Pos)

#define CANCTL_PXEN_(x)  (((x) << CANCTL_PXEN_Pos) & CANCTL_PXEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          TXPAUSE
  *  @access     CAN->CANCTL
  *  @brief      Transmission pause 2 nominal bit enable.
  */
#define CANCTL_TXPAUSE_Pos  (9)
#define CANCTL_TXPAUSE_Msk  (0x1U << CANCTL_TXPAUSE_Pos)

#define CANCTL_TXPAUSE_DISABLE  ((0x0U) << CANCTL_TXPAUSE_Pos)
#define CANCTL_TXPAUSE_ENABLE   ((0x1U) << CANCTL_TXPAUSE_Pos)

#define CANCTL_TXPAUSE_(x)  (((x) << CANCTL_TXPAUSE_Pos) & CANCTL_TXPAUSE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          EDGEFLT
  *  @access     CAN->CANCTL
  *  @brief      Edge filter enable in integration status.
  */
#define CANCTL_EDGEFLT_Pos  (10)
#define CANCTL_EDGEFLT_Msk  (0x1U << CANCTL_EDGEFLT_Pos)

#define CANCTL_EDGEFLT_DISABLE  ((0x0U) << CANCTL_EDGEFLT_Pos)
#define CANCTL_EDGEFLT_ENABLE   ((0x1U) << CANCTL_EDGEFLT_Pos)

#define CANCTL_EDGEFLT_(x)  (((x) << CANCTL_EDGEFLT_Pos) & CANCTL_EDGEFLT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          RESMODE
  *  @access     CAN->CANCTL
  *  @brief      Restricted mode enable
  *              This field is write 1 protected by REGKEY, and only writable when CANSTS.OP is
  *              STOP.
  *              This field can be set to 0 at any time.
  */
#define CANCTL_RESMODE_Pos  (11)
#define CANCTL_RESMODE_Msk  (0x1U << CANCTL_RESMODE_Pos)

#define CANCTL_RESMODE_DISABLE  ((0x0U) << CANCTL_RESMODE_Pos)
#define CANCTL_RESMODE_ENABLE   ((0x1U) << CANCTL_RESMODE_Pos)

#define CANCTL_RESMODE_(x)  (((x) << CANCTL_RESMODE_Pos) & CANCTL_RESMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          MONMODE
  *  @access     CAN->CANCTL
  *  @brief      Monitor mode enable
  *              This field is write 1 protected by REGKEY, and only writable when CANSTS.OP is
  *              STOP.
  *              This field can be set to 0 at any time.
  */
#define CANCTL_MONMODE_Pos  (12)
#define CANCTL_MONMODE_Msk  (0x1U << CANCTL_MONMODE_Pos)

#define CANCTL_MONMODE_DISABLE  ((0x0U) << CANCTL_MONMODE_Pos)
#define CANCTL_MONMODE_ENABLE   ((0x1U) << CANCTL_MONMODE_Pos)

#define CANCTL_MONMODE_(x)  (((x) << CANCTL_MONMODE_Pos) & CANCTL_MONMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          TSTMODE
  *  @access     CAN->CANCTL
  *  @brief      Test mode enable
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANCTL_TSTMODE_Pos  (13)
#define CANCTL_TSTMODE_Msk  (0x1U << CANCTL_TSTMODE_Pos)

#define CANCTL_TSTMODE_DISABLE  ((0x0U) << CANCTL_TSTMODE_Pos)
#define CANCTL_TSTMODE_ENABLE   ((0x1U) << CANCTL_TSTMODE_Pos)

#define CANCTL_TSTMODE_(x)  (((x) << CANCTL_TSTMODE_Pos) & CANCTL_TSTMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          FDEN
  *  @access     CAN->CANCTL
  *  @brief      CANFD enable.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANCTL_FDEN_Pos  (14)
#define CANCTL_FDEN_Msk  (0x1U << CANCTL_FDEN_Pos)

#define CANCTL_FDEN_DISABLE  ((0x0U) << CANCTL_FDEN_Pos)
#define CANCTL_FDEN_ENABLE   ((0x1U) << CANCTL_FDEN_Pos)

#define CANCTL_FDEN_(x)  (((x) << CANCTL_FDEN_Pos) & CANCTL_FDEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          NONISO
  *  @access     CAN->CANCTL
  *  @brief      NON-ISO CAN protocol mode.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANCTL_NONISO_Pos  (15)
#define CANCTL_NONISO_Msk  (0x1U << CANCTL_NONISO_Pos)

#define CANCTL_NONISO_NO   ((0x0U) << CANCTL_NONISO_Pos)
#define CANCTL_NONISO_YES  ((0x1U) << CANCTL_NONISO_Pos)

#define CANCTL_NONISO_(x)  (((x) << CANCTL_NONISO_Pos) & CANCTL_NONISO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANCTL          PRTYCHK
  *  @access     CAN->CANCTL
  *  @brief      Parity check enable.
  */
#define CANCTL_PRTYCHK_Pos  (16)
#define CANCTL_PRTYCHK_Msk  (0x1U << CANCTL_PRTYCHK_Pos)

#define CANCTL_PRTYCHK_DISABLE  ((0x0U) << CANCTL_PRTYCHK_Pos)
#define CANCTL_PRTYCHK_ENABLE   ((0x1U) << CANCTL_PRTYCHK_Pos)

#define CANCTL_PRTYCHK_(x)  (((x) << CANCTL_PRTYCHK_Pos) & CANCTL_PRTYCHK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANNBTQ         NBRP
  *  @access     CAN->CANNBTQ
  *  @brief      Norminal bit rate prescaler value.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANNBTQ_NBRP_Pos  (0)
#define CANNBTQ_NBRP_Msk  (0xFFU << CANNBTQ_NBRP_Pos)

#define CANNBTQ_NBRP_(x)  (((x) << CANNBTQ_NBRP_Pos) & CANNBTQ_NBRP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANNBTQ         NSEG1
  *  @access     CAN->CANNBTQ
  *  @brief      Time segment before the sample point of nominal bit rate.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANNBTQ_NSEG1_Pos  (8)
#define CANNBTQ_NSEG1_Msk  (0xFFU << CANNBTQ_NSEG1_Pos)

#define CANNBTQ_NSEG1_(x)  (((x) << CANNBTQ_NSEG1_Pos) & CANNBTQ_NSEG1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANNBTQ         NSEG2
  *  @access     CAN->CANNBTQ
  *  @brief      Time segment after the sample point of nominal bit rate.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANNBTQ_NSEG2_Pos  (16)
#define CANNBTQ_NSEG2_Msk  (0x7FU << CANNBTQ_NSEG2_Pos)

#define CANNBTQ_NSEG2_(x)  (((x) << CANNBTQ_NSEG2_Pos) & CANNBTQ_NSEG2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANNBTQ         NSJW
  *  @access     CAN->CANNBTQ
  *  @brief      Synchronization jump width of nominal bit rate.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANNBTQ_NSJW_Pos  (24)
#define CANNBTQ_NSJW_Msk  (0x7FU << CANNBTQ_NSJW_Pos)

#define CANNBTQ_NSJW_(x)  (((x) << CANNBTQ_NSJW_Pos) & CANNBTQ_NSJW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANDBTQ         DBRP
  *  @access     CAN->CANDBTQ
  *  @brief      Data baud rate prescaler value.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANDBTQ_DBRP_Pos  (0)
#define CANDBTQ_DBRP_Msk  (0xFFU << CANDBTQ_DBRP_Pos)

#define CANDBTQ_DBRP_(x)  (((x) << CANDBTQ_DBRP_Pos) & CANDBTQ_DBRP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANDBTQ         DSEG1
  *  @access     CAN->CANDBTQ
  *  @brief      Time segment before the sample point for CANFD data bit rate.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANDBTQ_DSEG1_Pos  (8)
#define CANDBTQ_DSEG1_Msk  (0x1FU << CANDBTQ_DSEG1_Pos)

#define CANDBTQ_DSEG1_(x)  (((x) << CANDBTQ_DSEG1_Pos) & CANDBTQ_DSEG1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANDBTQ         DSEG2
  *  @access     CAN->CANDBTQ
  *  @brief      Time segment after the sample point for CANFD data bit rate.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANDBTQ_DSEG2_Pos  (16)
#define CANDBTQ_DSEG2_Msk  (0xFU << CANDBTQ_DSEG2_Pos)

#define CANDBTQ_DSEG2_(x)  (((x) << CANDBTQ_DSEG2_Pos) & CANDBTQ_DSEG2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANDBTQ         DSJW
  *  @access     CAN->CANDBTQ
  *  @brief      Synchronization jump width for CANFD data bit rate.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANDBTQ_DSJW_Pos  (24)
#define CANDBTQ_DSJW_Msk  (0xFU << CANDBTQ_DSJW_Pos)

#define CANDBTQ_DSJW_(x)  (((x) << CANDBTQ_DSJW_Pos) & CANDBTQ_DSJW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANDBTQ         TDC
  *  @access     CAN->CANDBTQ
  *  @brief      Transmitter delay compensation enable.
  *              This field is writable only when CANSTS.OP is STOP.
  */
#define CANDBTQ_TDC_Pos  (31)
#define CANDBTQ_TDC_Msk  (0x1U << CANDBTQ_TDC_Pos)

#define CANDBTQ_TDC_DISABLE  ((0x0U) << CANDBTQ_TDC_Pos)
#define CANDBTQ_TDC_ENABLE   ((0x1U) << CANDBTQ_TDC_Pos)

#define CANDBTQ_TDC_(x)  (((x) << CANDBTQ_TDC_Pos) & CANDBTQ_TDC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTDC          TDCO
  *  @access     CAN->CANTDC
  *  @brief      Transmitter delay conmpensation SSP offset
  */
#define CANTDC_TDCO_Pos  (0)
#define CANTDC_TDCO_Msk  (0x3FFU << CANTDC_TDCO_Pos)

#define CANTDC_TDCO_(x)  (((x) << CANTDC_TDCO_Pos) & CANTDC_TDCO_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTDC          TDCW
  *  @access     CAN->CANTDC
  *  @brief      Transmitter delay compensation filter window length.
  */
#define CANTDC_TDCW_Pos  (10)
#define CANTDC_TDCW_Msk  (0x3FFU << CANTDC_TDCW_Pos)

#define CANTDC_TDCW_(x)  (((x) << CANTDC_TDCW_Pos) & CANTDC_TDCW_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTDC          TDCV
  *  @access     CAN->CANTDC
  *  @brief      Transmitter delay compensation value
  */
#define CANTDC_TDCV_Pos  (20)
#define CANTDC_TDCV_Msk  (0x3FFU << CANTDC_TDCV_Pos)

#define CANTDC_TDCV_(x)  (((x) << CANTDC_TDCV_Pos) & CANTDC_TDCV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANBRDLY        DLY
  *  @access     CAN->CANBRDLY
  *  @brief      Bus-Off recovery delay.
  */
#define CANBRDLY_DLY_Pos  (0)
#define CANBRDLY_DLY_Msk  (0xFFFFU << CANBRDLY_DLY_Pos)

#define CANBRDLY_DLY_(x)  (((x) << CANBRDLY_DLY_Pos) & CANBRDLY_DLY_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANSTS          TEC
  *  @access     CAN->CANSTS
  *  @brief      Transmitter error counter.
  */
#define CANSTS_TEC_Pos  (0)
#define CANSTS_TEC_Msk  (0xFFU << CANSTS_TEC_Pos)


#define CANSTS_TEC_(x)  (((x) << CANSTS_TEC_Pos) & CANSTS_TEC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANSTS          REC
  *  @access     CAN->CANSTS
  *  @brief      Receiver error counter.
  */
#define CANSTS_REC_Pos  (8)
#define CANSTS_REC_Msk  (0x7FU << CANSTS_REC_Pos)


#define CANSTS_REC_(x)  (((x) << CANSTS_REC_Pos) & CANSTS_REC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANSTS          ERRPASSIVE
  *  @access     CAN->CANSTS
  *  @brief      Error passive state.
  */
#define CANSTS_ERRPASSIVE_Pos  (15)
#define CANSTS_ERRPASSIVE_Msk  (0x1U << CANSTS_ERRPASSIVE_Pos)

#define CANSTS_ERRPASSIVE_NOT_OCCURED  ((0x0U) << CANSTS_ERRPASSIVE_Pos)
#define CANSTS_ERRPASSIVE_OCCURRED     ((0x1U) << CANSTS_ERRPASSIVE_Pos)

#define CANSTS_ERRPASSIVE_(x)  (((x) << CANSTS_ERRPASSIVE_Pos) & CANSTS_ERRPASSIVE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANSTS          ERRWARN
  *  @access     CAN->CANSTS
  *  @brief      Error warning.
  */
#define CANSTS_ERRWARN_Pos  (16)
#define CANSTS_ERRWARN_Msk  (0x1U << CANSTS_ERRWARN_Pos)

#define CANSTS_ERRWARN_NOT_OCCURED  ((0x0U) << CANSTS_ERRWARN_Pos)
#define CANSTS_ERRWARN_OCCURRED     ((0x1U) << CANSTS_ERRWARN_Pos)

#define CANSTS_ERRWARN_(x)  (((x) << CANSTS_ERRWARN_Pos) & CANSTS_ERRWARN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANSTS          OPMODE
  *  @access     CAN->CANSTS
  *  @brief      Operation mode.
  */
#define CANSTS_OPMODE_Pos  (17)
#define CANSTS_OPMODE_Msk  (0x7U << CANSTS_OPMODE_Pos)

#define CANSTS_OPMODE_STOP         ((0x000U) << CANSTS_OPMODE_Pos)
#define CANSTS_OPMODE_INTEGRATION  ((0x001U) << CANSTS_OPMODE_Pos)
#define CANSTS_OPMODE_IDLE         ((0x002U) << CANSTS_OPMODE_Pos)
#define CANSTS_OPMODE_TXING        ((0x003U) << CANSTS_OPMODE_Pos)
#define CANSTS_OPMODE_RXING        ((0x004U) << CANSTS_OPMODE_Pos)
#define CANSTS_OPMODE_BUSOFF       ((0x006U) << CANSTS_OPMODE_Pos)
#define CANSTS_OPMODE_SLEEP        ((0x007U) << CANSTS_OPMODE_Pos)

#define CANSTS_OPMODE_(x)  (((x) << CANSTS_OPMODE_Pos) & CANSTS_OPMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANLEC          LEC
  *  @access     CAN->CANLEC
  *  @brief      Last error code except data phase.
  *              Suggest read by byte size.
  */
#define CANLEC_LEC_Pos  (0)
#define CANLEC_LEC_Msk  (0x7U << CANLEC_LEC_Pos)

#define CANLEC_LEC_NO_ERROR             ((0x000U) << CANLEC_LEC_Pos)
#define CANLEC_LEC_STUFF_ERROR          ((0x001U) << CANLEC_LEC_Pos)
#define CANLEC_LEC_FORM_ERROR           ((0x002U) << CANLEC_LEC_Pos)
#define CANLEC_LEC_ACK_ERROR            ((0x003U) << CANLEC_LEC_Pos)
#define CANLEC_LEC_BIT1_ERROR           ((0x004U) << CANLEC_LEC_Pos)
#define CANLEC_LEC_BIT0_ERROR           ((0x005U) << CANLEC_LEC_Pos)
#define CANLEC_LEC_CRC_ERROR            ((0x006U) << CANLEC_LEC_Pos)
#define CANLEC_LEC_NO_ERROR_AFTER_READ  ((0x007U) << CANLEC_LEC_Pos)

#define CANLEC_LEC_(x)  (((x) << CANLEC_LEC_Pos) & CANLEC_LEC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANLEC          DLEC
  *  @access     CAN->CANLEC
  *  @brief      Last error code during data phase.
  *              Suggest read by byte size.
  */
#define CANLEC_DLEC_Pos  (8)
#define CANLEC_DLEC_Msk  (0x7U << CANLEC_DLEC_Pos)

#define CANLEC_DLEC_NO_ERROR             ((0x000U) << CANLEC_DLEC_Pos)
#define CANLEC_DLEC_STUFF_ERROR          ((0x001U) << CANLEC_DLEC_Pos)
#define CANLEC_DLEC_FORM_ERROR           ((0x002U) << CANLEC_DLEC_Pos)
#define CANLEC_DLEC_BIT1_ERROR           ((0x004U) << CANLEC_DLEC_Pos)
#define CANLEC_DLEC_BIT0_ERROR           ((0x005U) << CANLEC_DLEC_Pos)
#define CANLEC_DLEC_NO_ERROR_AFTER_READ  ((0x007U) << CANLEC_DLEC_Pos)

#define CANLEC_DLEC_(x)  (((x) << CANLEC_DLEC_Pos) & CANLEC_DLEC_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANLEC          WRLCK
  *  @access     CAN->CANLEC
  *  @brief      Write on locked mailbox occurred.
  *              Suggest read by byte size.
  */
#define CANLEC_WRLCK_Pos  (16)
#define CANLEC_WRLCK_Msk  (0x1U << CANLEC_WRLCK_Pos)

#define CANLEC_WRLCK_NOT_OCCURED  ((0x0U) << CANLEC_WRLCK_Pos)
#define CANLEC_WRLCK_OCCURRED     ((0x1U) << CANLEC_WRLCK_Pos)

#define CANLEC_WRLCK_(x)  (((x) << CANLEC_WRLCK_Pos) & CANLEC_WRLCK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          TRANERR
  *  @access     CAN->CANMIE
  *  @brief      Message transfer error.
  */
#define CANMIE_TRANERR_Pos  (0)
#define CANMIE_TRANERR_Msk  (0x1U << CANMIE_TRANERR_Pos)

#define CANMIE_TRANERR_DISABLE  ((0x0U) << CANMIE_TRANERR_Pos)
#define CANMIE_TRANERR_ENABLE   ((0x1U) << CANMIE_TRANERR_Pos)

#define CANMIE_TRANERR_(x)  (((x) << CANMIE_TRANERR_Pos) & CANMIE_TRANERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          ERRWARN
  *  @access     CAN->CANMIE
  *  @brief      Node error warning.
  */
#define CANMIE_ERRWARN_Pos  (1)
#define CANMIE_ERRWARN_Msk  (0x1U << CANMIE_ERRWARN_Pos)

#define CANMIE_ERRWARN_DISABLE  ((0x0U) << CANMIE_ERRWARN_Pos)
#define CANMIE_ERRWARN_ENABLE   ((0x1U) << CANMIE_ERRWARN_Pos)

#define CANMIE_ERRWARN_(x)  (((x) << CANMIE_ERRWARN_Pos) & CANMIE_ERRWARN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          ERRPASSIVE
  *  @access     CAN->CANMIE
  *  @brief      Node enter error passive status
  */
#define CANMIE_ERRPASSIVE_Pos  (2)
#define CANMIE_ERRPASSIVE_Msk  (0x1U << CANMIE_ERRPASSIVE_Pos)

#define CANMIE_ERRPASSIVE_DISABLE  ((0x0U) << CANMIE_ERRPASSIVE_Pos)
#define CANMIE_ERRPASSIVE_ENABLE   ((0x1U) << CANMIE_ERRPASSIVE_Pos)

#define CANMIE_ERRPASSIVE_(x)  (((x) << CANMIE_ERRPASSIVE_Pos) & CANMIE_ERRPASSIVE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          BUSOFF
  *  @access     CAN->CANMIE
  *  @brief      Node enter bus off status.
  */
#define CANMIE_BUSOFF_Pos  (3)
#define CANMIE_BUSOFF_Msk  (0x1U << CANMIE_BUSOFF_Pos)

#define CANMIE_BUSOFF_DISABLE  ((0x0U) << CANMIE_BUSOFF_Pos)
#define CANMIE_BUSOFF_ENABLE   ((0x1U) << CANMIE_BUSOFF_Pos)

#define CANMIE_BUSOFF_(x)  (((x) << CANMIE_BUSOFF_Pos) & CANMIE_BUSOFF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          FLTOK
  *  @access     CAN->CANMIE
  *  @brief      Receive message identifier filter OK.
  */
#define CANMIE_FLTOK_Pos  (4)
#define CANMIE_FLTOK_Msk  (0x1U << CANMIE_FLTOK_Pos)

#define CANMIE_FLTOK_DISABLE  ((0x0U) << CANMIE_FLTOK_Pos)
#define CANMIE_FLTOK_ENABLE   ((0x1U) << CANMIE_FLTOK_Pos)

#define CANMIE_FLTOK_(x)  (((x) << CANMIE_FLTOK_Pos) & CANMIE_FLTOK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          PXEVT
  *  @access     CAN->CANMIE
  *  @brief      Protocol exception event.
  */
#define CANMIE_PXEVT_Pos  (5)
#define CANMIE_PXEVT_Msk  (0x1U << CANMIE_PXEVT_Pos)

#define CANMIE_PXEVT_DISABLE  ((0x0U) << CANMIE_PXEVT_Pos)
#define CANMIE_PXEVT_ENABLE   ((0x1U) << CANMIE_PXEVT_Pos)

#define CANMIE_PXEVT_(x)  (((x) << CANMIE_PXEVT_Pos) & CANMIE_PXEVT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          MEMSBE
  *  @access     CAN->CANMIE
  *  @brief      Memory single bit error.
  */
#define CANMIE_MEMSBE_Pos  (6)
#define CANMIE_MEMSBE_Msk  (0x1U << CANMIE_MEMSBE_Pos)

#define CANMIE_MEMSBE_DISABLE  ((0x0U) << CANMIE_MEMSBE_Pos)
#define CANMIE_MEMSBE_ENABLE   ((0x1U) << CANMIE_MEMSBE_Pos)

#define CANMIE_MEMSBE_(x)  (((x) << CANMIE_MEMSBE_Pos) & CANMIE_MEMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          MEMMBE
  *  @access     CAN->CANMIE
  *  @brief      Memory multi bit error.
  */
#define CANMIE_MEMMBE_Pos  (7)
#define CANMIE_MEMMBE_Msk  (0x1U << CANMIE_MEMMBE_Pos)

#define CANMIE_MEMMBE_DISABLE  ((0x0U) << CANMIE_MEMMBE_Pos)
#define CANMIE_MEMMBE_ENABLE   ((0x1U) << CANMIE_MEMMBE_Pos)

#define CANMIE_MEMMBE_(x)  (((x) << CANMIE_MEMMBE_Pos) & CANMIE_MEMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          TSOV
  *  @access     CAN->CANMIE
  *  @brief      Timestamp counter overflow.
  */
#define CANMIE_TSOV_Pos  (8)
#define CANMIE_TSOV_Msk  (0x1U << CANMIE_TSOV_Pos)

#define CANMIE_TSOV_DISABLE  ((0x0U) << CANMIE_TSOV_Pos)
#define CANMIE_TSOV_ENABLE   ((0x1U) << CANMIE_TSOV_Pos)

#define CANMIE_TSOV_(x)  (((x) << CANMIE_TSOV_Pos) & CANMIE_TSOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIE          MSGLOST
  *  @access     CAN->CANMIE
  *  @brief      Message lost.
  */
#define CANMIE_MSGLOST_Pos  (9)
#define CANMIE_MSGLOST_Msk  (0x1U << CANMIE_MSGLOST_Pos)

#define CANMIE_MSGLOST_DISABLE  ((0x0U) << CANMIE_MSGLOST_Pos)
#define CANMIE_MSGLOST_ENABLE   ((0x1U) << CANMIE_MSGLOST_Pos)

#define CANMIE_MSGLOST_(x)  (((x) << CANMIE_MSGLOST_Pos) & CANMIE_MSGLOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       TRANERR
  *  @access     CAN->CANMRAWIF
  *  @brief      Message transfer error.
  */
#define CANMRAWIF_TRANERR_Pos  (0)
#define CANMRAWIF_TRANERR_Msk  (0x1U << CANMRAWIF_TRANERR_Pos)

#define CANMRAWIF_TRANERR_NOT_OCCURED  ((0x0U) << CANMRAWIF_TRANERR_Pos)
#define CANMRAWIF_TRANERR_OCCURRED     ((0x1U) << CANMRAWIF_TRANERR_Pos)

#define CANMRAWIF_TRANERR_(x)  (((x) << CANMRAWIF_TRANERR_Pos) & CANMRAWIF_TRANERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       ERRWARN
  *  @access     CAN->CANMRAWIF
  *  @brief      Node error warning.
  */
#define CANMRAWIF_ERRWARN_Pos  (1)
#define CANMRAWIF_ERRWARN_Msk  (0x1U << CANMRAWIF_ERRWARN_Pos)

#define CANMRAWIF_ERRWARN_NOT_OCCURED  ((0x0U) << CANMRAWIF_ERRWARN_Pos)
#define CANMRAWIF_ERRWARN_OCCURRED     ((0x1U) << CANMRAWIF_ERRWARN_Pos)

#define CANMRAWIF_ERRWARN_(x)  (((x) << CANMRAWIF_ERRWARN_Pos) & CANMRAWIF_ERRWARN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       ERRPASSIVE
  *  @access     CAN->CANMRAWIF
  *  @brief      Node enter error passive status
  */
#define CANMRAWIF_ERRPASSIVE_Pos  (2)
#define CANMRAWIF_ERRPASSIVE_Msk  (0x1U << CANMRAWIF_ERRPASSIVE_Pos)

#define CANMRAWIF_ERRPASSIVE_NOT_OCCURED  ((0x0U) << CANMRAWIF_ERRPASSIVE_Pos)
#define CANMRAWIF_ERRPASSIVE_OCCURRED     ((0x1U) << CANMRAWIF_ERRPASSIVE_Pos)

#define CANMRAWIF_ERRPASSIVE_(x)  (((x) << CANMRAWIF_ERRPASSIVE_Pos) & CANMRAWIF_ERRPASSIVE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       BUSOFF
  *  @access     CAN->CANMRAWIF
  *  @brief      Node enter bus off status.
  */
#define CANMRAWIF_BUSOFF_Pos  (3)
#define CANMRAWIF_BUSOFF_Msk  (0x1U << CANMRAWIF_BUSOFF_Pos)

#define CANMRAWIF_BUSOFF_NOT_OCCURED  ((0x0U) << CANMRAWIF_BUSOFF_Pos)
#define CANMRAWIF_BUSOFF_OCCURRED     ((0x1U) << CANMRAWIF_BUSOFF_Pos)

#define CANMRAWIF_BUSOFF_(x)  (((x) << CANMRAWIF_BUSOFF_Pos) & CANMRAWIF_BUSOFF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       FLTOK
  *  @access     CAN->CANMRAWIF
  *  @brief      Receive message identifier filter OK.
  */
#define CANMRAWIF_FLTOK_Pos  (4)
#define CANMRAWIF_FLTOK_Msk  (0x1U << CANMRAWIF_FLTOK_Pos)

#define CANMRAWIF_FLTOK_NOT_OCCURED  ((0x0U) << CANMRAWIF_FLTOK_Pos)
#define CANMRAWIF_FLTOK_OCCURRED     ((0x1U) << CANMRAWIF_FLTOK_Pos)

#define CANMRAWIF_FLTOK_(x)  (((x) << CANMRAWIF_FLTOK_Pos) & CANMRAWIF_FLTOK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       PXEVT
  *  @access     CAN->CANMRAWIF
  *  @brief      Protocol exception event.
  */
#define CANMRAWIF_PXEVT_Pos  (5)
#define CANMRAWIF_PXEVT_Msk  (0x1U << CANMRAWIF_PXEVT_Pos)

#define CANMRAWIF_PXEVT_NOT_OCCURED  ((0x0U) << CANMRAWIF_PXEVT_Pos)
#define CANMRAWIF_PXEVT_OCCURRED     ((0x1U) << CANMRAWIF_PXEVT_Pos)

#define CANMRAWIF_PXEVT_(x)  (((x) << CANMRAWIF_PXEVT_Pos) & CANMRAWIF_PXEVT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       MEMSBE
  *  @access     CAN->CANMRAWIF
  *  @brief      Memory single bit error.
  */
#define CANMRAWIF_MEMSBE_Pos  (6)
#define CANMRAWIF_MEMSBE_Msk  (0x1U << CANMRAWIF_MEMSBE_Pos)

#define CANMRAWIF_MEMSBE_NOT_OCCURED  ((0x0U) << CANMRAWIF_MEMSBE_Pos)
#define CANMRAWIF_MEMSBE_OCCURRED     ((0x1U) << CANMRAWIF_MEMSBE_Pos)

#define CANMRAWIF_MEMSBE_(x)  (((x) << CANMRAWIF_MEMSBE_Pos) & CANMRAWIF_MEMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       MEMMBE
  *  @access     CAN->CANMRAWIF
  *  @brief      Memory multi bit error.
  */
#define CANMRAWIF_MEMMBE_Pos  (7)
#define CANMRAWIF_MEMMBE_Msk  (0x1U << CANMRAWIF_MEMMBE_Pos)

#define CANMRAWIF_MEMMBE_NOT_OCCURED  ((0x0U) << CANMRAWIF_MEMMBE_Pos)
#define CANMRAWIF_MEMMBE_OCCURRED     ((0x1U) << CANMRAWIF_MEMMBE_Pos)

#define CANMRAWIF_MEMMBE_(x)  (((x) << CANMRAWIF_MEMMBE_Pos) & CANMRAWIF_MEMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       TSOV
  *  @access     CAN->CANMRAWIF
  *  @brief      Timestamp counter overflow.
  */
#define CANMRAWIF_TSOV_Pos  (8)
#define CANMRAWIF_TSOV_Msk  (0x1U << CANMRAWIF_TSOV_Pos)

#define CANMRAWIF_TSOV_NOT_OCCURED  ((0x0U) << CANMRAWIF_TSOV_Pos)
#define CANMRAWIF_TSOV_OCCURRED     ((0x1U) << CANMRAWIF_TSOV_Pos)

#define CANMRAWIF_TSOV_(x)  (((x) << CANMRAWIF_TSOV_Pos) & CANMRAWIF_TSOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMRAWIF       MSGLOST
  *  @access     CAN->CANMRAWIF
  *  @brief      Message lost.
  */
#define CANMRAWIF_MSGLOST_Pos  (9)
#define CANMRAWIF_MSGLOST_Msk  (0x1U << CANMRAWIF_MSGLOST_Pos)

#define CANMRAWIF_MSGLOST_NOT_OCCURED  ((0x0U) << CANMRAWIF_MSGLOST_Pos)
#define CANMRAWIF_MSGLOST_OCCURRED     ((0x1U) << CANMRAWIF_MSGLOST_Pos)

#define CANMRAWIF_MSGLOST_(x)  (((x) << CANMRAWIF_MSGLOST_Pos) & CANMRAWIF_MSGLOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          TRANERR
  *  @access     CAN->CANMIF
  *  @brief      Message transfer error.
  */
#define CANMIF_TRANERR_Pos  (0)
#define CANMIF_TRANERR_Msk  (0x1U << CANMIF_TRANERR_Pos)

#define CANMIF_TRANERR_NOT_OCCURED  ((0x0U) << CANMIF_TRANERR_Pos)
#define CANMIF_TRANERR_OCCURRED     ((0x1U) << CANMIF_TRANERR_Pos)

#define CANMIF_TRANERR_(x)  (((x) << CANMIF_TRANERR_Pos) & CANMIF_TRANERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          ERRWARN
  *  @access     CAN->CANMIF
  *  @brief      Node error warning.
  */
#define CANMIF_ERRWARN_Pos  (1)
#define CANMIF_ERRWARN_Msk  (0x1U << CANMIF_ERRWARN_Pos)

#define CANMIF_ERRWARN_NOT_OCCURED  ((0x0U) << CANMIF_ERRWARN_Pos)
#define CANMIF_ERRWARN_OCCURRED     ((0x1U) << CANMIF_ERRWARN_Pos)

#define CANMIF_ERRWARN_(x)  (((x) << CANMIF_ERRWARN_Pos) & CANMIF_ERRWARN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          ERRPASSIVE
  *  @access     CAN->CANMIF
  *  @brief      Node enter error passive status
  */
#define CANMIF_ERRPASSIVE_Pos  (2)
#define CANMIF_ERRPASSIVE_Msk  (0x1U << CANMIF_ERRPASSIVE_Pos)

#define CANMIF_ERRPASSIVE_NOT_OCCURED  ((0x0U) << CANMIF_ERRPASSIVE_Pos)
#define CANMIF_ERRPASSIVE_OCCURRED     ((0x1U) << CANMIF_ERRPASSIVE_Pos)

#define CANMIF_ERRPASSIVE_(x)  (((x) << CANMIF_ERRPASSIVE_Pos) & CANMIF_ERRPASSIVE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          BUSOFF
  *  @access     CAN->CANMIF
  *  @brief      Node enter bus off status.
  */
#define CANMIF_BUSOFF_Pos  (3)
#define CANMIF_BUSOFF_Msk  (0x1U << CANMIF_BUSOFF_Pos)

#define CANMIF_BUSOFF_NOT_OCCURED  ((0x0U) << CANMIF_BUSOFF_Pos)
#define CANMIF_BUSOFF_OCCURRED     ((0x1U) << CANMIF_BUSOFF_Pos)

#define CANMIF_BUSOFF_(x)  (((x) << CANMIF_BUSOFF_Pos) & CANMIF_BUSOFF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          FLTOK
  *  @access     CAN->CANMIF
  *  @brief      Receive message identifier filter OK.
  */
#define CANMIF_FLTOK_Pos  (4)
#define CANMIF_FLTOK_Msk  (0x1U << CANMIF_FLTOK_Pos)

#define CANMIF_FLTOK_NOT_OCCURED  ((0x0U) << CANMIF_FLTOK_Pos)
#define CANMIF_FLTOK_OCCURRED     ((0x1U) << CANMIF_FLTOK_Pos)

#define CANMIF_FLTOK_(x)  (((x) << CANMIF_FLTOK_Pos) & CANMIF_FLTOK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          PXEVT
  *  @access     CAN->CANMIF
  *  @brief      Protocol exception event.
  */
#define CANMIF_PXEVT_Pos  (5)
#define CANMIF_PXEVT_Msk  (0x1U << CANMIF_PXEVT_Pos)

#define CANMIF_PXEVT_NOT_OCCURED  ((0x0U) << CANMIF_PXEVT_Pos)
#define CANMIF_PXEVT_OCCURRED     ((0x1U) << CANMIF_PXEVT_Pos)

#define CANMIF_PXEVT_(x)  (((x) << CANMIF_PXEVT_Pos) & CANMIF_PXEVT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          MEMSBE
  *  @access     CAN->CANMIF
  *  @brief      Memory single bit error.
  */
#define CANMIF_MEMSBE_Pos  (6)
#define CANMIF_MEMSBE_Msk  (0x1U << CANMIF_MEMSBE_Pos)

#define CANMIF_MEMSBE_NOT_OCCURED  ((0x0U) << CANMIF_MEMSBE_Pos)
#define CANMIF_MEMSBE_OCCURRED     ((0x1U) << CANMIF_MEMSBE_Pos)

#define CANMIF_MEMSBE_(x)  (((x) << CANMIF_MEMSBE_Pos) & CANMIF_MEMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          MEMMBE
  *  @access     CAN->CANMIF
  *  @brief      Memory multi bit error.
  */
#define CANMIF_MEMMBE_Pos  (7)
#define CANMIF_MEMMBE_Msk  (0x1U << CANMIF_MEMMBE_Pos)

#define CANMIF_MEMMBE_NOT_OCCURED  ((0x0U) << CANMIF_MEMMBE_Pos)
#define CANMIF_MEMMBE_OCCURRED     ((0x1U) << CANMIF_MEMMBE_Pos)

#define CANMIF_MEMMBE_(x)  (((x) << CANMIF_MEMMBE_Pos) & CANMIF_MEMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          TSOV
  *  @access     CAN->CANMIF
  *  @brief      Timestamp counter overflow.
  */
#define CANMIF_TSOV_Pos  (8)
#define CANMIF_TSOV_Msk  (0x1U << CANMIF_TSOV_Pos)

#define CANMIF_TSOV_NOT_OCCURED  ((0x0U) << CANMIF_TSOV_Pos)
#define CANMIF_TSOV_OCCURRED     ((0x1U) << CANMIF_TSOV_Pos)

#define CANMIF_TSOV_(x)  (((x) << CANMIF_TSOV_Pos) & CANMIF_TSOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          MSGLOST
  *  @access     CAN->CANMIF
  *  @brief      Message lost.
  */
#define CANMIF_MSGLOST_Pos  (9)
#define CANMIF_MSGLOST_Msk  (0x1U << CANMIF_MSGLOST_Pos)

#define CANMIF_MSGLOST_NOT_OCCURED  ((0x0U) << CANMIF_MSGLOST_Pos)
#define CANMIF_MSGLOST_OCCURRED     ((0x1U) << CANMIF_MSGLOST_Pos)

#define CANMIF_MSGLOST_(x)  (((x) << CANMIF_MSGLOST_Pos) & CANMIF_MSGLOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIF          INT
  *  @access     CAN->CANMIF
  *  @brief      Global interrupt
  */
#define CANMIF_INT_Pos  (31)
#define CANMIF_INT_Msk  (0x1U << CANMIF_INT_Pos)

#define CANMIF_INT_NOT_OCCURED  ((0x0U) << CANMIF_INT_Pos)
#define CANMIF_INT_OCCURRED     ((0x1U) << CANMIF_INT_Pos)

#define CANMIF_INT_(x)  (((x) << CANMIF_INT_Pos) & CANMIF_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          TRANERR
  *  @access     CAN->CANMIC
  *  @brief      Message transfer error.
  */
#define CANMIC_TRANERR_Pos  (0)
#define CANMIC_TRANERR_Msk  (0x1U << CANMIC_TRANERR_Pos)

#define CANMIC_TRANERR_NO_EFFECT  ((0x0U) << CANMIC_TRANERR_Pos)
#define CANMIC_TRANERR_CLEAR      ((0x1U) << CANMIC_TRANERR_Pos)

#define CANMIC_TRANERR_(x)  (((x) << CANMIC_TRANERR_Pos) & CANMIC_TRANERR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          ERRWARN
  *  @access     CAN->CANMIC
  *  @brief      Node error warning.
  */
#define CANMIC_ERRWARN_Pos  (1)
#define CANMIC_ERRWARN_Msk  (0x1U << CANMIC_ERRWARN_Pos)

#define CANMIC_ERRWARN_NO_EFFECT  ((0x0U) << CANMIC_ERRWARN_Pos)
#define CANMIC_ERRWARN_CLEAR      ((0x1U) << CANMIC_ERRWARN_Pos)

#define CANMIC_ERRWARN_(x)  (((x) << CANMIC_ERRWARN_Pos) & CANMIC_ERRWARN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          ERRPASSIVE
  *  @access     CAN->CANMIC
  *  @brief      Node enter error passive status
  */
#define CANMIC_ERRPASSIVE_Pos  (2)
#define CANMIC_ERRPASSIVE_Msk  (0x1U << CANMIC_ERRPASSIVE_Pos)

#define CANMIC_ERRPASSIVE_NO_EFFECT  ((0x0U) << CANMIC_ERRPASSIVE_Pos)
#define CANMIC_ERRPASSIVE_CLEAR      ((0x1U) << CANMIC_ERRPASSIVE_Pos)

#define CANMIC_ERRPASSIVE_(x)  (((x) << CANMIC_ERRPASSIVE_Pos) & CANMIC_ERRPASSIVE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          BUSOFF
  *  @access     CAN->CANMIC
  *  @brief      Node enter bus off status.
  */
#define CANMIC_BUSOFF_Pos  (3)
#define CANMIC_BUSOFF_Msk  (0x1U << CANMIC_BUSOFF_Pos)

#define CANMIC_BUSOFF_NO_EFFECT  ((0x0U) << CANMIC_BUSOFF_Pos)
#define CANMIC_BUSOFF_CLEAR      ((0x1U) << CANMIC_BUSOFF_Pos)

#define CANMIC_BUSOFF_(x)  (((x) << CANMIC_BUSOFF_Pos) & CANMIC_BUSOFF_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          FLTOK
  *  @access     CAN->CANMIC
  *  @brief      Receive message identifier filter OK.
  */
#define CANMIC_FLTOK_Pos  (4)
#define CANMIC_FLTOK_Msk  (0x1U << CANMIC_FLTOK_Pos)

#define CANMIC_FLTOK_NO_EFFECT  ((0x0U) << CANMIC_FLTOK_Pos)
#define CANMIC_FLTOK_CLEAR      ((0x1U) << CANMIC_FLTOK_Pos)

#define CANMIC_FLTOK_(x)  (((x) << CANMIC_FLTOK_Pos) & CANMIC_FLTOK_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          PXEVT
  *  @access     CAN->CANMIC
  *  @brief      Protocol exception event.
  */
#define CANMIC_PXEVT_Pos  (5)
#define CANMIC_PXEVT_Msk  (0x1U << CANMIC_PXEVT_Pos)

#define CANMIC_PXEVT_NO_EFFECT  ((0x0U) << CANMIC_PXEVT_Pos)
#define CANMIC_PXEVT_CLEAR      ((0x1U) << CANMIC_PXEVT_Pos)

#define CANMIC_PXEVT_(x)  (((x) << CANMIC_PXEVT_Pos) & CANMIC_PXEVT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          MEMSBE
  *  @access     CAN->CANMIC
  *  @brief      Memory single bit error.
  */
#define CANMIC_MEMSBE_Pos  (6)
#define CANMIC_MEMSBE_Msk  (0x1U << CANMIC_MEMSBE_Pos)

#define CANMIC_MEMSBE_NO_EFFECT  ((0x0U) << CANMIC_MEMSBE_Pos)
#define CANMIC_MEMSBE_CLEAR      ((0x1U) << CANMIC_MEMSBE_Pos)

#define CANMIC_MEMSBE_(x)  (((x) << CANMIC_MEMSBE_Pos) & CANMIC_MEMSBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          MEMMBE
  *  @access     CAN->CANMIC
  *  @brief      Memory multi bit error.
  */
#define CANMIC_MEMMBE_Pos  (7)
#define CANMIC_MEMMBE_Msk  (0x1U << CANMIC_MEMMBE_Pos)

#define CANMIC_MEMMBE_NO_EFFECT  ((0x0U) << CANMIC_MEMMBE_Pos)
#define CANMIC_MEMMBE_CLEAR      ((0x1U) << CANMIC_MEMMBE_Pos)

#define CANMIC_MEMMBE_(x)  (((x) << CANMIC_MEMMBE_Pos) & CANMIC_MEMMBE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          TSOV
  *  @access     CAN->CANMIC
  *  @brief      Timestamp counter overflow.
  */
#define CANMIC_TSOV_Pos  (8)
#define CANMIC_TSOV_Msk  (0x1U << CANMIC_TSOV_Pos)

#define CANMIC_TSOV_NO_EFFECT  ((0x0U) << CANMIC_TSOV_Pos)
#define CANMIC_TSOV_CLEAR      ((0x1U) << CANMIC_TSOV_Pos)

#define CANMIC_TSOV_(x)  (((x) << CANMIC_TSOV_Pos) & CANMIC_TSOV_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          MSGLOST
  *  @access     CAN->CANMIC
  *  @brief      Message lost.
  */
#define CANMIC_MSGLOST_Pos  (9)
#define CANMIC_MSGLOST_Msk  (0x1U << CANMIC_MSGLOST_Pos)

#define CANMIC_MSGLOST_NO_EFFECT  ((0x0U) << CANMIC_MSGLOST_Pos)
#define CANMIC_MSGLOST_CLEAR      ((0x1U) << CANMIC_MSGLOST_Pos)

#define CANMIC_MSGLOST_(x)  (((x) << CANMIC_MSGLOST_Pos) & CANMIC_MSGLOST_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMIC          INT
  *  @access     CAN->CANMIC
  *  @brief      Global interrupt
  */
#define CANMIC_INT_Pos  (31)
#define CANMIC_INT_Msk  (0x1U << CANMIC_INT_Pos)

#define CANMIC_INT_NO_EFFECT  ((0x0U) << CANMIC_INT_Pos)
#define CANMIC_INT_CLEAR      ((0x1U) << CANMIC_INT_Pos)

#define CANMIC_INT_(x)  (((x) << CANMIC_INT_Pos) & CANMIC_INT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP0
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 0.
  */
#define CANTGIF_GRP0_Pos  (0)
#define CANTGIF_GRP0_Msk  (0x1U << CANTGIF_GRP0_Pos)

#define CANTGIF_GRP0_NOT_OCCURED  ((0x0U) << CANTGIF_GRP0_Pos)
#define CANTGIF_GRP0_OCCURRED     ((0x1U) << CANTGIF_GRP0_Pos)

#define CANTGIF_GRP0_(x)  (((x) << CANTGIF_GRP0_Pos) & CANTGIF_GRP0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP1
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 1.
  */
#define CANTGIF_GRP1_Pos  (1)
#define CANTGIF_GRP1_Msk  (0x1U << CANTGIF_GRP1_Pos)

#define CANTGIF_GRP1_NOT_OCCURED  ((0x0U) << CANTGIF_GRP1_Pos)
#define CANTGIF_GRP1_OCCURRED     ((0x1U) << CANTGIF_GRP1_Pos)

#define CANTGIF_GRP1_(x)  (((x) << CANTGIF_GRP1_Pos) & CANTGIF_GRP1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP2
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 2.
  */
#define CANTGIF_GRP2_Pos  (2)
#define CANTGIF_GRP2_Msk  (0x1U << CANTGIF_GRP2_Pos)

#define CANTGIF_GRP2_NOT_OCCURED  ((0x0U) << CANTGIF_GRP2_Pos)
#define CANTGIF_GRP2_OCCURRED     ((0x1U) << CANTGIF_GRP2_Pos)

#define CANTGIF_GRP2_(x)  (((x) << CANTGIF_GRP2_Pos) & CANTGIF_GRP2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP3
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 3.
  */
#define CANTGIF_GRP3_Pos  (3)
#define CANTGIF_GRP3_Msk  (0x1U << CANTGIF_GRP3_Pos)

#define CANTGIF_GRP3_NOT_OCCURED  ((0x0U) << CANTGIF_GRP3_Pos)
#define CANTGIF_GRP3_OCCURRED     ((0x1U) << CANTGIF_GRP3_Pos)

#define CANTGIF_GRP3_(x)  (((x) << CANTGIF_GRP3_Pos) & CANTGIF_GRP3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP4
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 4.
  */
#define CANTGIF_GRP4_Pos  (4)
#define CANTGIF_GRP4_Msk  (0x1U << CANTGIF_GRP4_Pos)

#define CANTGIF_GRP4_NOT_OCCURED  ((0x0U) << CANTGIF_GRP4_Pos)
#define CANTGIF_GRP4_OCCURRED     ((0x1U) << CANTGIF_GRP4_Pos)

#define CANTGIF_GRP4_(x)  (((x) << CANTGIF_GRP4_Pos) & CANTGIF_GRP4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP5
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 5.
  */
#define CANTGIF_GRP5_Pos  (5)
#define CANTGIF_GRP5_Msk  (0x1U << CANTGIF_GRP5_Pos)

#define CANTGIF_GRP5_NOT_OCCURED  ((0x0U) << CANTGIF_GRP5_Pos)
#define CANTGIF_GRP5_OCCURRED     ((0x1U) << CANTGIF_GRP5_Pos)

#define CANTGIF_GRP5_(x)  (((x) << CANTGIF_GRP5_Pos) & CANTGIF_GRP5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP6
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 6.
  */
#define CANTGIF_GRP6_Pos  (6)
#define CANTGIF_GRP6_Msk  (0x1U << CANTGIF_GRP6_Pos)

#define CANTGIF_GRP6_NOT_OCCURED  ((0x0U) << CANTGIF_GRP6_Pos)
#define CANTGIF_GRP6_OCCURRED     ((0x1U) << CANTGIF_GRP6_Pos)

#define CANTGIF_GRP6_(x)  (((x) << CANTGIF_GRP6_Pos) & CANTGIF_GRP6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIF         GRP7
  *  @access     CAN->CANTGIF
  *  @brief      Transfer group 7.
  */
#define CANTGIF_GRP7_Pos  (7)
#define CANTGIF_GRP7_Msk  (0x1U << CANTGIF_GRP7_Pos)

#define CANTGIF_GRP7_NOT_OCCURED  ((0x0U) << CANTGIF_GRP7_Pos)
#define CANTGIF_GRP7_OCCURRED     ((0x1U) << CANTGIF_GRP7_Pos)

#define CANTGIF_GRP7_(x)  (((x) << CANTGIF_GRP7_Pos) & CANTGIF_GRP7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP0
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 0.
  */
#define CANTGIC_GRP0_Pos  (0)
#define CANTGIC_GRP0_Msk  (0x1U << CANTGIC_GRP0_Pos)

#define CANTGIC_GRP0_NO_EFFECT  ((0x0U) << CANTGIC_GRP0_Pos)
#define CANTGIC_GRP0_CLEAR      ((0x1U) << CANTGIC_GRP0_Pos)

#define CANTGIC_GRP0_(x)  (((x) << CANTGIC_GRP0_Pos) & CANTGIC_GRP0_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP1
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 1.
  */
#define CANTGIC_GRP1_Pos  (1)
#define CANTGIC_GRP1_Msk  (0x1U << CANTGIC_GRP1_Pos)

#define CANTGIC_GRP1_NO_EFFECT  ((0x0U) << CANTGIC_GRP1_Pos)
#define CANTGIC_GRP1_CLEAR      ((0x1U) << CANTGIC_GRP1_Pos)

#define CANTGIC_GRP1_(x)  (((x) << CANTGIC_GRP1_Pos) & CANTGIC_GRP1_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP2
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 2.
  */
#define CANTGIC_GRP2_Pos  (2)
#define CANTGIC_GRP2_Msk  (0x1U << CANTGIC_GRP2_Pos)

#define CANTGIC_GRP2_NO_EFFECT  ((0x0U) << CANTGIC_GRP2_Pos)
#define CANTGIC_GRP2_CLEAR      ((0x1U) << CANTGIC_GRP2_Pos)

#define CANTGIC_GRP2_(x)  (((x) << CANTGIC_GRP2_Pos) & CANTGIC_GRP2_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP3
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 3.
  */
#define CANTGIC_GRP3_Pos  (3)
#define CANTGIC_GRP3_Msk  (0x1U << CANTGIC_GRP3_Pos)

#define CANTGIC_GRP3_NO_EFFECT  ((0x0U) << CANTGIC_GRP3_Pos)
#define CANTGIC_GRP3_CLEAR      ((0x1U) << CANTGIC_GRP3_Pos)

#define CANTGIC_GRP3_(x)  (((x) << CANTGIC_GRP3_Pos) & CANTGIC_GRP3_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP4
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 4.
  */
#define CANTGIC_GRP4_Pos  (4)
#define CANTGIC_GRP4_Msk  (0x1U << CANTGIC_GRP4_Pos)

#define CANTGIC_GRP4_NO_EFFECT  ((0x0U) << CANTGIC_GRP4_Pos)
#define CANTGIC_GRP4_CLEAR      ((0x1U) << CANTGIC_GRP4_Pos)

#define CANTGIC_GRP4_(x)  (((x) << CANTGIC_GRP4_Pos) & CANTGIC_GRP4_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP5
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 5.
  */
#define CANTGIC_GRP5_Pos  (5)
#define CANTGIC_GRP5_Msk  (0x1U << CANTGIC_GRP5_Pos)

#define CANTGIC_GRP5_NO_EFFECT  ((0x0U) << CANTGIC_GRP5_Pos)
#define CANTGIC_GRP5_CLEAR      ((0x1U) << CANTGIC_GRP5_Pos)

#define CANTGIC_GRP5_(x)  (((x) << CANTGIC_GRP5_Pos) & CANTGIC_GRP5_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP6
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 6.
  */
#define CANTGIC_GRP6_Pos  (6)
#define CANTGIC_GRP6_Msk  (0x1U << CANTGIC_GRP6_Pos)

#define CANTGIC_GRP6_NO_EFFECT  ((0x0U) << CANTGIC_GRP6_Pos)
#define CANTGIC_GRP6_CLEAR      ((0x1U) << CANTGIC_GRP6_Pos)

#define CANTGIC_GRP6_(x)  (((x) << CANTGIC_GRP6_Pos) & CANTGIC_GRP6_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTGIC         GRP7
  *  @access     CAN->CANTGIC
  *  @brief      Transfer group 7.
  */
#define CANTGIC_GRP7_Pos  (7)
#define CANTGIC_GRP7_Msk  (0x1U << CANTGIC_GRP7_Pos)

#define CANTGIC_GRP7_NO_EFFECT  ((0x0U) << CANTGIC_GRP7_Pos)
#define CANTGIC_GRP7_CLEAR      ((0x1U) << CANTGIC_GRP7_Pos)

#define CANTGIC_GRP7_(x)  (((x) << CANTGIC_GRP7_Pos) & CANTGIC_GRP7_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMEMERRADDR   ADDR
  *  @access     CAN->CANMEMERRADDR
  *  @brief      
  */
#define CANMEMERRADDR_ADDR_Pos  (0)
#define CANMEMERRADDR_ADDR_Msk  (0xFFFFFFFFU << CANMEMERRADDR_ADDR_Pos)


#define CANMEMERRADDR_ADDR_(x)  (((x) << CANMEMERRADDR_ADDR_Pos) & CANMEMERRADDR_ADDR_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTEST         LOOP
  *  @access     CAN->CANTEST
  *  @brief      Enable loop back mode.
  *              Disable CANCTL.TSTMODE will reset this field.
  */
#define CANTEST_LOOP_Pos  (0)
#define CANTEST_LOOP_Msk  (0x1U << CANTEST_LOOP_Pos)

#define CANTEST_LOOP_DISABLE  ((0x0U) << CANTEST_LOOP_Pos)
#define CANTEST_LOOP_ENABLE   ((0x1U) << CANTEST_LOOP_Pos)

#define CANTEST_LOOP_(x)  (((x) << CANTEST_LOOP_Pos) & CANTEST_LOOP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTEST         ELOOP
  *  @access     CAN->CANTEST
  *  @brief      Enable external loop back mode.
  *              Disable CANCTL.TSTMODE will reset this field.
  */
#define CANTEST_ELOOP_Pos  (1)
#define CANTEST_ELOOP_Msk  (0x1U << CANTEST_ELOOP_Pos)

#define CANTEST_ELOOP_DISABLE  ((0x0U) << CANTEST_ELOOP_Pos)
#define CANTEST_ELOOP_ENABLE   ((0x1U) << CANTEST_ELOOP_Pos)

#define CANTEST_ELOOP_(x)  (((x) << CANTEST_ELOOP_Pos) & CANTEST_ELOOP_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTEST         TXMODE
  *  @access     CAN->CANTEST
  *  @brief      Control of TXD Pin.
  *              Disable CANCTL.TSTMODE will reset this field.
  */
#define CANTEST_TXMODE_Pos  (2)
#define CANTEST_TXMODE_Msk  (0x3U << CANTEST_TXMODE_Pos)

#define CANTEST_TXMODE_NORMAL     ((0x00U) << CANTEST_TXMODE_Pos)
#define CANTEST_TXMODE_SEND_SP    ((0x01U) << CANTEST_TXMODE_Pos)
#define CANTEST_TXMODE_SEND_LOW   ((0x02U) << CANTEST_TXMODE_Pos)
#define CANTEST_TXMODE_SEND_HIGH  ((0x03U) << CANTEST_TXMODE_Pos)

#define CANTEST_TXMODE_(x)  (((x) << CANTEST_TXMODE_Pos) & CANTEST_TXMODE_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTEST         TXD
  *  @access     CAN->CANTEST
  *  @brief      Monitors the actual value of the TXD pin.
  */
#define CANTEST_TXD_Pos  (4)
#define CANTEST_TXD_Msk  (0x1U << CANTEST_TXD_Pos)

#define CANTEST_TXD_LOW   ((0x0U) << CANTEST_TXD_Pos)
#define CANTEST_TXD_HIGH  ((0x1U) << CANTEST_TXD_Pos)

#define CANTEST_TXD_(x)  (((x) << CANTEST_TXD_Pos) & CANTEST_TXD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTEST         RXD
  *  @access     CAN->CANTEST
  *  @brief      Monitors the actual value of the RXD pin.
  */
#define CANTEST_RXD_Pos  (5)
#define CANTEST_RXD_Msk  (0x1U << CANTEST_RXD_Pos)

#define CANTEST_RXD_LOW   ((0x0U) << CANTEST_RXD_Pos)
#define CANTEST_RXD_HIGH  ((0x1U) << CANTEST_RXD_Pos)

#define CANTEST_RXD_(x)  (((x) << CANTEST_RXD_Pos) & CANTEST_RXD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANECCTL        RECLD
  *  @access     CAN->CANECCTL
  *  @brief      REC load value after successfully reception one frame and REC is grater than
  *              127.
  */
#define CANECCTL_RECLD_Pos  (0)
#define CANECCTL_RECLD_Msk  (0x7FU << CANECCTL_RECLD_Pos)

#define CANECCTL_RECLD_(x)  (((x) << CANECCTL_RECLD_Pos) & CANECCTL_RECLD_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANECCTL        ERRWARN
  *  @access     CAN->CANECCTL
  *  @brief      Error warning limit value.
  */
#define CANECCTL_ERRWARN_Pos  (7)
#define CANECCTL_ERRWARN_Msk  (0x7FU << CANECCTL_ERRWARN_Pos)

#define CANECCTL_ERRWARN_(x)  (((x) << CANECCTL_ERRWARN_Pos) & CANECCTL_ERRWARN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTXREQ        VAL
  *  @access     CAN->CANTXREQ
  *  @brief      Transmission request bits (for all message objects)
  *              0 No transmission has been requested for this message object.
  *              1 The transmission of this message object is requested and is not yet done.
  *              Note: Bit 0 is for MBOX0, Bit 1 is for MBOX1, ..., Bit 63 for MBOX63.
  */
#define CANTXREQ_VAL_Pos  (0)
#define CANTXREQ_VAL_Msk  (0xFFFFFFFFU << CANTXREQ_VAL_Pos)


#define CANTXREQ_VAL_(x)  (((x) << CANTXREQ_VAL_Pos) & CANTXREQ_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMSGNEW       VAL
  *  @access     CAN->CANMSGNEW
  *  @brief      New message bits (for all message objects)
  *              0 No new data has been written into the data portion of this message object by
  *              the message handler since the last time when this flag was cleared by the CPU.
  *              1 The message handler or the CPU has written new data into the data portion of
  *              this message object.
  *              Note: Bit 0 is for MBOX0, Bit 1 is for MBOX1, ..., Bit 63 for MBOX63.
  */
#define CANMSGNEW_VAL_Pos  (0)
#define CANMSGNEW_VAL_Msk  (0xFFFFFFFFU << CANMSGNEW_VAL_Pos)


#define CANMSGNEW_VAL_(x)  (((x) << CANMSGNEW_VAL_Pos) & CANMSGNEW_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMSGIF        VAL
  *  @access     CAN->CANMSGIF
  *  @brief      Interrupt pending bits (for all message objects)
  *              0 This mailbox is not the source of transfer OK interrupt.
  *              1 This mailbox is the source of transfer OK interrupt.
  *              Note: Bit 0 is for MBOX0, Bit 1 is for MBOX1, ..., Bit 63 for MBOX63.
  */
#define CANMSGIF_VAL_Pos  (0)
#define CANMSGIF_VAL_Msk  (0xFFFFFFFFU << CANMSGIF_VAL_Pos)


#define CANMSGIF_VAL_(x)  (((x) << CANMSGIF_VAL_Pos) & CANMSGIF_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANMBEN         VAL
  *  @access     CAN->CANMBEN
  *  @brief      Mailbox enable bits (for all message objects)
  *              0 This message object is ignored by the message handler.
  *              1 This message object is configured and will be considered by the message
  *              handler.
  *              Note: Bit 0 is for MBOX0, Bit 1 is for MBOX1, ..., Bit 63 for MBOX63.
  */
#define CANMBEN_VAL_Pos  (0)
#define CANMBEN_VAL_Msk  (0xFFFFFFFFU << CANMBEN_VAL_Pos)


#define CANMBEN_VAL_(x)  (((x) << CANMBEN_VAL_Pos) & CANMBEN_VAL_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTSCTL        TSEN
  *  @access     CAN->CANTSCTL
  *  @brief      Timestamp enable
  */
#define CANTSCTL_TSEN_Pos  (0)
#define CANTSCTL_TSEN_Msk  (0x1U << CANTSCTL_TSEN_Pos)

#define CANTSCTL_TSEN_DISABLE  ((0x0U) << CANTSCTL_TSEN_Pos)
#define CANTSCTL_TSEN_ENABLE   ((0x1U) << CANTSCTL_TSEN_Pos)

#define CANTSCTL_TSEN_(x)  (((x) << CANTSCTL_TSEN_Pos) & CANTSCTL_TSEN_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANTSCNT        TSCNT
  *  @access     CAN->CANTSCNT
  *  @brief      Timestamp up-counter value.
  *              Note: write will set this field.
  *              Note: Count based on sample point.
  */
#define CANTSCNT_TSCNT_Pos  (0)
#define CANTSCNT_TSCNT_Msk  (0xFFFFFFFFU << CANTSCNT_TSCNT_Pos)

#define CANTSCNT_TSCNT_(x)  (((x) << CANTSCNT_TSCNT_Pos) & CANTSCNT_TSCNT_Msk)


/**
  *  @hierarchy  Module          Register        Bitfield
  *              CAN             CANREGKEY       KEY
  *  @access     CAN->CANREGKEY
  *  @brief      Write 0x1ACCE551 to unlock protected registers.
  */
#define CANREGKEY_KEY_Pos  (0)
#define CANREGKEY_KEY_Msk  (0xFFFFFFFFU << CANREGKEY_KEY_Pos)

#define CANREGKEY_KEY_(x)  (((x) << CANREGKEY_KEY_Pos) & CANREGKEY_KEY_Msk)


/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* extern "C" */

#endif /* SPC1169_BITFIELD_H */


/******************* Copyright (C) 2022 Spintrol Electronic Technology (Shanghai) Co., Ltd. ***** END OF FILE ****/

